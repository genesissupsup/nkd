//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(NKD.Module.BusinessObjects.NKDC),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4883747ec4039cd0e8753cfa8567d5d2b6e590aaeafb1ce386dc31ed64e5ad1e))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets4883747ec4039cd0e8753cfa8567d5d2b6e590aaeafb1ce386dc31ed64e5ad1e : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "4883747ec4039cd0e8753cfa8567d5d2b6e590aaeafb1ce386dc31ed64e5ad1e"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_Applications")
            {
                return GetView0();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_Membership")
            {
                return GetView1();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_Paths")
            {
                return GetView2();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationAllUsers")
            {
                return GetView3();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationPerUser")
            {
                return GetView4();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_Profile")
            {
                return GetView5();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_Roles")
            {
                return GetView6();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_Users")
            {
                return GetView7();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Credit")
            {
                return GetView8();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Currency")
            {
                return GetView9();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryTax")
            {
                return GetView10();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Invoice")
            {
                return GetView11();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_InvoiceLine")
            {
                return GetView12();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Journal")
            {
                return GetView13();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Payment")
            {
                return GetView14();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_PurchaseOrder")
            {
                return GetView15();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Supply")
            {
                return GetView16();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_SupplyItem")
            {
                return GetView17();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_SupplyItemTax")
            {
                return GetView18();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_Account")
            {
                return GetView19();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_AccountDiscount")
            {
                return GetView20();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_Asset")
            {
                return GetView21();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_AssetAlias")
            {
                return GetView22();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_AssetMaintenance")
            {
                return GetView23();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_AssetWarranty")
            {
                return GetView24();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_CompanyAccount")
            {
                return GetView25();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ContractAsset")
            {
                return GetView26();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdvice")
            {
                return GetView27();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdviceItem")
            {
                return GetView28();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDecontaminationStatus")
            {
                return GetView29();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeliveryAdviceReason")
            {
                return GetView30();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeviceType")
            {
                return GetView31();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryEventType")
            {
                return GetView32();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPart")
            {
                return GetView33();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartCategory")
            {
                return GetView34();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKit")
            {
                return GetView35();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKitItem")
            {
                return GetView36();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryProcedure")
            {
                return GetView37();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryWarrantyType")
            {
                return GetView38();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelPart")
            {
                return GetView39();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelPartKit")
            {
                return GetView40();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedure")
            {
                return GetView41();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTask")
            {
                return GetView42();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTaskPart")
            {
                return GetView43();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelScheduleCycle")
            {
                return GetView44();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ModelWarranty")
            {
                return GetView45();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskModel")
            {
                return GetView46();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskPart")
            {
                return GetView47();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_Recall")
            {
                return GetView48();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_RecallModel")
            {
                return GetView49();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_RecallModelAsset")
            {
                return GetView50();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_SupplierModel")
            {
                return GetView51();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_SupplierPart")
            {
                return GetView52();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_Warehouse")
            {
                return GetView53();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModel")
            {
                return GetView54();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModelSupplier")
            {
                return GetView55();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_WarehousePart")
            {
                return GetView56();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_WarehousePartSupplier")
            {
                return GetView57();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_WorkflowSchedule")
            {
                return GetView58();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Address")
            {
                return GetView59();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroup")
            {
                return GetView60();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupStandardTestResult")
            {
                return GetView61();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTest")
            {
                return GetView62();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResult")
            {
                return GetView63();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultComment")
            {
                return GetView64();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultDuplicate")
            {
                return GetView65();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_BlockModel")
            {
                return GetView66();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlock")
            {
                return GetView67();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlockData")
            {
                return GetView68();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_BlockModelMetadata")
            {
                return GetView69();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Casing")
            {
                return GetView70();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Cementing")
            {
                return GetView71();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Company")
            {
                return GetView72();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_CompanyAddress")
            {
                return GetView73();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_CompanyRelation")
            {
                return GetView74();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Compliance")
            {
                return GetView75();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ComplianceTask")
            {
                return GetView76();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ComplianceWorkType")
            {
                return GetView77();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Contact")
            {
                return GetView78();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ContactAddress")
            {
                return GetView79();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Contract")
            {
                return GetView80();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ContractCondition")
            {
                return GetView81();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ContractConditionModel")
            {
                return GetView82();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ContractConditionPart")
            {
                return GetView83();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_CostEstimateModel")
            {
                return GetView84();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Defect")
            {
                return GetView85();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Desurvey")
            {
                return GetView86();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAdjective")
            {
                return GetView87();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlteration")
            {
                return GetView88();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayMethod")
            {
                return GetView89();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayStandard")
            {
                return GetView90();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTest")
            {
                return GetView91();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayType")
            {
                return GetView92();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryBasalContact")
            {
                return GetView93();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedSpacing")
            {
                return GetView94();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristic")
            {
                return GetView95();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristicType")
            {
                return GetView96();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryColour")
            {
                return GetView97();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCommodity")
            {
                return GetView98();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryContractConditionType")
            {
                return GetView99();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCoreState")
            {
                return GetView100();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCostType")
            {
                return GetView101();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountry")
            {
                return GetView102();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountryState")
            {
                return GetView103();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDataStatus")
            {
                return GetView104();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectCompleteness")
            {
                return GetView105();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectContinuity")
            {
                return GetView106();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectSpacing")
            {
                return GetView107();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectType")
            {
                return GetView108();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDesurveyAlgorithmType")
            {
                return GetView109();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDimension")
            {
                return GetView110();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDipOrientationMethod")
            {
                return GetView111();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomain")
            {
                return GetView112();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomainAlias")
            {
                return GetView113();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillBitType")
            {
                return GetView114();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillCasingType")
            {
                return GetView115();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillFluid")
            {
                return GetView116();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillRigType")
            {
                return GetView117();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillSize")
            {
                return GetView118();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryEstimatedStrength")
            {
                return GetView119();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryFailureMode")
            {
                return GetView120();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryFileType")
            {
                return GetView121();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryFlowTestType")
            {
                return GetView122();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryGasDetected")
            {
                return GetView123();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeodeticDatum")
            {
                return GetView124();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeophysicalLogType")
            {
                return GetView125();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroup")
            {
                return GetView126();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroupMembership")
            {
                return GetView127();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryHeightDatum")
            {
                return GetView128();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryHolePurpose")
            {
                return GetView129();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleStatus")
            {
                return GetView130();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleType")
            {
                return GetView131();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryHorizon")
            {
                return GetView132();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryHue")
            {
                return GetView133();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillMode")
            {
                return GetView134();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillType")
            {
                return GetView135();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryIntervalStatus")
            {
                return GetView136();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryLeaseApplicationType")
            {
                return GetView137();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryLicenseType")
            {
                return GetView138();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyInterrelation")
            {
                return GetView139();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyQualifier")
            {
                return GetView140();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyType")
            {
                return GetView141();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryLocationType")
            {
                return GetView142();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMechanicalState")
            {
                return GetView143();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAbundance")
            {
                return GetView144();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAbundance")
            {
                return GetView145();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAssociation")
            {
                return GetView146();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilType")
            {
                return GetView147();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralForm")
            {
                return GetView148();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralStyle")
            {
                return GetView149();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralType")
            {
                return GetView150();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryModel")
            {
                return GetView151();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelCategory")
            {
                return GetView152();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelRelation")
            {
                return GetView153();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelStatus")
            {
                return GetView154();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryMoistureSensitivity")
            {
                return GetView155();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryPartStatus")
            {
                return GetView156();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlasticity")
            {
                return GetView157();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryPly")
            {
                return GetView158();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlyAlias")
            {
                return GetView159();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryPointLoadTestType")
            {
                return GetView160();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryPosition")
            {
                return GetView161();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryProfession")
            {
                return GetView162();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceGroup")
            {
                return GetView163();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceType")
            {
                return GetView164();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryRelationType")
            {
                return GetView165();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryRockMassUnitType")
            {
                return GetView166();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleCategory")
            {
                return GetView167();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleState")
            {
                return GetView168();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleType")
            {
                return GetView169();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySeam")
            {
                return GetView170();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySeamAlias")
            {
                return GetView171();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySedimentaryFeature")
            {
                return GetView172();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryShade")
            {
                return GetView173();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryShape")
            {
                return GetView174();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryStratigraphy")
            {
                return GetView175();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySurfaceRoughness")
            {
                return GetView176();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionarySurveyAccuracy")
            {
                return GetView177();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryTexture")
            {
                return GetView178();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnit")
            {
                return GetView179();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnitType")
            {
                return GetView180();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryWeathering")
            {
                return GetView181();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkType")
            {
                return GetView182();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeClass")
            {
                return GetView183();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeRelation")
            {
                return GetView184();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Drilling")
            {
                return GetView185();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Experience")
            {
                return GetView186();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_FileData")
            {
                return GetView187();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Geology")
            {
                return GetView188();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Geophysics")
            {
                return GetView189();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_GeophysicsData")
            {
                return GetView190();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_GeophysicsMetadata")
            {
                return GetView191();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Header")
            {
                return GetView192();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_HeaderGeophysicalLog")
            {
                return GetView193();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_HeaderRelation")
            {
                return GetView194();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Interpretation")
            {
                return GetView195();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_InterpretationData")
            {
                return GetView196();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Lease")
            {
                return GetView197();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LeaseApplication")
            {
                return GetView198();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_License")
            {
                return GetView199();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LicenseAsset")
            {
                return GetView200();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Lithology")
            {
                return GetView201();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Location")
            {
                return GetView202();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LocationAlias")
            {
                return GetView203();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LocationData")
            {
                return GetView204();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LocationHistory")
            {
                return GetView205();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Mineralogy")
            {
                return GetView206();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ModelCharacteristic")
            {
                return GetView207();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Opportunity")
            {
                return GetView208();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Parameter")
            {
                return GetView209();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ParameterDuplicate")
            {
                return GetView210();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ParameterGroup")
            {
                return GetView211();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_PartCharacteristic")
            {
                return GetView212();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_PointLoad")
            {
                return GetView213();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Project")
            {
                return GetView214();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectDeliverable")
            {
                return GetView215();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlan")
            {
                return GetView216();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTask")
            {
                return GetView217();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskComplianceResponse")
            {
                return GetView218();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskData")
            {
                return GetView219();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponse")
            {
                return GetView220();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponseData")
            {
                return GetView221();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskWorker")
            {
                return GetView222();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProspectusProject")
            {
                return GetView223();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProspectusProjectCommodity")
            {
                return GetView224();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Province")
            {
                return GetView225();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProvinceAlias")
            {
                return GetView226();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProvinceData")
            {
                return GetView227();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ProvinceRelation")
            {
                return GetView228();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Recovery")
            {
                return GetView229();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Sample")
            {
                return GetView230();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_SecurityBlacklist")
            {
                return GetView231();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_SecurityWhitelist")
            {
                return GetView232();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Server")
            {
                return GetView233();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Survey")
            {
                return GetView234();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Task")
            {
                return GetView235();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_TaskData")
            {
                return GetView236();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_TaskRelation")
            {
                return GetView237();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Tenement")
            {
                return GetView238();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_TenementCommodity")
            {
                return GetView239();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_TenementProvince")
            {
                return GetView240();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_TenementRelation")
            {
                return GetView241();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_UsageAudit")
            {
                return GetView242();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_WaterFlow")
            {
                return GetView243();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LithologyAdjective")
            {
                return GetView244();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LithologySedimentaryFeature")
            {
                return GetView245();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_HeaderHolePurpose")
            {
                return GetView246();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LithologyRelation")
            {
                return GetView247();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_FileDataWorkType")
            {
                return GetView248();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryWorkflowType")
            {
                return GetView249();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Workflow")
            {
                return GetView250();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsample")
            {
                return GetView251();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleChemical")
            {
                return GetView252();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleEquipment")
            {
                return GetView253();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsamplePrecondition")
            {
                return GetView254();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleRelation")
            {
                return GetView255();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestEquipment")
            {
                return GetView256();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflow")
            {
                return GetView257();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflowProcedure")
            {
                return GetView258();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayProcedure")
            {
                return GetView259();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocol")
            {
                return GetView260();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolEquipment")
            {
                return GetView261();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAgitationMethod")
            {
                return GetView262();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureMethod")
            {
                return GetView263();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureTechnique")
            {
                return GetView264();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureType")
            {
                return GetView265();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTechnique")
            {
                return GetView266();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryChemical")
            {
                return GetView267();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolPrecondition")
            {
                return GetView268();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_AssayWorkflowProcedureProtocol")
            {
                return GetView269();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayPreconditionType")
            {
                return GetView270();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProvider")
            {
                return GetView271();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderCurrency")
            {
                return GetView272();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProduct")
            {
                return GetView273();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductModel")
            {
                return GetView274();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductPart")
            {
                return GetView275();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationRoute")
            {
                return GetView276();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteData")
            {
                return GetView277();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteParameter")
            {
                return GetView278();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_AssetData")
            {
                return GetView279();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_AssetProduction")
            {
                return GetView280();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ContactCreditCard")
            {
                return GetView281();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryAccountType")
            {
                return GetView282();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryOrderStatus")
            {
                return GetView283();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryRouteType")
            {
                return GetView284();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Download")
            {
                return GetView285();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Problem")
            {
                return GetView286();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProblemAssetData")
            {
                return GetView287();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirement")
            {
                return GetView288();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirementAssetData")
            {
                return GetView289();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProblemSolution")
            {
                return GetView290();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProblemSolutionAssetDataAllocation")
            {
                return GetView291();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_SupplierModelContract")
            {
                return GetView292();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_SupplierPartContract")
            {
                return GetView293();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_SupplyContractCondition")
            {
                return GetView294();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Communication")
            {
                return GetView295();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryAddressType")
            {
                return GetView296();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderContact")
            {
                return GetView297();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_PaymentInvoice")
            {
                return GetView298();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_TwoStepAuthenticationData")
            {
                return GetView299();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Affiliate")
            {
                return GetView300();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryAffiliateType")
            {
                return GetView301();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_CommunicationEmail")
            {
                return GetView302();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_CommunicationRegardingData")
            {
                return GetView303();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Q_DictionaryAssetStatus")
            {
                return GetView304();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.T_DictionaryUsageAuditType")
            {
                return GetView305();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphData")
            {
                return GetView306();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelation")
            {
                return GetView307();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryLinestringType")
            {
                return GetView308();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryProjectType")
            {
                return GetView309();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Linestring")
            {
                return GetView310();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProjectOffer")
            {
                return GetView311();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProjectPledge")
            {
                return GetView312();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProjectPledgeAddendum")
            {
                return GetView313();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DataData")
            {
                return GetView314();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphDataFileData")
            {
                return GetView315();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphDataLocation")
            {
                return GetView316();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphDataGroup")
            {
                return GetView317();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlterationJointType")
            {
                return GetView318();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedDevelopment")
            {
                return GetView319();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryFriabilityType")
            {
                return GetView320();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_DictionaryStructureSet")
            {
                return GetView321();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Form")
            {
                return GetView322();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_FormData")
            {
                return GetView323();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphDataHistory")
            {
                return GetView324();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Condition")
            {
                return GetView325();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryTriggerType")
            {
                return GetView326();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelationCondition")
            {
                return GetView327();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProjectData")
            {
                return GetView328();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProjectDataTemplate")
            {
                return GetView329();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_ProjectPlanTaskResponseEvent")
            {
                return GetView330();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Trigger")
            {
                return GetView331();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_DictionaryRunStateType")
            {
                return GetView332();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstance")
            {
                return GetView333();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstanceData")
            {
                return GetView334();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_TriggerGraph")
            {
                return GetView335();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_SupplierDiscount")
            {
                return GetView336();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_Notification")
            {
                return GetView337();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_NotificationData")
            {
                return GetView338();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_NotificationDevice")
            {
                return GetView339();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_UsersInRoles")
            {
                return GetView340();
            }

            if (extentName == "NKDC.Applications")
            {
                return GetView341();
            }

            if (extentName == "NKDC.Memberships")
            {
                return GetView342();
            }

            if (extentName == "NKDC.Paths")
            {
                return GetView343();
            }

            if (extentName == "NKDC.PersonalizationAllUsers")
            {
                return GetView344();
            }

            if (extentName == "NKDC.PersonalizationPerUsers")
            {
                return GetView345();
            }

            if (extentName == "NKDC.Profiles")
            {
                return GetView346();
            }

            if (extentName == "NKDC.Roles")
            {
                return GetView347();
            }

            if (extentName == "NKDC.Users")
            {
                return GetView348();
            }

            if (extentName == "NKDC.Credits")
            {
                return GetView349();
            }

            if (extentName == "NKDC.Currencies")
            {
                return GetView350();
            }

            if (extentName == "NKDC.DictionaryTaxes")
            {
                return GetView351();
            }

            if (extentName == "NKDC.Invoices")
            {
                return GetView352();
            }

            if (extentName == "NKDC.InvoiceLines")
            {
                return GetView353();
            }

            if (extentName == "NKDC.Journals")
            {
                return GetView354();
            }

            if (extentName == "NKDC.Payments")
            {
                return GetView355();
            }

            if (extentName == "NKDC.PurchaseOrders")
            {
                return GetView356();
            }

            if (extentName == "NKDC.Supplies")
            {
                return GetView357();
            }

            if (extentName == "NKDC.SupplyItems")
            {
                return GetView358();
            }

            if (extentName == "NKDC.SupplyItemTaxes")
            {
                return GetView359();
            }

            if (extentName == "NKDC.Accounts")
            {
                return GetView360();
            }

            if (extentName == "NKDC.AccountDiscounts")
            {
                return GetView361();
            }

            if (extentName == "NKDC.Assets")
            {
                return GetView362();
            }

            if (extentName == "NKDC.AssetAlias")
            {
                return GetView363();
            }

            if (extentName == "NKDC.AssetMaintenances")
            {
                return GetView364();
            }

            if (extentName == "NKDC.AssetWarranties")
            {
                return GetView365();
            }

            if (extentName == "NKDC.CompanyAccounts")
            {
                return GetView366();
            }

            if (extentName == "NKDC.ContractAssets")
            {
                return GetView367();
            }

            if (extentName == "NKDC.DeliveryAdvices")
            {
                return GetView368();
            }

            if (extentName == "NKDC.DeliveryAdviceItems")
            {
                return GetView369();
            }

            if (extentName == "NKDC.DictionaryDecontaminationStatus")
            {
                return GetView370();
            }

            if (extentName == "NKDC.DictionaryDeliveryAdviceReasons")
            {
                return GetView371();
            }

            if (extentName == "NKDC.DictionaryDeviceTypes")
            {
                return GetView372();
            }

            if (extentName == "NKDC.DictionaryEventTypes")
            {
                return GetView373();
            }

            if (extentName == "NKDC.DictionaryParts")
            {
                return GetView374();
            }

            if (extentName == "NKDC.DictionaryPartCategories")
            {
                return GetView375();
            }

            if (extentName == "NKDC.DictionaryPartKits")
            {
                return GetView376();
            }

            if (extentName == "NKDC.DictionaryPartKitItems")
            {
                return GetView377();
            }

            if (extentName == "NKDC.DictionaryProcedures")
            {
                return GetView378();
            }

            if (extentName == "NKDC.DictionaryWarrantyTypes")
            {
                return GetView379();
            }

            if (extentName == "NKDC.ModelParts")
            {
                return GetView380();
            }

            if (extentName == "NKDC.ModelPartKits")
            {
                return GetView381();
            }

            if (extentName == "NKDC.ModelProcedures")
            {
                return GetView382();
            }

            if (extentName == "NKDC.ModelProcedureTasks")
            {
                return GetView383();
            }

            if (extentName == "NKDC.ModelProcedureTaskParts")
            {
                return GetView384();
            }

            if (extentName == "NKDC.ModelScheduleCycles")
            {
                return GetView385();
            }

            if (extentName == "NKDC.ModelWarranties")
            {
                return GetView386();
            }

            if (extentName == "NKDC.ProjectPlanTaskModels")
            {
                return GetView387();
            }

            if (extentName == "NKDC.ProjectPlanTaskParts")
            {
                return GetView388();
            }

            if (extentName == "NKDC.Recalls")
            {
                return GetView389();
            }

            if (extentName == "NKDC.RecallModels")
            {
                return GetView390();
            }

            if (extentName == "NKDC.RecallModelAssets")
            {
                return GetView391();
            }

            if (extentName == "NKDC.SupplierModels")
            {
                return GetView392();
            }

            if (extentName == "NKDC.SupplierParts")
            {
                return GetView393();
            }

            if (extentName == "NKDC.Warehouses")
            {
                return GetView394();
            }

            if (extentName == "NKDC.WarehouseModels")
            {
                return GetView395();
            }

            if (extentName == "NKDC.WarehouseModelSuppliers")
            {
                return GetView396();
            }

            if (extentName == "NKDC.WarehouseParts")
            {
                return GetView397();
            }

            if (extentName == "NKDC.WarehousePartSuppliers")
            {
                return GetView398();
            }

            if (extentName == "NKDC.WorkflowSchedules")
            {
                return GetView399();
            }

            if (extentName == "NKDC.Addresses")
            {
                return GetView400();
            }

            if (extentName == "NKDC.AssayGroups")
            {
                return GetView401();
            }

            if (extentName == "NKDC.AssayGroupStandardTestResults")
            {
                return GetView402();
            }

            if (extentName == "NKDC.AssayGroupTests")
            {
                return GetView403();
            }

            if (extentName == "NKDC.AssayGroupTestResults")
            {
                return GetView404();
            }

            if (extentName == "NKDC.AssayGroupTestResultComments")
            {
                return GetView405();
            }

            if (extentName == "NKDC.AssayGroupTestResultDuplicates")
            {
                return GetView406();
            }

            if (extentName == "NKDC.BlockModels")
            {
                return GetView407();
            }

            if (extentName == "NKDC.BlockModelBlocks")
            {
                return GetView408();
            }

            if (extentName == "NKDC.BlockModelBlockDatas")
            {
                return GetView409();
            }

            if (extentName == "NKDC.BlockModelMetadatas")
            {
                return GetView410();
            }

            if (extentName == "NKDC.Casings")
            {
                return GetView411();
            }

            if (extentName == "NKDC.Cementings")
            {
                return GetView412();
            }

            if (extentName == "NKDC.Companies")
            {
                return GetView413();
            }

            if (extentName == "NKDC.CompanyAddresses")
            {
                return GetView414();
            }

            if (extentName == "NKDC.CompanyRelations")
            {
                return GetView415();
            }

            if (extentName == "NKDC.Compliances")
            {
                return GetView416();
            }

            if (extentName == "NKDC.ComplianceTasks")
            {
                return GetView417();
            }

            if (extentName == "NKDC.ComplianceWorkTypes")
            {
                return GetView418();
            }

            if (extentName == "NKDC.Contacts")
            {
                return GetView419();
            }

            if (extentName == "NKDC.ContactAddresses")
            {
                return GetView420();
            }

            if (extentName == "NKDC.Contracts")
            {
                return GetView421();
            }

            if (extentName == "NKDC.ContractConditions")
            {
                return GetView422();
            }

            if (extentName == "NKDC.ContractConditionModels")
            {
                return GetView423();
            }

            if (extentName == "NKDC.ContractConditionParts")
            {
                return GetView424();
            }

            if (extentName == "NKDC.CostEstimateModels")
            {
                return GetView425();
            }

            if (extentName == "NKDC.Defects")
            {
                return GetView426();
            }

            if (extentName == "NKDC.Desurveys")
            {
                return GetView427();
            }

            if (extentName == "NKDC.DictionaryAdjectives")
            {
                return GetView428();
            }

            if (extentName == "NKDC.DictionaryAlterations")
            {
                return GetView429();
            }

            if (extentName == "NKDC.DictionaryAssayMethods")
            {
                return GetView430();
            }

            if (extentName == "NKDC.DictionaryAssayStandards")
            {
                return GetView431();
            }

            if (extentName == "NKDC.DictionaryAssayTests")
            {
                return GetView432();
            }

            if (extentName == "NKDC.DictionaryAssayTypes")
            {
                return GetView433();
            }

            if (extentName == "NKDC.DictionaryBasalContacts")
            {
                return GetView434();
            }

            if (extentName == "NKDC.DictionaryBedSpacings")
            {
                return GetView435();
            }

            if (extentName == "NKDC.DictionaryCharacteristics")
            {
                return GetView436();
            }

            if (extentName == "NKDC.DictionaryCharacteristicTypes")
            {
                return GetView437();
            }

            if (extentName == "NKDC.DictionaryColours")
            {
                return GetView438();
            }

            if (extentName == "NKDC.DictionaryCommodities")
            {
                return GetView439();
            }

            if (extentName == "NKDC.DictionaryContractConditionTypes")
            {
                return GetView440();
            }

            if (extentName == "NKDC.DictionaryCoreStates")
            {
                return GetView441();
            }

            if (extentName == "NKDC.DictionaryCostTypes")
            {
                return GetView442();
            }

            if (extentName == "NKDC.DictionaryCountries")
            {
                return GetView443();
            }

            if (extentName == "NKDC.DictionaryCountryStates")
            {
                return GetView444();
            }

            if (extentName == "NKDC.DictionaryDataStatus")
            {
                return GetView445();
            }

            if (extentName == "NKDC.DictionaryDefectCompletenesses")
            {
                return GetView446();
            }

            if (extentName == "NKDC.DictionaryDefectContinuities")
            {
                return GetView447();
            }

            if (extentName == "NKDC.DictionaryDefectSpacings")
            {
                return GetView448();
            }

            if (extentName == "NKDC.DictionaryDefectTypes")
            {
                return GetView449();
            }

            if (extentName == "NKDC.DictionaryDesurveyAlgorithmTypes")
            {
                return GetView450();
            }

            if (extentName == "NKDC.DictionaryDimensions")
            {
                return GetView451();
            }

            if (extentName == "NKDC.DictionaryDipOrientationMethods")
            {
                return GetView452();
            }

            if (extentName == "NKDC.DictionaryDomains")
            {
                return GetView453();
            }

            if (extentName == "NKDC.DictionaryDomainAlias")
            {
                return GetView454();
            }

            if (extentName == "NKDC.DictionaryDrillBitTypes")
            {
                return GetView455();
            }

            if (extentName == "NKDC.DictionaryDrillCasingTypes")
            {
                return GetView456();
            }

            if (extentName == "NKDC.DictionaryDrillFluids")
            {
                return GetView457();
            }

            if (extentName == "NKDC.DictionaryDrillRigTypes")
            {
                return GetView458();
            }

            if (extentName == "NKDC.DictionaryDrillSizes")
            {
                return GetView459();
            }

            if (extentName == "NKDC.DictionaryEstimatedStrengths")
            {
                return GetView460();
            }

            if (extentName == "NKDC.DictionaryFailureModes")
            {
                return GetView461();
            }

            if (extentName == "NKDC.DictionaryFileTypes")
            {
                return GetView462();
            }

            if (extentName == "NKDC.DictionaryFlowTestTypes")
            {
                return GetView463();
            }

            if (extentName == "NKDC.DictionaryGasDetecteds")
            {
                return GetView464();
            }

            if (extentName == "NKDC.DictionaryGeodeticDatums")
            {
                return GetView465();
            }

            if (extentName == "NKDC.DictionaryGeophysicalLogTypes")
            {
                return GetView466();
            }

            if (extentName == "NKDC.DictionaryGroups")
            {
                return GetView467();
            }

            if (extentName == "NKDC.DictionaryGroupMemberships")
            {
                return GetView468();
            }

            if (extentName == "NKDC.DictionaryHeightDatums")
            {
                return GetView469();
            }

            if (extentName == "NKDC.DictionaryHolePurposes")
            {
                return GetView470();
            }

            if (extentName == "NKDC.DictionaryHoleStatus")
            {
                return GetView471();
            }

            if (extentName == "NKDC.DictionaryHoleTypes")
            {
                return GetView472();
            }

            if (extentName == "NKDC.DictionaryHorizons")
            {
                return GetView473();
            }

            if (extentName == "NKDC.DictionaryHues")
            {
                return GetView474();
            }

            if (extentName == "NKDC.DictionaryInfillModes")
            {
                return GetView475();
            }

            if (extentName == "NKDC.DictionaryInfillTypes")
            {
                return GetView476();
            }

            if (extentName == "NKDC.DictionaryIntervalStatus")
            {
                return GetView477();
            }

            if (extentName == "NKDC.DictionaryLeaseApplicationTypes")
            {
                return GetView478();
            }

            if (extentName == "NKDC.DictionaryLicenseTypes")
            {
                return GetView479();
            }

            if (extentName == "NKDC.DictionaryLithologyInterrelations")
            {
                return GetView480();
            }

            if (extentName == "NKDC.DictionaryLithologyQualifiers")
            {
                return GetView481();
            }

            if (extentName == "NKDC.DictionaryLithologyTypes")
            {
                return GetView482();
            }

            if (extentName == "NKDC.DictionaryLocationTypes")
            {
                return GetView483();
            }

            if (extentName == "NKDC.DictionaryMechanicalStates")
            {
                return GetView484();
            }

            if (extentName == "NKDC.DictionaryMineralAbundances")
            {
                return GetView485();
            }

            if (extentName == "NKDC.DictionaryMineralAndFossilAbundances")
            {
                return GetView486();
            }

            if (extentName == "NKDC.DictionaryMineralAndFossilAssociations")
            {
                return GetView487();
            }

            if (extentName == "NKDC.DictionaryMineralAndFossilTypes")
            {
                return GetView488();
            }

            if (extentName == "NKDC.DictionaryMineralForms")
            {
                return GetView489();
            }

            if (extentName == "NKDC.DictionaryMineralStyles")
            {
                return GetView490();
            }

            if (extentName == "NKDC.DictionaryMineralTypes")
            {
                return GetView491();
            }

            if (extentName == "NKDC.DictionaryModels")
            {
                return GetView492();
            }

            if (extentName == "NKDC.DictionaryModelCategories")
            {
                return GetView493();
            }

            if (extentName == "NKDC.DictionaryModelRelations")
            {
                return GetView494();
            }

            if (extentName == "NKDC.DictionaryModelStatus")
            {
                return GetView495();
            }

            if (extentName == "NKDC.DictionaryMoistureSensitivities")
            {
                return GetView496();
            }

            if (extentName == "NKDC.DictionaryPartStatus")
            {
                return GetView497();
            }

            if (extentName == "NKDC.DictionaryPlasticities")
            {
                return GetView498();
            }

            if (extentName == "NKDC.DictionaryPlies")
            {
                return GetView499();
            }

            if (extentName == "NKDC.DictionaryPlyAlias")
            {
                return GetView500();
            }

            if (extentName == "NKDC.DictionaryPointLoadTestTypes")
            {
                return GetView501();
            }

            if (extentName == "NKDC.DictionaryPositions")
            {
                return GetView502();
            }

            if (extentName == "NKDC.DictionaryProfessions")
            {
                return GetView503();
            }

            if (extentName == "NKDC.DictionaryProvinceGroups")
            {
                return GetView504();
            }

            if (extentName == "NKDC.DictionaryProvinceTypes")
            {
                return GetView505();
            }

            if (extentName == "NKDC.DictionaryRelationTypes")
            {
                return GetView506();
            }

            if (extentName == "NKDC.DictionaryRockMassUnitTypes")
            {
                return GetView507();
            }

            if (extentName == "NKDC.DictionarySampleCategories")
            {
                return GetView508();
            }

            if (extentName == "NKDC.DictionarySampleStates")
            {
                return GetView509();
            }

            if (extentName == "NKDC.DictionarySampleTypes")
            {
                return GetView510();
            }

            if (extentName == "NKDC.DictionarySeams")
            {
                return GetView511();
            }

            if (extentName == "NKDC.DictionarySeamAlias")
            {
                return GetView512();
            }

            if (extentName == "NKDC.DictionarySedimentaryFeatures")
            {
                return GetView513();
            }

            if (extentName == "NKDC.DictionaryShades")
            {
                return GetView514();
            }

            if (extentName == "NKDC.DictionaryShapes")
            {
                return GetView515();
            }

            if (extentName == "NKDC.DictionaryStratigraphies")
            {
                return GetView516();
            }

            if (extentName == "NKDC.DictionarySurfaceRoughnesses")
            {
                return GetView517();
            }

            if (extentName == "NKDC.DictionarySurveyAccuracies")
            {
                return GetView518();
            }

            if (extentName == "NKDC.DictionaryTextures")
            {
                return GetView519();
            }

            if (extentName == "NKDC.DictionaryUnits")
            {
                return GetView520();
            }

            if (extentName == "NKDC.DictionaryUnitTypes")
            {
                return GetView521();
            }

            if (extentName == "NKDC.DictionaryWeatherings")
            {
                return GetView522();
            }

            if (extentName == "NKDC.DictionaryWorkTypes")
            {
                return GetView523();
            }

            if (extentName == "NKDC.DictionaryWorkTypeClasses")
            {
                return GetView524();
            }

            if (extentName == "NKDC.DictionaryWorkTypeRelations")
            {
                return GetView525();
            }

            if (extentName == "NKDC.Drillings")
            {
                return GetView526();
            }

            if (extentName == "NKDC.Experiences")
            {
                return GetView527();
            }

            if (extentName == "NKDC.FileDatas")
            {
                return GetView528();
            }

            if (extentName == "NKDC.Geologies")
            {
                return GetView529();
            }

            if (extentName == "NKDC.Geophysics")
            {
                return GetView530();
            }

            if (extentName == "NKDC.GeophysicsDatas")
            {
                return GetView531();
            }

            if (extentName == "NKDC.GeophysicsMetadatas")
            {
                return GetView532();
            }

            if (extentName == "NKDC.Headers")
            {
                return GetView533();
            }

            if (extentName == "NKDC.HeaderGeophysicalLogs")
            {
                return GetView534();
            }

            if (extentName == "NKDC.HeaderRelations")
            {
                return GetView535();
            }

            if (extentName == "NKDC.Interpretations")
            {
                return GetView536();
            }

            if (extentName == "NKDC.InterpretationDatas")
            {
                return GetView537();
            }

            if (extentName == "NKDC.Leases")
            {
                return GetView538();
            }

            if (extentName == "NKDC.LeaseApplications")
            {
                return GetView539();
            }

            if (extentName == "NKDC.Licenses")
            {
                return GetView540();
            }

            if (extentName == "NKDC.LicenseAssets")
            {
                return GetView541();
            }

            if (extentName == "NKDC.Lithologies")
            {
                return GetView542();
            }

            if (extentName == "NKDC.Locations")
            {
                return GetView543();
            }

            if (extentName == "NKDC.LocationAlias")
            {
                return GetView544();
            }

            if (extentName == "NKDC.LocationDatas")
            {
                return GetView545();
            }

            if (extentName == "NKDC.LocationTraces")
            {
                return GetView546();
            }

            if (extentName == "NKDC.Mineralogies")
            {
                return GetView547();
            }

            if (extentName == "NKDC.ModelCharacteristics")
            {
                return GetView548();
            }

            if (extentName == "NKDC.Opportunities")
            {
                return GetView549();
            }

            if (extentName == "NKDC.Parameters")
            {
                return GetView550();
            }

            if (extentName == "NKDC.ParameterDuplicates")
            {
                return GetView551();
            }

            if (extentName == "NKDC.ParameterGroups")
            {
                return GetView552();
            }

            if (extentName == "NKDC.PartCharacteristics")
            {
                return GetView553();
            }

            if (extentName == "NKDC.PointLoads")
            {
                return GetView554();
            }

            if (extentName == "NKDC.Projects")
            {
                return GetView555();
            }

            if (extentName == "NKDC.ProjectDeliverables")
            {
                return GetView556();
            }

            if (extentName == "NKDC.ProjectPlans")
            {
                return GetView557();
            }

            if (extentName == "NKDC.ProjectPlanTasks")
            {
                return GetView558();
            }

            if (extentName == "NKDC.ProjectPlanTaskComplianceResponses")
            {
                return GetView559();
            }

            if (extentName == "NKDC.ProjectPlanTaskDatas")
            {
                return GetView560();
            }

            if (extentName == "NKDC.ProjectPlanTaskResponses")
            {
                return GetView561();
            }

            if (extentName == "NKDC.ProjectPlanTaskResponseDatas")
            {
                return GetView562();
            }

            if (extentName == "NKDC.ProjectPlanTaskWorkers")
            {
                return GetView563();
            }

            if (extentName == "NKDC.ProspectusProjects")
            {
                return GetView564();
            }

            if (extentName == "NKDC.ProspectusProjectCommodities")
            {
                return GetView565();
            }

            if (extentName == "NKDC.Provinces")
            {
                return GetView566();
            }

            if (extentName == "NKDC.ProvinceAlias")
            {
                return GetView567();
            }

            if (extentName == "NKDC.ProvinceDatas")
            {
                return GetView568();
            }

            if (extentName == "NKDC.ProvinceRelations")
            {
                return GetView569();
            }

            if (extentName == "NKDC.Recoveries")
            {
                return GetView570();
            }

            if (extentName == "NKDC.Samples")
            {
                return GetView571();
            }

            if (extentName == "NKDC.SecurityBlacklists")
            {
                return GetView572();
            }

            if (extentName == "NKDC.SecurityWhitelists")
            {
                return GetView573();
            }

            if (extentName == "NKDC.Servers")
            {
                return GetView574();
            }

            if (extentName == "NKDC.Surveys")
            {
                return GetView575();
            }

            if (extentName == "NKDC.Tasks")
            {
                return GetView576();
            }

            if (extentName == "NKDC.TaskDatas")
            {
                return GetView577();
            }

            if (extentName == "NKDC.TaskRelations")
            {
                return GetView578();
            }

            if (extentName == "NKDC.Tenements")
            {
                return GetView579();
            }

            if (extentName == "NKDC.TenementCommodities")
            {
                return GetView580();
            }

            if (extentName == "NKDC.TenementProvinces")
            {
                return GetView581();
            }

            if (extentName == "NKDC.TenementRelations")
            {
                return GetView582();
            }

            if (extentName == "NKDC.UsageAuditViews")
            {
                return GetView583();
            }

            if (extentName == "NKDC.WaterFlows")
            {
                return GetView584();
            }

            if (extentName == "NKDC.LithologyAdjectives")
            {
                return GetView585();
            }

            if (extentName == "NKDC.LithologySedimentaryFeatures")
            {
                return GetView586();
            }

            if (extentName == "NKDC.HeaderHolePurposes")
            {
                return GetView587();
            }

            if (extentName == "NKDC.LithologyRelations")
            {
                return GetView588();
            }

            if (extentName == "NKDC.FileDataWorkTypes")
            {
                return GetView589();
            }

            if (extentName == "NKDC.DictionaryWorkflowTypes")
            {
                return GetView590();
            }

            if (extentName == "NKDC.Workflows")
            {
                return GetView591();
            }

            if (extentName == "NKDC.AssayGroupSubsamples")
            {
                return GetView592();
            }

            if (extentName == "NKDC.AssayGroupSubsampleChemicals")
            {
                return GetView593();
            }

            if (extentName == "NKDC.AssayGroupSubsampleEquipments")
            {
                return GetView594();
            }

            if (extentName == "NKDC.AssayGroupSubsamplePreconditions")
            {
                return GetView595();
            }

            if (extentName == "NKDC.AssayGroupSubsampleRelations")
            {
                return GetView596();
            }

            if (extentName == "NKDC.AssayGroupTestEquipments")
            {
                return GetView597();
            }

            if (extentName == "NKDC.AssayGroupWorkflows")
            {
                return GetView598();
            }

            if (extentName == "NKDC.AssayGroupWorkflowProcedures")
            {
                return GetView599();
            }

            if (extentName == "NKDC.AssayProcedures")
            {
                return GetView600();
            }

            if (extentName == "NKDC.AssayProcedureProtocols")
            {
                return GetView601();
            }

            if (extentName == "NKDC.AssayProcedureProtocolEquipments")
            {
                return GetView602();
            }

            if (extentName == "NKDC.DictionaryAgitationMethods")
            {
                return GetView603();
            }

            if (extentName == "NKDC.DictionaryAssayProcedureMethods")
            {
                return GetView604();
            }

            if (extentName == "NKDC.DictionaryAssayProcedureTechniques")
            {
                return GetView605();
            }

            if (extentName == "NKDC.DictionaryAssayProcedureTypes")
            {
                return GetView606();
            }

            if (extentName == "NKDC.DictionaryAssayTechniques")
            {
                return GetView607();
            }

            if (extentName == "NKDC.DictionaryChemicals")
            {
                return GetView608();
            }

            if (extentName == "NKDC.AssayProcedureProtocolPreconditions")
            {
                return GetView609();
            }

            if (extentName == "NKDC.AssayWorkflowProcedureProtocols")
            {
                return GetView610();
            }

            if (extentName == "NKDC.DictionaryAssayPreconditionTypes")
            {
                return GetView611();
            }

            if (extentName == "NKDC.ApplicationPaymentProviders")
            {
                return GetView612();
            }

            if (extentName == "NKDC.ApplicationPaymentProviderCurrencies")
            {
                return GetView613();
            }

            if (extentName == "NKDC.ApplicationPaymentProviderProducts")
            {
                return GetView614();
            }

            if (extentName == "NKDC.ApplicationPaymentProviderProductModels")
            {
                return GetView615();
            }

            if (extentName == "NKDC.ApplicationPaymentProviderProductParts")
            {
                return GetView616();
            }

            if (extentName == "NKDC.ApplicationRoutes")
            {
                return GetView617();
            }

            if (extentName == "NKDC.ApplicationRouteDatas")
            {
                return GetView618();
            }

            if (extentName == "NKDC.ApplicationRouteParameters")
            {
                return GetView619();
            }

            if (extentName == "NKDC.AssetDatas")
            {
                return GetView620();
            }

            if (extentName == "NKDC.AssetProductions")
            {
                return GetView621();
            }

            if (extentName == "NKDC.ContactCreditCards")
            {
                return GetView622();
            }

            if (extentName == "NKDC.DictionaryAccountTypes")
            {
                return GetView623();
            }

            if (extentName == "NKDC.DictionaryOrderStatus")
            {
                return GetView624();
            }

            if (extentName == "NKDC.DictionaryRouteTypes")
            {
                return GetView625();
            }

            if (extentName == "NKDC.Downloads")
            {
                return GetView626();
            }

            if (extentName == "NKDC.Problems")
            {
                return GetView627();
            }

            if (extentName == "NKDC.ProblemAssetDatas")
            {
                return GetView628();
            }

            if (extentName == "NKDC.ProblemRequirements")
            {
                return GetView629();
            }

            if (extentName == "NKDC.ProblemRequirementAssetDatas")
            {
                return GetView630();
            }

            if (extentName == "NKDC.ProblemSolutions")
            {
                return GetView631();
            }

            if (extentName == "NKDC.ProblemSolutionAssetDataAllocations")
            {
                return GetView632();
            }

            if (extentName == "NKDC.SupplierModelContracts")
            {
                return GetView633();
            }

            if (extentName == "NKDC.SupplierPartContracts")
            {
                return GetView634();
            }

            if (extentName == "NKDC.SupplyContractConditions")
            {
                return GetView635();
            }

            if (extentName == "NKDC.Communications")
            {
                return GetView636();
            }

            if (extentName == "NKDC.DictionaryAddressTypes")
            {
                return GetView637();
            }

            if (extentName == "NKDC.ApplicationPaymentProviderContacts")
            {
                return GetView638();
            }

            if (extentName == "NKDC.PaymentInvoices")
            {
                return GetView639();
            }

            if (extentName == "NKDC.TwoStepAuthenticationDatas")
            {
                return GetView640();
            }

            if (extentName == "NKDC.Affiliates")
            {
                return GetView641();
            }

            if (extentName == "NKDC.DictionaryAffiliateTypes")
            {
                return GetView642();
            }

            if (extentName == "NKDC.CommunicationEmails")
            {
                return GetView643();
            }

            if (extentName == "NKDC.CommunicationRegardingDatas")
            {
                return GetView644();
            }

            if (extentName == "NKDC.DictionaryAssetStatus")
            {
                return GetView645();
            }

            if (extentName == "NKDC.DictionaryUsageAuditTypes")
            {
                return GetView646();
            }

            if (extentName == "NKDC.GraphData")
            {
                return GetView647();
            }

            if (extentName == "NKDC.GraphDataRelation")
            {
                return GetView648();
            }

            if (extentName == "NKDC.DictionaryLinestringTypes")
            {
                return GetView649();
            }

            if (extentName == "NKDC.DictionaryProjectTypes")
            {
                return GetView650();
            }

            if (extentName == "NKDC.Linestrings")
            {
                return GetView651();
            }

            if (extentName == "NKDC.ProjectOffers")
            {
                return GetView652();
            }

            if (extentName == "NKDC.ProjectPledges")
            {
                return GetView653();
            }

            if (extentName == "NKDC.ProjectPledgeAddendums")
            {
                return GetView654();
            }

            if (extentName == "NKDC.DataDatas")
            {
                return GetView655();
            }

            if (extentName == "NKDC.GraphDataFileDatas")
            {
                return GetView656();
            }

            if (extentName == "NKDC.GraphDataLocations")
            {
                return GetView657();
            }

            if (extentName == "NKDC.GraphDataGroups")
            {
                return GetView658();
            }

            if (extentName == "NKDC.DictionaryAlterationJointTypes")
            {
                return GetView659();
            }

            if (extentName == "NKDC.DictionaryBedDevelopments")
            {
                return GetView660();
            }

            if (extentName == "NKDC.DictionaryFriabilityTypes")
            {
                return GetView661();
            }

            if (extentName == "NKDC.DictionaryStructureSets")
            {
                return GetView662();
            }

            if (extentName == "NKDC.Forms")
            {
                return GetView663();
            }

            if (extentName == "NKDC.FormDatas")
            {
                return GetView664();
            }

            if (extentName == "NKDC.GraphDataHistories")
            {
                return GetView665();
            }

            if (extentName == "NKDC.Precondition")
            {
                return GetView666();
            }

            if (extentName == "NKDC.DictionaryTriggerType")
            {
                return GetView667();
            }

            if (extentName == "NKDC.GraphDataRelationConditions")
            {
                return GetView668();
            }

            if (extentName == "NKDC.ProjectDatas")
            {
                return GetView669();
            }

            if (extentName == "NKDC.ProjectDataTemplates")
            {
                return GetView670();
            }

            if (extentName == "NKDC.ProjectPlanTaskResponseEvents")
            {
                return GetView671();
            }

            if (extentName == "NKDC.Triggers")
            {
                return GetView672();
            }

            if (extentName == "NKDC.DictionaryRunStateTypes")
            {
                return GetView673();
            }

            if (extentName == "NKDC.WorkflowInstances")
            {
                return GetView674();
            }

            if (extentName == "NKDC.WorkflowInstanceDatas")
            {
                return GetView675();
            }

            if (extentName == "NKDC.TriggerGraphs")
            {
                return GetView676();
            }

            if (extentName == "NKDC.SupplierDiscounts")
            {
                return GetView677();
            }

            if (extentName == "NKDC.Notifications")
            {
                return GetView678();
            }

            if (extentName == "NKDC.NotificationDatas")
            {
                return GetView679();
            }

            if (extentName == "NKDC.NotificationDevices")
            {
                return GetView680();
            }

            if (extentName == "NKDC.aspnet_UsersInRoles")
            {
                return GetView681();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_SchemaVersions")
            {
                return GetView682();
            }

            if (extentName == "NKDC.SchemaVersions")
            {
                return GetView683();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.aspnet_WebEvent_Events")
            {
                return GetView684();
            }

            if (extentName == "NKDC.WebEvent_Events")
            {
                return GetView685();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.sysdiagrams")
            {
                return GetView686();
            }

            if (extentName == "NKDC.sysdiagrams")
            {
                return GetView687();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_CompanyServer")
            {
                return GetView688();
            }

            if (extentName == "NKDC.CompanyServers")
            {
                return GetView689();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LicenseAssetModelPart")
            {
                return GetView690();
            }

            if (extentName == "NKDC.LicenseAssetModelParts")
            {
                return GetView691();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_LicenseHistory")
            {
                return GetView692();
            }

            if (extentName == "NKDC.LicenseHistories")
            {
                return GetView693();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_MetaData")
            {
                return GetView694();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_MetaDataRelation")
            {
                return GetView695();
            }

            if (extentName == "NKDC.MetaDatas")
            {
                return GetView696();
            }

            if (extentName == "NKDC.MetaDataRelations")
            {
                return GetView697();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_PrivateData")
            {
                return GetView698();
            }

            if (extentName == "NKDC.PrivateDatas")
            {
                return GetView699();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_ServerApplication")
            {
                return GetView700();
            }

            if (extentName == "NKDC.ServerApplications")
            {
                return GetView701();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_Usage")
            {
                return GetView702();
            }

            if (extentName == "NKDC.Usages")
            {
                return GetView703();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_UserData")
            {
                return GetView704();
            }

            if (extentName == "NKDC.UserDatas")
            {
                return GetView705();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.DefinitionIdentityTable")
            {
                return GetView706();
            }

            if (extentName == "NKDC.DefinitionIdentityTables")
            {
                return GetView707();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.IdentityOwnerTable")
            {
                return GetView708();
            }

            if (extentName == "NKDC.IdentityOwnerTables")
            {
                return GetView709();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.InstanceMetadataChangesTable")
            {
                return GetView710();
            }

            if (extentName == "NKDC.InstanceMetadataChangesTables")
            {
                return GetView711();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.InstancePromotedPropertiesTable")
            {
                return GetView712();
            }

            if (extentName == "NKDC.InstancePromotedPropertiesTables")
            {
                return GetView713();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.InstancesTable")
            {
                return GetView714();
            }

            if (extentName == "NKDC.InstancesTables")
            {
                return GetView715();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.KeysTable")
            {
                return GetView716();
            }

            if (extentName == "NKDC.KeysTables")
            {
                return GetView717();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.LockOwnersTable")
            {
                return GetView718();
            }

            if (extentName == "NKDC.LockOwnersTables")
            {
                return GetView719();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.RunnableInstancesTable")
            {
                return GetView720();
            }

            if (extentName == "NKDC.RunnableInstancesTables")
            {
                return GetView721();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.ServiceDeploymentsTable")
            {
                return GetView722();
            }

            if (extentName == "NKDC.ServiceDeploymentsTables")
            {
                return GetView723();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Applications")
            {
                return GetView724();
            }

            if (extentName == "NKDC.ApplicationsViews")
            {
                return GetView725();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_MembershipUsers")
            {
                return GetView726();
            }

            if (extentName == "NKDC.MembershipUsersViews")
            {
                return GetView727();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Profiles")
            {
                return GetView728();
            }

            if (extentName == "NKDC.ProfilesViews")
            {
                return GetView729();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Roles")
            {
                return GetView730();
            }

            if (extentName == "NKDC.RolesViews")
            {
                return GetView731();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Users")
            {
                return GetView732();
            }

            if (extentName == "NKDC.UsersViews")
            {
                return GetView733();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_UsersInRoles")
            {
                return GetView734();
            }

            if (extentName == "NKDC.UsersInRolesViews")
            {
                return GetView735();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Paths")
            {
                return GetView736();
            }

            if (extentName == "NKDC.WebPartState_PathsView")
            {
                return GetView737();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Shared")
            {
                return GetView738();
            }

            if (extentName == "NKDC.WebPartState_SharedView")
            {
                return GetView739();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_User")
            {
                return GetView740();
            }

            if (extentName == "NKDC.WebPartState_UserView")
            {
                return GetView741();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_Company")
            {
                return GetView742();
            }

            if (extentName == "NKDC.CompanyViews")
            {
                return GetView743();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryHeader")
            {
                return GetView744();
            }

            if (extentName == "NKDC.DictionaryHeaderViews")
            {
                return GetView745();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_ExperienceBasicView")
            {
                return GetView746();
            }

            if (extentName == "NKDC.ExperienceBasicViews")
            {
                return GetView747();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_License")
            {
                return GetView748();
            }

            if (extentName == "NKDC.LicenseViews")
            {
                return GetView749();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_ModelsCurrent")
            {
                return GetView750();
            }

            if (extentName == "NKDC.ModelsCurrentViews")
            {
                return GetView751();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_ModelStatus")
            {
                return GetView752();
            }

            if (extentName == "NKDC.ModelStatusViews")
            {
                return GetView753();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectModelsAwaitingAuthorisation")
            {
                return GetView754();
            }

            if (extentName == "NKDC.ProjectModelsAwaitingAuthorisationViews")
            {
                return GetView755();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectStatus")
            {
                return GetView756();
            }

            if (extentName == "NKDC.ProjectStatusViews")
            {
                return GetView757();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_SurveyViews")
            {
                return GetView758();
            }

            if (extentName == "NKDC.SurveyViewsViews")
            {
                return GetView759();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_WorkType")
            {
                return GetView760();
            }

            if (extentName == "NKDC.WorkTypeViews")
            {
                return GetView761();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.InstancePromotedProperties")
            {
                return GetView762();
            }

            if (extentName == "NKDC.InstancePromotedProperties")
            {
                return GetView763();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.Instances")
            {
                return GetView764();
            }

            if (extentName == "NKDC.Instances")
            {
                return GetView765();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.ServiceDeployments")
            {
                return GetView766();
            }

            if (extentName == "NKDC.ServiceDeployments")
            {
                return GetView767();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.M_VW_DictionaryCompositeCoal")
            {
                return GetView768();
            }

            if (extentName == "NKDC.DictionaryCompositeCoalViews")
            {
                return GetView769();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryCompositeStandard")
            {
                return GetView770();
            }

            if (extentName == "NKDC.DictionaryCompositeStandardViews")
            {
                return GetView771();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_ModelPartInfo")
            {
                return GetView772();
            }

            if (extentName == "NKDC.ModelPartInfoViews")
            {
                return GetView773();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_StatisticData")
            {
                return GetView774();
            }

            if (extentName == "NKDC.StatisticDatas")
            {
                return GetView775();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_XMLData")
            {
                return GetView776();
            }

            if (extentName == "NKDC.XMLs")
            {
                return GetView777();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_VW_PaymentProviderProductDetails")
            {
                return GetView778();
            }

            if (extentName == "NKDC.PaymentProviderProductDetailsViews")
            {
                return GetView779();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.X_VW_AssayGroupSample")
            {
                return GetView780();
            }

            if (extentName == "NKDC.AssayGroupSampleViews")
            {
                return GetView781();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationUserRoles")
            {
                return GetView782();
            }

            if (extentName == "NKDC.ApplicationUserRoles")
            {
                return GetView783();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_VW_ContactEmails")
            {
                return GetView784();
            }

            if (extentName == "NKDC.ContactEmailsViews")
            {
                return GetView785();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.ModuleInfo")
            {
                return GetView786();
            }

            if (extentName == "NKDC.ModuleInfoes")
            {
                return GetView787();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.ReportData")
            {
                return GetView788();
            }

            if (extentName == "NKDC.ReportDatas")
            {
                return GetView789();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.T_Dictionary")
            {
                return GetView790();
            }

            if (extentName == "NKDC.Dictionaries")
            {
                return GetView791();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.XPObjectType")
            {
                return GetView792();
            }

            if (extentName == "NKDC.XPObjectTypes")
            {
                return GetView793();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationContacts")
            {
                return GetView794();
            }

            if (extentName == "NKDC.ApplicationContactsViews")
            {
                return GetView795();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_VW_SupplyItemDetail")
            {
                return GetView796();
            }

            if (extentName == "NKDC.SupplyItemDetailViews")
            {
                return GetView797();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_TranslationData")
            {
                return GetView798();
            }

            if (extentName == "NKDC.TranslationData")
            {
                return GetView799();
            }

            if (extentName == "NKDModuleBusinessObjectsStoreContainer.E_VW_CustomerSubscriptions")
            {
                return GetView800();
            }

            if (extentName == "NKDC.CustomerSubscriptions")
            {
                return GetView801();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_Applications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_Applications
        [NKD.Module.BusinessObjects.Store.aspnet_Applications](T1.[aspnet_Applications.ApplicationName], T1.[aspnet_Applications.LoweredApplicationName], T1.[aspnet_Applications.ApplicationId], T1.[aspnet_Applications.Description])
    FROM (
        SELECT 
            T.ApplicationName AS [aspnet_Applications.ApplicationName], 
            T.LoweredApplicationName AS [aspnet_Applications.LoweredApplicationName], 
            T.ApplicationId AS [aspnet_Applications.ApplicationId], 
            T.Description AS [aspnet_Applications.Description], 
            True AS _from0
        FROM NKDC.Applications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_Membership.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_Membership
        [NKD.Module.BusinessObjects.Store.aspnet_Membership](T1.[aspnet_Membership.ApplicationId], T1.[aspnet_Membership.UserId], T1.[aspnet_Membership.Password], T1.[aspnet_Membership.PasswordFormat], T1.[aspnet_Membership.PasswordSalt], T1.[aspnet_Membership.MobilePIN], T1.[aspnet_Membership.Email], T1.[aspnet_Membership.LoweredEmail], T1.[aspnet_Membership.PasswordQuestion], T1.[aspnet_Membership.PasswordAnswer], T1.[aspnet_Membership.IsApproved], T1.[aspnet_Membership.IsLockedOut], T1.[aspnet_Membership.CreateDate], T1.[aspnet_Membership.LastLoginDate], T1.[aspnet_Membership.LastPasswordChangedDate], T1.[aspnet_Membership.LastLockoutDate], T1.[aspnet_Membership.FailedPasswordAttemptCount], T1.[aspnet_Membership.FailedPasswordAttemptWindowStart], T1.[aspnet_Membership.FailedPasswordAnswerAttemptCount], T1.[aspnet_Membership.FailedPasswordAnswerAttemptWindowStart], T1.[aspnet_Membership.Comment])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Membership.ApplicationId], 
            T.UserId AS [aspnet_Membership.UserId], 
            T.Password AS [aspnet_Membership.Password], 
            T.PasswordFormat AS [aspnet_Membership.PasswordFormat], 
            T.PasswordSalt AS [aspnet_Membership.PasswordSalt], 
            T.MobilePIN AS [aspnet_Membership.MobilePIN], 
            T.Email AS [aspnet_Membership.Email], 
            T.LoweredEmail AS [aspnet_Membership.LoweredEmail], 
            T.PasswordQuestion AS [aspnet_Membership.PasswordQuestion], 
            T.PasswordAnswer AS [aspnet_Membership.PasswordAnswer], 
            T.IsApproved AS [aspnet_Membership.IsApproved], 
            T.IsLockedOut AS [aspnet_Membership.IsLockedOut], 
            T.CreateDate AS [aspnet_Membership.CreateDate], 
            T.LastLoginDate AS [aspnet_Membership.LastLoginDate], 
            T.LastPasswordChangedDate AS [aspnet_Membership.LastPasswordChangedDate], 
            T.LastLockoutDate AS [aspnet_Membership.LastLockoutDate], 
            T.FailedPasswordAttemptCount AS [aspnet_Membership.FailedPasswordAttemptCount], 
            T.FailedPasswordAttemptWindowStart AS [aspnet_Membership.FailedPasswordAttemptWindowStart], 
            T.FailedPasswordAnswerAttemptCount AS [aspnet_Membership.FailedPasswordAnswerAttemptCount], 
            T.FailedPasswordAnswerAttemptWindowStart AS [aspnet_Membership.FailedPasswordAnswerAttemptWindowStart], 
            T.Comment AS [aspnet_Membership.Comment], 
            True AS _from0
        FROM NKDC.Memberships AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_Paths.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_Paths
        [NKD.Module.BusinessObjects.Store.aspnet_Paths](T1.[aspnet_Paths.ApplicationId], T1.[aspnet_Paths.PathId], T1.[aspnet_Paths.Path], T1.[aspnet_Paths.LoweredPath])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Paths.ApplicationId], 
            T.PathId AS [aspnet_Paths.PathId], 
            T.Path AS [aspnet_Paths.Path], 
            T.LoweredPath AS [aspnet_Paths.LoweredPath], 
            True AS _from0
        FROM NKDC.Paths AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationAllUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_PersonalizationAllUsers
        [NKD.Module.BusinessObjects.Store.aspnet_PersonalizationAllUsers](T1.[aspnet_PersonalizationAllUsers.PathId], T1.[aspnet_PersonalizationAllUsers.PageSettings], T1.[aspnet_PersonalizationAllUsers.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [aspnet_PersonalizationAllUsers.PathId], 
            T.PageSettings AS [aspnet_PersonalizationAllUsers.PageSettings], 
            T.LastUpdatedDate AS [aspnet_PersonalizationAllUsers.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.PersonalizationAllUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationPerUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_PersonalizationPerUser
        [NKD.Module.BusinessObjects.Store.aspnet_PersonalizationPerUser](T1.[aspnet_PersonalizationPerUser.Id], T1.[aspnet_PersonalizationPerUser.PathId], T1.[aspnet_PersonalizationPerUser.UserId], T1.[aspnet_PersonalizationPerUser.PageSettings], T1.[aspnet_PersonalizationPerUser.LastUpdatedDate])
    FROM (
        SELECT 
            T.Id AS [aspnet_PersonalizationPerUser.Id], 
            T.PathId AS [aspnet_PersonalizationPerUser.PathId], 
            T.UserId AS [aspnet_PersonalizationPerUser.UserId], 
            T.PageSettings AS [aspnet_PersonalizationPerUser.PageSettings], 
            T.LastUpdatedDate AS [aspnet_PersonalizationPerUser.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.PersonalizationPerUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_Profile.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_Profile
        [NKD.Module.BusinessObjects.Store.aspnet_Profile](T1.[aspnet_Profile.UserId], T1.[aspnet_Profile.PropertyNames], T1.[aspnet_Profile.PropertyValuesString], T1.[aspnet_Profile.PropertyValuesBinary], T1.[aspnet_Profile.LastUpdatedDate])
    FROM (
        SELECT 
            T.UserId AS [aspnet_Profile.UserId], 
            T.PropertyNames AS [aspnet_Profile.PropertyNames], 
            T.PropertyValuesString AS [aspnet_Profile.PropertyValuesString], 
            T.PropertyValuesBinary AS [aspnet_Profile.PropertyValuesBinary], 
            T.LastUpdatedDate AS [aspnet_Profile.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.Profiles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_Roles
        [NKD.Module.BusinessObjects.Store.aspnet_Roles](T1.[aspnet_Roles.ApplicationId], T1.[aspnet_Roles.RoleId], T1.[aspnet_Roles.RoleName], T1.[aspnet_Roles.LoweredRoleName], T1.[aspnet_Roles.Description])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Roles.ApplicationId], 
            T.RoleId AS [aspnet_Roles.RoleId], 
            T.RoleName AS [aspnet_Roles.RoleName], 
            T.LoweredRoleName AS [aspnet_Roles.LoweredRoleName], 
            T.Description AS [aspnet_Roles.Description], 
            True AS _from0
        FROM NKDC.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_Users
        [NKD.Module.BusinessObjects.Store.aspnet_Users](T1.[aspnet_Users.ApplicationId], T1.[aspnet_Users.UserId], T1.[aspnet_Users.UserName], T1.[aspnet_Users.LoweredUserName], T1.[aspnet_Users.MobileAlias], T1.[aspnet_Users.IsAnonymous], T1.[aspnet_Users.LastActivityDate])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Users.ApplicationId], 
            T.UserId AS [aspnet_Users.UserId], 
            T.UserName AS [aspnet_Users.UserName], 
            T.LoweredUserName AS [aspnet_Users.LoweredUserName], 
            T.MobileAlias AS [aspnet_Users.MobileAlias], 
            T.IsAnonymous AS [aspnet_Users.IsAnonymous], 
            T.LastActivityDate AS [aspnet_Users.LastActivityDate], 
            True AS _from0
        FROM NKDC.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Credit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Credit
        [NKD.Module.BusinessObjects.Store.E_Credit](T1.[E_Credit.CreditID], T1.[E_Credit.SupplyID], T1.[E_Credit.InvoiceID], T1.[E_Credit.InvoiceLineID], T1.[E_Credit.IsCreditNote], T1.[E_Credit.IsRefund], T1.[E_Credit.OriginalCredit], T1.[E_Credit.CurrencyID], T1.[E_Credit.CreditAmount], T1.[E_Credit.Version], T1.[E_Credit.VersionAntecedentID], T1.[E_Credit.VersionCertainty], T1.[E_Credit.VersionWorkflowInstanceID], T1.[E_Credit.VersionUpdatedBy], T1.[E_Credit.VersionDeletedBy], T1.[E_Credit.VersionOwnerContactID], T1.[E_Credit.VersionOwnerCompanyID], T1.[E_Credit.VersionUpdated])
    FROM (
        SELECT 
            T.CreditID AS [E_Credit.CreditID], 
            T.SupplyID AS [E_Credit.SupplyID], 
            T.InvoiceID AS [E_Credit.InvoiceID], 
            T.InvoiceLineID AS [E_Credit.InvoiceLineID], 
            T.IsCreditNote AS [E_Credit.IsCreditNote], 
            T.IsRefund AS [E_Credit.IsRefund], 
            T.OriginalCredit AS [E_Credit.OriginalCredit], 
            T.CurrencyID AS [E_Credit.CurrencyID], 
            T.CreditAmount AS [E_Credit.CreditAmount], 
            T.Version AS [E_Credit.Version], 
            T.VersionAntecedentID AS [E_Credit.VersionAntecedentID], 
            T.VersionCertainty AS [E_Credit.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Credit.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Credit.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Credit.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Credit.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Credit.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Credit.VersionUpdated], 
            True AS _from0
        FROM NKDC.Credits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Currency.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Currency
        [NKD.Module.BusinessObjects.Store.E_Currency](T1.[E_Currency.CurrencyID], T1.[E_Currency.CountryID], T1.[E_Currency.PrefixCharacters], T1.[E_Currency.PostfixCharacters], T1.[E_Currency.EquivalentMultiplier], T1.[E_Currency.BuyMultiplier], T1.[E_Currency.SellMultiplier], T1.[E_Currency.Version], T1.[E_Currency.VersionAntecedentID], T1.[E_Currency.VersionCertainty], T1.[E_Currency.VersionWorkflowInstanceID], T1.[E_Currency.VersionUpdatedBy], T1.[E_Currency.VersionDeletedBy], T1.[E_Currency.VersionOwnerContactID], T1.[E_Currency.VersionOwnerCompanyID], T1.[E_Currency.VersionUpdated])
    FROM (
        SELECT 
            T.CurrencyID AS [E_Currency.CurrencyID], 
            T.CountryID AS [E_Currency.CountryID], 
            T.PrefixCharacters AS [E_Currency.PrefixCharacters], 
            T.PostfixCharacters AS [E_Currency.PostfixCharacters], 
            T.EquivalentMultiplier AS [E_Currency.EquivalentMultiplier], 
            T.BuyMultiplier AS [E_Currency.BuyMultiplier], 
            T.SellMultiplier AS [E_Currency.SellMultiplier], 
            T.Version AS [E_Currency.Version], 
            T.VersionAntecedentID AS [E_Currency.VersionAntecedentID], 
            T.VersionCertainty AS [E_Currency.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Currency.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Currency.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Currency.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Currency.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Currency.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Currency.VersionUpdated], 
            True AS _from0
        FROM NKDC.Currencies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryTax.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryTax
        [NKD.Module.BusinessObjects.Store.E_DictionaryTax](T1.[E_DictionaryTax.TaxID], T1.[E_DictionaryTax.TaxName], T1.[E_DictionaryTax.TaxRate], T1.[E_DictionaryTax.TaxRateUnitID], T1.[E_DictionaryTax.CountryID], T1.[E_DictionaryTax.CountryStateID], T1.[E_DictionaryTax.ProvinceID], T1.[E_DictionaryTax.ApplicableFrom], T1.[E_DictionaryTax.ApplicableUntil], T1.[E_DictionaryTax.BracketMinimum], T1.[E_DictionaryTax.BracketMaximum], T1.[E_DictionaryTax.Version], T1.[E_DictionaryTax.VersionAntecedentID], T1.[E_DictionaryTax.VersionCertainty], T1.[E_DictionaryTax.VersionWorkflowInstanceID], T1.[E_DictionaryTax.VersionUpdatedBy], T1.[E_DictionaryTax.VersionDeletedBy], T1.[E_DictionaryTax.VersionOwnerContactID], T1.[E_DictionaryTax.VersionOwnerCompanyID], T1.[E_DictionaryTax.VersionUpdated])
    FROM (
        SELECT 
            T.TaxID AS [E_DictionaryTax.TaxID], 
            T.TaxName AS [E_DictionaryTax.TaxName], 
            T.TaxRate AS [E_DictionaryTax.TaxRate], 
            T.TaxRateUnitID AS [E_DictionaryTax.TaxRateUnitID], 
            T.CountryID AS [E_DictionaryTax.CountryID], 
            T.CountryStateID AS [E_DictionaryTax.CountryStateID], 
            T.ProvinceID AS [E_DictionaryTax.ProvinceID], 
            T.ApplicableFrom AS [E_DictionaryTax.ApplicableFrom], 
            T.ApplicableUntil AS [E_DictionaryTax.ApplicableUntil], 
            T.BracketMinimum AS [E_DictionaryTax.BracketMinimum], 
            T.BracketMaximum AS [E_DictionaryTax.BracketMaximum], 
            T.Version AS [E_DictionaryTax.Version], 
            T.VersionAntecedentID AS [E_DictionaryTax.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryTax.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryTax.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryTax.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryTax.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryTax.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryTax.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryTax.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryTaxes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Invoice.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Invoice
        [NKD.Module.BusinessObjects.Store.E_Invoice](T1.[E_Invoice.InvoiceID], T1.[E_Invoice.SupplyID], T1.[E_Invoice.Sequence], T1.[E_Invoice.SupplierContactID], T1.[E_Invoice.SupplierCompanyID], T1.[E_Invoice.SupplierAddressID], T1.[E_Invoice.SupplierAccountID], T1.[E_Invoice.SupplierReferenceNumber], T1.[E_Invoice.CustomerContactID], T1.[E_Invoice.CustomerCompanyID], T1.[E_Invoice.CustomerAddressID], T1.[E_Invoice.CustomerAccountID], T1.[E_Invoice.CustomerReferenceNumber], T1.[E_Invoice.FreightTax], T1.[E_Invoice.FreightAmount], T1.[E_Invoice.DiscountIncludesFreight], T1.[E_Invoice.DiscountAllFreight], T1.[E_Invoice.DiscountAmount], T1.[E_Invoice.TaxAmount], T1.[E_Invoice.OriginalTotal], T1.[E_Invoice.CurrencyID], T1.[E_Invoice.Total], T1.[E_Invoice.Dated], T1.[E_Invoice.Communicated], T1.[E_Invoice.Version], T1.[E_Invoice.VersionAntecedentID], T1.[E_Invoice.VersionCertainty], T1.[E_Invoice.VersionWorkflowInstanceID], T1.[E_Invoice.VersionUpdatedBy], T1.[E_Invoice.VersionDeletedBy], T1.[E_Invoice.VersionOwnerContactID], T1.[E_Invoice.VersionOwnerCompanyID], T1.[E_Invoice.VersionUpdated])
    FROM (
        SELECT 
            T.InvoiceID AS [E_Invoice.InvoiceID], 
            T.SupplyID AS [E_Invoice.SupplyID], 
            T.Sequence AS [E_Invoice.Sequence], 
            T.SupplierContactID AS [E_Invoice.SupplierContactID], 
            T.SupplierCompanyID AS [E_Invoice.SupplierCompanyID], 
            T.SupplierAddressID AS [E_Invoice.SupplierAddressID], 
            T.SupplierAccountID AS [E_Invoice.SupplierAccountID], 
            T.SupplierReferenceNumber AS [E_Invoice.SupplierReferenceNumber], 
            T.CustomerContactID AS [E_Invoice.CustomerContactID], 
            T.CustomerCompanyID AS [E_Invoice.CustomerCompanyID], 
            T.CustomerAddressID AS [E_Invoice.CustomerAddressID], 
            T.CustomerAccountID AS [E_Invoice.CustomerAccountID], 
            T.CustomerReferenceNumber AS [E_Invoice.CustomerReferenceNumber], 
            T.FreightTax AS [E_Invoice.FreightTax], 
            T.FreightAmount AS [E_Invoice.FreightAmount], 
            T.DiscountIncludesFreight AS [E_Invoice.DiscountIncludesFreight], 
            T.DiscountAllFreight AS [E_Invoice.DiscountAllFreight], 
            T.DiscountAmount AS [E_Invoice.DiscountAmount], 
            T.TaxAmount AS [E_Invoice.TaxAmount], 
            T.OriginalTotal AS [E_Invoice.OriginalTotal], 
            T.CurrencyID AS [E_Invoice.CurrencyID], 
            T.Total AS [E_Invoice.Total], 
            T.Dated AS [E_Invoice.Dated], 
            T.Communicated AS [E_Invoice.Communicated], 
            T.Version AS [E_Invoice.Version], 
            T.VersionAntecedentID AS [E_Invoice.VersionAntecedentID], 
            T.VersionCertainty AS [E_Invoice.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Invoice.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Invoice.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Invoice.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Invoice.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Invoice.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Invoice.VersionUpdated], 
            True AS _from0
        FROM NKDC.Invoices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_InvoiceLine.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_InvoiceLine
        [NKD.Module.BusinessObjects.Store.E_InvoiceLine](T1.[E_InvoiceLine.InvoiceLineID], T1.[E_InvoiceLine.InvoiceID], T1.[E_InvoiceLine.Sequence], T1.[E_InvoiceLine.SupplyItemID], T1.[E_InvoiceLine.ReferenceType], T1.[E_InvoiceLine.ReferenceID], T1.[E_InvoiceLine.Description], T1.[E_InvoiceLine.Quantity], T1.[E_InvoiceLine.TaxID], T1.[E_InvoiceLine.Tax], T1.[E_InvoiceLine.DiscountAmount], T1.[E_InvoiceLine.OriginalSubtotal], T1.[E_InvoiceLine.CurrencyID], T1.[E_InvoiceLine.Subtotal], T1.[E_InvoiceLine.Version], T1.[E_InvoiceLine.VersionAntecedentID], T1.[E_InvoiceLine.VersionCertainty], T1.[E_InvoiceLine.VersionWorkflowInstanceID], T1.[E_InvoiceLine.VersionUpdatedBy], T1.[E_InvoiceLine.VersionDeletedBy], T1.[E_InvoiceLine.VersionOwnerContactID], T1.[E_InvoiceLine.VersionOwnerCompanyID], T1.[E_InvoiceLine.VersionUpdated])
    FROM (
        SELECT 
            T.InvoiceLineID AS [E_InvoiceLine.InvoiceLineID], 
            T.InvoiceID AS [E_InvoiceLine.InvoiceID], 
            T.Sequence AS [E_InvoiceLine.Sequence], 
            T.SupplyItemID AS [E_InvoiceLine.SupplyItemID], 
            T.ReferenceType AS [E_InvoiceLine.ReferenceType], 
            T.ReferenceID AS [E_InvoiceLine.ReferenceID], 
            T.Description AS [E_InvoiceLine.Description], 
            T.Quantity AS [E_InvoiceLine.Quantity], 
            T.TaxID AS [E_InvoiceLine.TaxID], 
            T.Tax AS [E_InvoiceLine.Tax], 
            T.DiscountAmount AS [E_InvoiceLine.DiscountAmount], 
            T.OriginalSubtotal AS [E_InvoiceLine.OriginalSubtotal], 
            T.CurrencyID AS [E_InvoiceLine.CurrencyID], 
            T.Subtotal AS [E_InvoiceLine.Subtotal], 
            T.Version AS [E_InvoiceLine.Version], 
            T.VersionAntecedentID AS [E_InvoiceLine.VersionAntecedentID], 
            T.VersionCertainty AS [E_InvoiceLine.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_InvoiceLine.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_InvoiceLine.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_InvoiceLine.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_InvoiceLine.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_InvoiceLine.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_InvoiceLine.VersionUpdated], 
            True AS _from0
        FROM NKDC.InvoiceLines AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Journal.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Journal
        [NKD.Module.BusinessObjects.Store.E_Journal](T1.[E_Journal.JournalID], T1.[E_Journal.ReferenceType], T1.[E_Journal.ReferenceID], T1.[E_Journal.ReferenceDate], T1.[E_Journal.AccountID], T1.[E_Journal.OriginalAmount], T1.[E_Journal.CurrencyID], T1.[E_Journal.Amount], T1.[E_Journal.Version], T1.[E_Journal.VersionAntecedentID], T1.[E_Journal.VersionCertainty], T1.[E_Journal.VersionWorkflowInstanceID], T1.[E_Journal.VersionUpdatedBy], T1.[E_Journal.VersionDeletedBy], T1.[E_Journal.VersionOwnerContactID], T1.[E_Journal.VersionOwnerCompanyID], T1.[E_Journal.VersionUpdated])
    FROM (
        SELECT 
            T.JournalID AS [E_Journal.JournalID], 
            T.ReferenceType AS [E_Journal.ReferenceType], 
            T.ReferenceID AS [E_Journal.ReferenceID], 
            T.ReferenceDate AS [E_Journal.ReferenceDate], 
            T.AccountID AS [E_Journal.AccountID], 
            T.OriginalAmount AS [E_Journal.OriginalAmount], 
            T.CurrencyID AS [E_Journal.CurrencyID], 
            T.Amount AS [E_Journal.Amount], 
            T.Version AS [E_Journal.Version], 
            T.VersionAntecedentID AS [E_Journal.VersionAntecedentID], 
            T.VersionCertainty AS [E_Journal.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Journal.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Journal.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Journal.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Journal.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Journal.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Journal.VersionUpdated], 
            True AS _from0
        FROM NKDC.Journals AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Payment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Payment
        [NKD.Module.BusinessObjects.Store.E_Payment](T1.[E_Payment.PaymentID], T1.[E_Payment.SupplierAccountID], T1.[E_Payment.SupplierContactID], T1.[E_Payment.CustomerAccountID], T1.[E_Payment.CustomerContactID], T1.[E_Payment.OriginalAmount], T1.[E_Payment.CurrencyID], T1.[E_Payment.Amount], T1.[E_Payment.InternalReferenceTableType], T1.[E_Payment.InternalReferenceID], T1.[E_Payment.InternalReferenceName], T1.[E_Payment.ExternalProviderType], T1.[E_Payment.ExternalReferenceName], T1.[E_Payment.Paid], T1.[E_Payment.Version], T1.[E_Payment.VersionAntecedentID], T1.[E_Payment.VersionCertainty], T1.[E_Payment.VersionWorkflowInstanceID], T1.[E_Payment.VersionUpdatedBy], T1.[E_Payment.VersionDeletedBy], T1.[E_Payment.VersionOwnerContactID], T1.[E_Payment.VersionOwnerCompanyID], T1.[E_Payment.VersionUpdated])
    FROM (
        SELECT 
            T.PaymentID AS [E_Payment.PaymentID], 
            T.SupplierAccountID AS [E_Payment.SupplierAccountID], 
            T.SupplierContactID AS [E_Payment.SupplierContactID], 
            T.CustomerAccountID AS [E_Payment.CustomerAccountID], 
            T.CustomerContactID AS [E_Payment.CustomerContactID], 
            T.OriginalAmount AS [E_Payment.OriginalAmount], 
            T.CurrencyID AS [E_Payment.CurrencyID], 
            T.Amount AS [E_Payment.Amount], 
            T.InternalReferenceTableType AS [E_Payment.InternalReferenceTableType], 
            T.InternalReferenceID AS [E_Payment.InternalReferenceID], 
            T.InternalReferenceName AS [E_Payment.InternalReferenceName], 
            T.ExternalProviderType AS [E_Payment.ExternalProviderType], 
            T.ExternalReferenceName AS [E_Payment.ExternalReferenceName], 
            T.Paid AS [E_Payment.Paid], 
            T.Version AS [E_Payment.Version], 
            T.VersionAntecedentID AS [E_Payment.VersionAntecedentID], 
            T.VersionCertainty AS [E_Payment.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Payment.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Payment.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Payment.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Payment.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Payment.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Payment.VersionUpdated], 
            True AS _from0
        FROM NKDC.Payments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_PurchaseOrder.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_PurchaseOrder
        [NKD.Module.BusinessObjects.Store.E_PurchaseOrder](T1.[E_PurchaseOrder.PurchaseOrderID], T1.[E_PurchaseOrder.ParentPurchaseOrderID], T1.[E_PurchaseOrder.PurchaseName], T1.[E_PurchaseOrder.ReferenceCode], T1.[E_PurchaseOrder.ReferenceSystem], T1.[E_PurchaseOrder.Sequence], T1.[E_PurchaseOrder.OriginalSubtotal], T1.[E_PurchaseOrder.CurrencyID], T1.[E_PurchaseOrder.Subtotal], T1.[E_PurchaseOrder.Ordered], T1.[E_PurchaseOrder.OrderStatusID], T1.[E_PurchaseOrder.ProjectID], T1.[E_PurchaseOrder.CustomerCompanyID], T1.[E_PurchaseOrder.CustomerContactID], T1.[E_PurchaseOrder.CustomerAccountID], T1.[E_PurchaseOrder.SupplierCompanyID], T1.[E_PurchaseOrder.SupplierContactID], T1.[E_PurchaseOrder.SupplierAccountID], T1.[E_PurchaseOrder.Version], T1.[E_PurchaseOrder.VersionAntecedentID], T1.[E_PurchaseOrder.VersionCertainty], T1.[E_PurchaseOrder.VersionWorkflowInstanceID], T1.[E_PurchaseOrder.VersionUpdatedBy], T1.[E_PurchaseOrder.VersionDeletedBy], T1.[E_PurchaseOrder.VersionOwnerContactID], T1.[E_PurchaseOrder.VersionOwnerCompanyID], T1.[E_PurchaseOrder.VersionUpdated])
    FROM (
        SELECT 
            T.PurchaseOrderID AS [E_PurchaseOrder.PurchaseOrderID], 
            T.ParentPurchaseOrderID AS [E_PurchaseOrder.ParentPurchaseOrderID], 
            T.PurchaseName AS [E_PurchaseOrder.PurchaseName], 
            T.ReferenceCode AS [E_PurchaseOrder.ReferenceCode], 
            T.ReferenceSystem AS [E_PurchaseOrder.ReferenceSystem], 
            T.Sequence AS [E_PurchaseOrder.Sequence], 
            T.OriginalSubtotal AS [E_PurchaseOrder.OriginalSubtotal], 
            T.CurrencyID AS [E_PurchaseOrder.CurrencyID], 
            T.Subtotal AS [E_PurchaseOrder.Subtotal], 
            T.Ordered AS [E_PurchaseOrder.Ordered], 
            T.OrderStatusID AS [E_PurchaseOrder.OrderStatusID], 
            T.ProjectID AS [E_PurchaseOrder.ProjectID], 
            T.CustomerCompanyID AS [E_PurchaseOrder.CustomerCompanyID], 
            T.CustomerContactID AS [E_PurchaseOrder.CustomerContactID], 
            T.CustomerAccountID AS [E_PurchaseOrder.CustomerAccountID], 
            T.SupplierCompanyID AS [E_PurchaseOrder.SupplierCompanyID], 
            T.SupplierContactID AS [E_PurchaseOrder.SupplierContactID], 
            T.SupplierAccountID AS [E_PurchaseOrder.SupplierAccountID], 
            T.Version AS [E_PurchaseOrder.Version], 
            T.VersionAntecedentID AS [E_PurchaseOrder.VersionAntecedentID], 
            T.VersionCertainty AS [E_PurchaseOrder.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_PurchaseOrder.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_PurchaseOrder.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_PurchaseOrder.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_PurchaseOrder.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_PurchaseOrder.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_PurchaseOrder.VersionUpdated], 
            True AS _from0
        FROM NKDC.PurchaseOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Supply.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Supply
        [NKD.Module.BusinessObjects.Store.E_Supply](T1.[E_Supply.SupplyID], T1.[E_Supply.ParentSupplyID], T1.[E_Supply.ProjectID], T1.[E_Supply.Sequence], T1.[E_Supply.CustomerPurchaseOrderID], T1.[E_Supply.CustomerApprovedBy], T1.[E_Supply.SupplierPurchaseOrderID], T1.[E_Supply.SupplierApprovedBy], T1.[E_Supply.IsDraft], T1.[E_Supply.IsUnapproved], T1.[E_Supply.IsDenied], T1.[E_Supply.IsSupplied], T1.[E_Supply.IsReorderSent], T1.[E_Supply.IsPaid], T1.[E_Supply.IsFinalised], T1.[E_Supply.CurrentProjectDeliverableID], T1.[E_Supply.FinalProjectDeliverableID], T1.[E_Supply.DateOrdered], T1.[E_Supply.PurchasingNotes], T1.[E_Supply.Version], T1.[E_Supply.VersionAntecedentID], T1.[E_Supply.VersionCertainty], T1.[E_Supply.VersionWorkflowInstanceID], T1.[E_Supply.VersionUpdatedBy], T1.[E_Supply.VersionDeletedBy], T1.[E_Supply.VersionOwnerContactID], T1.[E_Supply.VersionOwnerCompanyID], T1.[E_Supply.VersionUpdated])
    FROM (
        SELECT 
            T.SupplyID AS [E_Supply.SupplyID], 
            T.ParentSupplyID AS [E_Supply.ParentSupplyID], 
            T.ProjectID AS [E_Supply.ProjectID], 
            T.Sequence AS [E_Supply.Sequence], 
            T.CustomerPurchaseOrderID AS [E_Supply.CustomerPurchaseOrderID], 
            T.CustomerApprovedBy AS [E_Supply.CustomerApprovedBy], 
            T.SupplierPurchaseOrderID AS [E_Supply.SupplierPurchaseOrderID], 
            T.SupplierApprovedBy AS [E_Supply.SupplierApprovedBy], 
            T.IsDraft AS [E_Supply.IsDraft], 
            T.IsUnapproved AS [E_Supply.IsUnapproved], 
            T.IsDenied AS [E_Supply.IsDenied], 
            T.IsSupplied AS [E_Supply.IsSupplied], 
            T.IsReorderSent AS [E_Supply.IsReorderSent], 
            T.IsPaid AS [E_Supply.IsPaid], 
            T.IsFinalised AS [E_Supply.IsFinalised], 
            T.CurrentProjectDeliverableID AS [E_Supply.CurrentProjectDeliverableID], 
            T.FinalProjectDeliverableID AS [E_Supply.FinalProjectDeliverableID], 
            T.DateOrdered AS [E_Supply.DateOrdered], 
            T.PurchasingNotes AS [E_Supply.PurchasingNotes], 
            T.Version AS [E_Supply.Version], 
            T.VersionAntecedentID AS [E_Supply.VersionAntecedentID], 
            T.VersionCertainty AS [E_Supply.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Supply.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Supply.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Supply.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Supply.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Supply.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Supply.VersionUpdated], 
            True AS _from0
        FROM NKDC.Supplies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_SupplyItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_SupplyItem
        [NKD.Module.BusinessObjects.Store.E_SupplyItem](T1.[E_SupplyItem.SupplyItemID], T1.[E_SupplyItem.SupplyID], T1.[E_SupplyItem.ModelID], T1.[E_SupplyItem.PartID], T1.[E_SupplyItem.SupplierModelID], T1.[E_SupplyItem.SupplierPartID], T1.[E_SupplyItem.WarehouseID], T1.[E_SupplyItem.ProjectPlanTaskModelID], T1.[E_SupplyItem.ProjectPlanTaskPartID], T1.[E_SupplyItem.ProjectPlanTaskResponseID], T1.[E_SupplyItem.ApplicationPaymentProviderProductID], T1.[E_SupplyItem.ApplicationPaymentProviderProductModelID], T1.[E_SupplyItem.ApplicationPaymentProviderProductPartID], T1.[E_SupplyItem.CustomerAccountID], T1.[E_SupplyItem.ModelUnitID], T1.[E_SupplyItem.LabourUnitID], T1.[E_SupplyItem.PartUnitID], T1.[E_SupplyItem.CostPerUnitModel], T1.[E_SupplyItem.CostPerUnitLabour], T1.[E_SupplyItem.CostPerUnitPart], T1.[E_SupplyItem.QuantityModel], T1.[E_SupplyItem.QuantityLabour], T1.[E_SupplyItem.QuantityPart], T1.[E_SupplyItem.CostModel], T1.[E_SupplyItem.CostLabour], T1.[E_SupplyItem.CostPart], T1.[E_SupplyItem.SubtotalModel], T1.[E_SupplyItem.SubtotalLabour], T1.[E_SupplyItem.SubtotalPart], T1.[E_SupplyItem.DiscountModel], T1.[E_SupplyItem.DiscountLabour], T1.[E_SupplyItem.DiscountPart], T1.[E_SupplyItem.DiscountAmount], T1.[E_SupplyItem.TaxModel], T1.[E_SupplyItem.TaxLabour], T1.[E_SupplyItem.TaxPart], T1.[E_SupplyItem.Tax], T1.[E_SupplyItem.OriginalSubtotal], T1.[E_SupplyItem.CurrencyID], T1.[E_SupplyItem.Subtotal], T1.[E_SupplyItem.Notes], T1.[E_SupplyItem.Version], T1.[E_SupplyItem.VersionAntecedentID], T1.[E_SupplyItem.VersionCertainty], T1.[E_SupplyItem.VersionWorkflowInstanceID], T1.[E_SupplyItem.VersionUpdatedBy], T1.[E_SupplyItem.VersionDeletedBy], T1.[E_SupplyItem.VersionOwnerContactID], T1.[E_SupplyItem.VersionOwnerCompanyID], T1.[E_SupplyItem.VersionUpdated])
    FROM (
        SELECT 
            T.SupplyItemID AS [E_SupplyItem.SupplyItemID], 
            T.SupplyID AS [E_SupplyItem.SupplyID], 
            T.ModelID AS [E_SupplyItem.ModelID], 
            T.PartID AS [E_SupplyItem.PartID], 
            T.SupplierModelID AS [E_SupplyItem.SupplierModelID], 
            T.SupplierPartID AS [E_SupplyItem.SupplierPartID], 
            T.WarehouseID AS [E_SupplyItem.WarehouseID], 
            T.ProjectPlanTaskModelID AS [E_SupplyItem.ProjectPlanTaskModelID], 
            T.ProjectPlanTaskPartID AS [E_SupplyItem.ProjectPlanTaskPartID], 
            T.ProjectPlanTaskResponseID AS [E_SupplyItem.ProjectPlanTaskResponseID], 
            T.ApplicationPaymentProviderProductID AS [E_SupplyItem.ApplicationPaymentProviderProductID], 
            T.ApplicationPaymentProviderProductModelID AS [E_SupplyItem.ApplicationPaymentProviderProductModelID], 
            T.ApplicationPaymentProviderProductPartID AS [E_SupplyItem.ApplicationPaymentProviderProductPartID], 
            T.CustomerAccountID AS [E_SupplyItem.CustomerAccountID], 
            T.ModelUnitID AS [E_SupplyItem.ModelUnitID], 
            T.LabourUnitID AS [E_SupplyItem.LabourUnitID], 
            T.PartUnitID AS [E_SupplyItem.PartUnitID], 
            T.CostPerUnitModel AS [E_SupplyItem.CostPerUnitModel], 
            T.CostPerUnitLabour AS [E_SupplyItem.CostPerUnitLabour], 
            T.CostPerUnitPart AS [E_SupplyItem.CostPerUnitPart], 
            T.QuantityModel AS [E_SupplyItem.QuantityModel], 
            T.QuantityLabour AS [E_SupplyItem.QuantityLabour], 
            T.QuantityPart AS [E_SupplyItem.QuantityPart], 
            T.CostModel AS [E_SupplyItem.CostModel], 
            T.CostLabour AS [E_SupplyItem.CostLabour], 
            T.CostPart AS [E_SupplyItem.CostPart], 
            T.SubtotalModel AS [E_SupplyItem.SubtotalModel], 
            T.SubtotalLabour AS [E_SupplyItem.SubtotalLabour], 
            T.SubtotalPart AS [E_SupplyItem.SubtotalPart], 
            T.DiscountModel AS [E_SupplyItem.DiscountModel], 
            T.DiscountLabour AS [E_SupplyItem.DiscountLabour], 
            T.DiscountPart AS [E_SupplyItem.DiscountPart], 
            T.DiscountAmount AS [E_SupplyItem.DiscountAmount], 
            T.TaxModel AS [E_SupplyItem.TaxModel], 
            T.TaxLabour AS [E_SupplyItem.TaxLabour], 
            T.TaxPart AS [E_SupplyItem.TaxPart], 
            T.Tax AS [E_SupplyItem.Tax], 
            T.OriginalSubtotal AS [E_SupplyItem.OriginalSubtotal], 
            T.CurrencyID AS [E_SupplyItem.CurrencyID], 
            T.Subtotal AS [E_SupplyItem.Subtotal], 
            T.Notes AS [E_SupplyItem.Notes], 
            T.Version AS [E_SupplyItem.Version], 
            T.VersionAntecedentID AS [E_SupplyItem.VersionAntecedentID], 
            T.VersionCertainty AS [E_SupplyItem.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_SupplyItem.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_SupplyItem.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_SupplyItem.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_SupplyItem.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_SupplyItem.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_SupplyItem.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplyItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_SupplyItemTax.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_SupplyItemTax
        [NKD.Module.BusinessObjects.Store.E_SupplyItemTax](T1.[E_SupplyItemTax.SupplyItemTaxID], T1.[E_SupplyItemTax.SupplyItemID], T1.[E_SupplyItemTax.TaxID], T1.[E_SupplyItemTax.Tax], T1.[E_SupplyItemTax.Version], T1.[E_SupplyItemTax.VersionAntecedentID], T1.[E_SupplyItemTax.VersionCertainty], T1.[E_SupplyItemTax.VersionWorkflowInstanceID], T1.[E_SupplyItemTax.VersionUpdatedBy], T1.[E_SupplyItemTax.VersionDeletedBy], T1.[E_SupplyItemTax.VersionOwnerContactID], T1.[E_SupplyItemTax.VersionOwnerCompanyID], T1.[E_SupplyItemTax.VersionUpdated])
    FROM (
        SELECT 
            T.SupplyItemTaxID AS [E_SupplyItemTax.SupplyItemTaxID], 
            T.SupplyItemID AS [E_SupplyItemTax.SupplyItemID], 
            T.TaxID AS [E_SupplyItemTax.TaxID], 
            T.Tax AS [E_SupplyItemTax.Tax], 
            T.Version AS [E_SupplyItemTax.Version], 
            T.VersionAntecedentID AS [E_SupplyItemTax.VersionAntecedentID], 
            T.VersionCertainty AS [E_SupplyItemTax.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_SupplyItemTax.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_SupplyItemTax.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_SupplyItemTax.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_SupplyItemTax.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_SupplyItemTax.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_SupplyItemTax.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplyItemTaxes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_Account.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_Account
        [NKD.Module.BusinessObjects.Store.Q_Account](T1.[Q_Account.AccountID], T1.[Q_Account.ParentAccountID], T1.[Q_Account.AccountTypeID], T1.[Q_Account.AcountCode], T1.[Q_Account.AccountName], T1.[Q_Account.PrimaryCompanyID], T1.[Q_Account.DefaultLocationID], T1.[Q_Account.Description], T1.[Q_Account.Version], T1.[Q_Account.VersionAntecedentID], T1.[Q_Account.VersionCertainty], T1.[Q_Account.VersionWorkflowInstanceID], T1.[Q_Account.VersionUpdatedBy], T1.[Q_Account.VersionDeletedBy], T1.[Q_Account.VersionOwnerContactID], T1.[Q_Account.VersionOwnerCompanyID], T1.[Q_Account.VersionUpdated])
    FROM (
        SELECT 
            T.AccountID AS [Q_Account.AccountID], 
            T.ParentAccountID AS [Q_Account.ParentAccountID], 
            T.AccountTypeID AS [Q_Account.AccountTypeID], 
            T.AcountCode AS [Q_Account.AcountCode], 
            T.AccountName AS [Q_Account.AccountName], 
            T.PrimaryCompanyID AS [Q_Account.PrimaryCompanyID], 
            T.DefaultLocationID AS [Q_Account.DefaultLocationID], 
            T.Description AS [Q_Account.Description], 
            T.Version AS [Q_Account.Version], 
            T.VersionAntecedentID AS [Q_Account.VersionAntecedentID], 
            T.VersionCertainty AS [Q_Account.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_Account.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_Account.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_Account.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_Account.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_Account.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_Account.VersionUpdated], 
            True AS _from0
        FROM NKDC.Accounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_AccountDiscount.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_AccountDiscount
        [NKD.Module.BusinessObjects.Store.Q_AccountDiscount](T1.[Q_AccountDiscount.AccountDiscountID], T1.[Q_AccountDiscount.SourceAccountID], T1.[Q_AccountDiscount.ClientCompanyID], T1.[Q_AccountDiscount.ProviderExperienceID], T1.[Q_AccountDiscount.DeviceTypeID], T1.[Q_AccountDiscount.LevelUnitID], T1.[Q_AccountDiscount.LevelQuantity], T1.[Q_AccountDiscount.Rate], T1.[Q_AccountDiscount.ValidFrom], T1.[Q_AccountDiscount.ValidUntil], T1.[Q_AccountDiscount.Version], T1.[Q_AccountDiscount.VersionAntecedentID], T1.[Q_AccountDiscount.VersionCertainty], T1.[Q_AccountDiscount.VersionWorkflowInstanceID], T1.[Q_AccountDiscount.VersionUpdatedBy], T1.[Q_AccountDiscount.VersionDeletedBy], T1.[Q_AccountDiscount.VersionOwnerContactID], T1.[Q_AccountDiscount.VersionOwnerCompanyID], T1.[Q_AccountDiscount.VersionUpdated])
    FROM (
        SELECT 
            T.AccountDiscountID AS [Q_AccountDiscount.AccountDiscountID], 
            T.SourceAccountID AS [Q_AccountDiscount.SourceAccountID], 
            T.ClientCompanyID AS [Q_AccountDiscount.ClientCompanyID], 
            T.ProviderExperienceID AS [Q_AccountDiscount.ProviderExperienceID], 
            T.DeviceTypeID AS [Q_AccountDiscount.DeviceTypeID], 
            T.LevelUnitID AS [Q_AccountDiscount.LevelUnitID], 
            T.LevelQuantity AS [Q_AccountDiscount.LevelQuantity], 
            T.Rate AS [Q_AccountDiscount.Rate], 
            T.ValidFrom AS [Q_AccountDiscount.ValidFrom], 
            T.ValidUntil AS [Q_AccountDiscount.ValidUntil], 
            T.Version AS [Q_AccountDiscount.Version], 
            T.VersionAntecedentID AS [Q_AccountDiscount.VersionAntecedentID], 
            T.VersionCertainty AS [Q_AccountDiscount.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_AccountDiscount.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_AccountDiscount.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_AccountDiscount.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_AccountDiscount.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_AccountDiscount.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_AccountDiscount.VersionUpdated], 
            True AS _from0
        FROM NKDC.AccountDiscounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_Asset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_Asset
        [NKD.Module.BusinessObjects.Store.Q_Asset](T1.[Q_Asset.AssetID], T1.[Q_Asset.ParentAssetID], T1.[Q_Asset.AssetName], T1.[Q_Asset.InitialCost], T1.[Q_Asset.ProRataCost], T1.[Q_Asset.ProRataUnitID], T1.[Q_Asset.Purchased], T1.[Q_Asset.PurchaseOrderID], T1.[Q_Asset.ExpenseNotToExceedLifeTimeCost], T1.[Q_Asset.OwnerAccountID], T1.[Q_Asset.BorrowerAccountID], T1.[Q_Asset.CurrentCompanyID], T1.[Q_Asset.CurrentContactID], T1.[Q_Asset.MaintenanceAccountID], T1.[Q_Asset.ModelID], T1.[Q_Asset.LocationID], T1.[Q_Asset.AssetStatusID], T1.[Q_Asset.ExperienceID], T1.[Q_Asset.Description], T1.[Q_Asset.Version], T1.[Q_Asset.VersionAntecedentID], T1.[Q_Asset.VersionCertainty], T1.[Q_Asset.VersionWorkflowInstanceID], T1.[Q_Asset.VersionUpdatedBy], T1.[Q_Asset.VersionDeletedBy], T1.[Q_Asset.VersionOwnerContactID], T1.[Q_Asset.VersionOwnerCompanyID], T1.[Q_Asset.VersionUpdated])
    FROM (
        SELECT 
            T.AssetID AS [Q_Asset.AssetID], 
            T.ParentAssetID AS [Q_Asset.ParentAssetID], 
            T.AssetName AS [Q_Asset.AssetName], 
            T.InitialCost AS [Q_Asset.InitialCost], 
            T.ProRataCost AS [Q_Asset.ProRataCost], 
            T.ProRataUnitID AS [Q_Asset.ProRataUnitID], 
            T.Purchased AS [Q_Asset.Purchased], 
            T.PurchaseOrderID AS [Q_Asset.PurchaseOrderID], 
            T.ExpenseNotToExceedLifeTimeCost AS [Q_Asset.ExpenseNotToExceedLifeTimeCost], 
            T.OwnerAccountID AS [Q_Asset.OwnerAccountID], 
            T.BorrowerAccountID AS [Q_Asset.BorrowerAccountID], 
            T.CurrentCompanyID AS [Q_Asset.CurrentCompanyID], 
            T.CurrentContactID AS [Q_Asset.CurrentContactID], 
            T.MaintenanceAccountID AS [Q_Asset.MaintenanceAccountID], 
            T.ModelID AS [Q_Asset.ModelID], 
            T.LocationID AS [Q_Asset.LocationID], 
            T.AssetStatusID AS [Q_Asset.AssetStatusID], 
            T.ExperienceID AS [Q_Asset.ExperienceID], 
            T.Description AS [Q_Asset.Description], 
            T.Version AS [Q_Asset.Version], 
            T.VersionAntecedentID AS [Q_Asset.VersionAntecedentID], 
            T.VersionCertainty AS [Q_Asset.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_Asset.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_Asset.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_Asset.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_Asset.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_Asset.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_Asset.VersionUpdated], 
            True AS _from0
        FROM NKDC.Assets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_AssetAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_AssetAlias
        [NKD.Module.BusinessObjects.Store.Q_AssetAlias](T1.[Q_AssetAlias.AssetAliasID], T1.[Q_AssetAlias.AssetID], T1.[Q_AssetAlias.AssetAliasName], T1.[Q_AssetAlias.FullDescription], T1.[Q_AssetAlias.Thumbnail], T1.[Q_AssetAlias.OriginalFileDataID], T1.[Q_AssetAlias.Version], T1.[Q_AssetAlias.VersionAntecedentID], T1.[Q_AssetAlias.VersionCertainty], T1.[Q_AssetAlias.VersionWorkflowInstanceID], T1.[Q_AssetAlias.VersionUpdatedBy], T1.[Q_AssetAlias.VersionDeletedBy], T1.[Q_AssetAlias.VersionOwnerContactID], T1.[Q_AssetAlias.VersionOwnerCompanyID], T1.[Q_AssetAlias.VersionUpdated])
    FROM (
        SELECT 
            T.AssetAliasID AS [Q_AssetAlias.AssetAliasID], 
            T.AssetID AS [Q_AssetAlias.AssetID], 
            T.AssetAliasName AS [Q_AssetAlias.AssetAliasName], 
            T.FullDescription AS [Q_AssetAlias.FullDescription], 
            T.Thumbnail AS [Q_AssetAlias.Thumbnail], 
            T.OriginalFileDataID AS [Q_AssetAlias.OriginalFileDataID], 
            T.Version AS [Q_AssetAlias.Version], 
            T.VersionAntecedentID AS [Q_AssetAlias.VersionAntecedentID], 
            T.VersionCertainty AS [Q_AssetAlias.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_AssetAlias.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_AssetAlias.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_AssetAlias.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_AssetAlias.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_AssetAlias.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_AssetAlias.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssetAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_AssetMaintenance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_AssetMaintenance
        [NKD.Module.BusinessObjects.Store.Q_AssetMaintenance](T1.[Q_AssetMaintenance.AssetMaintenanceID], T1.[Q_AssetMaintenance.AssetID], T1.[Q_AssetMaintenance.ModelProcedureID], T1.[Q_AssetMaintenance.NextDueDateService], T1.[Q_AssetMaintenance.NextDueDateBilling], T1.[Q_AssetMaintenance.Version], T1.[Q_AssetMaintenance.VersionAntecedentID], T1.[Q_AssetMaintenance.VersionCertainty], T1.[Q_AssetMaintenance.VersionWorkflowInstanceID], T1.[Q_AssetMaintenance.VersionUpdatedBy], T1.[Q_AssetMaintenance.VersionDeletedBy], T1.[Q_AssetMaintenance.VersionOwnerContactID], T1.[Q_AssetMaintenance.VersionOwnerCompanyID], T1.[Q_AssetMaintenance.VersionUpdated])
    FROM (
        SELECT 
            T.AssetMaintenanceID AS [Q_AssetMaintenance.AssetMaintenanceID], 
            T.AssetID AS [Q_AssetMaintenance.AssetID], 
            T.ModelProcedureID AS [Q_AssetMaintenance.ModelProcedureID], 
            T.NextDueDateService AS [Q_AssetMaintenance.NextDueDateService], 
            T.NextDueDateBilling AS [Q_AssetMaintenance.NextDueDateBilling], 
            T.Version AS [Q_AssetMaintenance.Version], 
            T.VersionAntecedentID AS [Q_AssetMaintenance.VersionAntecedentID], 
            T.VersionCertainty AS [Q_AssetMaintenance.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_AssetMaintenance.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_AssetMaintenance.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_AssetMaintenance.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_AssetMaintenance.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_AssetMaintenance.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_AssetMaintenance.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssetMaintenances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_AssetWarranty.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_AssetWarranty
        [NKD.Module.BusinessObjects.Store.Q_AssetWarranty](T1.[Q_AssetWarranty.AssetWarrantyID], T1.[Q_AssetWarranty.AssetID], T1.[Q_AssetWarranty.ModelWarrantyID], T1.[Q_AssetWarranty.StartDate], T1.[Q_AssetWarranty.EndDate], T1.[Q_AssetWarranty.Frequency], T1.[Q_AssetWarranty.FrequencyUnitID], T1.[Q_AssetWarranty.WarrantyTypeID], T1.[Q_AssetWarranty.Version], T1.[Q_AssetWarranty.VersionAntecedentID], T1.[Q_AssetWarranty.VersionCertainty], T1.[Q_AssetWarranty.VersionWorkflowInstanceID], T1.[Q_AssetWarranty.VersionUpdatedBy], T1.[Q_AssetWarranty.VersionDeletedBy], T1.[Q_AssetWarranty.VersionOwnerContactID], T1.[Q_AssetWarranty.VersionOwnerCompanyID], T1.[Q_AssetWarranty.VersionUpdated])
    FROM (
        SELECT 
            T.AssetWarrantyID AS [Q_AssetWarranty.AssetWarrantyID], 
            T.AssetID AS [Q_AssetWarranty.AssetID], 
            T.ModelWarrantyID AS [Q_AssetWarranty.ModelWarrantyID], 
            T.StartDate AS [Q_AssetWarranty.StartDate], 
            T.EndDate AS [Q_AssetWarranty.EndDate], 
            T.Frequency AS [Q_AssetWarranty.Frequency], 
            T.FrequencyUnitID AS [Q_AssetWarranty.FrequencyUnitID], 
            T.WarrantyTypeID AS [Q_AssetWarranty.WarrantyTypeID], 
            T.Version AS [Q_AssetWarranty.Version], 
            T.VersionAntecedentID AS [Q_AssetWarranty.VersionAntecedentID], 
            T.VersionCertainty AS [Q_AssetWarranty.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_AssetWarranty.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_AssetWarranty.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_AssetWarranty.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_AssetWarranty.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_AssetWarranty.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_AssetWarranty.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssetWarranties AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_CompanyAccount.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_CompanyAccount
        [NKD.Module.BusinessObjects.Store.Q_CompanyAccount](T1.[Q_CompanyAccount.CompanyAccountID], T1.[Q_CompanyAccount.CompanyID], T1.[Q_CompanyAccount.AccountID], T1.[Q_CompanyAccount.Version], T1.[Q_CompanyAccount.VersionAntecedentID], T1.[Q_CompanyAccount.VersionCertainty], T1.[Q_CompanyAccount.VersionWorkflowInstanceID], T1.[Q_CompanyAccount.VersionUpdatedBy], T1.[Q_CompanyAccount.VersionDeletedBy], T1.[Q_CompanyAccount.VersionOwnerContactID], T1.[Q_CompanyAccount.VersionOwnerCompanyID], T1.[Q_CompanyAccount.VersionUpdated])
    FROM (
        SELECT 
            T.CompanyAccountID AS [Q_CompanyAccount.CompanyAccountID], 
            T.CompanyID AS [Q_CompanyAccount.CompanyID], 
            T.AccountID AS [Q_CompanyAccount.AccountID], 
            T.Version AS [Q_CompanyAccount.Version], 
            T.VersionAntecedentID AS [Q_CompanyAccount.VersionAntecedentID], 
            T.VersionCertainty AS [Q_CompanyAccount.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_CompanyAccount.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_CompanyAccount.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_CompanyAccount.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_CompanyAccount.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_CompanyAccount.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_CompanyAccount.VersionUpdated], 
            True AS _from0
        FROM NKDC.CompanyAccounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ContractAsset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ContractAsset
        [NKD.Module.BusinessObjects.Store.Q_ContractAsset](T1.[Q_ContractAsset.ContractAssetID], T1.[Q_ContractAsset.ContractID], T1.[Q_ContractAsset.AssetID], T1.[Q_ContractAsset.OverrideCoverageStart], T1.[Q_ContractAsset.OverrideCoverageEnd], T1.[Q_ContractAsset.Version], T1.[Q_ContractAsset.VersionAntecedentID], T1.[Q_ContractAsset.VersionCertainty], T1.[Q_ContractAsset.VersionWorkflowInstanceID], T1.[Q_ContractAsset.VersionUpdatedBy], T1.[Q_ContractAsset.VersionDeletedBy], T1.[Q_ContractAsset.VersionOwnerContactID], T1.[Q_ContractAsset.VersionOwnerCompanyID], T1.[Q_ContractAsset.VersionUpdated])
    FROM (
        SELECT 
            T.ContractAssetID AS [Q_ContractAsset.ContractAssetID], 
            T.ContractID AS [Q_ContractAsset.ContractID], 
            T.AssetID AS [Q_ContractAsset.AssetID], 
            T.OverrideCoverageStart AS [Q_ContractAsset.OverrideCoverageStart], 
            T.OverrideCoverageEnd AS [Q_ContractAsset.OverrideCoverageEnd], 
            T.Version AS [Q_ContractAsset.Version], 
            T.VersionAntecedentID AS [Q_ContractAsset.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ContractAsset.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ContractAsset.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ContractAsset.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ContractAsset.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ContractAsset.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ContractAsset.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ContractAsset.VersionUpdated], 
            True AS _from0
        FROM NKDC.ContractAssets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdvice.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DeliveryAdvice
        [NKD.Module.BusinessObjects.Store.Q_DeliveryAdvice](T1.[Q_DeliveryAdvice.DeliveryAdviceID], T1.[Q_DeliveryAdvice.DeliveryAdviceName], T1.[Q_DeliveryAdvice.Sequence], T1.[Q_DeliveryAdvice.ShippingCompanyID], T1.[Q_DeliveryAdvice.FreightCharge], T1.[Q_DeliveryAdvice.FreightTax], T1.[Q_DeliveryAdvice.ConsignmentNote], T1.[Q_DeliveryAdvice.AccessoriesSent], T1.[Q_DeliveryAdvice.DeliveryAdviceNotes], T1.[Q_DeliveryAdvice.IsEditable], T1.[Q_DeliveryAdvice.SourceCompanyAddressID], T1.[Q_DeliveryAdvice.DestinationCompanyAddressID], T1.[Q_DeliveryAdvice.DeliveryAdviceReasonID], T1.[Q_DeliveryAdvice.DeliveryAdviceReasonNote], T1.[Q_DeliveryAdvice.BillingAccountID], T1.[Q_DeliveryAdvice.ProjectDeliverableID], T1.[Q_DeliveryAdvice.ProjectID], T1.[Q_DeliveryAdvice.Version], T1.[Q_DeliveryAdvice.VersionAntecedentID], T1.[Q_DeliveryAdvice.VersionCertainty], T1.[Q_DeliveryAdvice.VersionWorkflowInstanceID], T1.[Q_DeliveryAdvice.VersionUpdatedBy], T1.[Q_DeliveryAdvice.VersionDeletedBy], T1.[Q_DeliveryAdvice.VersionOwnerContactID], T1.[Q_DeliveryAdvice.VersionOwnerCompanyID], T1.[Q_DeliveryAdvice.VersionUpdated])
    FROM (
        SELECT 
            T.DeliveryAdviceID AS [Q_DeliveryAdvice.DeliveryAdviceID], 
            T.DeliveryAdviceName AS [Q_DeliveryAdvice.DeliveryAdviceName], 
            T.Sequence AS [Q_DeliveryAdvice.Sequence], 
            T.ShippingCompanyID AS [Q_DeliveryAdvice.ShippingCompanyID], 
            T.FreightCharge AS [Q_DeliveryAdvice.FreightCharge], 
            T.FreightTax AS [Q_DeliveryAdvice.FreightTax], 
            T.ConsignmentNote AS [Q_DeliveryAdvice.ConsignmentNote], 
            T.AccessoriesSent AS [Q_DeliveryAdvice.AccessoriesSent], 
            T.DeliveryAdviceNotes AS [Q_DeliveryAdvice.DeliveryAdviceNotes], 
            T.IsEditable AS [Q_DeliveryAdvice.IsEditable], 
            T.SourceCompanyAddressID AS [Q_DeliveryAdvice.SourceCompanyAddressID], 
            T.DestinationCompanyAddressID AS [Q_DeliveryAdvice.DestinationCompanyAddressID], 
            T.DeliveryAdviceReasonID AS [Q_DeliveryAdvice.DeliveryAdviceReasonID], 
            T.DeliveryAdviceReasonNote AS [Q_DeliveryAdvice.DeliveryAdviceReasonNote], 
            T.BillingAccountID AS [Q_DeliveryAdvice.BillingAccountID], 
            T.ProjectDeliverableID AS [Q_DeliveryAdvice.ProjectDeliverableID], 
            T.ProjectID AS [Q_DeliveryAdvice.ProjectID], 
            T.Version AS [Q_DeliveryAdvice.Version], 
            T.VersionAntecedentID AS [Q_DeliveryAdvice.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DeliveryAdvice.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DeliveryAdvice.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DeliveryAdvice.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DeliveryAdvice.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DeliveryAdvice.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DeliveryAdvice.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DeliveryAdvice.VersionUpdated], 
            True AS _from0
        FROM NKDC.DeliveryAdvices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdviceItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DeliveryAdviceItem
        [NKD.Module.BusinessObjects.Store.Q_DeliveryAdviceItem](T1.[Q_DeliveryAdviceItem.DeliveryAdviceItemID], T1.[Q_DeliveryAdviceItem.DeliveryAdviceID], T1.[Q_DeliveryAdviceItem.AssetID], T1.[Q_DeliveryAdviceItem.ItemDescription], T1.[Q_DeliveryAdviceItem.PartID], T1.[Q_DeliveryAdviceItem.QuantitySent], T1.[Q_DeliveryAdviceItem.QuantityReceived], T1.[Q_DeliveryAdviceItem.ReturnReferenceNumber], T1.[Q_DeliveryAdviceItem.ItemInstruction], T1.[Q_DeliveryAdviceItem.DecontaminationStatusID], T1.[Q_DeliveryAdviceItem.Version], T1.[Q_DeliveryAdviceItem.VersionAntecedentID], T1.[Q_DeliveryAdviceItem.VersionCertainty], T1.[Q_DeliveryAdviceItem.VersionWorkflowInstanceID], T1.[Q_DeliveryAdviceItem.VersionUpdatedBy], T1.[Q_DeliveryAdviceItem.VersionDeletedBy], T1.[Q_DeliveryAdviceItem.VersionOwnerContactID], T1.[Q_DeliveryAdviceItem.VersionOwnerCompanyID], T1.[Q_DeliveryAdviceItem.VersionUpdated])
    FROM (
        SELECT 
            T.DeliveryAdviceItemID AS [Q_DeliveryAdviceItem.DeliveryAdviceItemID], 
            T.DeliveryAdviceID AS [Q_DeliveryAdviceItem.DeliveryAdviceID], 
            T.AssetID AS [Q_DeliveryAdviceItem.AssetID], 
            T.ItemDescription AS [Q_DeliveryAdviceItem.ItemDescription], 
            T.PartID AS [Q_DeliveryAdviceItem.PartID], 
            T.QuantitySent AS [Q_DeliveryAdviceItem.QuantitySent], 
            T.QuantityReceived AS [Q_DeliveryAdviceItem.QuantityReceived], 
            T.ReturnReferenceNumber AS [Q_DeliveryAdviceItem.ReturnReferenceNumber], 
            T.ItemInstruction AS [Q_DeliveryAdviceItem.ItemInstruction], 
            T.DecontaminationStatusID AS [Q_DeliveryAdviceItem.DecontaminationStatusID], 
            T.Version AS [Q_DeliveryAdviceItem.Version], 
            T.VersionAntecedentID AS [Q_DeliveryAdviceItem.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DeliveryAdviceItem.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DeliveryAdviceItem.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DeliveryAdviceItem.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DeliveryAdviceItem.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DeliveryAdviceItem.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DeliveryAdviceItem.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DeliveryAdviceItem.VersionUpdated], 
            True AS _from0
        FROM NKDC.DeliveryAdviceItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDecontaminationStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryDecontaminationStatus
        [NKD.Module.BusinessObjects.Store.Q_DictionaryDecontaminationStatus](T1.[Q_DictionaryDecontaminationStatus.DecontaminationStatusID], T1.[Q_DictionaryDecontaminationStatus.StandardDecontaminationStatusName], T1.[Q_DictionaryDecontaminationStatus.CustomDecontaminationStatusName], T1.[Q_DictionaryDecontaminationStatus.IsSafeForHandling], T1.[Q_DictionaryDecontaminationStatus.Description], T1.[Q_DictionaryDecontaminationStatus.Version], T1.[Q_DictionaryDecontaminationStatus.VersionAntecedentID], T1.[Q_DictionaryDecontaminationStatus.VersionCertainty], T1.[Q_DictionaryDecontaminationStatus.VersionWorkflowInstanceID], T1.[Q_DictionaryDecontaminationStatus.VersionUpdatedBy], T1.[Q_DictionaryDecontaminationStatus.VersionDeletedBy], T1.[Q_DictionaryDecontaminationStatus.VersionOwnerContactID], T1.[Q_DictionaryDecontaminationStatus.VersionOwnerCompanyID], T1.[Q_DictionaryDecontaminationStatus.VersionUpdated])
    FROM (
        SELECT 
            T.DecontaminationStatusID AS [Q_DictionaryDecontaminationStatus.DecontaminationStatusID], 
            T.StandardDecontaminationStatusName AS [Q_DictionaryDecontaminationStatus.StandardDecontaminationStatusName], 
            T.CustomDecontaminationStatusName AS [Q_DictionaryDecontaminationStatus.CustomDecontaminationStatusName], 
            T.IsSafeForHandling AS [Q_DictionaryDecontaminationStatus.IsSafeForHandling], 
            T.Description AS [Q_DictionaryDecontaminationStatus.Description], 
            T.Version AS [Q_DictionaryDecontaminationStatus.Version], 
            T.VersionAntecedentID AS [Q_DictionaryDecontaminationStatus.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryDecontaminationStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryDecontaminationStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryDecontaminationStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryDecontaminationStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryDecontaminationStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryDecontaminationStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryDecontaminationStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDecontaminationStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeliveryAdviceReason.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryDeliveryAdviceReason
        [NKD.Module.BusinessObjects.Store.Q_DictionaryDeliveryAdviceReason](T1.[Q_DictionaryDeliveryAdviceReason.DeliveryAdviceReasonID], T1.[Q_DictionaryDeliveryAdviceReason.StandardDeliveryAdviceReasonName], T1.[Q_DictionaryDeliveryAdviceReason.CustomDeliveryAdviceReasonName], T1.[Q_DictionaryDeliveryAdviceReason.Description], T1.[Q_DictionaryDeliveryAdviceReason.Version], T1.[Q_DictionaryDeliveryAdviceReason.VersionAntecedentID], T1.[Q_DictionaryDeliveryAdviceReason.VersionCertainty], T1.[Q_DictionaryDeliveryAdviceReason.VersionWorkflowInstanceID], T1.[Q_DictionaryDeliveryAdviceReason.VersionUpdatedBy], T1.[Q_DictionaryDeliveryAdviceReason.VersionDeletedBy], T1.[Q_DictionaryDeliveryAdviceReason.VersionOwnerContactID], T1.[Q_DictionaryDeliveryAdviceReason.VersionOwnerCompanyID], T1.[Q_DictionaryDeliveryAdviceReason.VersionUpdated])
    FROM (
        SELECT 
            T.DeliveryAdviceReasonID AS [Q_DictionaryDeliveryAdviceReason.DeliveryAdviceReasonID], 
            T.StandardDeliveryAdviceReasonName AS [Q_DictionaryDeliveryAdviceReason.StandardDeliveryAdviceReasonName], 
            T.CustomDeliveryAdviceReasonName AS [Q_DictionaryDeliveryAdviceReason.CustomDeliveryAdviceReasonName], 
            T.Description AS [Q_DictionaryDeliveryAdviceReason.Description], 
            T.Version AS [Q_DictionaryDeliveryAdviceReason.Version], 
            T.VersionAntecedentID AS [Q_DictionaryDeliveryAdviceReason.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryDeliveryAdviceReason.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryDeliveryAdviceReason.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryDeliveryAdviceReason.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryDeliveryAdviceReason.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryDeliveryAdviceReason.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryDeliveryAdviceReason.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryDeliveryAdviceReason.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDeliveryAdviceReasons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeviceType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryDeviceType
        [NKD.Module.BusinessObjects.Store.Q_DictionaryDeviceType](T1.[Q_DictionaryDeviceType.DeviceTypeID], T1.[Q_DictionaryDeviceType.ParentDeviceTypeID], T1.[Q_DictionaryDeviceType.StandardDeviceTypeName], T1.[Q_DictionaryDeviceType.EcriDeviceTypeName], T1.[Q_DictionaryDeviceType.CustomDeviceTypeName], T1.[Q_DictionaryDeviceType.PrimaryWorkTypeID], T1.[Q_DictionaryDeviceType.IsAttributable], T1.[Q_DictionaryDeviceType.IsDevice], T1.[Q_DictionaryDeviceType.IsPart], T1.[Q_DictionaryDeviceType.Description], T1.[Q_DictionaryDeviceType.Version], T1.[Q_DictionaryDeviceType.VersionAntecedentID], T1.[Q_DictionaryDeviceType.VersionCertainty], T1.[Q_DictionaryDeviceType.VersionWorkflowInstanceID], T1.[Q_DictionaryDeviceType.VersionUpdatedBy], T1.[Q_DictionaryDeviceType.VersionDeletedBy], T1.[Q_DictionaryDeviceType.VersionOwnerContactID], T1.[Q_DictionaryDeviceType.VersionOwnerCompanyID], T1.[Q_DictionaryDeviceType.VersionUpdated])
    FROM (
        SELECT 
            T.DeviceTypeID AS [Q_DictionaryDeviceType.DeviceTypeID], 
            T.ParentDeviceTypeID AS [Q_DictionaryDeviceType.ParentDeviceTypeID], 
            T.StandardDeviceTypeName AS [Q_DictionaryDeviceType.StandardDeviceTypeName], 
            T.EcriDeviceTypeName AS [Q_DictionaryDeviceType.EcriDeviceTypeName], 
            T.CustomDeviceTypeName AS [Q_DictionaryDeviceType.CustomDeviceTypeName], 
            T.PrimaryWorkTypeID AS [Q_DictionaryDeviceType.PrimaryWorkTypeID], 
            T.IsAttributable AS [Q_DictionaryDeviceType.IsAttributable], 
            T.IsDevice AS [Q_DictionaryDeviceType.IsDevice], 
            T.IsPart AS [Q_DictionaryDeviceType.IsPart], 
            T.Description AS [Q_DictionaryDeviceType.Description], 
            T.Version AS [Q_DictionaryDeviceType.Version], 
            T.VersionAntecedentID AS [Q_DictionaryDeviceType.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryDeviceType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryDeviceType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryDeviceType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryDeviceType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryDeviceType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryDeviceType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryDeviceType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDeviceTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryEventType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryEventType
        [NKD.Module.BusinessObjects.Store.Q_DictionaryEventType](T1.[Q_DictionaryEventType.EventTypeID], T1.[Q_DictionaryEventType.StandardEventTypeName], T1.[Q_DictionaryEventType.CustomEventTypeName], T1.[Q_DictionaryEventType.Description], T1.[Q_DictionaryEventType.Version], T1.[Q_DictionaryEventType.VersionAntecedentID], T1.[Q_DictionaryEventType.VersionCertainty], T1.[Q_DictionaryEventType.VersionWorkflowInstanceID], T1.[Q_DictionaryEventType.VersionUpdatedBy], T1.[Q_DictionaryEventType.VersionDeletedBy], T1.[Q_DictionaryEventType.VersionOwnerContactID], T1.[Q_DictionaryEventType.VersionOwnerCompanyID], T1.[Q_DictionaryEventType.VersionUpdated])
    FROM (
        SELECT 
            T.EventTypeID AS [Q_DictionaryEventType.EventTypeID], 
            T.StandardEventTypeName AS [Q_DictionaryEventType.StandardEventTypeName], 
            T.CustomEventTypeName AS [Q_DictionaryEventType.CustomEventTypeName], 
            T.Description AS [Q_DictionaryEventType.Description], 
            T.Version AS [Q_DictionaryEventType.Version], 
            T.VersionAntecedentID AS [Q_DictionaryEventType.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryEventType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryEventType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryEventType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryEventType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryEventType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryEventType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryEventType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryEventTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryPart
        [NKD.Module.BusinessObjects.Store.Q_DictionaryPart](T1.[Q_DictionaryPart.PartID], T1.[Q_DictionaryPart.ParentPartID], T1.[Q_DictionaryPart.StandardPartName], T1.[Q_DictionaryPart.EcriPartName], T1.[Q_DictionaryPart.CustomPartName], T1.[Q_DictionaryPart.CompanyID], T1.[Q_DictionaryPart.OriginalManufacturerName], T1.[Q_DictionaryPart.PartStatusID], T1.[Q_DictionaryPart.DeviceTypeID], T1.[Q_DictionaryPart.ManufacturedFrom], T1.[Q_DictionaryPart.ManufacturedUntil], T1.[Q_DictionaryPart.SupportedUntil], T1.[Q_DictionaryPart.EstimatedLifetimeUnitID], T1.[Q_DictionaryPart.EstimatedLifetime], T1.[Q_DictionaryPart.Description], T1.[Q_DictionaryPart.FullDescription], T1.[Q_DictionaryPart.Thumbnail], T1.[Q_DictionaryPart.OriginalFileDataID], T1.[Q_DictionaryPart.Version], T1.[Q_DictionaryPart.VersionAntecedentID], T1.[Q_DictionaryPart.VersionCertainty], T1.[Q_DictionaryPart.VersionWorkflowInstanceID], T1.[Q_DictionaryPart.VersionUpdatedBy], T1.[Q_DictionaryPart.VersionDeletedBy], T1.[Q_DictionaryPart.VersionOwnerContactID], T1.[Q_DictionaryPart.VersionOwnerCompanyID], T1.[Q_DictionaryPart.VersionUpdated])
    FROM (
        SELECT 
            T.PartID AS [Q_DictionaryPart.PartID], 
            T.ParentPartID AS [Q_DictionaryPart.ParentPartID], 
            T.StandardPartName AS [Q_DictionaryPart.StandardPartName], 
            T.EcriPartName AS [Q_DictionaryPart.EcriPartName], 
            T.CustomPartName AS [Q_DictionaryPart.CustomPartName], 
            T.CompanyID AS [Q_DictionaryPart.CompanyID], 
            T.OriginalManufacturerName AS [Q_DictionaryPart.OriginalManufacturerName], 
            T.PartStatusID AS [Q_DictionaryPart.PartStatusID], 
            T.DeviceTypeID AS [Q_DictionaryPart.DeviceTypeID], 
            T.ManufacturedFrom AS [Q_DictionaryPart.ManufacturedFrom], 
            T.ManufacturedUntil AS [Q_DictionaryPart.ManufacturedUntil], 
            T.SupportedUntil AS [Q_DictionaryPart.SupportedUntil], 
            T.EstimatedLifetimeUnitID AS [Q_DictionaryPart.EstimatedLifetimeUnitID], 
            T.EstimatedLifetime AS [Q_DictionaryPart.EstimatedLifetime], 
            T.Description AS [Q_DictionaryPart.Description], 
            T.FullDescription AS [Q_DictionaryPart.FullDescription], 
            T.Thumbnail AS [Q_DictionaryPart.Thumbnail], 
            T.OriginalFileDataID AS [Q_DictionaryPart.OriginalFileDataID], 
            T.Version AS [Q_DictionaryPart.Version], 
            T.VersionAntecedentID AS [Q_DictionaryPart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryPartCategory
        [NKD.Module.BusinessObjects.Store.Q_DictionaryPartCategory](T1.[Q_DictionaryPartCategory.PartCategoryID], T1.[Q_DictionaryPartCategory.PartID], T1.[Q_DictionaryPartCategory.CategoryDeviceTypeID], T1.[Q_DictionaryPartCategory.Version], T1.[Q_DictionaryPartCategory.VersionAntecedentID], T1.[Q_DictionaryPartCategory.VersionCertainty], T1.[Q_DictionaryPartCategory.VersionWorkflowInstanceID], T1.[Q_DictionaryPartCategory.VersionUpdatedBy], T1.[Q_DictionaryPartCategory.VersionDeletedBy], T1.[Q_DictionaryPartCategory.VersionOwnerContactID], T1.[Q_DictionaryPartCategory.VersionOwnerCompanyID], T1.[Q_DictionaryPartCategory.VersionUpdated])
    FROM (
        SELECT 
            T.PartCategoryID AS [Q_DictionaryPartCategory.PartCategoryID], 
            T.PartID AS [Q_DictionaryPartCategory.PartID], 
            T.CategoryDeviceTypeID AS [Q_DictionaryPartCategory.CategoryDeviceTypeID], 
            T.Version AS [Q_DictionaryPartCategory.Version], 
            T.VersionAntecedentID AS [Q_DictionaryPartCategory.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryPartCategory.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryPartCategory.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryPartCategory.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryPartCategory.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryPartCategory.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryPartCategory.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryPartCategory.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPartCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryPartKit
        [NKD.Module.BusinessObjects.Store.Q_DictionaryPartKit](T1.[Q_DictionaryPartKit.PartKitID], T1.[Q_DictionaryPartKit.StandardPartKitName], T1.[Q_DictionaryPartKit.CustomPartKitName], T1.[Q_DictionaryPartKit.Description], T1.[Q_DictionaryPartKit.Version], T1.[Q_DictionaryPartKit.VersionAntecedentID], T1.[Q_DictionaryPartKit.VersionCertainty], T1.[Q_DictionaryPartKit.VersionWorkflowInstanceID], T1.[Q_DictionaryPartKit.VersionUpdatedBy], T1.[Q_DictionaryPartKit.VersionDeletedBy], T1.[Q_DictionaryPartKit.VersionOwnerContactID], T1.[Q_DictionaryPartKit.VersionOwnerCompanyID], T1.[Q_DictionaryPartKit.VersionUpdated])
    FROM (
        SELECT 
            T.PartKitID AS [Q_DictionaryPartKit.PartKitID], 
            T.StandardPartKitName AS [Q_DictionaryPartKit.StandardPartKitName], 
            T.CustomPartKitName AS [Q_DictionaryPartKit.CustomPartKitName], 
            T.Description AS [Q_DictionaryPartKit.Description], 
            T.Version AS [Q_DictionaryPartKit.Version], 
            T.VersionAntecedentID AS [Q_DictionaryPartKit.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryPartKit.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryPartKit.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryPartKit.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryPartKit.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryPartKit.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryPartKit.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryPartKit.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPartKits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKitItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryPartKitItem
        [NKD.Module.BusinessObjects.Store.Q_DictionaryPartKitItem](T1.[Q_DictionaryPartKitItem.PartKitItemID], T1.[Q_DictionaryPartKitItem.PartKitID], T1.[Q_DictionaryPartKitItem.PartID], T1.[Q_DictionaryPartKitItem.UnitID], T1.[Q_DictionaryPartKitItem.Quantity], T1.[Q_DictionaryPartKitItem.Version], T1.[Q_DictionaryPartKitItem.VersionAntecedentID], T1.[Q_DictionaryPartKitItem.VersionCertainty], T1.[Q_DictionaryPartKitItem.VersionWorkflowInstanceID], T1.[Q_DictionaryPartKitItem.VersionUpdatedBy], T1.[Q_DictionaryPartKitItem.VersionDeletedBy], T1.[Q_DictionaryPartKitItem.VersionOwnerContactID], T1.[Q_DictionaryPartKitItem.VersionOwnerCompanyID], T1.[Q_DictionaryPartKitItem.VersionUpdated])
    FROM (
        SELECT 
            T.PartKitItemID AS [Q_DictionaryPartKitItem.PartKitItemID], 
            T.PartKitID AS [Q_DictionaryPartKitItem.PartKitID], 
            T.PartID AS [Q_DictionaryPartKitItem.PartID], 
            T.UnitID AS [Q_DictionaryPartKitItem.UnitID], 
            T.Quantity AS [Q_DictionaryPartKitItem.Quantity], 
            T.Version AS [Q_DictionaryPartKitItem.Version], 
            T.VersionAntecedentID AS [Q_DictionaryPartKitItem.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryPartKitItem.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryPartKitItem.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryPartKitItem.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryPartKitItem.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryPartKitItem.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryPartKitItem.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryPartKitItem.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPartKitItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryProcedure.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryProcedure
        [NKD.Module.BusinessObjects.Store.Q_DictionaryProcedure](T1.[Q_DictionaryProcedure.ProcedureID], T1.[Q_DictionaryProcedure.StandardProcedureName], T1.[Q_DictionaryProcedure.CustomProcedureName], T1.[Q_DictionaryProcedure.Description], T1.[Q_DictionaryProcedure.TaskID], T1.[Q_DictionaryProcedure.ModelID], T1.[Q_DictionaryProcedure.PartID], T1.[Q_DictionaryProcedure.Sequence], T1.[Q_DictionaryProcedure.ValidFrom], T1.[Q_DictionaryProcedure.ValidUntil], T1.[Q_DictionaryProcedure.FileDataID], T1.[Q_DictionaryProcedure.CountryID], T1.[Q_DictionaryProcedure.CountryStateID], T1.[Q_DictionaryProcedure.Place], T1.[Q_DictionaryProcedure.LocationID], T1.[Q_DictionaryProcedure.ProvinceID], T1.[Q_DictionaryProcedure.Version], T1.[Q_DictionaryProcedure.VersionAntecedentID], T1.[Q_DictionaryProcedure.VersionCertainty], T1.[Q_DictionaryProcedure.VersionWorkflowInstanceID], T1.[Q_DictionaryProcedure.VersionUpdatedBy], T1.[Q_DictionaryProcedure.VersionDeletedBy], T1.[Q_DictionaryProcedure.VersionOwnerContactID], T1.[Q_DictionaryProcedure.VersionOwnerCompanyID], T1.[Q_DictionaryProcedure.VersionUpdated])
    FROM (
        SELECT 
            T.ProcedureID AS [Q_DictionaryProcedure.ProcedureID], 
            T.StandardProcedureName AS [Q_DictionaryProcedure.StandardProcedureName], 
            T.CustomProcedureName AS [Q_DictionaryProcedure.CustomProcedureName], 
            T.Description AS [Q_DictionaryProcedure.Description], 
            T.TaskID AS [Q_DictionaryProcedure.TaskID], 
            T.ModelID AS [Q_DictionaryProcedure.ModelID], 
            T.PartID AS [Q_DictionaryProcedure.PartID], 
            T.Sequence AS [Q_DictionaryProcedure.Sequence], 
            T.ValidFrom AS [Q_DictionaryProcedure.ValidFrom], 
            T.ValidUntil AS [Q_DictionaryProcedure.ValidUntil], 
            T.FileDataID AS [Q_DictionaryProcedure.FileDataID], 
            T.CountryID AS [Q_DictionaryProcedure.CountryID], 
            T.CountryStateID AS [Q_DictionaryProcedure.CountryStateID], 
            T.Place AS [Q_DictionaryProcedure.Place], 
            T.LocationID AS [Q_DictionaryProcedure.LocationID], 
            T.ProvinceID AS [Q_DictionaryProcedure.ProvinceID], 
            T.Version AS [Q_DictionaryProcedure.Version], 
            T.VersionAntecedentID AS [Q_DictionaryProcedure.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryProcedure.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryProcedure.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryProcedure.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryProcedure.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryProcedure.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryProcedure.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryProcedure.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryProcedures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryWarrantyType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryWarrantyType
        [NKD.Module.BusinessObjects.Store.Q_DictionaryWarrantyType](T1.[Q_DictionaryWarrantyType.WarrantyTypeID], T1.[Q_DictionaryWarrantyType.StandardWarrantyTypeName], T1.[Q_DictionaryWarrantyType.CustomWarrantyTypeName], T1.[Q_DictionaryWarrantyType.Description], T1.[Q_DictionaryWarrantyType.Version], T1.[Q_DictionaryWarrantyType.VersionAntecedentID], T1.[Q_DictionaryWarrantyType.VersionCertainty], T1.[Q_DictionaryWarrantyType.VersionWorkflowInstanceID], T1.[Q_DictionaryWarrantyType.VersionUpdatedBy], T1.[Q_DictionaryWarrantyType.VersionDeletedBy], T1.[Q_DictionaryWarrantyType.VersionOwnerContactID], T1.[Q_DictionaryWarrantyType.VersionOwnerCompanyID], T1.[Q_DictionaryWarrantyType.VersionUpdated])
    FROM (
        SELECT 
            T.WarrantyTypeID AS [Q_DictionaryWarrantyType.WarrantyTypeID], 
            T.StandardWarrantyTypeName AS [Q_DictionaryWarrantyType.StandardWarrantyTypeName], 
            T.CustomWarrantyTypeName AS [Q_DictionaryWarrantyType.CustomWarrantyTypeName], 
            T.Description AS [Q_DictionaryWarrantyType.Description], 
            T.Version AS [Q_DictionaryWarrantyType.Version], 
            T.VersionAntecedentID AS [Q_DictionaryWarrantyType.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryWarrantyType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryWarrantyType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryWarrantyType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryWarrantyType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryWarrantyType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryWarrantyType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryWarrantyType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryWarrantyTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelPart
        [NKD.Module.BusinessObjects.Store.Q_ModelPart](T1.[Q_ModelPart.ModelPartID], T1.[Q_ModelPart.ModelID], T1.[Q_ModelPart.PartID], T1.[Q_ModelPart.Version], T1.[Q_ModelPart.VersionAntecedentID], T1.[Q_ModelPart.VersionCertainty], T1.[Q_ModelPart.VersionWorkflowInstanceID], T1.[Q_ModelPart.VersionUpdatedBy], T1.[Q_ModelPart.VersionDeletedBy], T1.[Q_ModelPart.VersionOwnerContactID], T1.[Q_ModelPart.VersionOwnerCompanyID], T1.[Q_ModelPart.VersionUpdated])
    FROM (
        SELECT 
            T.ModelPartID AS [Q_ModelPart.ModelPartID], 
            T.ModelID AS [Q_ModelPart.ModelID], 
            T.PartID AS [Q_ModelPart.PartID], 
            T.Version AS [Q_ModelPart.Version], 
            T.VersionAntecedentID AS [Q_ModelPart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelPartKit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelPartKit
        [NKD.Module.BusinessObjects.Store.Q_ModelPartKit](T1.[Q_ModelPartKit.ModelPartKitID], T1.[Q_ModelPartKit.ModelPartID], T1.[Q_ModelPartKit.PartKitID], T1.[Q_ModelPartKit.Version], T1.[Q_ModelPartKit.VersionAntecedentID], T1.[Q_ModelPartKit.VersionCertainty], T1.[Q_ModelPartKit.VersionWorkflowInstanceID], T1.[Q_ModelPartKit.VersionUpdatedBy], T1.[Q_ModelPartKit.VersionDeletedBy], T1.[Q_ModelPartKit.VersionOwnerContactID], T1.[Q_ModelPartKit.VersionOwnerCompanyID], T1.[Q_ModelPartKit.VersionUpdated])
    FROM (
        SELECT 
            T.ModelPartKitID AS [Q_ModelPartKit.ModelPartKitID], 
            T.ModelPartID AS [Q_ModelPartKit.ModelPartID], 
            T.PartKitID AS [Q_ModelPartKit.PartKitID], 
            T.Version AS [Q_ModelPartKit.Version], 
            T.VersionAntecedentID AS [Q_ModelPartKit.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelPartKit.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelPartKit.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelPartKit.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelPartKit.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelPartKit.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelPartKit.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelPartKit.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelPartKits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedure.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelProcedure
        [NKD.Module.BusinessObjects.Store.Q_ModelProcedure](T1.[Q_ModelProcedure.ModelProcedureID], T1.[Q_ModelProcedure.ModelID], T1.[Q_ModelProcedure.ProcedureID], T1.[Q_ModelProcedure.Sequence], T1.[Q_ModelProcedure.Frequency], T1.[Q_ModelProcedure.FrequencyUnitID], T1.[Q_ModelProcedure.RiskFactor], T1.[Q_ModelProcedure.Version], T1.[Q_ModelProcedure.VersionAntecedentID], T1.[Q_ModelProcedure.VersionCertainty], T1.[Q_ModelProcedure.VersionWorkflowInstanceID], T1.[Q_ModelProcedure.VersionUpdatedBy], T1.[Q_ModelProcedure.VersionDeletedBy], T1.[Q_ModelProcedure.VersionOwnerContactID], T1.[Q_ModelProcedure.VersionOwnerCompanyID], T1.[Q_ModelProcedure.VersionUpdated])
    FROM (
        SELECT 
            T.ModelProcedureID AS [Q_ModelProcedure.ModelProcedureID], 
            T.ModelID AS [Q_ModelProcedure.ModelID], 
            T.ProcedureID AS [Q_ModelProcedure.ProcedureID], 
            T.Sequence AS [Q_ModelProcedure.Sequence], 
            T.Frequency AS [Q_ModelProcedure.Frequency], 
            T.FrequencyUnitID AS [Q_ModelProcedure.FrequencyUnitID], 
            T.RiskFactor AS [Q_ModelProcedure.RiskFactor], 
            T.Version AS [Q_ModelProcedure.Version], 
            T.VersionAntecedentID AS [Q_ModelProcedure.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelProcedure.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelProcedure.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelProcedure.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelProcedure.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelProcedure.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelProcedure.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelProcedure.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelProcedures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTask.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelProcedureTask
        [NKD.Module.BusinessObjects.Store.Q_ModelProcedureTask](T1.[Q_ModelProcedureTask.ModelProcedureTaskID], T1.[Q_ModelProcedureTask.ModelProcedureID], T1.[Q_ModelProcedureTask.TaskID], T1.[Q_ModelProcedureTask.Sequence], T1.[Q_ModelProcedureTask.FileDataID], T1.[Q_ModelProcedureTask.StatedRevisionNumber], T1.[Q_ModelProcedureTask.StatedRevisionPublishDate], T1.[Q_ModelProcedureTask.EstimatedDuration], T1.[Q_ModelProcedureTask.EstimatedDurationUnitID], T1.[Q_ModelProcedureTask.Version], T1.[Q_ModelProcedureTask.VersionAntecedentID], T1.[Q_ModelProcedureTask.VersionCertainty], T1.[Q_ModelProcedureTask.VersionWorkflowInstanceID], T1.[Q_ModelProcedureTask.VersionUpdatedBy], T1.[Q_ModelProcedureTask.VersionDeletedBy], T1.[Q_ModelProcedureTask.VersionOwnerContactID], T1.[Q_ModelProcedureTask.VersionOwnerCompanyID], T1.[Q_ModelProcedureTask.VersionUpdated])
    FROM (
        SELECT 
            T.ModelProcedureTaskID AS [Q_ModelProcedureTask.ModelProcedureTaskID], 
            T.ModelProcedureID AS [Q_ModelProcedureTask.ModelProcedureID], 
            T.TaskID AS [Q_ModelProcedureTask.TaskID], 
            T.Sequence AS [Q_ModelProcedureTask.Sequence], 
            T.FileDataID AS [Q_ModelProcedureTask.FileDataID], 
            T.StatedRevisionNumber AS [Q_ModelProcedureTask.StatedRevisionNumber], 
            T.StatedRevisionPublishDate AS [Q_ModelProcedureTask.StatedRevisionPublishDate], 
            T.EstimatedDuration AS [Q_ModelProcedureTask.EstimatedDuration], 
            T.EstimatedDurationUnitID AS [Q_ModelProcedureTask.EstimatedDurationUnitID], 
            T.Version AS [Q_ModelProcedureTask.Version], 
            T.VersionAntecedentID AS [Q_ModelProcedureTask.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelProcedureTask.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelProcedureTask.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelProcedureTask.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelProcedureTask.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelProcedureTask.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelProcedureTask.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelProcedureTask.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelProcedureTasks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTaskPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelProcedureTaskPart
        [NKD.Module.BusinessObjects.Store.Q_ModelProcedureTaskPart](T1.[Q_ModelProcedureTaskPart.ModelProcedureTaskPartID], T1.[Q_ModelProcedureTaskPart.ModelProcedureTaskID], T1.[Q_ModelProcedureTaskPart.PartID], T1.[Q_ModelProcedureTaskPart.PartQuantity], T1.[Q_ModelProcedureTaskPart.Version], T1.[Q_ModelProcedureTaskPart.VersionAntecedentID], T1.[Q_ModelProcedureTaskPart.VersionCertainty], T1.[Q_ModelProcedureTaskPart.VersionWorkflowInstanceID], T1.[Q_ModelProcedureTaskPart.VersionUpdatedBy], T1.[Q_ModelProcedureTaskPart.VersionDeletedBy], T1.[Q_ModelProcedureTaskPart.VersionOwnerContactID], T1.[Q_ModelProcedureTaskPart.VersionOwnerCompanyID], T1.[Q_ModelProcedureTaskPart.VersionUpdated])
    FROM (
        SELECT 
            T.ModelProcedureTaskPartID AS [Q_ModelProcedureTaskPart.ModelProcedureTaskPartID], 
            T.ModelProcedureTaskID AS [Q_ModelProcedureTaskPart.ModelProcedureTaskID], 
            T.PartID AS [Q_ModelProcedureTaskPart.PartID], 
            T.PartQuantity AS [Q_ModelProcedureTaskPart.PartQuantity], 
            T.Version AS [Q_ModelProcedureTaskPart.Version], 
            T.VersionAntecedentID AS [Q_ModelProcedureTaskPart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelProcedureTaskPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelProcedureTaskPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelProcedureTaskPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelProcedureTaskPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelProcedureTaskPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelProcedureTaskPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelProcedureTaskPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelProcedureTaskParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelScheduleCycle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelScheduleCycle
        [NKD.Module.BusinessObjects.Store.Q_ModelScheduleCycle](T1.[Q_ModelScheduleCycle.ModelScheduleCycleID], T1.[Q_ModelScheduleCycle.ModelID], T1.[Q_ModelScheduleCycle.ModelProcedureID], T1.[Q_ModelScheduleCycle.Sequence], T1.[Q_ModelScheduleCycle.ScheduleFrequencyUnitID], T1.[Q_ModelScheduleCycle.ScheduleFrequency], T1.[Q_ModelScheduleCycle.Version], T1.[Q_ModelScheduleCycle.VersionAntecedentID], T1.[Q_ModelScheduleCycle.VersionCertainty], T1.[Q_ModelScheduleCycle.VersionWorkflowInstanceID], T1.[Q_ModelScheduleCycle.VersionUpdatedBy], T1.[Q_ModelScheduleCycle.VersionDeletedBy], T1.[Q_ModelScheduleCycle.VersionOwnerContactID], T1.[Q_ModelScheduleCycle.VersionOwnerCompanyID], T1.[Q_ModelScheduleCycle.VersionUpdated])
    FROM (
        SELECT 
            T.ModelScheduleCycleID AS [Q_ModelScheduleCycle.ModelScheduleCycleID], 
            T.ModelID AS [Q_ModelScheduleCycle.ModelID], 
            T.ModelProcedureID AS [Q_ModelScheduleCycle.ModelProcedureID], 
            T.Sequence AS [Q_ModelScheduleCycle.Sequence], 
            T.ScheduleFrequencyUnitID AS [Q_ModelScheduleCycle.ScheduleFrequencyUnitID], 
            T.ScheduleFrequency AS [Q_ModelScheduleCycle.ScheduleFrequency], 
            T.Version AS [Q_ModelScheduleCycle.Version], 
            T.VersionAntecedentID AS [Q_ModelScheduleCycle.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelScheduleCycle.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelScheduleCycle.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelScheduleCycle.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelScheduleCycle.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelScheduleCycle.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelScheduleCycle.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelScheduleCycle.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelScheduleCycles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ModelWarranty.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ModelWarranty
        [NKD.Module.BusinessObjects.Store.Q_ModelWarranty](T1.[Q_ModelWarranty.ModelWarrantyID], T1.[Q_ModelWarranty.ModelID], T1.[Q_ModelWarranty.WarrantyTypeID], T1.[Q_ModelWarranty.WarrantyPeriodUnitID], T1.[Q_ModelWarranty.WarrantyPeriod], T1.[Q_ModelWarranty.WarrantyExpires], T1.[Q_ModelWarranty.WarrantyRenewal], T1.[Q_ModelWarranty.SupplierContractID], T1.[Q_ModelWarranty.Version], T1.[Q_ModelWarranty.VersionAntecedentID], T1.[Q_ModelWarranty.VersionCertainty], T1.[Q_ModelWarranty.VersionWorkflowInstanceID], T1.[Q_ModelWarranty.VersionUpdatedBy], T1.[Q_ModelWarranty.VersionDeletedBy], T1.[Q_ModelWarranty.VersionOwnerContactID], T1.[Q_ModelWarranty.VersionOwnerCompanyID], T1.[Q_ModelWarranty.VersionUpdated])
    FROM (
        SELECT 
            T.ModelWarrantyID AS [Q_ModelWarranty.ModelWarrantyID], 
            T.ModelID AS [Q_ModelWarranty.ModelID], 
            T.WarrantyTypeID AS [Q_ModelWarranty.WarrantyTypeID], 
            T.WarrantyPeriodUnitID AS [Q_ModelWarranty.WarrantyPeriodUnitID], 
            T.WarrantyPeriod AS [Q_ModelWarranty.WarrantyPeriod], 
            T.WarrantyExpires AS [Q_ModelWarranty.WarrantyExpires], 
            T.WarrantyRenewal AS [Q_ModelWarranty.WarrantyRenewal], 
            T.SupplierContractID AS [Q_ModelWarranty.SupplierContractID], 
            T.Version AS [Q_ModelWarranty.Version], 
            T.VersionAntecedentID AS [Q_ModelWarranty.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelWarranty.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelWarranty.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelWarranty.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelWarranty.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelWarranty.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelWarranty.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelWarranty.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelWarranties AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ProjectPlanTaskModel
        [NKD.Module.BusinessObjects.Store.Q_ProjectPlanTaskModel](T1.[Q_ProjectPlanTaskModel.ProjectPlanTaskModelID], T1.[Q_ProjectPlanTaskModel.ProjectPlanTaskID], T1.[Q_ProjectPlanTaskModel.ModelID], T1.[Q_ProjectPlanTaskModel.WarehouseModelID], T1.[Q_ProjectPlanTaskModel.SupplierModelID], T1.[Q_ProjectPlanTaskModel.QuantityUnitID], T1.[Q_ProjectPlanTaskModel.QuantityOrdered], T1.[Q_ProjectPlanTaskModel.QuantityDespatched], T1.[Q_ProjectPlanTaskModel.QuantityReceived], T1.[Q_ProjectPlanTaskModel.QuantityUsed], T1.[Q_ProjectPlanTaskModel.Used], T1.[Q_ProjectPlanTaskModel.Note], T1.[Q_ProjectPlanTaskModel.Version], T1.[Q_ProjectPlanTaskModel.VersionAntecedentID], T1.[Q_ProjectPlanTaskModel.VersionCertainty], T1.[Q_ProjectPlanTaskModel.VersionWorkflowInstanceID], T1.[Q_ProjectPlanTaskModel.VersionUpdatedBy], T1.[Q_ProjectPlanTaskModel.VersionDeletedBy], T1.[Q_ProjectPlanTaskModel.VersionOwnerContactID], T1.[Q_ProjectPlanTaskModel.VersionOwnerCompanyID], T1.[Q_ProjectPlanTaskModel.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskModelID AS [Q_ProjectPlanTaskModel.ProjectPlanTaskModelID], 
            T.ProjectPlanTaskID AS [Q_ProjectPlanTaskModel.ProjectPlanTaskID], 
            T.ModelID AS [Q_ProjectPlanTaskModel.ModelID], 
            T.WarehouseModelID AS [Q_ProjectPlanTaskModel.WarehouseModelID], 
            T.SupplierModelID AS [Q_ProjectPlanTaskModel.SupplierModelID], 
            T.QuantityUnitID AS [Q_ProjectPlanTaskModel.QuantityUnitID], 
            T.QuantityOrdered AS [Q_ProjectPlanTaskModel.QuantityOrdered], 
            T.QuantityDespatched AS [Q_ProjectPlanTaskModel.QuantityDespatched], 
            T.QuantityReceived AS [Q_ProjectPlanTaskModel.QuantityReceived], 
            T.QuantityUsed AS [Q_ProjectPlanTaskModel.QuantityUsed], 
            T.Used AS [Q_ProjectPlanTaskModel.Used], 
            T.Note AS [Q_ProjectPlanTaskModel.Note], 
            T.Version AS [Q_ProjectPlanTaskModel.Version], 
            T.VersionAntecedentID AS [Q_ProjectPlanTaskModel.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ProjectPlanTaskModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ProjectPlanTaskModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ProjectPlanTaskModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ProjectPlanTaskModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ProjectPlanTaskModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ProjectPlanTaskModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ProjectPlanTaskModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_ProjectPlanTaskPart
        [NKD.Module.BusinessObjects.Store.Q_ProjectPlanTaskPart](T1.[Q_ProjectPlanTaskPart.ProjectPlanTaskPartID], T1.[Q_ProjectPlanTaskPart.ProjectPlanTaskID], T1.[Q_ProjectPlanTaskPart.PartID], T1.[Q_ProjectPlanTaskPart.WarehousePartID], T1.[Q_ProjectPlanTaskPart.SupplierPartID], T1.[Q_ProjectPlanTaskPart.QuantityUnitID], T1.[Q_ProjectPlanTaskPart.QuantityOrdered], T1.[Q_ProjectPlanTaskPart.QuantityDespatched], T1.[Q_ProjectPlanTaskPart.QuantityReceived], T1.[Q_ProjectPlanTaskPart.QuantityUsed], T1.[Q_ProjectPlanTaskPart.Used], T1.[Q_ProjectPlanTaskPart.Note], T1.[Q_ProjectPlanTaskPart.Version], T1.[Q_ProjectPlanTaskPart.VersionAntecedentID], T1.[Q_ProjectPlanTaskPart.VersionCertainty], T1.[Q_ProjectPlanTaskPart.VersionWorkflowInstanceID], T1.[Q_ProjectPlanTaskPart.VersionUpdatedBy], T1.[Q_ProjectPlanTaskPart.VersionDeletedBy], T1.[Q_ProjectPlanTaskPart.VersionOwnerContactID], T1.[Q_ProjectPlanTaskPart.VersionOwnerCompanyID], T1.[Q_ProjectPlanTaskPart.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskPartID AS [Q_ProjectPlanTaskPart.ProjectPlanTaskPartID], 
            T.ProjectPlanTaskID AS [Q_ProjectPlanTaskPart.ProjectPlanTaskID], 
            T.PartID AS [Q_ProjectPlanTaskPart.PartID], 
            T.WarehousePartID AS [Q_ProjectPlanTaskPart.WarehousePartID], 
            T.SupplierPartID AS [Q_ProjectPlanTaskPart.SupplierPartID], 
            T.QuantityUnitID AS [Q_ProjectPlanTaskPart.QuantityUnitID], 
            T.QuantityOrdered AS [Q_ProjectPlanTaskPart.QuantityOrdered], 
            T.QuantityDespatched AS [Q_ProjectPlanTaskPart.QuantityDespatched], 
            T.QuantityReceived AS [Q_ProjectPlanTaskPart.QuantityReceived], 
            T.QuantityUsed AS [Q_ProjectPlanTaskPart.QuantityUsed], 
            T.Used AS [Q_ProjectPlanTaskPart.Used], 
            T.Note AS [Q_ProjectPlanTaskPart.Note], 
            T.Version AS [Q_ProjectPlanTaskPart.Version], 
            T.VersionAntecedentID AS [Q_ProjectPlanTaskPart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ProjectPlanTaskPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ProjectPlanTaskPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ProjectPlanTaskPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ProjectPlanTaskPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ProjectPlanTaskPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ProjectPlanTaskPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ProjectPlanTaskPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_Recall.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_Recall
        [NKD.Module.BusinessObjects.Store.Q_Recall](T1.[Q_Recall.RecallID], T1.[Q_Recall.GlobalRecallCode], T1.[Q_Recall.GlobalRecallOrigin], T1.[Q_Recall.ProjectID], T1.[Q_Recall.Issued], T1.[Q_Recall.IssuedBy], T1.[Q_Recall.Received], T1.[Q_Recall.ReceivedBy], T1.[Q_Recall.Actioned], T1.[Q_Recall.ActionedBy], T1.[Q_Recall.ResponsibleContactID], T1.[Q_Recall.Description], T1.[Q_Recall.Version], T1.[Q_Recall.VersionAntecedentID], T1.[Q_Recall.VersionCertainty], T1.[Q_Recall.VersionWorkflowInstanceID], T1.[Q_Recall.VersionUpdatedBy], T1.[Q_Recall.VersionDeletedBy], T1.[Q_Recall.VersionOwnerContactID], T1.[Q_Recall.VersionOwnerCompanyID], T1.[Q_Recall.VersionUpdated])
    FROM (
        SELECT 
            T.RecallID AS [Q_Recall.RecallID], 
            T.GlobalRecallCode AS [Q_Recall.GlobalRecallCode], 
            T.GlobalRecallOrigin AS [Q_Recall.GlobalRecallOrigin], 
            T.ProjectID AS [Q_Recall.ProjectID], 
            T.Issued AS [Q_Recall.Issued], 
            T.IssuedBy AS [Q_Recall.IssuedBy], 
            T.Received AS [Q_Recall.Received], 
            T.ReceivedBy AS [Q_Recall.ReceivedBy], 
            T.Actioned AS [Q_Recall.Actioned], 
            T.ActionedBy AS [Q_Recall.ActionedBy], 
            T.ResponsibleContactID AS [Q_Recall.ResponsibleContactID], 
            T.Description AS [Q_Recall.Description], 
            T.Version AS [Q_Recall.Version], 
            T.VersionAntecedentID AS [Q_Recall.VersionAntecedentID], 
            T.VersionCertainty AS [Q_Recall.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_Recall.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_Recall.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_Recall.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_Recall.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_Recall.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_Recall.VersionUpdated], 
            True AS _from0
        FROM NKDC.Recalls AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_RecallModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_RecallModel
        [NKD.Module.BusinessObjects.Store.Q_RecallModel](T1.[Q_RecallModel.RecallModelID], T1.[Q_RecallModel.RecallID], T1.[Q_RecallModel.ModelID], T1.[Q_RecallModel.Description], T1.[Q_RecallModel.Version], T1.[Q_RecallModel.VersionAntecedentID], T1.[Q_RecallModel.VersionCertainty], T1.[Q_RecallModel.VersionWorkflowInstanceID], T1.[Q_RecallModel.VersionUpdatedBy], T1.[Q_RecallModel.VersionDeletedBy], T1.[Q_RecallModel.VersionOwnerContactID], T1.[Q_RecallModel.VersionOwnerCompanyID], T1.[Q_RecallModel.VersionUpdated])
    FROM (
        SELECT 
            T.RecallModelID AS [Q_RecallModel.RecallModelID], 
            T.RecallID AS [Q_RecallModel.RecallID], 
            T.ModelID AS [Q_RecallModel.ModelID], 
            T.Description AS [Q_RecallModel.Description], 
            T.Version AS [Q_RecallModel.Version], 
            T.VersionAntecedentID AS [Q_RecallModel.VersionAntecedentID], 
            T.VersionCertainty AS [Q_RecallModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_RecallModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_RecallModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_RecallModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_RecallModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_RecallModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_RecallModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.RecallModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_RecallModelAsset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_RecallModelAsset
        [NKD.Module.BusinessObjects.Store.Q_RecallModelAsset](T1.[Q_RecallModelAsset.RecallModelAssetID], T1.[Q_RecallModelAsset.RecallModelID], T1.[Q_RecallModelAsset.AssetID], T1.[Q_RecallModelAsset.ProjectPlanID], T1.[Q_RecallModelAsset.Version], T1.[Q_RecallModelAsset.VersionAntecedentID], T1.[Q_RecallModelAsset.VersionCertainty], T1.[Q_RecallModelAsset.VersionWorkflowInstanceID], T1.[Q_RecallModelAsset.VersionUpdatedBy], T1.[Q_RecallModelAsset.VersionDeletedBy], T1.[Q_RecallModelAsset.VersionOwnerContactID], T1.[Q_RecallModelAsset.VersionOwnerCompanyID], T1.[Q_RecallModelAsset.VersionUpdated])
    FROM (
        SELECT 
            T.RecallModelAssetID AS [Q_RecallModelAsset.RecallModelAssetID], 
            T.RecallModelID AS [Q_RecallModelAsset.RecallModelID], 
            T.AssetID AS [Q_RecallModelAsset.AssetID], 
            T.ProjectPlanID AS [Q_RecallModelAsset.ProjectPlanID], 
            T.Version AS [Q_RecallModelAsset.Version], 
            T.VersionAntecedentID AS [Q_RecallModelAsset.VersionAntecedentID], 
            T.VersionCertainty AS [Q_RecallModelAsset.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_RecallModelAsset.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_RecallModelAsset.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_RecallModelAsset.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_RecallModelAsset.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_RecallModelAsset.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_RecallModelAsset.VersionUpdated], 
            True AS _from0
        FROM NKDC.RecallModelAssets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_SupplierModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_SupplierModel
        [NKD.Module.BusinessObjects.Store.Q_SupplierModel](T1.[Q_SupplierModel.SupplierModelID], T1.[Q_SupplierModel.SupplierID], T1.[Q_SupplierModel.ModelID], T1.[Q_SupplierModel.Sequence], T1.[Q_SupplierModel.SupplierContractID], T1.[Q_SupplierModel.IsOEM], T1.[Q_SupplierModel.OrderQuantityMinimum], T1.[Q_SupplierModel.CurrencyID], T1.[Q_SupplierModel.PricePerUnit], T1.[Q_SupplierModel.PriceUnitID], T1.[Q_SupplierModel.SupplierModelNumber], T1.[Q_SupplierModel.SupplierModelDescription], T1.[Q_SupplierModel.SupplierFileDataID], T1.[Q_SupplierModel.LeadTimeUnitID], T1.[Q_SupplierModel.LeadTime], T1.[Q_SupplierModel.Version], T1.[Q_SupplierModel.VersionAntecedentID], T1.[Q_SupplierModel.VersionCertainty], T1.[Q_SupplierModel.VersionWorkflowInstanceID], T1.[Q_SupplierModel.VersionUpdatedBy], T1.[Q_SupplierModel.VersionDeletedBy], T1.[Q_SupplierModel.VersionOwnerContactID], T1.[Q_SupplierModel.VersionOwnerCompanyID], T1.[Q_SupplierModel.VersionUpdated])
    FROM (
        SELECT 
            T.SupplierModelID AS [Q_SupplierModel.SupplierModelID], 
            T.SupplierID AS [Q_SupplierModel.SupplierID], 
            T.ModelID AS [Q_SupplierModel.ModelID], 
            T.Sequence AS [Q_SupplierModel.Sequence], 
            T.SupplierContractID AS [Q_SupplierModel.SupplierContractID], 
            T.IsOEM AS [Q_SupplierModel.IsOEM], 
            T.OrderQuantityMinimum AS [Q_SupplierModel.OrderQuantityMinimum], 
            T.CurrencyID AS [Q_SupplierModel.CurrencyID], 
            T.PricePerUnit AS [Q_SupplierModel.PricePerUnit], 
            T.PriceUnitID AS [Q_SupplierModel.PriceUnitID], 
            T.SupplierModelNumber AS [Q_SupplierModel.SupplierModelNumber], 
            T.SupplierModelDescription AS [Q_SupplierModel.SupplierModelDescription], 
            T.SupplierFileDataID AS [Q_SupplierModel.SupplierFileDataID], 
            T.LeadTimeUnitID AS [Q_SupplierModel.LeadTimeUnitID], 
            T.LeadTime AS [Q_SupplierModel.LeadTime], 
            T.Version AS [Q_SupplierModel.Version], 
            T.VersionAntecedentID AS [Q_SupplierModel.VersionAntecedentID], 
            T.VersionCertainty AS [Q_SupplierModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_SupplierModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_SupplierModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_SupplierModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_SupplierModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_SupplierModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_SupplierModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplierModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_SupplierPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_SupplierPart
        [NKD.Module.BusinessObjects.Store.Q_SupplierPart](T1.[Q_SupplierPart.SupplierPartID], T1.[Q_SupplierPart.SupplierID], T1.[Q_SupplierPart.PartID], T1.[Q_SupplierPart.Sequence], T1.[Q_SupplierPart.SupplierContractID], T1.[Q_SupplierPart.IsOEM], T1.[Q_SupplierPart.OrderQuantityMinimum], T1.[Q_SupplierPart.CurrencyID], T1.[Q_SupplierPart.PricePerUnit], T1.[Q_SupplierPart.PriceUnitID], T1.[Q_SupplierPart.SupplierPartNumber], T1.[Q_SupplierPart.SupplierPartDescription], T1.[Q_SupplierPart.SupplierFileDataID], T1.[Q_SupplierPart.LeadTimeUnitID], T1.[Q_SupplierPart.LeadTime], T1.[Q_SupplierPart.Version], T1.[Q_SupplierPart.VersionAntecedentID], T1.[Q_SupplierPart.VersionCertainty], T1.[Q_SupplierPart.VersionWorkflowInstanceID], T1.[Q_SupplierPart.VersionUpdatedBy], T1.[Q_SupplierPart.VersionDeletedBy], T1.[Q_SupplierPart.VersionOwnerContactID], T1.[Q_SupplierPart.VersionOwnerCompanyID], T1.[Q_SupplierPart.VersionUpdated])
    FROM (
        SELECT 
            T.SupplierPartID AS [Q_SupplierPart.SupplierPartID], 
            T.SupplierID AS [Q_SupplierPart.SupplierID], 
            T.PartID AS [Q_SupplierPart.PartID], 
            T.Sequence AS [Q_SupplierPart.Sequence], 
            T.SupplierContractID AS [Q_SupplierPart.SupplierContractID], 
            T.IsOEM AS [Q_SupplierPart.IsOEM], 
            T.OrderQuantityMinimum AS [Q_SupplierPart.OrderQuantityMinimum], 
            T.CurrencyID AS [Q_SupplierPart.CurrencyID], 
            T.PricePerUnit AS [Q_SupplierPart.PricePerUnit], 
            T.PriceUnitID AS [Q_SupplierPart.PriceUnitID], 
            T.SupplierPartNumber AS [Q_SupplierPart.SupplierPartNumber], 
            T.SupplierPartDescription AS [Q_SupplierPart.SupplierPartDescription], 
            T.SupplierFileDataID AS [Q_SupplierPart.SupplierFileDataID], 
            T.LeadTimeUnitID AS [Q_SupplierPart.LeadTimeUnitID], 
            T.LeadTime AS [Q_SupplierPart.LeadTime], 
            T.Version AS [Q_SupplierPart.Version], 
            T.VersionAntecedentID AS [Q_SupplierPart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_SupplierPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_SupplierPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_SupplierPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_SupplierPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_SupplierPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_SupplierPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_SupplierPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplierParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_Warehouse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView53()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_Warehouse
        [NKD.Module.BusinessObjects.Store.Q_Warehouse](T1.[Q_Warehouse.WarehouseID], T1.[Q_Warehouse.WarehouseName], T1.[Q_Warehouse.CompanyID], T1.[Q_Warehouse.PrimaryLocationID], T1.[Q_Warehouse.Description], T1.[Q_Warehouse.Version], T1.[Q_Warehouse.VersionAntecedentID], T1.[Q_Warehouse.VersionCertainty], T1.[Q_Warehouse.VersionWorkflowInstanceID], T1.[Q_Warehouse.VersionUpdatedBy], T1.[Q_Warehouse.VersionDeletedBy], T1.[Q_Warehouse.VersionOwnerContactID], T1.[Q_Warehouse.VersionOwnerCompanyID], T1.[Q_Warehouse.VersionUpdated])
    FROM (
        SELECT 
            T.WarehouseID AS [Q_Warehouse.WarehouseID], 
            T.WarehouseName AS [Q_Warehouse.WarehouseName], 
            T.CompanyID AS [Q_Warehouse.CompanyID], 
            T.PrimaryLocationID AS [Q_Warehouse.PrimaryLocationID], 
            T.Description AS [Q_Warehouse.Description], 
            T.Version AS [Q_Warehouse.Version], 
            T.VersionAntecedentID AS [Q_Warehouse.VersionAntecedentID], 
            T.VersionCertainty AS [Q_Warehouse.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_Warehouse.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_Warehouse.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_Warehouse.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_Warehouse.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_Warehouse.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_Warehouse.VersionUpdated], 
            True AS _from0
        FROM NKDC.Warehouses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView54()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_WarehouseModel
        [NKD.Module.BusinessObjects.Store.Q_WarehouseModel](T1.[Q_WarehouseModel.WarehouseModelID], T1.[Q_WarehouseModel.ModelID], T1.[Q_WarehouseModel.WarehouseID], T1.[Q_WarehouseModel.IssueCost], T1.[Q_WarehouseModel.QuantityOnOrder], T1.[Q_WarehouseModel.QuantityInStock], T1.[Q_WarehouseModel.QuantityOnHold], T1.[Q_WarehouseModel.QuantityReOrderLevel], T1.[Q_WarehouseModel.Version], T1.[Q_WarehouseModel.VersionAntecedentID], T1.[Q_WarehouseModel.VersionCertainty], T1.[Q_WarehouseModel.VersionWorkflowInstanceID], T1.[Q_WarehouseModel.VersionUpdatedBy], T1.[Q_WarehouseModel.VersionDeletedBy], T1.[Q_WarehouseModel.VersionOwnerContactID], T1.[Q_WarehouseModel.VersionOwnerCompanyID], T1.[Q_WarehouseModel.VersionUpdated])
    FROM (
        SELECT 
            T.WarehouseModelID AS [Q_WarehouseModel.WarehouseModelID], 
            T.ModelID AS [Q_WarehouseModel.ModelID], 
            T.WarehouseID AS [Q_WarehouseModel.WarehouseID], 
            T.IssueCost AS [Q_WarehouseModel.IssueCost], 
            T.QuantityOnOrder AS [Q_WarehouseModel.QuantityOnOrder], 
            T.QuantityInStock AS [Q_WarehouseModel.QuantityInStock], 
            T.QuantityOnHold AS [Q_WarehouseModel.QuantityOnHold], 
            T.QuantityReOrderLevel AS [Q_WarehouseModel.QuantityReOrderLevel], 
            T.Version AS [Q_WarehouseModel.Version], 
            T.VersionAntecedentID AS [Q_WarehouseModel.VersionAntecedentID], 
            T.VersionCertainty AS [Q_WarehouseModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_WarehouseModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_WarehouseModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_WarehouseModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_WarehouseModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_WarehouseModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_WarehouseModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.WarehouseModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModelSupplier.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView55()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_WarehouseModelSupplier
        [NKD.Module.BusinessObjects.Store.Q_WarehouseModelSupplier](T1.[Q_WarehouseModelSupplier.WarehouseModelSupplierID], T1.[Q_WarehouseModelSupplier.WarehouseModelID], T1.[Q_WarehouseModelSupplier.SupplierModelID], T1.[Q_WarehouseModelSupplier.QuantityUnitID], T1.[Q_WarehouseModelSupplier.QuantityOrdered], T1.[Q_WarehouseModelSupplier.Ordered], T1.[Q_WarehouseModelSupplier.Received], T1.[Q_WarehouseModelSupplier.Version], T1.[Q_WarehouseModelSupplier.VersionAntecedentID], T1.[Q_WarehouseModelSupplier.VersionCertainty], T1.[Q_WarehouseModelSupplier.VersionWorkflowInstanceID], T1.[Q_WarehouseModelSupplier.VersionUpdatedBy], T1.[Q_WarehouseModelSupplier.VersionDeletedBy], T1.[Q_WarehouseModelSupplier.VersionOwnerContactID], T1.[Q_WarehouseModelSupplier.VersionOwnerCompanyID], T1.[Q_WarehouseModelSupplier.VersionUpdated])
    FROM (
        SELECT 
            T.WarehouseModelSupplierID AS [Q_WarehouseModelSupplier.WarehouseModelSupplierID], 
            T.WarehouseModelID AS [Q_WarehouseModelSupplier.WarehouseModelID], 
            T.SupplierModelID AS [Q_WarehouseModelSupplier.SupplierModelID], 
            T.QuantityUnitID AS [Q_WarehouseModelSupplier.QuantityUnitID], 
            T.QuantityOrdered AS [Q_WarehouseModelSupplier.QuantityOrdered], 
            T.Ordered AS [Q_WarehouseModelSupplier.Ordered], 
            T.Received AS [Q_WarehouseModelSupplier.Received], 
            T.Version AS [Q_WarehouseModelSupplier.Version], 
            T.VersionAntecedentID AS [Q_WarehouseModelSupplier.VersionAntecedentID], 
            T.VersionCertainty AS [Q_WarehouseModelSupplier.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_WarehouseModelSupplier.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_WarehouseModelSupplier.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_WarehouseModelSupplier.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_WarehouseModelSupplier.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_WarehouseModelSupplier.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_WarehouseModelSupplier.VersionUpdated], 
            True AS _from0
        FROM NKDC.WarehouseModelSuppliers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_WarehousePart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView56()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_WarehousePart
        [NKD.Module.BusinessObjects.Store.Q_WarehousePart](T1.[Q_WarehousePart.WarehousePartID], T1.[Q_WarehousePart.PartID], T1.[Q_WarehousePart.WarehouseID], T1.[Q_WarehousePart.IssueCost], T1.[Q_WarehousePart.QuantityOnOrder], T1.[Q_WarehousePart.QuantityInStock], T1.[Q_WarehousePart.QuantityOnHold], T1.[Q_WarehousePart.QuantityReOrderLevel], T1.[Q_WarehousePart.Version], T1.[Q_WarehousePart.VersionAntecedentID], T1.[Q_WarehousePart.VersionCertainty], T1.[Q_WarehousePart.VersionWorkflowInstanceID], T1.[Q_WarehousePart.VersionUpdatedBy], T1.[Q_WarehousePart.VersionDeletedBy], T1.[Q_WarehousePart.VersionOwnerContactID], T1.[Q_WarehousePart.VersionOwnerCompanyID], T1.[Q_WarehousePart.VersionUpdated])
    FROM (
        SELECT 
            T.WarehousePartID AS [Q_WarehousePart.WarehousePartID], 
            T.PartID AS [Q_WarehousePart.PartID], 
            T.WarehouseID AS [Q_WarehousePart.WarehouseID], 
            T.IssueCost AS [Q_WarehousePart.IssueCost], 
            T.QuantityOnOrder AS [Q_WarehousePart.QuantityOnOrder], 
            T.QuantityInStock AS [Q_WarehousePart.QuantityInStock], 
            T.QuantityOnHold AS [Q_WarehousePart.QuantityOnHold], 
            T.QuantityReOrderLevel AS [Q_WarehousePart.QuantityReOrderLevel], 
            T.Version AS [Q_WarehousePart.Version], 
            T.VersionAntecedentID AS [Q_WarehousePart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_WarehousePart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_WarehousePart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_WarehousePart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_WarehousePart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_WarehousePart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_WarehousePart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_WarehousePart.VersionUpdated], 
            True AS _from0
        FROM NKDC.WarehouseParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_WarehousePartSupplier.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView57()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_WarehousePartSupplier
        [NKD.Module.BusinessObjects.Store.Q_WarehousePartSupplier](T1.[Q_WarehousePartSupplier.WarehousePartSupplierID], T1.[Q_WarehousePartSupplier.WarehousePartID], T1.[Q_WarehousePartSupplier.SupplierPartID], T1.[Q_WarehousePartSupplier.QuantityUnitID], T1.[Q_WarehousePartSupplier.QuantityOrdered], T1.[Q_WarehousePartSupplier.Ordered], T1.[Q_WarehousePartSupplier.Received], T1.[Q_WarehousePartSupplier.Version], T1.[Q_WarehousePartSupplier.VersionAntecedentID], T1.[Q_WarehousePartSupplier.VersionCertainty], T1.[Q_WarehousePartSupplier.VersionWorkflowInstanceID], T1.[Q_WarehousePartSupplier.VersionUpdatedBy], T1.[Q_WarehousePartSupplier.VersionDeletedBy], T1.[Q_WarehousePartSupplier.VersionOwnerContactID], T1.[Q_WarehousePartSupplier.VersionOwnerCompanyID], T1.[Q_WarehousePartSupplier.VersionUpdated])
    FROM (
        SELECT 
            T.WarehousePartSupplierID AS [Q_WarehousePartSupplier.WarehousePartSupplierID], 
            T.WarehousePartID AS [Q_WarehousePartSupplier.WarehousePartID], 
            T.SupplierPartID AS [Q_WarehousePartSupplier.SupplierPartID], 
            T.QuantityUnitID AS [Q_WarehousePartSupplier.QuantityUnitID], 
            T.QuantityOrdered AS [Q_WarehousePartSupplier.QuantityOrdered], 
            T.Ordered AS [Q_WarehousePartSupplier.Ordered], 
            T.Received AS [Q_WarehousePartSupplier.Received], 
            T.Version AS [Q_WarehousePartSupplier.Version], 
            T.VersionAntecedentID AS [Q_WarehousePartSupplier.VersionAntecedentID], 
            T.VersionCertainty AS [Q_WarehousePartSupplier.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_WarehousePartSupplier.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_WarehousePartSupplier.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_WarehousePartSupplier.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_WarehousePartSupplier.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_WarehousePartSupplier.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_WarehousePartSupplier.VersionUpdated], 
            True AS _from0
        FROM NKDC.WarehousePartSuppliers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_WorkflowSchedule.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView58()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_WorkflowSchedule
        [NKD.Module.BusinessObjects.Store.Q_WorkflowSchedule](T1.[Q_WorkflowSchedule.WorkflowScheduleID], T1.[Q_WorkflowSchedule.EventTypeID], T1.[Q_WorkflowSchedule.TableType], T1.[Q_WorkflowSchedule.ReferenceID], T1.[Q_WorkflowSchedule.WorkerID], T1.[Q_WorkflowSchedule.WorkflowInstanceID], T1.[Q_WorkflowSchedule.Version], T1.[Q_WorkflowSchedule.VersionAntecedentID], T1.[Q_WorkflowSchedule.VersionCertainty], T1.[Q_WorkflowSchedule.VersionWorkflowInstanceID], T1.[Q_WorkflowSchedule.VersionUpdatedBy], T1.[Q_WorkflowSchedule.VersionDeletedBy], T1.[Q_WorkflowSchedule.VersionOwnerContactID], T1.[Q_WorkflowSchedule.VersionOwnerCompanyID], T1.[Q_WorkflowSchedule.VersionUpdated])
    FROM (
        SELECT 
            T.WorkflowScheduleID AS [Q_WorkflowSchedule.WorkflowScheduleID], 
            T.EventTypeID AS [Q_WorkflowSchedule.EventTypeID], 
            T.TableType AS [Q_WorkflowSchedule.TableType], 
            T.ReferenceID AS [Q_WorkflowSchedule.ReferenceID], 
            T.WorkerID AS [Q_WorkflowSchedule.WorkerID], 
            T.WorkflowInstanceID AS [Q_WorkflowSchedule.WorkflowInstanceID], 
            T.Version AS [Q_WorkflowSchedule.Version], 
            T.VersionAntecedentID AS [Q_WorkflowSchedule.VersionAntecedentID], 
            T.VersionCertainty AS [Q_WorkflowSchedule.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_WorkflowSchedule.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_WorkflowSchedule.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_WorkflowSchedule.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_WorkflowSchedule.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_WorkflowSchedule.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_WorkflowSchedule.VersionUpdated], 
            True AS _from0
        FROM NKDC.WorkflowSchedules AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView59()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Address
        [NKD.Module.BusinessObjects.Store.X_Address](T1.[X_Address.AddressID], T1.[X_Address.AddressTypeID], T1.[X_Address.AddressName], T1.[X_Address.Sequence], T1.[X_Address.Street], T1.[X_Address.Extended], T1.[X_Address.City], T1.[X_Address.State], T1.[X_Address.Country], T1.[X_Address.Postcode], T1.[X_Address.IsHQ], T1.[X_Address.IsPostBox], T1.[X_Address.IsBusiness], T1.[X_Address.IsHome], T1.[X_Address.Phone], T1.[X_Address.Fax], T1.[X_Address.Email], T1.[X_Address.Mobile], T1.[X_Address.LocationID], T1.[X_Address.Version], T1.[X_Address.VersionAntecedentID], T1.[X_Address.VersionCertainty], T1.[X_Address.VersionWorkflowInstanceID], T1.[X_Address.VersionUpdatedBy], T1.[X_Address.VersionDeletedBy], T1.[X_Address.VersionOwnerContactID], T1.[X_Address.VersionOwnerCompanyID], T1.[X_Address.VersionUpdated])
    FROM (
        SELECT 
            T.AddressID AS [X_Address.AddressID], 
            T.AddressTypeID AS [X_Address.AddressTypeID], 
            T.AddressName AS [X_Address.AddressName], 
            T.Sequence AS [X_Address.Sequence], 
            T.Street AS [X_Address.Street], 
            T.Extended AS [X_Address.Extended], 
            T.City AS [X_Address.City], 
            T.State AS [X_Address.State], 
            T.Country AS [X_Address.Country], 
            T.Postcode AS [X_Address.Postcode], 
            T.IsHQ AS [X_Address.IsHQ], 
            T.IsPostBox AS [X_Address.IsPostBox], 
            T.IsBusiness AS [X_Address.IsBusiness], 
            T.IsHome AS [X_Address.IsHome], 
            T.Phone AS [X_Address.Phone], 
            T.Fax AS [X_Address.Fax], 
            T.Email AS [X_Address.Email], 
            T.Mobile AS [X_Address.Mobile], 
            T.LocationID AS [X_Address.LocationID], 
            T.Version AS [X_Address.Version], 
            T.VersionAntecedentID AS [X_Address.VersionAntecedentID], 
            T.VersionCertainty AS [X_Address.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Address.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Address.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Address.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Address.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Address.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Address.VersionUpdated], 
            True AS _from0
        FROM NKDC.Addresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroup.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView60()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroup
        [NKD.Module.BusinessObjects.Store.X_AssayGroup](T1.[X_AssayGroup.AssayGroupID], T1.[X_AssayGroup.ProjectID], T1.[X_AssayGroup.AssayGroupName], T1.[X_AssayGroup.LabCompanyID], T1.[X_AssayGroup.Submitted], T1.[X_AssayGroup.SubmittedContactID], T1.[X_AssayGroup.Received], T1.[X_AssayGroup.ReceivedContactID], T1.[X_AssayGroup.Entered], T1.[X_AssayGroup.EnteredContactID], T1.[X_AssayGroup.Comment], T1.[X_AssayGroup.Version], T1.[X_AssayGroup.VersionAntecedentID], T1.[X_AssayGroup.VersionCertainty], T1.[X_AssayGroup.VersionWorkflowInstanceID], T1.[X_AssayGroup.VersionUpdatedBy], T1.[X_AssayGroup.VersionDeletedBy], T1.[X_AssayGroup.VersionOwnerContactID], T1.[X_AssayGroup.VersionOwnerCompanyID], T1.[X_AssayGroup.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupID AS [X_AssayGroup.AssayGroupID], 
            T.ProjectID AS [X_AssayGroup.ProjectID], 
            T.AssayGroupName AS [X_AssayGroup.AssayGroupName], 
            T.LabCompanyID AS [X_AssayGroup.LabCompanyID], 
            T.Submitted AS [X_AssayGroup.Submitted], 
            T.SubmittedContactID AS [X_AssayGroup.SubmittedContactID], 
            T.Received AS [X_AssayGroup.Received], 
            T.ReceivedContactID AS [X_AssayGroup.ReceivedContactID], 
            T.Entered AS [X_AssayGroup.Entered], 
            T.EnteredContactID AS [X_AssayGroup.EnteredContactID], 
            T.Comment AS [X_AssayGroup.Comment], 
            T.Version AS [X_AssayGroup.Version], 
            T.VersionAntecedentID AS [X_AssayGroup.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroup.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroup.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroup.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroup.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroup.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroup.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroup.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupStandardTestResult.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView61()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupStandardTestResult
        [NKD.Module.BusinessObjects.Store.X_AssayGroupStandardTestResult](T1.[X_AssayGroupStandardTestResult.AssayGroupStandardTestResultID], T1.[X_AssayGroupStandardTestResult.AssayGroupTestSampleID], T1.[X_AssayGroupStandardTestResult.AssayGroupTestID], T1.[X_AssayGroupStandardTestResult.AssayStandardID], T1.[X_AssayGroupStandardTestResult.SampleCategoryID], T1.[X_AssayGroupStandardTestResult.SampleStateID], T1.[X_AssayGroupStandardTestResult.SampleTypeID], T1.[X_AssayGroupStandardTestResult.LabResultText], T1.[X_AssayGroupStandardTestResult.LabResult], T1.[X_AssayGroupStandardTestResult.LabResultMinimum], T1.[X_AssayGroupStandardTestResult.LabResultMaximum], T1.[X_AssayGroupStandardTestResult.LabSampleName], T1.[X_AssayGroupStandardTestResult.LabBatchNumber], T1.[X_AssayGroupStandardTestResult.Sampled], T1.[X_AssayGroupStandardTestResult.AddressID], T1.[X_AssayGroupStandardTestResult.SampledBy], T1.[X_AssayGroupStandardTestResult.Version], T1.[X_AssayGroupStandardTestResult.VersionAntecedentID], T1.[X_AssayGroupStandardTestResult.VersionCertainty], T1.[X_AssayGroupStandardTestResult.VersionWorkflowInstanceID], T1.[X_AssayGroupStandardTestResult.VersionUpdatedBy], T1.[X_AssayGroupStandardTestResult.VersionDeletedBy], T1.[X_AssayGroupStandardTestResult.VersionOwnerContactID], T1.[X_AssayGroupStandardTestResult.VersionOwnerCompanyID], T1.[X_AssayGroupStandardTestResult.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupStandardTestResultID AS [X_AssayGroupStandardTestResult.AssayGroupStandardTestResultID], 
            T.AssayGroupTestSampleID AS [X_AssayGroupStandardTestResult.AssayGroupTestSampleID], 
            T.AssayGroupTestID AS [X_AssayGroupStandardTestResult.AssayGroupTestID], 
            T.AssayStandardID AS [X_AssayGroupStandardTestResult.AssayStandardID], 
            T.SampleCategoryID AS [X_AssayGroupStandardTestResult.SampleCategoryID], 
            T.SampleStateID AS [X_AssayGroupStandardTestResult.SampleStateID], 
            T.SampleTypeID AS [X_AssayGroupStandardTestResult.SampleTypeID], 
            T.LabResultText AS [X_AssayGroupStandardTestResult.LabResultText], 
            T.LabResult AS [X_AssayGroupStandardTestResult.LabResult], 
            T.LabResultMinimum AS [X_AssayGroupStandardTestResult.LabResultMinimum], 
            T.LabResultMaximum AS [X_AssayGroupStandardTestResult.LabResultMaximum], 
            T.LabSampleName AS [X_AssayGroupStandardTestResult.LabSampleName], 
            T.LabBatchNumber AS [X_AssayGroupStandardTestResult.LabBatchNumber], 
            T.Sampled AS [X_AssayGroupStandardTestResult.Sampled], 
            T.AddressID AS [X_AssayGroupStandardTestResult.AddressID], 
            T.SampledBy AS [X_AssayGroupStandardTestResult.SampledBy], 
            T.Version AS [X_AssayGroupStandardTestResult.Version], 
            T.VersionAntecedentID AS [X_AssayGroupStandardTestResult.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupStandardTestResult.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupStandardTestResult.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupStandardTestResult.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupStandardTestResult.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupStandardTestResult.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupStandardTestResult.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupStandardTestResult.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupStandardTestResults AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTest.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView62()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupTest
        [NKD.Module.BusinessObjects.Store.X_AssayGroupTest](T1.[X_AssayGroupTest.AssayGroupTestID], T1.[X_AssayGroupTest.AssayGroupID], T1.[X_AssayGroupTest.AssayTypeName], T1.[X_AssayGroupTest.AssayTestName], T1.[X_AssayGroupTest.ParameterID], T1.[X_AssayGroupTest.AssayTestPriority], T1.[X_AssayGroupTest.AssayTypeID], T1.[X_AssayGroupTest.AssayComplianceID], T1.[X_AssayGroupTest.AssayMethodID], T1.[X_AssayGroupTest.AssayTechniqueID], T1.[X_AssayGroupTest.Version], T1.[X_AssayGroupTest.VersionAntecedentID], T1.[X_AssayGroupTest.VersionCertainty], T1.[X_AssayGroupTest.VersionWorkflowInstanceID], T1.[X_AssayGroupTest.VersionUpdatedBy], T1.[X_AssayGroupTest.VersionDeletedBy], T1.[X_AssayGroupTest.VersionOwnerContactID], T1.[X_AssayGroupTest.VersionOwnerCompanyID], T1.[X_AssayGroupTest.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupTestID AS [X_AssayGroupTest.AssayGroupTestID], 
            T.AssayGroupID AS [X_AssayGroupTest.AssayGroupID], 
            T.AssayTypeName AS [X_AssayGroupTest.AssayTypeName], 
            T.AssayTestName AS [X_AssayGroupTest.AssayTestName], 
            T.ParameterID AS [X_AssayGroupTest.ParameterID], 
            T.AssayTestPriority AS [X_AssayGroupTest.AssayTestPriority], 
            T.AssayTypeID AS [X_AssayGroupTest.AssayTypeID], 
            T.AssayComplianceID AS [X_AssayGroupTest.AssayComplianceID], 
            T.AssayMethodID AS [X_AssayGroupTest.AssayMethodID], 
            T.AssayTechniqueID AS [X_AssayGroupTest.AssayTechniqueID], 
            T.Version AS [X_AssayGroupTest.Version], 
            T.VersionAntecedentID AS [X_AssayGroupTest.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupTest.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupTest.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupTest.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupTest.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupTest.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupTest.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupTest.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupTests AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResult.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView63()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupTestResult
        [NKD.Module.BusinessObjects.Store.X_AssayGroupTestResult](T1.[X_AssayGroupTestResult.AssayGroupTestResultID], T1.[X_AssayGroupTestResult.SampleID], T1.[X_AssayGroupTestResult.AssayGroupSubsampleID], T1.[X_AssayGroupTestResult.LabSampleName], T1.[X_AssayGroupTestResult.AssayGroupTestID], T1.[X_AssayGroupTestResult.LabResultText], T1.[X_AssayGroupTestResult.LabResult], T1.[X_AssayGroupTestResult.LabResultMinimum], T1.[X_AssayGroupTestResult.LabResultMaximum], T1.[X_AssayGroupTestResult.LabBatchNumber], T1.[X_AssayGroupTestResult.Sampled], T1.[X_AssayGroupTestResult.SampledBy], T1.[X_AssayGroupTestResult.Version], T1.[X_AssayGroupTestResult.VersionAntecedentID], T1.[X_AssayGroupTestResult.VersionCertainty], T1.[X_AssayGroupTestResult.VersionWorkflowInstanceID], T1.[X_AssayGroupTestResult.VersionUpdatedBy], T1.[X_AssayGroupTestResult.VersionDeletedBy], T1.[X_AssayGroupTestResult.VersionOwnerContactID], T1.[X_AssayGroupTestResult.VersionOwnerCompanyID], T1.[X_AssayGroupTestResult.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupTestResultID AS [X_AssayGroupTestResult.AssayGroupTestResultID], 
            T.SampleID AS [X_AssayGroupTestResult.SampleID], 
            T.AssayGroupSubsampleID AS [X_AssayGroupTestResult.AssayGroupSubsampleID], 
            T.LabSampleName AS [X_AssayGroupTestResult.LabSampleName], 
            T.AssayGroupTestID AS [X_AssayGroupTestResult.AssayGroupTestID], 
            T.LabResultText AS [X_AssayGroupTestResult.LabResultText], 
            T.LabResult AS [X_AssayGroupTestResult.LabResult], 
            T.LabResultMinimum AS [X_AssayGroupTestResult.LabResultMinimum], 
            T.LabResultMaximum AS [X_AssayGroupTestResult.LabResultMaximum], 
            T.LabBatchNumber AS [X_AssayGroupTestResult.LabBatchNumber], 
            T.Sampled AS [X_AssayGroupTestResult.Sampled], 
            T.SampledBy AS [X_AssayGroupTestResult.SampledBy], 
            T.Version AS [X_AssayGroupTestResult.Version], 
            T.VersionAntecedentID AS [X_AssayGroupTestResult.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupTestResult.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupTestResult.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupTestResult.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupTestResult.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupTestResult.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupTestResult.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupTestResult.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupTestResults AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultComment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView64()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupTestResultComment
        [NKD.Module.BusinessObjects.Store.X_AssayGroupTestResultComment](T1.[X_AssayGroupTestResultComment.AssayGroupTestResultCommentID], T1.[X_AssayGroupTestResultComment.AssayGroupTestResultID], T1.[X_AssayGroupTestResultComment.Comment], T1.[X_AssayGroupTestResultComment.Version], T1.[X_AssayGroupTestResultComment.VersionAntecedentID], T1.[X_AssayGroupTestResultComment.VersionCertainty], T1.[X_AssayGroupTestResultComment.VersionWorkflowInstanceID], T1.[X_AssayGroupTestResultComment.VersionUpdatedBy], T1.[X_AssayGroupTestResultComment.VersionDeletedBy], T1.[X_AssayGroupTestResultComment.VersionOwnerContactID], T1.[X_AssayGroupTestResultComment.VersionOwnerCompanyID], T1.[X_AssayGroupTestResultComment.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupTestResultCommentID AS [X_AssayGroupTestResultComment.AssayGroupTestResultCommentID], 
            T.AssayGroupTestResultID AS [X_AssayGroupTestResultComment.AssayGroupTestResultID], 
            T.Comment AS [X_AssayGroupTestResultComment.Comment], 
            T.Version AS [X_AssayGroupTestResultComment.Version], 
            T.VersionAntecedentID AS [X_AssayGroupTestResultComment.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupTestResultComment.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupTestResultComment.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupTestResultComment.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupTestResultComment.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupTestResultComment.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupTestResultComment.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupTestResultComment.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupTestResultComments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultDuplicate.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView65()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupTestResultDuplicate
        [NKD.Module.BusinessObjects.Store.X_AssayGroupTestResultDuplicate](T1.[X_AssayGroupTestResultDuplicate.AssayGroupTestResultDuplicateID], T1.[X_AssayGroupTestResultDuplicate.AssayGroupTestResultID], T1.[X_AssayGroupTestResultDuplicate.LabResultText], T1.[X_AssayGroupTestResultDuplicate.LabResult], T1.[X_AssayGroupTestResultDuplicate.LabResultMinimum], T1.[X_AssayGroupTestResultDuplicate.LabResultMaximum], T1.[X_AssayGroupTestResultDuplicate.LabSampleName], T1.[X_AssayGroupTestResultDuplicate.LabBatchNumber], T1.[X_AssayGroupTestResultDuplicate.Sampled], T1.[X_AssayGroupTestResultDuplicate.SampledBy], T1.[X_AssayGroupTestResultDuplicate.Version], T1.[X_AssayGroupTestResultDuplicate.VersionAntecedentID], T1.[X_AssayGroupTestResultDuplicate.VersionCertainty], T1.[X_AssayGroupTestResultDuplicate.VersionWorkflowInstanceID], T1.[X_AssayGroupTestResultDuplicate.VersionUpdatedBy], T1.[X_AssayGroupTestResultDuplicate.VersionDeletedBy], T1.[X_AssayGroupTestResultDuplicate.VersionOwnerContactID], T1.[X_AssayGroupTestResultDuplicate.VersionOwnerCompanyID], T1.[X_AssayGroupTestResultDuplicate.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupTestResultDuplicateID AS [X_AssayGroupTestResultDuplicate.AssayGroupTestResultDuplicateID], 
            T.AssayGroupTestResultID AS [X_AssayGroupTestResultDuplicate.AssayGroupTestResultID], 
            T.LabResultText AS [X_AssayGroupTestResultDuplicate.LabResultText], 
            T.LabResult AS [X_AssayGroupTestResultDuplicate.LabResult], 
            T.LabResultMinimum AS [X_AssayGroupTestResultDuplicate.LabResultMinimum], 
            T.LabResultMaximum AS [X_AssayGroupTestResultDuplicate.LabResultMaximum], 
            T.LabSampleName AS [X_AssayGroupTestResultDuplicate.LabSampleName], 
            T.LabBatchNumber AS [X_AssayGroupTestResultDuplicate.LabBatchNumber], 
            T.Sampled AS [X_AssayGroupTestResultDuplicate.Sampled], 
            T.SampledBy AS [X_AssayGroupTestResultDuplicate.SampledBy], 
            T.Version AS [X_AssayGroupTestResultDuplicate.Version], 
            T.VersionAntecedentID AS [X_AssayGroupTestResultDuplicate.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupTestResultDuplicate.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupTestResultDuplicate.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupTestResultDuplicate.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupTestResultDuplicate.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupTestResultDuplicate.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupTestResultDuplicate.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupTestResultDuplicate.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupTestResultDuplicates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_BlockModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView66()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_BlockModel
        [NKD.Module.BusinessObjects.Store.X_BlockModel](T1.[X_BlockModel.BlockModelID], T1.[X_BlockModel.ProjectID], T1.[X_BlockModel.Alias], T1.[X_BlockModel.OriginX], T1.[X_BlockModel.OriginY], T1.[X_BlockModel.OriginZ], T1.[X_BlockModel.IsIJKCalculated], T1.[X_BlockModel.OriginI], T1.[X_BlockModel.OriginJ], T1.[X_BlockModel.OriginK], T1.[X_BlockModel.MaximumI], T1.[X_BlockModel.MaximumJ], T1.[X_BlockModel.MaximumK], T1.[X_BlockModel.MinimumI], T1.[X_BlockModel.MinimumJ], T1.[X_BlockModel.MinimumK], T1.[X_BlockModel.DimensionEasting], T1.[X_BlockModel.DimensionNorthing], T1.[X_BlockModel.DimensionElevation], T1.[X_BlockModel.IsOriginNorthPositive], T1.[X_BlockModel.IsOriginEastPositive], T1.[X_BlockModel.IsOriginElevationUpwardsPositive], T1.[X_BlockModel.CubeCentroid0OriginOffsetX], T1.[X_BlockModel.CubeCentroid0OriginOffsetY], T1.[X_BlockModel.CubeCentroid0OriginOffsetZ], T1.[X_BlockModel.UnitIJK], T1.[X_BlockModel.DefaultISize], T1.[X_BlockModel.DefaultJSize], T1.[X_BlockModel.DefaultKSize], T1.[X_BlockModel.AuthorContactID], T1.[X_BlockModel.ResponsibleContactID], T1.[X_BlockModel.ApproverContactID], T1.[X_BlockModel.ExternalReviewerContactID], T1.[X_BlockModel.Version], T1.[X_BlockModel.VersionAntecedentID], T1.[X_BlockModel.VersionCertainty], T1.[X_BlockModel.VersionWorkflowInstanceID], T1.[X_BlockModel.VersionUpdatedBy], T1.[X_BlockModel.VersionDeletedBy], T1.[X_BlockModel.VersionOwnerContactID], T1.[X_BlockModel.VersionOwnerCompanyID], T1.[X_BlockModel.VersionUpdated])
    FROM (
        SELECT 
            T.BlockModelID AS [X_BlockModel.BlockModelID], 
            T.ProjectID AS [X_BlockModel.ProjectID], 
            T.Alias AS [X_BlockModel.Alias], 
            T.OriginX AS [X_BlockModel.OriginX], 
            T.OriginY AS [X_BlockModel.OriginY], 
            T.OriginZ AS [X_BlockModel.OriginZ], 
            T.IsIJKCalculated AS [X_BlockModel.IsIJKCalculated], 
            T.OriginI AS [X_BlockModel.OriginI], 
            T.OriginJ AS [X_BlockModel.OriginJ], 
            T.OriginK AS [X_BlockModel.OriginK], 
            T.MaximumI AS [X_BlockModel.MaximumI], 
            T.MaximumJ AS [X_BlockModel.MaximumJ], 
            T.MaximumK AS [X_BlockModel.MaximumK], 
            T.MinimumI AS [X_BlockModel.MinimumI], 
            T.MinimumJ AS [X_BlockModel.MinimumJ], 
            T.MinimumK AS [X_BlockModel.MinimumK], 
            T.DimensionEasting AS [X_BlockModel.DimensionEasting], 
            T.DimensionNorthing AS [X_BlockModel.DimensionNorthing], 
            T.DimensionElevation AS [X_BlockModel.DimensionElevation], 
            T.IsOriginNorthPositive AS [X_BlockModel.IsOriginNorthPositive], 
            T.IsOriginEastPositive AS [X_BlockModel.IsOriginEastPositive], 
            T.IsOriginElevationUpwardsPositive AS [X_BlockModel.IsOriginElevationUpwardsPositive], 
            T.CubeCentroid0OriginOffsetX AS [X_BlockModel.CubeCentroid0OriginOffsetX], 
            T.CubeCentroid0OriginOffsetY AS [X_BlockModel.CubeCentroid0OriginOffsetY], 
            T.CubeCentroid0OriginOffsetZ AS [X_BlockModel.CubeCentroid0OriginOffsetZ], 
            T.UnitIJK AS [X_BlockModel.UnitIJK], 
            T.DefaultISize AS [X_BlockModel.DefaultISize], 
            T.DefaultJSize AS [X_BlockModel.DefaultJSize], 
            T.DefaultKSize AS [X_BlockModel.DefaultKSize], 
            T.AuthorContactID AS [X_BlockModel.AuthorContactID], 
            T.ResponsibleContactID AS [X_BlockModel.ResponsibleContactID], 
            T.ApproverContactID AS [X_BlockModel.ApproverContactID], 
            T.ExternalReviewerContactID AS [X_BlockModel.ExternalReviewerContactID], 
            T.Version AS [X_BlockModel.Version], 
            T.VersionAntecedentID AS [X_BlockModel.VersionAntecedentID], 
            T.VersionCertainty AS [X_BlockModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_BlockModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_BlockModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_BlockModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_BlockModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_BlockModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_BlockModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.BlockModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlock.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView67()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_BlockModelBlock
        [NKD.Module.BusinessObjects.Store.X_BlockModelBlock](T1.[X_BlockModelBlock.BlockModelBlockID], T1.[X_BlockModelBlock.BlockModelID], T1.[X_BlockModelBlock.Domain], T1.[X_BlockModelBlock.I], T1.[X_BlockModelBlock.J], T1.[X_BlockModelBlock.K], T1.[X_BlockModelBlock.CentroidX], T1.[X_BlockModelBlock.CentroidY], T1.[X_BlockModelBlock.CentroidZ], T1.[X_BlockModelBlock.LengthX], T1.[X_BlockModelBlock.LengthY], T1.[X_BlockModelBlock.LengthZ], T1.[X_BlockModelBlock.MinimumSamples], T1.[X_BlockModelBlock.MaximumSamples], T1.[X_BlockModelBlock.EstimationTechnique], T1.[X_BlockModelBlock.KrigingEfficiency], T1.[X_BlockModelBlock.KrigingError], T1.[X_BlockModelBlock.KrigingVariance], T1.[X_BlockModelBlock.SlopeOfRegression], T1.[X_BlockModelBlock.Density], T1.[X_BlockModelBlock.ResourceCategory], T1.[X_BlockModelBlock.Numeric1], T1.[X_BlockModelBlock.Numeric2], T1.[X_BlockModelBlock.Numeric3], T1.[X_BlockModelBlock.Numeric4], T1.[X_BlockModelBlock.Numeric5], T1.[X_BlockModelBlock.Numeric6], T1.[X_BlockModelBlock.Numeric7], T1.[X_BlockModelBlock.Numeric8], T1.[X_BlockModelBlock.Numeric9], T1.[X_BlockModelBlock.Numeric10], T1.[X_BlockModelBlock.Numeric11], T1.[X_BlockModelBlock.Numeric12], T1.[X_BlockModelBlock.Numeric13], T1.[X_BlockModelBlock.Numeric14], T1.[X_BlockModelBlock.Numeric15], T1.[X_BlockModelBlock.Numeric16], T1.[X_BlockModelBlock.Numeric17], T1.[X_BlockModelBlock.Numeric18], T1.[X_BlockModelBlock.Numeric19], T1.[X_BlockModelBlock.Numeric20], T1.[X_BlockModelBlock.Numeric21], T1.[X_BlockModelBlock.Numeric22], T1.[X_BlockModelBlock.Numeric23], T1.[X_BlockModelBlock.Numeric24], T1.[X_BlockModelBlock.Numeric25], T1.[X_BlockModelBlock.Numeric26], T1.[X_BlockModelBlock.Numeric27], T1.[X_BlockModelBlock.Numeric28], T1.[X_BlockModelBlock.Numeric29], T1.[X_BlockModelBlock.Numeric30], T1.[X_BlockModelBlock.Numeric31], T1.[X_BlockModelBlock.String1], T1.[X_BlockModelBlock.String2], T1.[X_BlockModelBlock.String3], T1.[X_BlockModelBlock.String4], T1.[X_BlockModelBlock.String5], T1.[X_BlockModelBlock.String6], T1.[X_BlockModelBlock.String7], T1.[X_BlockModelBlock.String8], T1.[X_BlockModelBlock.String9], T1.[X_BlockModelBlock.String10], T1.[X_BlockModelBlock.String11], T1.[X_BlockModelBlock.Version], T1.[X_BlockModelBlock.VersionAntecedentID], T1.[X_BlockModelBlock.VersionCertainty], T1.[X_BlockModelBlock.VersionWorkflowInstanceID], T1.[X_BlockModelBlock.VersionUpdatedBy], T1.[X_BlockModelBlock.VersionDeletedBy], T1.[X_BlockModelBlock.VersionOwnerContactID], T1.[X_BlockModelBlock.VersionOwnerCompanyID], T1.[X_BlockModelBlock.VersionUpdated])
    FROM (
        SELECT 
            T.BlockModelBlockID AS [X_BlockModelBlock.BlockModelBlockID], 
            T.BlockModelID AS [X_BlockModelBlock.BlockModelID], 
            T.Domain AS [X_BlockModelBlock.Domain], 
            T.I AS [X_BlockModelBlock.I], 
            T.J AS [X_BlockModelBlock.J], 
            T.K AS [X_BlockModelBlock.K], 
            T.CentroidX AS [X_BlockModelBlock.CentroidX], 
            T.CentroidY AS [X_BlockModelBlock.CentroidY], 
            T.CentroidZ AS [X_BlockModelBlock.CentroidZ], 
            T.LengthX AS [X_BlockModelBlock.LengthX], 
            T.LengthY AS [X_BlockModelBlock.LengthY], 
            T.LengthZ AS [X_BlockModelBlock.LengthZ], 
            T.MinimumSamples AS [X_BlockModelBlock.MinimumSamples], 
            T.MaximumSamples AS [X_BlockModelBlock.MaximumSamples], 
            T.EstimationTechnique AS [X_BlockModelBlock.EstimationTechnique], 
            T.KrigingEfficiency AS [X_BlockModelBlock.KrigingEfficiency], 
            T.KrigingError AS [X_BlockModelBlock.KrigingError], 
            T.KrigingVariance AS [X_BlockModelBlock.KrigingVariance], 
            T.SlopeOfRegression AS [X_BlockModelBlock.SlopeOfRegression], 
            T.Density AS [X_BlockModelBlock.Density], 
            T.ResourceCategory AS [X_BlockModelBlock.ResourceCategory], 
            T.Numeric1 AS [X_BlockModelBlock.Numeric1], 
            T.Numeric2 AS [X_BlockModelBlock.Numeric2], 
            T.Numeric3 AS [X_BlockModelBlock.Numeric3], 
            T.Numeric4 AS [X_BlockModelBlock.Numeric4], 
            T.Numeric5 AS [X_BlockModelBlock.Numeric5], 
            T.Numeric6 AS [X_BlockModelBlock.Numeric6], 
            T.Numeric7 AS [X_BlockModelBlock.Numeric7], 
            T.Numeric8 AS [X_BlockModelBlock.Numeric8], 
            T.Numeric9 AS [X_BlockModelBlock.Numeric9], 
            T.Numeric10 AS [X_BlockModelBlock.Numeric10], 
            T.Numeric11 AS [X_BlockModelBlock.Numeric11], 
            T.Numeric12 AS [X_BlockModelBlock.Numeric12], 
            T.Numeric13 AS [X_BlockModelBlock.Numeric13], 
            T.Numeric14 AS [X_BlockModelBlock.Numeric14], 
            T.Numeric15 AS [X_BlockModelBlock.Numeric15], 
            T.Numeric16 AS [X_BlockModelBlock.Numeric16], 
            T.Numeric17 AS [X_BlockModelBlock.Numeric17], 
            T.Numeric18 AS [X_BlockModelBlock.Numeric18], 
            T.Numeric19 AS [X_BlockModelBlock.Numeric19], 
            T.Numeric20 AS [X_BlockModelBlock.Numeric20], 
            T.Numeric21 AS [X_BlockModelBlock.Numeric21], 
            T.Numeric22 AS [X_BlockModelBlock.Numeric22], 
            T.Numeric23 AS [X_BlockModelBlock.Numeric23], 
            T.Numeric24 AS [X_BlockModelBlock.Numeric24], 
            T.Numeric25 AS [X_BlockModelBlock.Numeric25], 
            T.Numeric26 AS [X_BlockModelBlock.Numeric26], 
            T.Numeric27 AS [X_BlockModelBlock.Numeric27], 
            T.Numeric28 AS [X_BlockModelBlock.Numeric28], 
            T.Numeric29 AS [X_BlockModelBlock.Numeric29], 
            T.Numeric30 AS [X_BlockModelBlock.Numeric30], 
            T.Numeric31 AS [X_BlockModelBlock.Numeric31], 
            T.String1 AS [X_BlockModelBlock.String1], 
            T.String2 AS [X_BlockModelBlock.String2], 
            T.String3 AS [X_BlockModelBlock.String3], 
            T.String4 AS [X_BlockModelBlock.String4], 
            T.String5 AS [X_BlockModelBlock.String5], 
            T.String6 AS [X_BlockModelBlock.String6], 
            T.String7 AS [X_BlockModelBlock.String7], 
            T.String8 AS [X_BlockModelBlock.String8], 
            T.String9 AS [X_BlockModelBlock.String9], 
            T.String10 AS [X_BlockModelBlock.String10], 
            T.String11 AS [X_BlockModelBlock.String11], 
            T.Version AS [X_BlockModelBlock.Version], 
            T.VersionAntecedentID AS [X_BlockModelBlock.VersionAntecedentID], 
            T.VersionCertainty AS [X_BlockModelBlock.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_BlockModelBlock.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_BlockModelBlock.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_BlockModelBlock.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_BlockModelBlock.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_BlockModelBlock.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_BlockModelBlock.VersionUpdated], 
            True AS _from0
        FROM NKDC.BlockModelBlocks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlockData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView68()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_BlockModelBlockData
        [NKD.Module.BusinessObjects.Store.X_BlockModelBlockData](T1.[X_BlockModelBlockData.BlockModelBlockDataID], T1.[X_BlockModelBlockData.BlockModelID], T1.[X_BlockModelBlockData.BlockModelBlockID], T1.[X_BlockModelBlockData.ParameterID], T1.[X_BlockModelBlockData.BlockModelBlockDataText], T1.[X_BlockModelBlockData.BlockModelBlockDataValue], T1.[X_BlockModelBlockData.Version], T1.[X_BlockModelBlockData.VersionAntecedentID], T1.[X_BlockModelBlockData.VersionCertainty], T1.[X_BlockModelBlockData.VersionWorkflowInstanceID], T1.[X_BlockModelBlockData.VersionUpdatedBy], T1.[X_BlockModelBlockData.VersionDeletedBy], T1.[X_BlockModelBlockData.VersionOwnerContactID], T1.[X_BlockModelBlockData.VersionOwnerCompanyID], T1.[X_BlockModelBlockData.VersionUpdated])
    FROM (
        SELECT 
            T.BlockModelBlockDataID AS [X_BlockModelBlockData.BlockModelBlockDataID], 
            T.BlockModelID AS [X_BlockModelBlockData.BlockModelID], 
            T.BlockModelBlockID AS [X_BlockModelBlockData.BlockModelBlockID], 
            T.ParameterID AS [X_BlockModelBlockData.ParameterID], 
            T.BlockModelBlockDataText AS [X_BlockModelBlockData.BlockModelBlockDataText], 
            T.BlockModelBlockDataValue AS [X_BlockModelBlockData.BlockModelBlockDataValue], 
            T.Version AS [X_BlockModelBlockData.Version], 
            T.VersionAntecedentID AS [X_BlockModelBlockData.VersionAntecedentID], 
            T.VersionCertainty AS [X_BlockModelBlockData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_BlockModelBlockData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_BlockModelBlockData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_BlockModelBlockData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_BlockModelBlockData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_BlockModelBlockData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_BlockModelBlockData.VersionUpdated], 
            True AS _from0
        FROM NKDC.BlockModelBlockDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_BlockModelMetadata.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView69()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_BlockModelMetadata
        [NKD.Module.BusinessObjects.Store.X_BlockModelMetadata](T1.[X_BlockModelMetadata.BlockModelMetadataID], T1.[X_BlockModelMetadata.BlockModelID], T1.[X_BlockModelMetadata.ParameterID], T1.[X_BlockModelMetadata.IsColumnData], T1.[X_BlockModelMetadata.BlockModelMetadataText], T1.[X_BlockModelMetadata.BlockModelMetadataValue], T1.[X_BlockModelMetadata.Version], T1.[X_BlockModelMetadata.VersionAntecedentID], T1.[X_BlockModelMetadata.VersionCertainty], T1.[X_BlockModelMetadata.VersionWorkflowInstanceID], T1.[X_BlockModelMetadata.VersionUpdatedBy], T1.[X_BlockModelMetadata.VersionDeletedBy], T1.[X_BlockModelMetadata.VersionOwnerContactID], T1.[X_BlockModelMetadata.VersionOwnerCompanyID], T1.[X_BlockModelMetadata.VersionUpdated])
    FROM (
        SELECT 
            T.BlockModelMetadataID AS [X_BlockModelMetadata.BlockModelMetadataID], 
            T.BlockModelID AS [X_BlockModelMetadata.BlockModelID], 
            T.ParameterID AS [X_BlockModelMetadata.ParameterID], 
            T.IsColumnData AS [X_BlockModelMetadata.IsColumnData], 
            T.BlockModelMetadataText AS [X_BlockModelMetadata.BlockModelMetadataText], 
            T.BlockModelMetadataValue AS [X_BlockModelMetadata.BlockModelMetadataValue], 
            T.Version AS [X_BlockModelMetadata.Version], 
            T.VersionAntecedentID AS [X_BlockModelMetadata.VersionAntecedentID], 
            T.VersionCertainty AS [X_BlockModelMetadata.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_BlockModelMetadata.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_BlockModelMetadata.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_BlockModelMetadata.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_BlockModelMetadata.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_BlockModelMetadata.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_BlockModelMetadata.VersionUpdated], 
            True AS _from0
        FROM NKDC.BlockModelMetadatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Casing.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView70()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Casing
        [NKD.Module.BusinessObjects.Store.X_Casing](T1.[X_Casing.CasingID], T1.[X_Casing.HeaderID], T1.[X_Casing.FromDepth], T1.[X_Casing.ToDepth], T1.[X_Casing.CasingTypeID], T1.[X_Casing.CasingSize], T1.[X_Casing.CasingSizeUnit], T1.[X_Casing.CasingInsideData], T1.[X_Casing.CasingInsideDataUnit], T1.[X_Casing.CasingOutsideData], T1.[X_Casing.CasingOutsideDataUnit], T1.[X_Casing.LengthRecovered], T1.[X_Casing.Comment], T1.[X_Casing.Version], T1.[X_Casing.VersionAntecedentID], T1.[X_Casing.VersionCertainty], T1.[X_Casing.VersionWorkflowInstanceID], T1.[X_Casing.VersionUpdatedBy], T1.[X_Casing.VersionDeletedBy], T1.[X_Casing.VersionOwnerContactID], T1.[X_Casing.VersionOwnerCompanyID], T1.[X_Casing.VersionUpdated])
    FROM (
        SELECT 
            T.CasingID AS [X_Casing.CasingID], 
            T.HeaderID AS [X_Casing.HeaderID], 
            T.FromDepth AS [X_Casing.FromDepth], 
            T.ToDepth AS [X_Casing.ToDepth], 
            T.CasingTypeID AS [X_Casing.CasingTypeID], 
            T.CasingSize AS [X_Casing.CasingSize], 
            T.CasingSizeUnit AS [X_Casing.CasingSizeUnit], 
            T.CasingInsideData AS [X_Casing.CasingInsideData], 
            T.CasingInsideDataUnit AS [X_Casing.CasingInsideDataUnit], 
            T.CasingOutsideData AS [X_Casing.CasingOutsideData], 
            T.CasingOutsideDataUnit AS [X_Casing.CasingOutsideDataUnit], 
            T.LengthRecovered AS [X_Casing.LengthRecovered], 
            T.Comment AS [X_Casing.Comment], 
            T.Version AS [X_Casing.Version], 
            T.VersionAntecedentID AS [X_Casing.VersionAntecedentID], 
            T.VersionCertainty AS [X_Casing.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Casing.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Casing.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Casing.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Casing.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Casing.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Casing.VersionUpdated], 
            True AS _from0
        FROM NKDC.Casings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Cementing.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView71()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Cementing
        [NKD.Module.BusinessObjects.Store.X_Cementing](T1.[X_Cementing.CementingID], T1.[X_Cementing.HeaderID], T1.[X_Cementing.FromDepth], T1.[X_Cementing.ToDepth], T1.[X_Cementing.CementingDate], T1.[X_Cementing.Volume], T1.[X_Cementing.Comment], T1.[X_Cementing.Version], T1.[X_Cementing.VersionAntecedentID], T1.[X_Cementing.VersionCertainty], T1.[X_Cementing.VersionWorkflowInstanceID], T1.[X_Cementing.VersionUpdatedBy], T1.[X_Cementing.VersionDeletedBy], T1.[X_Cementing.VersionOwnerContactID], T1.[X_Cementing.VersionOwnerCompanyID], T1.[X_Cementing.VersionUpdated])
    FROM (
        SELECT 
            T.CementingID AS [X_Cementing.CementingID], 
            T.HeaderID AS [X_Cementing.HeaderID], 
            T.FromDepth AS [X_Cementing.FromDepth], 
            T.ToDepth AS [X_Cementing.ToDepth], 
            T.CementingDate AS [X_Cementing.CementingDate], 
            T.Volume AS [X_Cementing.Volume], 
            T.Comment AS [X_Cementing.Comment], 
            T.Version AS [X_Cementing.Version], 
            T.VersionAntecedentID AS [X_Cementing.VersionAntecedentID], 
            T.VersionCertainty AS [X_Cementing.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Cementing.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Cementing.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Cementing.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Cementing.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Cementing.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Cementing.VersionUpdated], 
            True AS _from0
        FROM NKDC.Cementings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Company.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView72()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Company
        [NKD.Module.BusinessObjects.Store.X_Company](T1.[X_Company.CompanyID], T1.[X_Company.CompanyName], T1.[X_Company.CountryID], T1.[X_Company.PrimaryContactID], T1.[X_Company.Comment], T1.[X_Company.Thumbnail], T1.[X_Company.OriginalFileDataID], T1.[X_Company.Version], T1.[X_Company.VersionAntecedentID], T1.[X_Company.VersionCertainty], T1.[X_Company.VersionWorkflowInstanceID], T1.[X_Company.VersionUpdatedBy], T1.[X_Company.VersionDeletedBy], T1.[X_Company.VersionOwnerContactID], T1.[X_Company.VersionOwnerCompanyID], T1.[X_Company.VersionUpdated])
    FROM (
        SELECT 
            T.CompanyID AS [X_Company.CompanyID], 
            T.CompanyName AS [X_Company.CompanyName], 
            T.CountryID AS [X_Company.CountryID], 
            T.PrimaryContactID AS [X_Company.PrimaryContactID], 
            T.Comment AS [X_Company.Comment], 
            T.Thumbnail AS [X_Company.Thumbnail], 
            T.OriginalFileDataID AS [X_Company.OriginalFileDataID], 
            T.Version AS [X_Company.Version], 
            T.VersionAntecedentID AS [X_Company.VersionAntecedentID], 
            T.VersionCertainty AS [X_Company.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Company.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Company.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Company.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Company.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Company.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Company.VersionUpdated], 
            True AS _from0
        FROM NKDC.Companies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_CompanyAddress.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView73()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_CompanyAddress
        [NKD.Module.BusinessObjects.Store.X_CompanyAddress](T1.[X_CompanyAddress.CompanyAddressID], T1.[X_CompanyAddress.CompanyID], T1.[X_CompanyAddress.AddressID], T1.[X_CompanyAddress.Version], T1.[X_CompanyAddress.VersionAntecedentID], T1.[X_CompanyAddress.VersionCertainty], T1.[X_CompanyAddress.VersionWorkflowInstanceID], T1.[X_CompanyAddress.VersionUpdatedBy], T1.[X_CompanyAddress.VersionDeletedBy], T1.[X_CompanyAddress.VersionOwnerContactID], T1.[X_CompanyAddress.VersionOwnerCompanyID], T1.[X_CompanyAddress.VersionUpdated])
    FROM (
        SELECT 
            T.CompanyAddressID AS [X_CompanyAddress.CompanyAddressID], 
            T.CompanyID AS [X_CompanyAddress.CompanyID], 
            T.AddressID AS [X_CompanyAddress.AddressID], 
            T.Version AS [X_CompanyAddress.Version], 
            T.VersionAntecedentID AS [X_CompanyAddress.VersionAntecedentID], 
            T.VersionCertainty AS [X_CompanyAddress.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_CompanyAddress.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_CompanyAddress.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_CompanyAddress.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_CompanyAddress.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_CompanyAddress.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_CompanyAddress.VersionUpdated], 
            True AS _from0
        FROM NKDC.CompanyAddresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_CompanyRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView74()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_CompanyRelation
        [NKD.Module.BusinessObjects.Store.X_CompanyRelation](T1.[X_CompanyRelation.CompanyRelationID], T1.[X_CompanyRelation.CompanyID], T1.[X_CompanyRelation.ParentCompanyID], T1.[X_CompanyRelation.IsChildVisible], T1.[X_CompanyRelation.IsParentVisible], T1.[X_CompanyRelation.Version], T1.[X_CompanyRelation.VersionAntecedentID], T1.[X_CompanyRelation.VersionCertainty], T1.[X_CompanyRelation.VersionWorkflowInstanceID], T1.[X_CompanyRelation.VersionUpdatedBy], T1.[X_CompanyRelation.VersionDeletedBy], T1.[X_CompanyRelation.VersionOwnerContactID], T1.[X_CompanyRelation.VersionOwnerCompanyID], T1.[X_CompanyRelation.VersionUpdated])
    FROM (
        SELECT 
            T.CompanyRelationID AS [X_CompanyRelation.CompanyRelationID], 
            T.CompanyID AS [X_CompanyRelation.CompanyID], 
            T.ParentCompanyID AS [X_CompanyRelation.ParentCompanyID], 
            T.IsChildVisible AS [X_CompanyRelation.IsChildVisible], 
            T.IsParentVisible AS [X_CompanyRelation.IsParentVisible], 
            T.Version AS [X_CompanyRelation.Version], 
            T.VersionAntecedentID AS [X_CompanyRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_CompanyRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_CompanyRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_CompanyRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_CompanyRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_CompanyRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_CompanyRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_CompanyRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.CompanyRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Compliance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView75()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Compliance
        [NKD.Module.BusinessObjects.Store.X_Compliance](T1.[X_Compliance.ComplianceID], T1.[X_Compliance.ComplianceName], T1.[X_Compliance.ComplianceVersion], T1.[X_Compliance.CountryID], T1.[X_Compliance.ProvinceID], T1.[X_Compliance.ValidFrom], T1.[X_Compliance.Expiry], T1.[X_Compliance.AuthorityCompanyID], T1.[X_Compliance.MaintainedBy], T1.[X_Compliance.Description], T1.[X_Compliance.ComplianceForm], T1.[X_Compliance.Version], T1.[X_Compliance.VersionAntecedentID], T1.[X_Compliance.VersionCertainty], T1.[X_Compliance.VersionWorkflowInstanceID], T1.[X_Compliance.VersionUpdatedBy], T1.[X_Compliance.VersionDeletedBy], T1.[X_Compliance.VersionOwnerContactID], T1.[X_Compliance.VersionOwnerCompanyID], T1.[X_Compliance.VersionUpdated])
    FROM (
        SELECT 
            T.ComplianceID AS [X_Compliance.ComplianceID], 
            T.ComplianceName AS [X_Compliance.ComplianceName], 
            T.ComplianceVersion AS [X_Compliance.ComplianceVersion], 
            T.CountryID AS [X_Compliance.CountryID], 
            T.ProvinceID AS [X_Compliance.ProvinceID], 
            T.ValidFrom AS [X_Compliance.ValidFrom], 
            T.Expiry AS [X_Compliance.Expiry], 
            T.AuthorityCompanyID AS [X_Compliance.AuthorityCompanyID], 
            T.MaintainedBy AS [X_Compliance.MaintainedBy], 
            T.Description AS [X_Compliance.Description], 
            T.ComplianceForm AS [X_Compliance.ComplianceForm], 
            T.Version AS [X_Compliance.Version], 
            T.VersionAntecedentID AS [X_Compliance.VersionAntecedentID], 
            T.VersionCertainty AS [X_Compliance.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Compliance.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Compliance.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Compliance.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Compliance.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Compliance.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Compliance.VersionUpdated], 
            True AS _from0
        FROM NKDC.Compliances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ComplianceTask.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView76()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ComplianceTask
        [NKD.Module.BusinessObjects.Store.X_ComplianceTask](T1.[X_ComplianceTask.ComplianceTaskID], T1.[X_ComplianceTask.ComplianceID], T1.[X_ComplianceTask.TaskID], T1.[X_ComplianceTask.ExecutePrior], T1.[X_ComplianceTask.Sequence], T1.[X_ComplianceTask.Version], T1.[X_ComplianceTask.VersionAntecedentID], T1.[X_ComplianceTask.VersionCertainty], T1.[X_ComplianceTask.VersionWorkflowInstanceID], T1.[X_ComplianceTask.VersionUpdatedBy], T1.[X_ComplianceTask.VersionDeletedBy], T1.[X_ComplianceTask.VersionOwnerContactID], T1.[X_ComplianceTask.VersionOwnerCompanyID], T1.[X_ComplianceTask.VersionUpdated])
    FROM (
        SELECT 
            T.ComplianceTaskID AS [X_ComplianceTask.ComplianceTaskID], 
            T.ComplianceID AS [X_ComplianceTask.ComplianceID], 
            T.TaskID AS [X_ComplianceTask.TaskID], 
            T.ExecutePrior AS [X_ComplianceTask.ExecutePrior], 
            T.Sequence AS [X_ComplianceTask.Sequence], 
            T.Version AS [X_ComplianceTask.Version], 
            T.VersionAntecedentID AS [X_ComplianceTask.VersionAntecedentID], 
            T.VersionCertainty AS [X_ComplianceTask.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ComplianceTask.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ComplianceTask.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ComplianceTask.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ComplianceTask.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ComplianceTask.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ComplianceTask.VersionUpdated], 
            True AS _from0
        FROM NKDC.ComplianceTasks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ComplianceWorkType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView77()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ComplianceWorkType
        [NKD.Module.BusinessObjects.Store.X_ComplianceWorkType](T1.[X_ComplianceWorkType.ComplianceWorkTypeID], T1.[X_ComplianceWorkType.ComplianceID], T1.[X_ComplianceWorkType.WorkTypeID], T1.[X_ComplianceWorkType.Version], T1.[X_ComplianceWorkType.VersionAntecedentID], T1.[X_ComplianceWorkType.VersionCertainty], T1.[X_ComplianceWorkType.VersionWorkflowInstanceID], T1.[X_ComplianceWorkType.VersionUpdatedBy], T1.[X_ComplianceWorkType.VersionDeletedBy], T1.[X_ComplianceWorkType.VersionOwnerContactID], T1.[X_ComplianceWorkType.VersionOwnerCompanyID], T1.[X_ComplianceWorkType.VersionUpdated])
    FROM (
        SELECT 
            T.ComplianceWorkTypeID AS [X_ComplianceWorkType.ComplianceWorkTypeID], 
            T.ComplianceID AS [X_ComplianceWorkType.ComplianceID], 
            T.WorkTypeID AS [X_ComplianceWorkType.WorkTypeID], 
            T.Version AS [X_ComplianceWorkType.Version], 
            T.VersionAntecedentID AS [X_ComplianceWorkType.VersionAntecedentID], 
            T.VersionCertainty AS [X_ComplianceWorkType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ComplianceWorkType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ComplianceWorkType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ComplianceWorkType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ComplianceWorkType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ComplianceWorkType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ComplianceWorkType.VersionUpdated], 
            True AS _from0
        FROM NKDC.ComplianceWorkTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Contact.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView78()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Contact
        [NKD.Module.BusinessObjects.Store.X_Contact](T1.[X_Contact.ContactID], T1.[X_Contact.ContactName], T1.[X_Contact.Title], T1.[X_Contact.Surname], T1.[X_Contact.Firstname], T1.[X_Contact.Username], T1.[X_Contact.Hash], T1.[X_Contact.DefaultEmail], T1.[X_Contact.DefaultEmailValidated], T1.[X_Contact.DefaultMobile], T1.[X_Contact.DefaultMobileValidated], T1.[X_Contact.MiddleNames], T1.[X_Contact.Initials], T1.[X_Contact.DOB], T1.[X_Contact.BirthCountryID], T1.[X_Contact.BirthCity], T1.[X_Contact.AspNetUserID], T1.[X_Contact.XafUserID], T1.[X_Contact.OAuthID], T1.[X_Contact.Photo], T1.[X_Contact.ShortBiography], T1.[X_Contact.Version], T1.[X_Contact.VersionAntecedentID], T1.[X_Contact.VersionCertainty], T1.[X_Contact.VersionWorkflowInstanceID], T1.[X_Contact.VersionUpdatedBy], T1.[X_Contact.VersionDeletedBy], T1.[X_Contact.VersionOwnerContactID], T1.[X_Contact.VersionOwnerCompanyID], T1.[X_Contact.VersionUpdated])
    FROM (
        SELECT 
            T.ContactID AS [X_Contact.ContactID], 
            T.ContactName AS [X_Contact.ContactName], 
            T.Title AS [X_Contact.Title], 
            T.Surname AS [X_Contact.Surname], 
            T.Firstname AS [X_Contact.Firstname], 
            T.Username AS [X_Contact.Username], 
            T.Hash AS [X_Contact.Hash], 
            T.DefaultEmail AS [X_Contact.DefaultEmail], 
            T.DefaultEmailValidated AS [X_Contact.DefaultEmailValidated], 
            T.DefaultMobile AS [X_Contact.DefaultMobile], 
            T.DefaultMobileValidated AS [X_Contact.DefaultMobileValidated], 
            T.MiddleNames AS [X_Contact.MiddleNames], 
            T.Initials AS [X_Contact.Initials], 
            T.DOB AS [X_Contact.DOB], 
            T.BirthCountryID AS [X_Contact.BirthCountryID], 
            T.BirthCity AS [X_Contact.BirthCity], 
            T.AspNetUserID AS [X_Contact.AspNetUserID], 
            T.XafUserID AS [X_Contact.XafUserID], 
            T.OAuthID AS [X_Contact.OAuthID], 
            T.Photo AS [X_Contact.Photo], 
            T.ShortBiography AS [X_Contact.ShortBiography], 
            T.Version AS [X_Contact.Version], 
            T.VersionAntecedentID AS [X_Contact.VersionAntecedentID], 
            T.VersionCertainty AS [X_Contact.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Contact.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Contact.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Contact.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Contact.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Contact.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Contact.VersionUpdated], 
            True AS _from0
        FROM NKDC.Contacts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ContactAddress.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView79()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ContactAddress
        [NKD.Module.BusinessObjects.Store.X_ContactAddress](T1.[X_ContactAddress.ContactAddressID], T1.[X_ContactAddress.ContactID], T1.[X_ContactAddress.AddressID], T1.[X_ContactAddress.Version], T1.[X_ContactAddress.VersionAntecedentID], T1.[X_ContactAddress.VersionCertainty], T1.[X_ContactAddress.VersionWorkflowInstanceID], T1.[X_ContactAddress.VersionUpdatedBy], T1.[X_ContactAddress.VersionDeletedBy], T1.[X_ContactAddress.VersionOwnerContactID], T1.[X_ContactAddress.VersionOwnerCompanyID], T1.[X_ContactAddress.VersionUpdated])
    FROM (
        SELECT 
            T.ContactAddressID AS [X_ContactAddress.ContactAddressID], 
            T.ContactID AS [X_ContactAddress.ContactID], 
            T.AddressID AS [X_ContactAddress.AddressID], 
            T.Version AS [X_ContactAddress.Version], 
            T.VersionAntecedentID AS [X_ContactAddress.VersionAntecedentID], 
            T.VersionCertainty AS [X_ContactAddress.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ContactAddress.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ContactAddress.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ContactAddress.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ContactAddress.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ContactAddress.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ContactAddress.VersionUpdated], 
            True AS _from0
        FROM NKDC.ContactAddresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Contract.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView80()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Contract
        [NKD.Module.BusinessObjects.Store.X_Contract](T1.[X_Contract.ContractID], T1.[X_Contract.ParentContractID], T1.[X_Contract.ContractName], T1.[X_Contract.Description], T1.[X_Contract.ProjectID], T1.[X_Contract.LastDeliverableID], T1.[X_Contract.ObligeeID], T1.[X_Contract.ObligeeCompanyID], T1.[X_Contract.ObligorID], T1.[X_Contract.ObligorCompanyID], T1.[X_Contract.AssigneeID], T1.[X_Contract.AssigneeCompanyID], T1.[X_Contract.SolicitorID], T1.[X_Contract.SolicitorCompanyID], T1.[X_Contract.Risk], T1.[X_Contract.RiskStarts], T1.[X_Contract.RiskEnds], T1.[X_Contract.RiskCriticality], T1.[X_Contract.RiskLikelihood], T1.[X_Contract.Value], T1.[X_Contract.Tax], T1.[X_Contract.Started], T1.[X_Contract.Ended], T1.[X_Contract.Completed], T1.[X_Contract.ContractText], T1.[X_Contract.Comment], T1.[X_Contract.FileDataID], T1.[X_Contract.RespondWithinHours], T1.[X_Contract.Version], T1.[X_Contract.VersionAntecedentID], T1.[X_Contract.VersionCertainty], T1.[X_Contract.VersionWorkflowInstanceID], T1.[X_Contract.VersionUpdatedBy], T1.[X_Contract.VersionDeletedBy], T1.[X_Contract.VersionOwnerContactID], T1.[X_Contract.VersionOwnerCompanyID], T1.[X_Contract.VersionUpdated])
    FROM (
        SELECT 
            T.ContractID AS [X_Contract.ContractID], 
            T.ParentContractID AS [X_Contract.ParentContractID], 
            T.ContractName AS [X_Contract.ContractName], 
            T.Description AS [X_Contract.Description], 
            T.ProjectID AS [X_Contract.ProjectID], 
            T.LastDeliverableID AS [X_Contract.LastDeliverableID], 
            T.ObligeeID AS [X_Contract.ObligeeID], 
            T.ObligeeCompanyID AS [X_Contract.ObligeeCompanyID], 
            T.ObligorID AS [X_Contract.ObligorID], 
            T.ObligorCompanyID AS [X_Contract.ObligorCompanyID], 
            T.AssigneeID AS [X_Contract.AssigneeID], 
            T.AssigneeCompanyID AS [X_Contract.AssigneeCompanyID], 
            T.SolicitorID AS [X_Contract.SolicitorID], 
            T.SolicitorCompanyID AS [X_Contract.SolicitorCompanyID], 
            T.Risk AS [X_Contract.Risk], 
            T.RiskStarts AS [X_Contract.RiskStarts], 
            T.RiskEnds AS [X_Contract.RiskEnds], 
            T.RiskCriticality AS [X_Contract.RiskCriticality], 
            T.RiskLikelihood AS [X_Contract.RiskLikelihood], 
            T.[Value] AS [X_Contract.Value], 
            T.Tax AS [X_Contract.Tax], 
            T.Started AS [X_Contract.Started], 
            T.Ended AS [X_Contract.Ended], 
            T.Completed AS [X_Contract.Completed], 
            T.ContractText AS [X_Contract.ContractText], 
            T.Comment AS [X_Contract.Comment], 
            T.FileDataID AS [X_Contract.FileDataID], 
            T.RespondWithinHours AS [X_Contract.RespondWithinHours], 
            T.Version AS [X_Contract.Version], 
            T.VersionAntecedentID AS [X_Contract.VersionAntecedentID], 
            T.VersionCertainty AS [X_Contract.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Contract.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Contract.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Contract.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Contract.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Contract.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Contract.VersionUpdated], 
            True AS _from0
        FROM NKDC.Contracts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ContractCondition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView81()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ContractCondition
        [NKD.Module.BusinessObjects.Store.X_ContractCondition](T1.[X_ContractCondition.ContractConditionID], T1.[X_ContractCondition.ContractID], T1.[X_ContractCondition.ContractConditionTypeID], T1.[X_ContractCondition.IsIncluded], T1.[X_ContractCondition.IsExluded], T1.[X_ContractCondition.UnitID], T1.[X_ContractCondition.Maximum], T1.[X_ContractCondition.Minimum], T1.[X_ContractCondition.EstimatedValueUpfront], T1.[X_ContractCondition.EstimatedValueOngoingUnitID], T1.[X_ContractCondition.EstimatedValueOngoing], T1.[X_ContractCondition.ContractConditionText], T1.[X_ContractCondition.Comment], T1.[X_ContractCondition.Version], T1.[X_ContractCondition.VersionAntecedentID], T1.[X_ContractCondition.VersionCertainty], T1.[X_ContractCondition.VersionWorkflowInstanceID], T1.[X_ContractCondition.VersionUpdatedBy], T1.[X_ContractCondition.VersionDeletedBy], T1.[X_ContractCondition.VersionOwnerContactID], T1.[X_ContractCondition.VersionOwnerCompanyID], T1.[X_ContractCondition.VersionUpdated])
    FROM (
        SELECT 
            T.ContractConditionID AS [X_ContractCondition.ContractConditionID], 
            T.ContractID AS [X_ContractCondition.ContractID], 
            T.ContractConditionTypeID AS [X_ContractCondition.ContractConditionTypeID], 
            T.IsIncluded AS [X_ContractCondition.IsIncluded], 
            T.IsExluded AS [X_ContractCondition.IsExluded], 
            T.UnitID AS [X_ContractCondition.UnitID], 
            T.Maximum AS [X_ContractCondition.Maximum], 
            T.Minimum AS [X_ContractCondition.Minimum], 
            T.EstimatedValueUpfront AS [X_ContractCondition.EstimatedValueUpfront], 
            T.EstimatedValueOngoingUnitID AS [X_ContractCondition.EstimatedValueOngoingUnitID], 
            T.EstimatedValueOngoing AS [X_ContractCondition.EstimatedValueOngoing], 
            T.ContractConditionText AS [X_ContractCondition.ContractConditionText], 
            T.Comment AS [X_ContractCondition.Comment], 
            T.Version AS [X_ContractCondition.Version], 
            T.VersionAntecedentID AS [X_ContractCondition.VersionAntecedentID], 
            T.VersionCertainty AS [X_ContractCondition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ContractCondition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ContractCondition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ContractCondition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ContractCondition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ContractCondition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ContractCondition.VersionUpdated], 
            True AS _from0
        FROM NKDC.ContractConditions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ContractConditionModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView82()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ContractConditionModel
        [NKD.Module.BusinessObjects.Store.X_ContractConditionModel](T1.[X_ContractConditionModel.ContractConditionModelID], T1.[X_ContractConditionModel.ContractConditionID], T1.[X_ContractConditionModel.ModelID], T1.[X_ContractConditionModel.Version], T1.[X_ContractConditionModel.VersionAntecedentID], T1.[X_ContractConditionModel.VersionCertainty], T1.[X_ContractConditionModel.VersionWorkflowInstanceID], T1.[X_ContractConditionModel.VersionUpdatedBy], T1.[X_ContractConditionModel.VersionDeletedBy], T1.[X_ContractConditionModel.VersionOwnerContactID], T1.[X_ContractConditionModel.VersionOwnerCompanyID], T1.[X_ContractConditionModel.VersionUpdated])
    FROM (
        SELECT 
            T.ContractConditionModelID AS [X_ContractConditionModel.ContractConditionModelID], 
            T.ContractConditionID AS [X_ContractConditionModel.ContractConditionID], 
            T.ModelID AS [X_ContractConditionModel.ModelID], 
            T.Version AS [X_ContractConditionModel.Version], 
            T.VersionAntecedentID AS [X_ContractConditionModel.VersionAntecedentID], 
            T.VersionCertainty AS [X_ContractConditionModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ContractConditionModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ContractConditionModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ContractConditionModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ContractConditionModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ContractConditionModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ContractConditionModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.ContractConditionModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ContractConditionPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView83()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ContractConditionPart
        [NKD.Module.BusinessObjects.Store.X_ContractConditionPart](T1.[X_ContractConditionPart.ContractConditionPartID], T1.[X_ContractConditionPart.ContractConditionID], T1.[X_ContractConditionPart.PartID], T1.[X_ContractConditionPart.Version], T1.[X_ContractConditionPart.VersionAntecedentID], T1.[X_ContractConditionPart.VersionCertainty], T1.[X_ContractConditionPart.VersionWorkflowInstanceID], T1.[X_ContractConditionPart.VersionUpdatedBy], T1.[X_ContractConditionPart.VersionDeletedBy], T1.[X_ContractConditionPart.VersionOwnerContactID], T1.[X_ContractConditionPart.VersionOwnerCompanyID], T1.[X_ContractConditionPart.VersionUpdated])
    FROM (
        SELECT 
            T.ContractConditionPartID AS [X_ContractConditionPart.ContractConditionPartID], 
            T.ContractConditionID AS [X_ContractConditionPart.ContractConditionID], 
            T.PartID AS [X_ContractConditionPart.PartID], 
            T.Version AS [X_ContractConditionPart.Version], 
            T.VersionAntecedentID AS [X_ContractConditionPart.VersionAntecedentID], 
            T.VersionCertainty AS [X_ContractConditionPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ContractConditionPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ContractConditionPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ContractConditionPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ContractConditionPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ContractConditionPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ContractConditionPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.ContractConditionParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_CostEstimateModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView84()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_CostEstimateModel
        [NKD.Module.BusinessObjects.Store.X_CostEstimateModel](T1.[X_CostEstimateModel.CostEstimateModelID], T1.[X_CostEstimateModel.ParentCostEstimateModelID], T1.[X_CostEstimateModel.ContractID], T1.[X_CostEstimateModel.ModelID], T1.[X_CostEstimateModel.CostTypeID], T1.[X_CostEstimateModel.ProRataUnitID], T1.[X_CostEstimateModel.ProRataUnits], T1.[X_CostEstimateModel.ProRataCost], T1.[X_CostEstimateModel.IsAccruableWithParentCost], T1.[X_CostEstimateModel.AccruedQuantumSIUnitID], T1.[X_CostEstimateModel.Accrued], T1.[X_CostEstimateModel.Source], T1.[X_CostEstimateModel.Note], T1.[X_CostEstimateModel.Version], T1.[X_CostEstimateModel.VersionAntecedentID], T1.[X_CostEstimateModel.VersionCertainty], T1.[X_CostEstimateModel.VersionWorkflowInstanceID], T1.[X_CostEstimateModel.VersionUpdatedBy], T1.[X_CostEstimateModel.VersionDeletedBy], T1.[X_CostEstimateModel.VersionOwnerContactID], T1.[X_CostEstimateModel.VersionOwnerCompanyID], T1.[X_CostEstimateModel.VersionUpdated])
    FROM (
        SELECT 
            T.CostEstimateModelID AS [X_CostEstimateModel.CostEstimateModelID], 
            T.ParentCostEstimateModelID AS [X_CostEstimateModel.ParentCostEstimateModelID], 
            T.ContractID AS [X_CostEstimateModel.ContractID], 
            T.ModelID AS [X_CostEstimateModel.ModelID], 
            T.CostTypeID AS [X_CostEstimateModel.CostTypeID], 
            T.ProRataUnitID AS [X_CostEstimateModel.ProRataUnitID], 
            T.ProRataUnits AS [X_CostEstimateModel.ProRataUnits], 
            T.ProRataCost AS [X_CostEstimateModel.ProRataCost], 
            T.IsAccruableWithParentCost AS [X_CostEstimateModel.IsAccruableWithParentCost], 
            T.AccruedQuantumSIUnitID AS [X_CostEstimateModel.AccruedQuantumSIUnitID], 
            T.Accrued AS [X_CostEstimateModel.Accrued], 
            T.Source AS [X_CostEstimateModel.Source], 
            T.Note AS [X_CostEstimateModel.Note], 
            T.Version AS [X_CostEstimateModel.Version], 
            T.VersionAntecedentID AS [X_CostEstimateModel.VersionAntecedentID], 
            T.VersionCertainty AS [X_CostEstimateModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_CostEstimateModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_CostEstimateModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_CostEstimateModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_CostEstimateModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_CostEstimateModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_CostEstimateModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.CostEstimateModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Defect.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView85()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Defect
        [NKD.Module.BusinessObjects.Store.X_Defect](T1.[X_Defect.DefectID], T1.[X_Defect.HeaderID], T1.[X_Defect.FromDepth], T1.[X_Defect.ToDepth], T1.[X_Defect.WeatheringID], T1.[X_Defect.RockMassUnitTypeID], T1.[X_Defect.GeotechLithologyTypeID], T1.[X_Defect.GeotechLithologyQualifierID], T1.[X_Defect.GeotechColourID], T1.[X_Defect.FriabilityTypeID], T1.[X_Defect.AlterationID], T1.[X_Defect.EstimatedStrengthID], T1.[X_Defect.BedSpacingID], T1.[X_Defect.BedDevelopmentID], T1.[X_Defect.BedDip], T1.[X_Defect.MoistureSensitivityID], T1.[X_Defect.PlasticityID], T1.[X_Defect.DefectDepth], T1.[X_Defect.DefectLength], T1.[X_Defect.NumberOfDefects], T1.[X_Defect.NumberOfFractures], T1.[X_Defect.NumberOfStructureSets], T1.[X_Defect.StructureSetID], T1.[X_Defect.DefectsSpacing], T1.[X_Defect.DefectTypeID], T1.[X_Defect.DefectCompletenessID], T1.[X_Defect.DefectContinuityID], T1.[X_Defect.DefectDip], T1.[X_Defect.MinimumDipBrokenZone], T1.[X_Defect.MaximumDipBrokenZone], T1.[X_Defect.DipOrientation], T1.[X_Defect.DipOrientationMethodID], T1.[X_Defect.ShapeID], T1.[X_Defect.RoughnessID], T1.[X_Defect.SurfaceWeatheringID], T1.[X_Defect.AlterationJointTypeID], T1.[X_Defect.JointRoughnessCoefficient], T1.[X_Defect.PerpendicularWidth], T1.[X_Defect.PrimaryInfillTypeID], T1.[X_Defect.SecondaryInfillTypeID], T1.[X_Defect.InfillModeID], T1.[X_Defect.InfillEstimatedStrengthID], T1.[X_Defect.InfillPlasticityID], T1.[X_Defect.Comment], T1.[X_Defect.Version], T1.[X_Defect.VersionAntecedentID], T1.[X_Defect.VersionCertainty], T1.[X_Defect.VersionWorkflowInstanceID], T1.[X_Defect.VersionUpdatedBy], T1.[X_Defect.VersionDeletedBy], T1.[X_Defect.VersionOwnerContactID], T1.[X_Defect.VersionOwnerCompanyID], T1.[X_Defect.VersionUpdated])
    FROM (
        SELECT 
            T.DefectID AS [X_Defect.DefectID], 
            T.HeaderID AS [X_Defect.HeaderID], 
            T.FromDepth AS [X_Defect.FromDepth], 
            T.ToDepth AS [X_Defect.ToDepth], 
            T.WeatheringID AS [X_Defect.WeatheringID], 
            T.RockMassUnitTypeID AS [X_Defect.RockMassUnitTypeID], 
            T.GeotechLithologyTypeID AS [X_Defect.GeotechLithologyTypeID], 
            T.GeotechLithologyQualifierID AS [X_Defect.GeotechLithologyQualifierID], 
            T.GeotechColourID AS [X_Defect.GeotechColourID], 
            T.FriabilityTypeID AS [X_Defect.FriabilityTypeID], 
            T.AlterationID AS [X_Defect.AlterationID], 
            T.EstimatedStrengthID AS [X_Defect.EstimatedStrengthID], 
            T.BedSpacingID AS [X_Defect.BedSpacingID], 
            T.BedDevelopmentID AS [X_Defect.BedDevelopmentID], 
            T.BedDip AS [X_Defect.BedDip], 
            T.MoistureSensitivityID AS [X_Defect.MoistureSensitivityID], 
            T.PlasticityID AS [X_Defect.PlasticityID], 
            T.DefectDepth AS [X_Defect.DefectDepth], 
            T.DefectLength AS [X_Defect.DefectLength], 
            T.NumberOfDefects AS [X_Defect.NumberOfDefects], 
            T.NumberOfFractures AS [X_Defect.NumberOfFractures], 
            T.NumberOfStructureSets AS [X_Defect.NumberOfStructureSets], 
            T.StructureSetID AS [X_Defect.StructureSetID], 
            T.DefectsSpacing AS [X_Defect.DefectsSpacing], 
            T.DefectTypeID AS [X_Defect.DefectTypeID], 
            T.DefectCompletenessID AS [X_Defect.DefectCompletenessID], 
            T.DefectContinuityID AS [X_Defect.DefectContinuityID], 
            T.DefectDip AS [X_Defect.DefectDip], 
            T.MinimumDipBrokenZone AS [X_Defect.MinimumDipBrokenZone], 
            T.MaximumDipBrokenZone AS [X_Defect.MaximumDipBrokenZone], 
            T.DipOrientation AS [X_Defect.DipOrientation], 
            T.DipOrientationMethodID AS [X_Defect.DipOrientationMethodID], 
            T.ShapeID AS [X_Defect.ShapeID], 
            T.RoughnessID AS [X_Defect.RoughnessID], 
            T.SurfaceWeatheringID AS [X_Defect.SurfaceWeatheringID], 
            T.AlterationJointTypeID AS [X_Defect.AlterationJointTypeID], 
            T.JointRoughnessCoefficient AS [X_Defect.JointRoughnessCoefficient], 
            T.PerpendicularWidth AS [X_Defect.PerpendicularWidth], 
            T.PrimaryInfillTypeID AS [X_Defect.PrimaryInfillTypeID], 
            T.SecondaryInfillTypeID AS [X_Defect.SecondaryInfillTypeID], 
            T.InfillModeID AS [X_Defect.InfillModeID], 
            T.InfillEstimatedStrengthID AS [X_Defect.InfillEstimatedStrengthID], 
            T.InfillPlasticityID AS [X_Defect.InfillPlasticityID], 
            T.Comment AS [X_Defect.Comment], 
            T.Version AS [X_Defect.Version], 
            T.VersionAntecedentID AS [X_Defect.VersionAntecedentID], 
            T.VersionCertainty AS [X_Defect.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Defect.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Defect.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Defect.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Defect.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Defect.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Defect.VersionUpdated], 
            True AS _from0
        FROM NKDC.Defects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Desurvey.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView86()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Desurvey
        [NKD.Module.BusinessObjects.Store.X_Desurvey](T1.[X_Desurvey.DesurveyID], T1.[X_Desurvey.SurveyID], T1.[X_Desurvey.DesurveyAlgorithmTypeID], T1.[X_Desurvey.Version], T1.[X_Desurvey.VersionAntecedentID], T1.[X_Desurvey.VersionCertainty], T1.[X_Desurvey.VersionWorkflowInstanceID], T1.[X_Desurvey.VersionUpdatedBy], T1.[X_Desurvey.VersionDeletedBy], T1.[X_Desurvey.VersionOwnerContactID], T1.[X_Desurvey.VersionOwnerCompanyID], T1.[X_Desurvey.VersionUpdated])
    FROM (
        SELECT 
            T.DesurveyID AS [X_Desurvey.DesurveyID], 
            T.SurveyID AS [X_Desurvey.SurveyID], 
            T.DesurveyAlgorithmTypeID AS [X_Desurvey.DesurveyAlgorithmTypeID], 
            T.Version AS [X_Desurvey.Version], 
            T.VersionAntecedentID AS [X_Desurvey.VersionAntecedentID], 
            T.VersionCertainty AS [X_Desurvey.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Desurvey.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Desurvey.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Desurvey.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Desurvey.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Desurvey.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Desurvey.VersionUpdated], 
            True AS _from0
        FROM NKDC.Desurveys AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAdjective.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView87()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAdjective
        [NKD.Module.BusinessObjects.Store.X_DictionaryAdjective](T1.[X_DictionaryAdjective.AdjectiveID], T1.[X_DictionaryAdjective.StandardAdjectiveName], T1.[X_DictionaryAdjective.CoalAdjectiveName], T1.[X_DictionaryAdjective.GoldAdjectiveName], T1.[X_DictionaryAdjective.CustomAdjectiveName], T1.[X_DictionaryAdjective.Description], T1.[X_DictionaryAdjective.FullDescription], T1.[X_DictionaryAdjective.Thumbnail], T1.[X_DictionaryAdjective.OriginalFileDataID], T1.[X_DictionaryAdjective.Version], T1.[X_DictionaryAdjective.VersionAntecedentID], T1.[X_DictionaryAdjective.VersionCertainty], T1.[X_DictionaryAdjective.VersionWorkflowInstanceID], T1.[X_DictionaryAdjective.VersionUpdatedBy], T1.[X_DictionaryAdjective.VersionDeletedBy], T1.[X_DictionaryAdjective.VersionOwnerContactID], T1.[X_DictionaryAdjective.VersionOwnerCompanyID], T1.[X_DictionaryAdjective.VersionUpdated])
    FROM (
        SELECT 
            T.AdjectiveID AS [X_DictionaryAdjective.AdjectiveID], 
            T.StandardAdjectiveName AS [X_DictionaryAdjective.StandardAdjectiveName], 
            T.CoalAdjectiveName AS [X_DictionaryAdjective.CoalAdjectiveName], 
            T.GoldAdjectiveName AS [X_DictionaryAdjective.GoldAdjectiveName], 
            T.CustomAdjectiveName AS [X_DictionaryAdjective.CustomAdjectiveName], 
            T.Description AS [X_DictionaryAdjective.Description], 
            T.FullDescription AS [X_DictionaryAdjective.FullDescription], 
            T.Thumbnail AS [X_DictionaryAdjective.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAdjective.OriginalFileDataID], 
            T.Version AS [X_DictionaryAdjective.Version], 
            T.VersionAntecedentID AS [X_DictionaryAdjective.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAdjective.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAdjective.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAdjective.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAdjective.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAdjective.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAdjective.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAdjective.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAdjectives AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlteration.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView88()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAlteration
        [NKD.Module.BusinessObjects.Store.X_DictionaryAlteration](T1.[X_DictionaryAlteration.AlterationID], T1.[X_DictionaryAlteration.StandardAlterationName], T1.[X_DictionaryAlteration.CoalAlterationName], T1.[X_DictionaryAlteration.GoldAlterationName], T1.[X_DictionaryAlteration.CustomAlterationName], T1.[X_DictionaryAlteration.Description], T1.[X_DictionaryAlteration.FullDescription], T1.[X_DictionaryAlteration.Thumbnail], T1.[X_DictionaryAlteration.OriginalFileDataID], T1.[X_DictionaryAlteration.Version], T1.[X_DictionaryAlteration.VersionAntecedentID], T1.[X_DictionaryAlteration.VersionCertainty], T1.[X_DictionaryAlteration.VersionWorkflowInstanceID], T1.[X_DictionaryAlteration.VersionUpdatedBy], T1.[X_DictionaryAlteration.VersionDeletedBy], T1.[X_DictionaryAlteration.VersionOwnerContactID], T1.[X_DictionaryAlteration.VersionOwnerCompanyID], T1.[X_DictionaryAlteration.VersionUpdated])
    FROM (
        SELECT 
            T.AlterationID AS [X_DictionaryAlteration.AlterationID], 
            T.StandardAlterationName AS [X_DictionaryAlteration.StandardAlterationName], 
            T.CoalAlterationName AS [X_DictionaryAlteration.CoalAlterationName], 
            T.GoldAlterationName AS [X_DictionaryAlteration.GoldAlterationName], 
            T.CustomAlterationName AS [X_DictionaryAlteration.CustomAlterationName], 
            T.Description AS [X_DictionaryAlteration.Description], 
            T.FullDescription AS [X_DictionaryAlteration.FullDescription], 
            T.Thumbnail AS [X_DictionaryAlteration.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAlteration.OriginalFileDataID], 
            T.Version AS [X_DictionaryAlteration.Version], 
            T.VersionAntecedentID AS [X_DictionaryAlteration.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAlteration.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAlteration.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAlteration.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAlteration.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAlteration.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAlteration.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAlteration.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAlterations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayMethod.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView89()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayMethod
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayMethod](T1.[X_DictionaryAssayMethod.AssayMethodID], T1.[X_DictionaryAssayMethod.StandardAssayMethodName], T1.[X_DictionaryAssayMethod.CoalAssayMethodName], T1.[X_DictionaryAssayMethod.GoldAssayMethodName], T1.[X_DictionaryAssayMethod.CustomAssayMethodName], T1.[X_DictionaryAssayMethod.Description], T1.[X_DictionaryAssayMethod.FullDescription], T1.[X_DictionaryAssayMethod.Thumbnail], T1.[X_DictionaryAssayMethod.OriginalFileDataID], T1.[X_DictionaryAssayMethod.Version], T1.[X_DictionaryAssayMethod.VersionAntecedentID], T1.[X_DictionaryAssayMethod.VersionCertainty], T1.[X_DictionaryAssayMethod.VersionWorkflowInstanceID], T1.[X_DictionaryAssayMethod.VersionUpdatedBy], T1.[X_DictionaryAssayMethod.VersionDeletedBy], T1.[X_DictionaryAssayMethod.VersionOwnerContactID], T1.[X_DictionaryAssayMethod.VersionOwnerCompanyID], T1.[X_DictionaryAssayMethod.VersionUpdated])
    FROM (
        SELECT 
            T.AssayMethodID AS [X_DictionaryAssayMethod.AssayMethodID], 
            T.StandardAssayMethodName AS [X_DictionaryAssayMethod.StandardAssayMethodName], 
            T.CoalAssayMethodName AS [X_DictionaryAssayMethod.CoalAssayMethodName], 
            T.GoldAssayMethodName AS [X_DictionaryAssayMethod.GoldAssayMethodName], 
            T.CustomAssayMethodName AS [X_DictionaryAssayMethod.CustomAssayMethodName], 
            T.Description AS [X_DictionaryAssayMethod.Description], 
            T.FullDescription AS [X_DictionaryAssayMethod.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayMethod.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayMethod.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayMethod.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayMethod.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayMethod.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayMethod.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayMethod.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayMethod.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayMethod.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayMethod.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayMethod.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayMethods AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayStandard.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView90()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayStandard
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayStandard](T1.[X_DictionaryAssayStandard.AssayStandardID], T1.[X_DictionaryAssayStandard.StandardAssayStandardName], T1.[X_DictionaryAssayStandard.CoalAssayStandardName], T1.[X_DictionaryAssayStandard.GoldAssayStandardName], T1.[X_DictionaryAssayStandard.CustomAssayStandardName], T1.[X_DictionaryAssayStandard.Description], T1.[X_DictionaryAssayStandard.FullDescription], T1.[X_DictionaryAssayStandard.Thumbnail], T1.[X_DictionaryAssayStandard.OriginalFileDataID], T1.[X_DictionaryAssayStandard.Version], T1.[X_DictionaryAssayStandard.VersionAntecedentID], T1.[X_DictionaryAssayStandard.VersionCertainty], T1.[X_DictionaryAssayStandard.VersionWorkflowInstanceID], T1.[X_DictionaryAssayStandard.VersionUpdatedBy], T1.[X_DictionaryAssayStandard.VersionDeletedBy], T1.[X_DictionaryAssayStandard.VersionOwnerContactID], T1.[X_DictionaryAssayStandard.VersionOwnerCompanyID], T1.[X_DictionaryAssayStandard.VersionUpdated])
    FROM (
        SELECT 
            T.AssayStandardID AS [X_DictionaryAssayStandard.AssayStandardID], 
            T.StandardAssayStandardName AS [X_DictionaryAssayStandard.StandardAssayStandardName], 
            T.CoalAssayStandardName AS [X_DictionaryAssayStandard.CoalAssayStandardName], 
            T.GoldAssayStandardName AS [X_DictionaryAssayStandard.GoldAssayStandardName], 
            T.CustomAssayStandardName AS [X_DictionaryAssayStandard.CustomAssayStandardName], 
            T.Description AS [X_DictionaryAssayStandard.Description], 
            T.FullDescription AS [X_DictionaryAssayStandard.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayStandard.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayStandard.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayStandard.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayStandard.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayStandard.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayStandard.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayStandard.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayStandard.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayStandard.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayStandard.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayStandard.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayStandards AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTest.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView91()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayTest
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayTest](T1.[X_DictionaryAssayTest.AssayTestID], T1.[X_DictionaryAssayTest.StandardAssayTestName], T1.[X_DictionaryAssayTest.CoalAssayTestName], T1.[X_DictionaryAssayTest.GoldAssayTestName], T1.[X_DictionaryAssayTest.CustomAssayTestName], T1.[X_DictionaryAssayTest.Description], T1.[X_DictionaryAssayTest.FullDescription], T1.[X_DictionaryAssayTest.Thumbnail], T1.[X_DictionaryAssayTest.OriginalFileDataID], T1.[X_DictionaryAssayTest.Version], T1.[X_DictionaryAssayTest.VersionAntecedentID], T1.[X_DictionaryAssayTest.VersionCertainty], T1.[X_DictionaryAssayTest.VersionWorkflowInstanceID], T1.[X_DictionaryAssayTest.VersionUpdatedBy], T1.[X_DictionaryAssayTest.VersionDeletedBy], T1.[X_DictionaryAssayTest.VersionOwnerContactID], T1.[X_DictionaryAssayTest.VersionOwnerCompanyID], T1.[X_DictionaryAssayTest.VersionUpdated])
    FROM (
        SELECT 
            T.AssayTestID AS [X_DictionaryAssayTest.AssayTestID], 
            T.StandardAssayTestName AS [X_DictionaryAssayTest.StandardAssayTestName], 
            T.CoalAssayTestName AS [X_DictionaryAssayTest.CoalAssayTestName], 
            T.GoldAssayTestName AS [X_DictionaryAssayTest.GoldAssayTestName], 
            T.CustomAssayTestName AS [X_DictionaryAssayTest.CustomAssayTestName], 
            T.Description AS [X_DictionaryAssayTest.Description], 
            T.FullDescription AS [X_DictionaryAssayTest.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayTest.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayTest.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayTest.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayTest.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayTest.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayTest.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayTest.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayTest.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayTest.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayTest.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayTest.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayTests AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView92()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayType
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayType](T1.[X_DictionaryAssayType.AssayTypeID], T1.[X_DictionaryAssayType.StandardAssayTypeName], T1.[X_DictionaryAssayType.CoalAssayTypeName], T1.[X_DictionaryAssayType.GoldAssayTypeName], T1.[X_DictionaryAssayType.CustomAssayTypeName], T1.[X_DictionaryAssayType.Description], T1.[X_DictionaryAssayType.FullDescription], T1.[X_DictionaryAssayType.Thumbnail], T1.[X_DictionaryAssayType.OriginalFileDataID], T1.[X_DictionaryAssayType.Version], T1.[X_DictionaryAssayType.VersionAntecedentID], T1.[X_DictionaryAssayType.VersionCertainty], T1.[X_DictionaryAssayType.VersionWorkflowInstanceID], T1.[X_DictionaryAssayType.VersionUpdatedBy], T1.[X_DictionaryAssayType.VersionDeletedBy], T1.[X_DictionaryAssayType.VersionOwnerContactID], T1.[X_DictionaryAssayType.VersionOwnerCompanyID], T1.[X_DictionaryAssayType.VersionUpdated])
    FROM (
        SELECT 
            T.AssayTypeID AS [X_DictionaryAssayType.AssayTypeID], 
            T.StandardAssayTypeName AS [X_DictionaryAssayType.StandardAssayTypeName], 
            T.CoalAssayTypeName AS [X_DictionaryAssayType.CoalAssayTypeName], 
            T.GoldAssayTypeName AS [X_DictionaryAssayType.GoldAssayTypeName], 
            T.CustomAssayTypeName AS [X_DictionaryAssayType.CustomAssayTypeName], 
            T.Description AS [X_DictionaryAssayType.Description], 
            T.FullDescription AS [X_DictionaryAssayType.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayType.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayType.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryBasalContact.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView93()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryBasalContact
        [NKD.Module.BusinessObjects.Store.X_DictionaryBasalContact](T1.[X_DictionaryBasalContact.BasalContactID], T1.[X_DictionaryBasalContact.StandardBasalContactName], T1.[X_DictionaryBasalContact.CoalBasalContactName], T1.[X_DictionaryBasalContact.GoldBasalContactName], T1.[X_DictionaryBasalContact.CustomBasalContactName], T1.[X_DictionaryBasalContact.Description], T1.[X_DictionaryBasalContact.FullDescription], T1.[X_DictionaryBasalContact.Thumbnail], T1.[X_DictionaryBasalContact.OriginalFileDataID], T1.[X_DictionaryBasalContact.Version], T1.[X_DictionaryBasalContact.VersionAntecedentID], T1.[X_DictionaryBasalContact.VersionCertainty], T1.[X_DictionaryBasalContact.VersionWorkflowInstanceID], T1.[X_DictionaryBasalContact.VersionUpdatedBy], T1.[X_DictionaryBasalContact.VersionDeletedBy], T1.[X_DictionaryBasalContact.VersionOwnerContactID], T1.[X_DictionaryBasalContact.VersionOwnerCompanyID], T1.[X_DictionaryBasalContact.VersionUpdated])
    FROM (
        SELECT 
            T.BasalContactID AS [X_DictionaryBasalContact.BasalContactID], 
            T.StandardBasalContactName AS [X_DictionaryBasalContact.StandardBasalContactName], 
            T.CoalBasalContactName AS [X_DictionaryBasalContact.CoalBasalContactName], 
            T.GoldBasalContactName AS [X_DictionaryBasalContact.GoldBasalContactName], 
            T.CustomBasalContactName AS [X_DictionaryBasalContact.CustomBasalContactName], 
            T.Description AS [X_DictionaryBasalContact.Description], 
            T.FullDescription AS [X_DictionaryBasalContact.FullDescription], 
            T.Thumbnail AS [X_DictionaryBasalContact.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryBasalContact.OriginalFileDataID], 
            T.Version AS [X_DictionaryBasalContact.Version], 
            T.VersionAntecedentID AS [X_DictionaryBasalContact.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryBasalContact.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryBasalContact.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryBasalContact.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryBasalContact.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryBasalContact.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryBasalContact.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryBasalContact.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryBasalContacts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedSpacing.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView94()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryBedSpacing
        [NKD.Module.BusinessObjects.Store.X_DictionaryBedSpacing](T1.[X_DictionaryBedSpacing.BedSpacingID], T1.[X_DictionaryBedSpacing.StandardBedSpacingName], T1.[X_DictionaryBedSpacing.CoalBedSpacingName], T1.[X_DictionaryBedSpacing.GoldBedSpacingName], T1.[X_DictionaryBedSpacing.CustomBedSpacingName], T1.[X_DictionaryBedSpacing.Description], T1.[X_DictionaryBedSpacing.FullDescription], T1.[X_DictionaryBedSpacing.Thumbnail], T1.[X_DictionaryBedSpacing.OriginalFileDataID], T1.[X_DictionaryBedSpacing.Version], T1.[X_DictionaryBedSpacing.VersionAntecedentID], T1.[X_DictionaryBedSpacing.VersionCertainty], T1.[X_DictionaryBedSpacing.VersionWorkflowInstanceID], T1.[X_DictionaryBedSpacing.VersionUpdatedBy], T1.[X_DictionaryBedSpacing.VersionDeletedBy], T1.[X_DictionaryBedSpacing.VersionOwnerContactID], T1.[X_DictionaryBedSpacing.VersionOwnerCompanyID], T1.[X_DictionaryBedSpacing.VersionUpdated])
    FROM (
        SELECT 
            T.BedSpacingID AS [X_DictionaryBedSpacing.BedSpacingID], 
            T.StandardBedSpacingName AS [X_DictionaryBedSpacing.StandardBedSpacingName], 
            T.CoalBedSpacingName AS [X_DictionaryBedSpacing.CoalBedSpacingName], 
            T.GoldBedSpacingName AS [X_DictionaryBedSpacing.GoldBedSpacingName], 
            T.CustomBedSpacingName AS [X_DictionaryBedSpacing.CustomBedSpacingName], 
            T.Description AS [X_DictionaryBedSpacing.Description], 
            T.FullDescription AS [X_DictionaryBedSpacing.FullDescription], 
            T.Thumbnail AS [X_DictionaryBedSpacing.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryBedSpacing.OriginalFileDataID], 
            T.Version AS [X_DictionaryBedSpacing.Version], 
            T.VersionAntecedentID AS [X_DictionaryBedSpacing.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryBedSpacing.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryBedSpacing.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryBedSpacing.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryBedSpacing.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryBedSpacing.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryBedSpacing.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryBedSpacing.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryBedSpacings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristic.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView95()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCharacteristic
        [NKD.Module.BusinessObjects.Store.X_DictionaryCharacteristic](T1.[X_DictionaryCharacteristic.CharacteristicID], T1.[X_DictionaryCharacteristic.StandardCharacteristicName], T1.[X_DictionaryCharacteristic.CustomCharacteristicName], T1.[X_DictionaryCharacteristic.UnitID], T1.[X_DictionaryCharacteristic.CharacteristicTypeID], T1.[X_DictionaryCharacteristic.Description], T1.[X_DictionaryCharacteristic.FullDescription], T1.[X_DictionaryCharacteristic.Thumbnail], T1.[X_DictionaryCharacteristic.OriginalFileDataID], T1.[X_DictionaryCharacteristic.Version], T1.[X_DictionaryCharacteristic.VersionAntecedentID], T1.[X_DictionaryCharacteristic.VersionCertainty], T1.[X_DictionaryCharacteristic.VersionWorkflowInstanceID], T1.[X_DictionaryCharacteristic.VersionUpdatedBy], T1.[X_DictionaryCharacteristic.VersionDeletedBy], T1.[X_DictionaryCharacteristic.VersionOwnerContactID], T1.[X_DictionaryCharacteristic.VersionOwnerCompanyID], T1.[X_DictionaryCharacteristic.VersionUpdated])
    FROM (
        SELECT 
            T.CharacteristicID AS [X_DictionaryCharacteristic.CharacteristicID], 
            T.StandardCharacteristicName AS [X_DictionaryCharacteristic.StandardCharacteristicName], 
            T.CustomCharacteristicName AS [X_DictionaryCharacteristic.CustomCharacteristicName], 
            T.UnitID AS [X_DictionaryCharacteristic.UnitID], 
            T.CharacteristicTypeID AS [X_DictionaryCharacteristic.CharacteristicTypeID], 
            T.Description AS [X_DictionaryCharacteristic.Description], 
            T.FullDescription AS [X_DictionaryCharacteristic.FullDescription], 
            T.Thumbnail AS [X_DictionaryCharacteristic.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCharacteristic.OriginalFileDataID], 
            T.Version AS [X_DictionaryCharacteristic.Version], 
            T.VersionAntecedentID AS [X_DictionaryCharacteristic.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCharacteristic.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCharacteristic.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCharacteristic.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCharacteristic.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCharacteristic.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCharacteristic.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCharacteristic.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCharacteristics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristicType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView96()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCharacteristicType
        [NKD.Module.BusinessObjects.Store.X_DictionaryCharacteristicType](T1.[X_DictionaryCharacteristicType.CharacteristicTypeID], T1.[X_DictionaryCharacteristicType.StandardCharacteristicTypeName], T1.[X_DictionaryCharacteristicType.CustomCharacteristicTypeName], T1.[X_DictionaryCharacteristicType.Description], T1.[X_DictionaryCharacteristicType.FullDescription], T1.[X_DictionaryCharacteristicType.Thumbnail], T1.[X_DictionaryCharacteristicType.OriginalFileDataID], T1.[X_DictionaryCharacteristicType.Version], T1.[X_DictionaryCharacteristicType.VersionAntecedentID], T1.[X_DictionaryCharacteristicType.VersionCertainty], T1.[X_DictionaryCharacteristicType.VersionWorkflowInstanceID], T1.[X_DictionaryCharacteristicType.VersionUpdatedBy], T1.[X_DictionaryCharacteristicType.VersionDeletedBy], T1.[X_DictionaryCharacteristicType.VersionOwnerContactID], T1.[X_DictionaryCharacteristicType.VersionOwnerCompanyID], T1.[X_DictionaryCharacteristicType.VersionUpdated])
    FROM (
        SELECT 
            T.CharacteristicTypeID AS [X_DictionaryCharacteristicType.CharacteristicTypeID], 
            T.StandardCharacteristicTypeName AS [X_DictionaryCharacteristicType.StandardCharacteristicTypeName], 
            T.CustomCharacteristicTypeName AS [X_DictionaryCharacteristicType.CustomCharacteristicTypeName], 
            T.Description AS [X_DictionaryCharacteristicType.Description], 
            T.FullDescription AS [X_DictionaryCharacteristicType.FullDescription], 
            T.Thumbnail AS [X_DictionaryCharacteristicType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCharacteristicType.OriginalFileDataID], 
            T.Version AS [X_DictionaryCharacteristicType.Version], 
            T.VersionAntecedentID AS [X_DictionaryCharacteristicType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCharacteristicType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCharacteristicType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCharacteristicType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCharacteristicType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCharacteristicType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCharacteristicType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCharacteristicType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCharacteristicTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryColour.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView97()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryColour
        [NKD.Module.BusinessObjects.Store.X_DictionaryColour](T1.[X_DictionaryColour.ColourID], T1.[X_DictionaryColour.StandardColourName], T1.[X_DictionaryColour.CoalColourName], T1.[X_DictionaryColour.GoldColourName], T1.[X_DictionaryColour.CustomColourName], T1.[X_DictionaryColour.Description], T1.[X_DictionaryColour.FullDescription], T1.[X_DictionaryColour.Thumbnail], T1.[X_DictionaryColour.OriginalFileDataID], T1.[X_DictionaryColour.Version], T1.[X_DictionaryColour.VersionAntecedentID], T1.[X_DictionaryColour.VersionCertainty], T1.[X_DictionaryColour.VersionWorkflowInstanceID], T1.[X_DictionaryColour.VersionUpdatedBy], T1.[X_DictionaryColour.VersionDeletedBy], T1.[X_DictionaryColour.VersionOwnerContactID], T1.[X_DictionaryColour.VersionOwnerCompanyID], T1.[X_DictionaryColour.VersionUpdated])
    FROM (
        SELECT 
            T.ColourID AS [X_DictionaryColour.ColourID], 
            T.StandardColourName AS [X_DictionaryColour.StandardColourName], 
            T.CoalColourName AS [X_DictionaryColour.CoalColourName], 
            T.GoldColourName AS [X_DictionaryColour.GoldColourName], 
            T.CustomColourName AS [X_DictionaryColour.CustomColourName], 
            T.Description AS [X_DictionaryColour.Description], 
            T.FullDescription AS [X_DictionaryColour.FullDescription], 
            T.Thumbnail AS [X_DictionaryColour.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryColour.OriginalFileDataID], 
            T.Version AS [X_DictionaryColour.Version], 
            T.VersionAntecedentID AS [X_DictionaryColour.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryColour.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryColour.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryColour.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryColour.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryColour.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryColour.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryColour.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryColours AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCommodity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView98()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCommodity
        [NKD.Module.BusinessObjects.Store.X_DictionaryCommodity](T1.[X_DictionaryCommodity.CommodityID], T1.[X_DictionaryCommodity.StandardCommodityName], T1.[X_DictionaryCommodity.CoalCommodityName], T1.[X_DictionaryCommodity.GoldCommodityName], T1.[X_DictionaryCommodity.CustomCommodityName], T1.[X_DictionaryCommodity.Description], T1.[X_DictionaryCommodity.FullDescription], T1.[X_DictionaryCommodity.Thumbnail], T1.[X_DictionaryCommodity.OriginalFileDataID], T1.[X_DictionaryCommodity.Version], T1.[X_DictionaryCommodity.VersionAntecedentID], T1.[X_DictionaryCommodity.VersionCertainty], T1.[X_DictionaryCommodity.VersionWorkflowInstanceID], T1.[X_DictionaryCommodity.VersionUpdatedBy], T1.[X_DictionaryCommodity.VersionDeletedBy], T1.[X_DictionaryCommodity.VersionOwnerContactID], T1.[X_DictionaryCommodity.VersionOwnerCompanyID], T1.[X_DictionaryCommodity.VersionUpdated])
    FROM (
        SELECT 
            T.CommodityID AS [X_DictionaryCommodity.CommodityID], 
            T.StandardCommodityName AS [X_DictionaryCommodity.StandardCommodityName], 
            T.CoalCommodityName AS [X_DictionaryCommodity.CoalCommodityName], 
            T.GoldCommodityName AS [X_DictionaryCommodity.GoldCommodityName], 
            T.CustomCommodityName AS [X_DictionaryCommodity.CustomCommodityName], 
            T.Description AS [X_DictionaryCommodity.Description], 
            T.FullDescription AS [X_DictionaryCommodity.FullDescription], 
            T.Thumbnail AS [X_DictionaryCommodity.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCommodity.OriginalFileDataID], 
            T.Version AS [X_DictionaryCommodity.Version], 
            T.VersionAntecedentID AS [X_DictionaryCommodity.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCommodity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCommodity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCommodity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCommodity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCommodity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCommodity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCommodity.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCommodities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryContractConditionType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView99()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryContractConditionType
        [NKD.Module.BusinessObjects.Store.X_DictionaryContractConditionType](T1.[X_DictionaryContractConditionType.ContractConditionTypeID], T1.[X_DictionaryContractConditionType.StandardContractConditionTypeName], T1.[X_DictionaryContractConditionType.CustomContractConditionTypeName], T1.[X_DictionaryContractConditionType.Description], T1.[X_DictionaryContractConditionType.FullDescription], T1.[X_DictionaryContractConditionType.Thumbnail], T1.[X_DictionaryContractConditionType.OriginalFileDataID], T1.[X_DictionaryContractConditionType.Version], T1.[X_DictionaryContractConditionType.VersionAntecedentID], T1.[X_DictionaryContractConditionType.VersionCertainty], T1.[X_DictionaryContractConditionType.VersionWorkflowInstanceID], T1.[X_DictionaryContractConditionType.VersionUpdatedBy], T1.[X_DictionaryContractConditionType.VersionDeletedBy], T1.[X_DictionaryContractConditionType.VersionOwnerContactID], T1.[X_DictionaryContractConditionType.VersionOwnerCompanyID], T1.[X_DictionaryContractConditionType.VersionUpdated])
    FROM (
        SELECT 
            T.ContractConditionTypeID AS [X_DictionaryContractConditionType.ContractConditionTypeID], 
            T.StandardContractConditionTypeName AS [X_DictionaryContractConditionType.StandardContractConditionTypeName], 
            T.CustomContractConditionTypeName AS [X_DictionaryContractConditionType.CustomContractConditionTypeName], 
            T.Description AS [X_DictionaryContractConditionType.Description], 
            T.FullDescription AS [X_DictionaryContractConditionType.FullDescription], 
            T.Thumbnail AS [X_DictionaryContractConditionType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryContractConditionType.OriginalFileDataID], 
            T.Version AS [X_DictionaryContractConditionType.Version], 
            T.VersionAntecedentID AS [X_DictionaryContractConditionType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryContractConditionType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryContractConditionType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryContractConditionType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryContractConditionType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryContractConditionType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryContractConditionType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryContractConditionType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryContractConditionTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCoreState.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView100()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCoreState
        [NKD.Module.BusinessObjects.Store.X_DictionaryCoreState](T1.[X_DictionaryCoreState.CoreStateID], T1.[X_DictionaryCoreState.StandardCoreStateName], T1.[X_DictionaryCoreState.CoalCoreStateName], T1.[X_DictionaryCoreState.GoldCoreStateName], T1.[X_DictionaryCoreState.CustomCoreStateName], T1.[X_DictionaryCoreState.Description], T1.[X_DictionaryCoreState.FullDescription], T1.[X_DictionaryCoreState.Thumbnail], T1.[X_DictionaryCoreState.OriginalFileDataID], T1.[X_DictionaryCoreState.Version], T1.[X_DictionaryCoreState.VersionAntecedentID], T1.[X_DictionaryCoreState.VersionCertainty], T1.[X_DictionaryCoreState.VersionWorkflowInstanceID], T1.[X_DictionaryCoreState.VersionUpdatedBy], T1.[X_DictionaryCoreState.VersionDeletedBy], T1.[X_DictionaryCoreState.VersionOwnerContactID], T1.[X_DictionaryCoreState.VersionOwnerCompanyID], T1.[X_DictionaryCoreState.VersionUpdated])
    FROM (
        SELECT 
            T.CoreStateID AS [X_DictionaryCoreState.CoreStateID], 
            T.StandardCoreStateName AS [X_DictionaryCoreState.StandardCoreStateName], 
            T.CoalCoreStateName AS [X_DictionaryCoreState.CoalCoreStateName], 
            T.GoldCoreStateName AS [X_DictionaryCoreState.GoldCoreStateName], 
            T.CustomCoreStateName AS [X_DictionaryCoreState.CustomCoreStateName], 
            T.Description AS [X_DictionaryCoreState.Description], 
            T.FullDescription AS [X_DictionaryCoreState.FullDescription], 
            T.Thumbnail AS [X_DictionaryCoreState.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCoreState.OriginalFileDataID], 
            T.Version AS [X_DictionaryCoreState.Version], 
            T.VersionAntecedentID AS [X_DictionaryCoreState.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCoreState.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCoreState.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCoreState.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCoreState.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCoreState.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCoreState.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCoreState.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCoreStates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCostType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView101()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCostType
        [NKD.Module.BusinessObjects.Store.X_DictionaryCostType](T1.[X_DictionaryCostType.CostTypeID], T1.[X_DictionaryCostType.StandardCostTypeName], T1.[X_DictionaryCostType.CustomCostTypeName], T1.[X_DictionaryCostType.Description], T1.[X_DictionaryCostType.FullDescription], T1.[X_DictionaryCostType.Thumbnail], T1.[X_DictionaryCostType.OriginalFileDataID], T1.[X_DictionaryCostType.Version], T1.[X_DictionaryCostType.VersionAntecedentID], T1.[X_DictionaryCostType.VersionCertainty], T1.[X_DictionaryCostType.VersionWorkflowInstanceID], T1.[X_DictionaryCostType.VersionUpdatedBy], T1.[X_DictionaryCostType.VersionDeletedBy], T1.[X_DictionaryCostType.VersionOwnerContactID], T1.[X_DictionaryCostType.VersionOwnerCompanyID], T1.[X_DictionaryCostType.VersionUpdated])
    FROM (
        SELECT 
            T.CostTypeID AS [X_DictionaryCostType.CostTypeID], 
            T.StandardCostTypeName AS [X_DictionaryCostType.StandardCostTypeName], 
            T.CustomCostTypeName AS [X_DictionaryCostType.CustomCostTypeName], 
            T.Description AS [X_DictionaryCostType.Description], 
            T.FullDescription AS [X_DictionaryCostType.FullDescription], 
            T.Thumbnail AS [X_DictionaryCostType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCostType.OriginalFileDataID], 
            T.Version AS [X_DictionaryCostType.Version], 
            T.VersionAntecedentID AS [X_DictionaryCostType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCostType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCostType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCostType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCostType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCostType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCostType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCostType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCostTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountry.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView102()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCountry
        [NKD.Module.BusinessObjects.Store.X_DictionaryCountry](T1.[X_DictionaryCountry.CountryID], T1.[X_DictionaryCountry.CountryGUID], T1.[X_DictionaryCountry.StandardCountryName], T1.[X_DictionaryCountry.CoalCountryName], T1.[X_DictionaryCountry.GoldCountryName], T1.[X_DictionaryCountry.CustomCountryName], T1.[X_DictionaryCountry.CurrencyCode], T1.[X_DictionaryCountry.CurrencyFormat], T1.[X_DictionaryCountry.Description], T1.[X_DictionaryCountry.FullDescription], T1.[X_DictionaryCountry.Thumbnail], T1.[X_DictionaryCountry.OriginalFileDataID], T1.[X_DictionaryCountry.Version], T1.[X_DictionaryCountry.VersionAntecedentID], T1.[X_DictionaryCountry.VersionCertainty], T1.[X_DictionaryCountry.VersionWorkflowInstanceID], T1.[X_DictionaryCountry.VersionUpdatedBy], T1.[X_DictionaryCountry.VersionDeletedBy], T1.[X_DictionaryCountry.VersionOwnerContactID], T1.[X_DictionaryCountry.VersionOwnerCompanyID], T1.[X_DictionaryCountry.VersionUpdated])
    FROM (
        SELECT 
            T.CountryID AS [X_DictionaryCountry.CountryID], 
            T.CountryGUID AS [X_DictionaryCountry.CountryGUID], 
            T.StandardCountryName AS [X_DictionaryCountry.StandardCountryName], 
            T.CoalCountryName AS [X_DictionaryCountry.CoalCountryName], 
            T.GoldCountryName AS [X_DictionaryCountry.GoldCountryName], 
            T.CustomCountryName AS [X_DictionaryCountry.CustomCountryName], 
            T.CurrencyCode AS [X_DictionaryCountry.CurrencyCode], 
            T.CurrencyFormat AS [X_DictionaryCountry.CurrencyFormat], 
            T.Description AS [X_DictionaryCountry.Description], 
            T.FullDescription AS [X_DictionaryCountry.FullDescription], 
            T.Thumbnail AS [X_DictionaryCountry.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCountry.OriginalFileDataID], 
            T.Version AS [X_DictionaryCountry.Version], 
            T.VersionAntecedentID AS [X_DictionaryCountry.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCountry.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCountry.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCountry.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCountry.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCountry.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCountry.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCountry.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCountries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountryState.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView103()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryCountryState
        [NKD.Module.BusinessObjects.Store.X_DictionaryCountryState](T1.[X_DictionaryCountryState.CountryStateID], T1.[X_DictionaryCountryState.CountryID], T1.[X_DictionaryCountryState.StandardCountryStateName], T1.[X_DictionaryCountryState.CoalCountryStateName], T1.[X_DictionaryCountryState.GoldCountryStateName], T1.[X_DictionaryCountryState.CustomCountryStateName], T1.[X_DictionaryCountryState.Description], T1.[X_DictionaryCountryState.FullDescription], T1.[X_DictionaryCountryState.Thumbnail], T1.[X_DictionaryCountryState.OriginalFileDataID], T1.[X_DictionaryCountryState.Version], T1.[X_DictionaryCountryState.VersionAntecedentID], T1.[X_DictionaryCountryState.VersionCertainty], T1.[X_DictionaryCountryState.VersionWorkflowInstanceID], T1.[X_DictionaryCountryState.VersionUpdatedBy], T1.[X_DictionaryCountryState.VersionDeletedBy], T1.[X_DictionaryCountryState.VersionOwnerContactID], T1.[X_DictionaryCountryState.VersionOwnerCompanyID], T1.[X_DictionaryCountryState.VersionUpdated])
    FROM (
        SELECT 
            T.CountryStateID AS [X_DictionaryCountryState.CountryStateID], 
            T.CountryID AS [X_DictionaryCountryState.CountryID], 
            T.StandardCountryStateName AS [X_DictionaryCountryState.StandardCountryStateName], 
            T.CoalCountryStateName AS [X_DictionaryCountryState.CoalCountryStateName], 
            T.GoldCountryStateName AS [X_DictionaryCountryState.GoldCountryStateName], 
            T.CustomCountryStateName AS [X_DictionaryCountryState.CustomCountryStateName], 
            T.Description AS [X_DictionaryCountryState.Description], 
            T.FullDescription AS [X_DictionaryCountryState.FullDescription], 
            T.Thumbnail AS [X_DictionaryCountryState.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryCountryState.OriginalFileDataID], 
            T.Version AS [X_DictionaryCountryState.Version], 
            T.VersionAntecedentID AS [X_DictionaryCountryState.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryCountryState.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryCountryState.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryCountryState.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryCountryState.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryCountryState.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryCountryState.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryCountryState.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryCountryStates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDataStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView104()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDataStatus
        [NKD.Module.BusinessObjects.Store.X_DictionaryDataStatus](T1.[X_DictionaryDataStatus.DataStatusID], T1.[X_DictionaryDataStatus.StandardDataStatusName], T1.[X_DictionaryDataStatus.CoalDataStatusName], T1.[X_DictionaryDataStatus.GoldDataStatusName], T1.[X_DictionaryDataStatus.CustomDataStatusName], T1.[X_DictionaryDataStatus.Description], T1.[X_DictionaryDataStatus.FullDescription], T1.[X_DictionaryDataStatus.Thumbnail], T1.[X_DictionaryDataStatus.OriginalFileDataID], T1.[X_DictionaryDataStatus.Version], T1.[X_DictionaryDataStatus.VersionAntecedentID], T1.[X_DictionaryDataStatus.VersionCertainty], T1.[X_DictionaryDataStatus.VersionWorkflowInstanceID], T1.[X_DictionaryDataStatus.VersionUpdatedBy], T1.[X_DictionaryDataStatus.VersionDeletedBy], T1.[X_DictionaryDataStatus.VersionOwnerContactID], T1.[X_DictionaryDataStatus.VersionOwnerCompanyID], T1.[X_DictionaryDataStatus.VersionUpdated])
    FROM (
        SELECT 
            T.DataStatusID AS [X_DictionaryDataStatus.DataStatusID], 
            T.StandardDataStatusName AS [X_DictionaryDataStatus.StandardDataStatusName], 
            T.CoalDataStatusName AS [X_DictionaryDataStatus.CoalDataStatusName], 
            T.GoldDataStatusName AS [X_DictionaryDataStatus.GoldDataStatusName], 
            T.CustomDataStatusName AS [X_DictionaryDataStatus.CustomDataStatusName], 
            T.Description AS [X_DictionaryDataStatus.Description], 
            T.FullDescription AS [X_DictionaryDataStatus.FullDescription], 
            T.Thumbnail AS [X_DictionaryDataStatus.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDataStatus.OriginalFileDataID], 
            T.Version AS [X_DictionaryDataStatus.Version], 
            T.VersionAntecedentID AS [X_DictionaryDataStatus.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDataStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDataStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDataStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDataStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDataStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDataStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDataStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDataStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectCompleteness.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView105()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDefectCompleteness
        [NKD.Module.BusinessObjects.Store.X_DictionaryDefectCompleteness](T1.[X_DictionaryDefectCompleteness.DefectCompletenessID], T1.[X_DictionaryDefectCompleteness.StandardDefectCompletenessName], T1.[X_DictionaryDefectCompleteness.CoalDefectCompletenessName], T1.[X_DictionaryDefectCompleteness.GoldDefectCompletenessName], T1.[X_DictionaryDefectCompleteness.CustomDefectCompletenessName], T1.[X_DictionaryDefectCompleteness.Description], T1.[X_DictionaryDefectCompleteness.FullDescription], T1.[X_DictionaryDefectCompleteness.Thumbnail], T1.[X_DictionaryDefectCompleteness.OriginalFileDataID], T1.[X_DictionaryDefectCompleteness.Version], T1.[X_DictionaryDefectCompleteness.VersionAntecedentID], T1.[X_DictionaryDefectCompleteness.VersionCertainty], T1.[X_DictionaryDefectCompleteness.VersionWorkflowInstanceID], T1.[X_DictionaryDefectCompleteness.VersionUpdatedBy], T1.[X_DictionaryDefectCompleteness.VersionDeletedBy], T1.[X_DictionaryDefectCompleteness.VersionOwnerContactID], T1.[X_DictionaryDefectCompleteness.VersionOwnerCompanyID], T1.[X_DictionaryDefectCompleteness.VersionUpdated])
    FROM (
        SELECT 
            T.DefectCompletenessID AS [X_DictionaryDefectCompleteness.DefectCompletenessID], 
            T.StandardDefectCompletenessName AS [X_DictionaryDefectCompleteness.StandardDefectCompletenessName], 
            T.CoalDefectCompletenessName AS [X_DictionaryDefectCompleteness.CoalDefectCompletenessName], 
            T.GoldDefectCompletenessName AS [X_DictionaryDefectCompleteness.GoldDefectCompletenessName], 
            T.CustomDefectCompletenessName AS [X_DictionaryDefectCompleteness.CustomDefectCompletenessName], 
            T.Description AS [X_DictionaryDefectCompleteness.Description], 
            T.FullDescription AS [X_DictionaryDefectCompleteness.FullDescription], 
            T.Thumbnail AS [X_DictionaryDefectCompleteness.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDefectCompleteness.OriginalFileDataID], 
            T.Version AS [X_DictionaryDefectCompleteness.Version], 
            T.VersionAntecedentID AS [X_DictionaryDefectCompleteness.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDefectCompleteness.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDefectCompleteness.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDefectCompleteness.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDefectCompleteness.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDefectCompleteness.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDefectCompleteness.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDefectCompleteness.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDefectCompletenesses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectContinuity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView106()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDefectContinuity
        [NKD.Module.BusinessObjects.Store.X_DictionaryDefectContinuity](T1.[X_DictionaryDefectContinuity.DefectContinuityID], T1.[X_DictionaryDefectContinuity.StandardDefectContinuityName], T1.[X_DictionaryDefectContinuity.CoalDefectContinuityName], T1.[X_DictionaryDefectContinuity.GoldDefectContinuityName], T1.[X_DictionaryDefectContinuity.CustomDefectContinuityName], T1.[X_DictionaryDefectContinuity.Description], T1.[X_DictionaryDefectContinuity.FullDescription], T1.[X_DictionaryDefectContinuity.Thumbnail], T1.[X_DictionaryDefectContinuity.OriginalFileDataID], T1.[X_DictionaryDefectContinuity.Version], T1.[X_DictionaryDefectContinuity.VersionAntecedentID], T1.[X_DictionaryDefectContinuity.VersionCertainty], T1.[X_DictionaryDefectContinuity.VersionWorkflowInstanceID], T1.[X_DictionaryDefectContinuity.VersionUpdatedBy], T1.[X_DictionaryDefectContinuity.VersionDeletedBy], T1.[X_DictionaryDefectContinuity.VersionOwnerContactID], T1.[X_DictionaryDefectContinuity.VersionOwnerCompanyID], T1.[X_DictionaryDefectContinuity.VersionUpdated])
    FROM (
        SELECT 
            T.DefectContinuityID AS [X_DictionaryDefectContinuity.DefectContinuityID], 
            T.StandardDefectContinuityName AS [X_DictionaryDefectContinuity.StandardDefectContinuityName], 
            T.CoalDefectContinuityName AS [X_DictionaryDefectContinuity.CoalDefectContinuityName], 
            T.GoldDefectContinuityName AS [X_DictionaryDefectContinuity.GoldDefectContinuityName], 
            T.CustomDefectContinuityName AS [X_DictionaryDefectContinuity.CustomDefectContinuityName], 
            T.Description AS [X_DictionaryDefectContinuity.Description], 
            T.FullDescription AS [X_DictionaryDefectContinuity.FullDescription], 
            T.Thumbnail AS [X_DictionaryDefectContinuity.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDefectContinuity.OriginalFileDataID], 
            T.Version AS [X_DictionaryDefectContinuity.Version], 
            T.VersionAntecedentID AS [X_DictionaryDefectContinuity.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDefectContinuity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDefectContinuity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDefectContinuity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDefectContinuity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDefectContinuity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDefectContinuity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDefectContinuity.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDefectContinuities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectSpacing.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView107()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDefectSpacing
        [NKD.Module.BusinessObjects.Store.X_DictionaryDefectSpacing](T1.[X_DictionaryDefectSpacing.DefectSpacingID], T1.[X_DictionaryDefectSpacing.StandardDefectSpacingName], T1.[X_DictionaryDefectSpacing.CoalDefectSpacingName], T1.[X_DictionaryDefectSpacing.GoldDefectSpacingName], T1.[X_DictionaryDefectSpacing.CustomDefectSpacingName], T1.[X_DictionaryDefectSpacing.Description], T1.[X_DictionaryDefectSpacing.FullDescription], T1.[X_DictionaryDefectSpacing.Thumbnail], T1.[X_DictionaryDefectSpacing.OriginalFileDataID], T1.[X_DictionaryDefectSpacing.Version], T1.[X_DictionaryDefectSpacing.VersionAntecedentID], T1.[X_DictionaryDefectSpacing.VersionCertainty], T1.[X_DictionaryDefectSpacing.VersionWorkflowInstanceID], T1.[X_DictionaryDefectSpacing.VersionUpdatedBy], T1.[X_DictionaryDefectSpacing.VersionDeletedBy], T1.[X_DictionaryDefectSpacing.VersionOwnerContactID], T1.[X_DictionaryDefectSpacing.VersionOwnerCompanyID], T1.[X_DictionaryDefectSpacing.VersionUpdated])
    FROM (
        SELECT 
            T.DefectSpacingID AS [X_DictionaryDefectSpacing.DefectSpacingID], 
            T.StandardDefectSpacingName AS [X_DictionaryDefectSpacing.StandardDefectSpacingName], 
            T.CoalDefectSpacingName AS [X_DictionaryDefectSpacing.CoalDefectSpacingName], 
            T.GoldDefectSpacingName AS [X_DictionaryDefectSpacing.GoldDefectSpacingName], 
            T.CustomDefectSpacingName AS [X_DictionaryDefectSpacing.CustomDefectSpacingName], 
            T.Description AS [X_DictionaryDefectSpacing.Description], 
            T.FullDescription AS [X_DictionaryDefectSpacing.FullDescription], 
            T.Thumbnail AS [X_DictionaryDefectSpacing.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDefectSpacing.OriginalFileDataID], 
            T.Version AS [X_DictionaryDefectSpacing.Version], 
            T.VersionAntecedentID AS [X_DictionaryDefectSpacing.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDefectSpacing.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDefectSpacing.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDefectSpacing.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDefectSpacing.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDefectSpacing.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDefectSpacing.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDefectSpacing.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDefectSpacings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView108()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDefectType
        [NKD.Module.BusinessObjects.Store.X_DictionaryDefectType](T1.[X_DictionaryDefectType.DefectTypeID], T1.[X_DictionaryDefectType.StandardDefectTypeName], T1.[X_DictionaryDefectType.CoalDefectTypeName], T1.[X_DictionaryDefectType.GoldDefectTypeName], T1.[X_DictionaryDefectType.CustomDefectTypeName], T1.[X_DictionaryDefectType.Description], T1.[X_DictionaryDefectType.FullDescription], T1.[X_DictionaryDefectType.Thumbnail], T1.[X_DictionaryDefectType.OriginalFileDataID], T1.[X_DictionaryDefectType.Version], T1.[X_DictionaryDefectType.VersionAntecedentID], T1.[X_DictionaryDefectType.VersionCertainty], T1.[X_DictionaryDefectType.VersionWorkflowInstanceID], T1.[X_DictionaryDefectType.VersionUpdatedBy], T1.[X_DictionaryDefectType.VersionDeletedBy], T1.[X_DictionaryDefectType.VersionOwnerContactID], T1.[X_DictionaryDefectType.VersionOwnerCompanyID], T1.[X_DictionaryDefectType.VersionUpdated])
    FROM (
        SELECT 
            T.DefectTypeID AS [X_DictionaryDefectType.DefectTypeID], 
            T.StandardDefectTypeName AS [X_DictionaryDefectType.StandardDefectTypeName], 
            T.CoalDefectTypeName AS [X_DictionaryDefectType.CoalDefectTypeName], 
            T.GoldDefectTypeName AS [X_DictionaryDefectType.GoldDefectTypeName], 
            T.CustomDefectTypeName AS [X_DictionaryDefectType.CustomDefectTypeName], 
            T.Description AS [X_DictionaryDefectType.Description], 
            T.FullDescription AS [X_DictionaryDefectType.FullDescription], 
            T.Thumbnail AS [X_DictionaryDefectType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDefectType.OriginalFileDataID], 
            T.Version AS [X_DictionaryDefectType.Version], 
            T.VersionAntecedentID AS [X_DictionaryDefectType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDefectType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDefectType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDefectType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDefectType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDefectType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDefectType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDefectType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDefectTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDesurveyAlgorithmType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView109()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDesurveyAlgorithmType
        [NKD.Module.BusinessObjects.Store.X_DictionaryDesurveyAlgorithmType](T1.[X_DictionaryDesurveyAlgorithmType.DesurveyAlgorithmTypeID], T1.[X_DictionaryDesurveyAlgorithmType.StandardDesurveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.CoalDesurveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.GoldDesurveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.CustomDesurveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.Description], T1.[X_DictionaryDesurveyAlgorithmType.FullDescription], T1.[X_DictionaryDesurveyAlgorithmType.Thumbnail], T1.[X_DictionaryDesurveyAlgorithmType.OriginalFileDataID], T1.[X_DictionaryDesurveyAlgorithmType.Version], T1.[X_DictionaryDesurveyAlgorithmType.VersionAntecedentID], T1.[X_DictionaryDesurveyAlgorithmType.VersionCertainty], T1.[X_DictionaryDesurveyAlgorithmType.VersionWorkflowInstanceID], T1.[X_DictionaryDesurveyAlgorithmType.VersionUpdatedBy], T1.[X_DictionaryDesurveyAlgorithmType.VersionDeletedBy], T1.[X_DictionaryDesurveyAlgorithmType.VersionOwnerContactID], T1.[X_DictionaryDesurveyAlgorithmType.VersionOwnerCompanyID], T1.[X_DictionaryDesurveyAlgorithmType.VersionUpdated])
    FROM (
        SELECT 
            T.DesurveyAlgorithmTypeID AS [X_DictionaryDesurveyAlgorithmType.DesurveyAlgorithmTypeID], 
            T.StandardDesurveyAlgorithmTypeName AS [X_DictionaryDesurveyAlgorithmType.StandardDesurveyAlgorithmTypeName], 
            T.CoalDesurveyAlgorithmTypeName AS [X_DictionaryDesurveyAlgorithmType.CoalDesurveyAlgorithmTypeName], 
            T.GoldDesurveyAlgorithmTypeName AS [X_DictionaryDesurveyAlgorithmType.GoldDesurveyAlgorithmTypeName], 
            T.CustomDesurveyAlgorithmTypeName AS [X_DictionaryDesurveyAlgorithmType.CustomDesurveyAlgorithmTypeName], 
            T.Description AS [X_DictionaryDesurveyAlgorithmType.Description], 
            T.FullDescription AS [X_DictionaryDesurveyAlgorithmType.FullDescription], 
            T.Thumbnail AS [X_DictionaryDesurveyAlgorithmType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDesurveyAlgorithmType.OriginalFileDataID], 
            T.Version AS [X_DictionaryDesurveyAlgorithmType.Version], 
            T.VersionAntecedentID AS [X_DictionaryDesurveyAlgorithmType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDesurveyAlgorithmType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDesurveyAlgorithmType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDesurveyAlgorithmType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDesurveyAlgorithmType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDesurveyAlgorithmType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDesurveyAlgorithmType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDesurveyAlgorithmType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDesurveyAlgorithmTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDimension.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView110()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDimension
        [NKD.Module.BusinessObjects.Store.X_DictionaryDimension](T1.[X_DictionaryDimension.DimensionID], T1.[X_DictionaryDimension.DimensionGUID], T1.[X_DictionaryDimension.StandardDimensionName], T1.[X_DictionaryDimension.CoalDimensionName], T1.[X_DictionaryDimension.GoldDimensionName], T1.[X_DictionaryDimension.CustomDimensionName], T1.[X_DictionaryDimension.Description], T1.[X_DictionaryDimension.FullDescription], T1.[X_DictionaryDimension.Thumbnail], T1.[X_DictionaryDimension.OriginalFileDataID], T1.[X_DictionaryDimension.Version], T1.[X_DictionaryDimension.VersionAntecedentID], T1.[X_DictionaryDimension.VersionCertainty], T1.[X_DictionaryDimension.VersionWorkflowInstanceID], T1.[X_DictionaryDimension.VersionUpdatedBy], T1.[X_DictionaryDimension.VersionDeletedBy], T1.[X_DictionaryDimension.VersionOwnerContactID], T1.[X_DictionaryDimension.VersionOwnerCompanyID], T1.[X_DictionaryDimension.VersionUpdated])
    FROM (
        SELECT 
            T.DimensionID AS [X_DictionaryDimension.DimensionID], 
            T.DimensionGUID AS [X_DictionaryDimension.DimensionGUID], 
            T.StandardDimensionName AS [X_DictionaryDimension.StandardDimensionName], 
            T.CoalDimensionName AS [X_DictionaryDimension.CoalDimensionName], 
            T.GoldDimensionName AS [X_DictionaryDimension.GoldDimensionName], 
            T.CustomDimensionName AS [X_DictionaryDimension.CustomDimensionName], 
            T.Description AS [X_DictionaryDimension.Description], 
            T.FullDescription AS [X_DictionaryDimension.FullDescription], 
            T.Thumbnail AS [X_DictionaryDimension.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDimension.OriginalFileDataID], 
            T.Version AS [X_DictionaryDimension.Version], 
            T.VersionAntecedentID AS [X_DictionaryDimension.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDimension.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDimension.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDimension.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDimension.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDimension.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDimension.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDimension.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDimensions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDipOrientationMethod.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView111()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDipOrientationMethod
        [NKD.Module.BusinessObjects.Store.X_DictionaryDipOrientationMethod](T1.[X_DictionaryDipOrientationMethod.DipOrientationMethodID], T1.[X_DictionaryDipOrientationMethod.StandardDipOrientationMethodName], T1.[X_DictionaryDipOrientationMethod.CoalDipOrientationMethodName], T1.[X_DictionaryDipOrientationMethod.GoldDipOrientationMethodName], T1.[X_DictionaryDipOrientationMethod.CustomDipOrientationMethodName], T1.[X_DictionaryDipOrientationMethod.Description], T1.[X_DictionaryDipOrientationMethod.FullDescription], T1.[X_DictionaryDipOrientationMethod.Thumbnail], T1.[X_DictionaryDipOrientationMethod.OriginalFileDataID], T1.[X_DictionaryDipOrientationMethod.Version], T1.[X_DictionaryDipOrientationMethod.VersionAntecedentID], T1.[X_DictionaryDipOrientationMethod.VersionCertainty], T1.[X_DictionaryDipOrientationMethod.VersionWorkflowInstanceID], T1.[X_DictionaryDipOrientationMethod.VersionUpdatedBy], T1.[X_DictionaryDipOrientationMethod.VersionDeletedBy], T1.[X_DictionaryDipOrientationMethod.VersionOwnerContactID], T1.[X_DictionaryDipOrientationMethod.VersionOwnerCompanyID], T1.[X_DictionaryDipOrientationMethod.VersionUpdated])
    FROM (
        SELECT 
            T.DipOrientationMethodID AS [X_DictionaryDipOrientationMethod.DipOrientationMethodID], 
            T.StandardDipOrientationMethodName AS [X_DictionaryDipOrientationMethod.StandardDipOrientationMethodName], 
            T.CoalDipOrientationMethodName AS [X_DictionaryDipOrientationMethod.CoalDipOrientationMethodName], 
            T.GoldDipOrientationMethodName AS [X_DictionaryDipOrientationMethod.GoldDipOrientationMethodName], 
            T.CustomDipOrientationMethodName AS [X_DictionaryDipOrientationMethod.CustomDipOrientationMethodName], 
            T.Description AS [X_DictionaryDipOrientationMethod.Description], 
            T.FullDescription AS [X_DictionaryDipOrientationMethod.FullDescription], 
            T.Thumbnail AS [X_DictionaryDipOrientationMethod.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDipOrientationMethod.OriginalFileDataID], 
            T.Version AS [X_DictionaryDipOrientationMethod.Version], 
            T.VersionAntecedentID AS [X_DictionaryDipOrientationMethod.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDipOrientationMethod.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDipOrientationMethod.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDipOrientationMethod.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDipOrientationMethod.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDipOrientationMethod.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDipOrientationMethod.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDipOrientationMethod.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDipOrientationMethods AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomain.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView112()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDomain
        [NKD.Module.BusinessObjects.Store.X_DictionaryDomain](T1.[X_DictionaryDomain.DomainID], T1.[X_DictionaryDomain.StandardDomainName], T1.[X_DictionaryDomain.Description], T1.[X_DictionaryDomain.FullDescription], T1.[X_DictionaryDomain.Thumbnail], T1.[X_DictionaryDomain.OriginalFileDataID], T1.[X_DictionaryDomain.Version], T1.[X_DictionaryDomain.VersionAntecedentID], T1.[X_DictionaryDomain.VersionCertainty], T1.[X_DictionaryDomain.VersionWorkflowInstanceID], T1.[X_DictionaryDomain.VersionUpdatedBy], T1.[X_DictionaryDomain.VersionDeletedBy], T1.[X_DictionaryDomain.VersionOwnerContactID], T1.[X_DictionaryDomain.VersionOwnerCompanyID], T1.[X_DictionaryDomain.VersionUpdated])
    FROM (
        SELECT 
            T.DomainID AS [X_DictionaryDomain.DomainID], 
            T.StandardDomainName AS [X_DictionaryDomain.StandardDomainName], 
            T.Description AS [X_DictionaryDomain.Description], 
            T.FullDescription AS [X_DictionaryDomain.FullDescription], 
            T.Thumbnail AS [X_DictionaryDomain.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDomain.OriginalFileDataID], 
            T.Version AS [X_DictionaryDomain.Version], 
            T.VersionAntecedentID AS [X_DictionaryDomain.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDomain.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDomain.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDomain.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDomain.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDomain.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDomain.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDomain.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDomains AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomainAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView113()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDomainAlias
        [NKD.Module.BusinessObjects.Store.X_DictionaryDomainAlias](T1.[X_DictionaryDomainAlias.DomainAliasID], T1.[X_DictionaryDomainAlias.DomainID], T1.[X_DictionaryDomainAlias.CustomDomainName], T1.[X_DictionaryDomainAlias.FullDescription], T1.[X_DictionaryDomainAlias.Thumbnail], T1.[X_DictionaryDomainAlias.OriginalFileDataID], T1.[X_DictionaryDomainAlias.Version], T1.[X_DictionaryDomainAlias.VersionAntecedentID], T1.[X_DictionaryDomainAlias.VersionCertainty], T1.[X_DictionaryDomainAlias.VersionWorkflowInstanceID], T1.[X_DictionaryDomainAlias.VersionUpdatedBy], T1.[X_DictionaryDomainAlias.VersionDeletedBy], T1.[X_DictionaryDomainAlias.VersionOwnerContactID], T1.[X_DictionaryDomainAlias.VersionOwnerCompanyID], T1.[X_DictionaryDomainAlias.VersionUpdated])
    FROM (
        SELECT 
            T.DomainAliasID AS [X_DictionaryDomainAlias.DomainAliasID], 
            T.DomainID AS [X_DictionaryDomainAlias.DomainID], 
            T.CustomDomainName AS [X_DictionaryDomainAlias.CustomDomainName], 
            T.FullDescription AS [X_DictionaryDomainAlias.FullDescription], 
            T.Thumbnail AS [X_DictionaryDomainAlias.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDomainAlias.OriginalFileDataID], 
            T.Version AS [X_DictionaryDomainAlias.Version], 
            T.VersionAntecedentID AS [X_DictionaryDomainAlias.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDomainAlias.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDomainAlias.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDomainAlias.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDomainAlias.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDomainAlias.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDomainAlias.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDomainAlias.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDomainAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillBitType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView114()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDrillBitType
        [NKD.Module.BusinessObjects.Store.X_DictionaryDrillBitType](T1.[X_DictionaryDrillBitType.DrillBitTypeID], T1.[X_DictionaryDrillBitType.StandardDrillBitTypeName], T1.[X_DictionaryDrillBitType.CoalDrillBitTypeName], T1.[X_DictionaryDrillBitType.GoldDrillBitTypeName], T1.[X_DictionaryDrillBitType.CustomDrillBitTypeName], T1.[X_DictionaryDrillBitType.Description], T1.[X_DictionaryDrillBitType.FullDescription], T1.[X_DictionaryDrillBitType.Thumbnail], T1.[X_DictionaryDrillBitType.OriginalFileDataID], T1.[X_DictionaryDrillBitType.Version], T1.[X_DictionaryDrillBitType.VersionAntecedentID], T1.[X_DictionaryDrillBitType.VersionCertainty], T1.[X_DictionaryDrillBitType.VersionWorkflowInstanceID], T1.[X_DictionaryDrillBitType.VersionUpdatedBy], T1.[X_DictionaryDrillBitType.VersionDeletedBy], T1.[X_DictionaryDrillBitType.VersionOwnerContactID], T1.[X_DictionaryDrillBitType.VersionOwnerCompanyID], T1.[X_DictionaryDrillBitType.VersionUpdated])
    FROM (
        SELECT 
            T.DrillBitTypeID AS [X_DictionaryDrillBitType.DrillBitTypeID], 
            T.StandardDrillBitTypeName AS [X_DictionaryDrillBitType.StandardDrillBitTypeName], 
            T.CoalDrillBitTypeName AS [X_DictionaryDrillBitType.CoalDrillBitTypeName], 
            T.GoldDrillBitTypeName AS [X_DictionaryDrillBitType.GoldDrillBitTypeName], 
            T.CustomDrillBitTypeName AS [X_DictionaryDrillBitType.CustomDrillBitTypeName], 
            T.Description AS [X_DictionaryDrillBitType.Description], 
            T.FullDescription AS [X_DictionaryDrillBitType.FullDescription], 
            T.Thumbnail AS [X_DictionaryDrillBitType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDrillBitType.OriginalFileDataID], 
            T.Version AS [X_DictionaryDrillBitType.Version], 
            T.VersionAntecedentID AS [X_DictionaryDrillBitType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDrillBitType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDrillBitType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDrillBitType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDrillBitType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDrillBitType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDrillBitType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDrillBitType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDrillBitTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillCasingType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView115()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDrillCasingType
        [NKD.Module.BusinessObjects.Store.X_DictionaryDrillCasingType](T1.[X_DictionaryDrillCasingType.DrillCasingTypeID], T1.[X_DictionaryDrillCasingType.StandardDrillCasingTypeName], T1.[X_DictionaryDrillCasingType.CoalDrillCasingTypeName], T1.[X_DictionaryDrillCasingType.GoldDrillCasingTypeName], T1.[X_DictionaryDrillCasingType.CustomDrillCasingTypeName], T1.[X_DictionaryDrillCasingType.Description], T1.[X_DictionaryDrillCasingType.FullDescription], T1.[X_DictionaryDrillCasingType.Thumbnail], T1.[X_DictionaryDrillCasingType.OriginalFileDataID], T1.[X_DictionaryDrillCasingType.Version], T1.[X_DictionaryDrillCasingType.VersionAntecedentID], T1.[X_DictionaryDrillCasingType.VersionCertainty], T1.[X_DictionaryDrillCasingType.VersionWorkflowInstanceID], T1.[X_DictionaryDrillCasingType.VersionUpdatedBy], T1.[X_DictionaryDrillCasingType.VersionDeletedBy], T1.[X_DictionaryDrillCasingType.VersionOwnerContactID], T1.[X_DictionaryDrillCasingType.VersionOwnerCompanyID], T1.[X_DictionaryDrillCasingType.VersionUpdated])
    FROM (
        SELECT 
            T.DrillCasingTypeID AS [X_DictionaryDrillCasingType.DrillCasingTypeID], 
            T.StandardDrillCasingTypeName AS [X_DictionaryDrillCasingType.StandardDrillCasingTypeName], 
            T.CoalDrillCasingTypeName AS [X_DictionaryDrillCasingType.CoalDrillCasingTypeName], 
            T.GoldDrillCasingTypeName AS [X_DictionaryDrillCasingType.GoldDrillCasingTypeName], 
            T.CustomDrillCasingTypeName AS [X_DictionaryDrillCasingType.CustomDrillCasingTypeName], 
            T.Description AS [X_DictionaryDrillCasingType.Description], 
            T.FullDescription AS [X_DictionaryDrillCasingType.FullDescription], 
            T.Thumbnail AS [X_DictionaryDrillCasingType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDrillCasingType.OriginalFileDataID], 
            T.Version AS [X_DictionaryDrillCasingType.Version], 
            T.VersionAntecedentID AS [X_DictionaryDrillCasingType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDrillCasingType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDrillCasingType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDrillCasingType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDrillCasingType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDrillCasingType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDrillCasingType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDrillCasingType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDrillCasingTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillFluid.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView116()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDrillFluid
        [NKD.Module.BusinessObjects.Store.X_DictionaryDrillFluid](T1.[X_DictionaryDrillFluid.DrillFluidID], T1.[X_DictionaryDrillFluid.StandardDrillFluidName], T1.[X_DictionaryDrillFluid.CoalDrillFluidName], T1.[X_DictionaryDrillFluid.GoldDrillFluidName], T1.[X_DictionaryDrillFluid.CustomDrillFluidName], T1.[X_DictionaryDrillFluid.Description], T1.[X_DictionaryDrillFluid.FullDescription], T1.[X_DictionaryDrillFluid.Thumbnail], T1.[X_DictionaryDrillFluid.OriginalFileDataID], T1.[X_DictionaryDrillFluid.Version], T1.[X_DictionaryDrillFluid.VersionAntecedentID], T1.[X_DictionaryDrillFluid.VersionCertainty], T1.[X_DictionaryDrillFluid.VersionWorkflowInstanceID], T1.[X_DictionaryDrillFluid.VersionUpdatedBy], T1.[X_DictionaryDrillFluid.VersionDeletedBy], T1.[X_DictionaryDrillFluid.VersionOwnerContactID], T1.[X_DictionaryDrillFluid.VersionOwnerCompanyID], T1.[X_DictionaryDrillFluid.VersionUpdated])
    FROM (
        SELECT 
            T.DrillFluidID AS [X_DictionaryDrillFluid.DrillFluidID], 
            T.StandardDrillFluidName AS [X_DictionaryDrillFluid.StandardDrillFluidName], 
            T.CoalDrillFluidName AS [X_DictionaryDrillFluid.CoalDrillFluidName], 
            T.GoldDrillFluidName AS [X_DictionaryDrillFluid.GoldDrillFluidName], 
            T.CustomDrillFluidName AS [X_DictionaryDrillFluid.CustomDrillFluidName], 
            T.Description AS [X_DictionaryDrillFluid.Description], 
            T.FullDescription AS [X_DictionaryDrillFluid.FullDescription], 
            T.Thumbnail AS [X_DictionaryDrillFluid.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDrillFluid.OriginalFileDataID], 
            T.Version AS [X_DictionaryDrillFluid.Version], 
            T.VersionAntecedentID AS [X_DictionaryDrillFluid.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDrillFluid.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDrillFluid.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDrillFluid.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDrillFluid.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDrillFluid.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDrillFluid.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDrillFluid.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDrillFluids AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillRigType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView117()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDrillRigType
        [NKD.Module.BusinessObjects.Store.X_DictionaryDrillRigType](T1.[X_DictionaryDrillRigType.DrillRigTypeID], T1.[X_DictionaryDrillRigType.StandardDrillRigTypeName], T1.[X_DictionaryDrillRigType.CoalDrillRigTypeName], T1.[X_DictionaryDrillRigType.GoldDrillRigTypeName], T1.[X_DictionaryDrillRigType.CustomDrillRigTypeName], T1.[X_DictionaryDrillRigType.Description], T1.[X_DictionaryDrillRigType.FullDescription], T1.[X_DictionaryDrillRigType.Thumbnail], T1.[X_DictionaryDrillRigType.OriginalFileDataID], T1.[X_DictionaryDrillRigType.Version], T1.[X_DictionaryDrillRigType.VersionAntecedentID], T1.[X_DictionaryDrillRigType.VersionCertainty], T1.[X_DictionaryDrillRigType.VersionWorkflowInstanceID], T1.[X_DictionaryDrillRigType.VersionUpdatedBy], T1.[X_DictionaryDrillRigType.VersionDeletedBy], T1.[X_DictionaryDrillRigType.VersionOwnerContactID], T1.[X_DictionaryDrillRigType.VersionOwnerCompanyID], T1.[X_DictionaryDrillRigType.VersionUpdated])
    FROM (
        SELECT 
            T.DrillRigTypeID AS [X_DictionaryDrillRigType.DrillRigTypeID], 
            T.StandardDrillRigTypeName AS [X_DictionaryDrillRigType.StandardDrillRigTypeName], 
            T.CoalDrillRigTypeName AS [X_DictionaryDrillRigType.CoalDrillRigTypeName], 
            T.GoldDrillRigTypeName AS [X_DictionaryDrillRigType.GoldDrillRigTypeName], 
            T.CustomDrillRigTypeName AS [X_DictionaryDrillRigType.CustomDrillRigTypeName], 
            T.Description AS [X_DictionaryDrillRigType.Description], 
            T.FullDescription AS [X_DictionaryDrillRigType.FullDescription], 
            T.Thumbnail AS [X_DictionaryDrillRigType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDrillRigType.OriginalFileDataID], 
            T.Version AS [X_DictionaryDrillRigType.Version], 
            T.VersionAntecedentID AS [X_DictionaryDrillRigType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDrillRigType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDrillRigType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDrillRigType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDrillRigType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDrillRigType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDrillRigType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDrillRigType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDrillRigTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillSize.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView118()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryDrillSize
        [NKD.Module.BusinessObjects.Store.X_DictionaryDrillSize](T1.[X_DictionaryDrillSize.DrillSizeID], T1.[X_DictionaryDrillSize.StandardDrillSizeName], T1.[X_DictionaryDrillSize.CoalDrillSizeName], T1.[X_DictionaryDrillSize.GoldDrillSizeName], T1.[X_DictionaryDrillSize.CustomDrillSizeName], T1.[X_DictionaryDrillSize.Description], T1.[X_DictionaryDrillSize.FullDescription], T1.[X_DictionaryDrillSize.Thumbnail], T1.[X_DictionaryDrillSize.OriginalFileDataID], T1.[X_DictionaryDrillSize.Version], T1.[X_DictionaryDrillSize.VersionAntecedentID], T1.[X_DictionaryDrillSize.VersionCertainty], T1.[X_DictionaryDrillSize.VersionWorkflowInstanceID], T1.[X_DictionaryDrillSize.VersionUpdatedBy], T1.[X_DictionaryDrillSize.VersionDeletedBy], T1.[X_DictionaryDrillSize.VersionOwnerContactID], T1.[X_DictionaryDrillSize.VersionOwnerCompanyID], T1.[X_DictionaryDrillSize.VersionUpdated])
    FROM (
        SELECT 
            T.DrillSizeID AS [X_DictionaryDrillSize.DrillSizeID], 
            T.StandardDrillSizeName AS [X_DictionaryDrillSize.StandardDrillSizeName], 
            T.CoalDrillSizeName AS [X_DictionaryDrillSize.CoalDrillSizeName], 
            T.GoldDrillSizeName AS [X_DictionaryDrillSize.GoldDrillSizeName], 
            T.CustomDrillSizeName AS [X_DictionaryDrillSize.CustomDrillSizeName], 
            T.Description AS [X_DictionaryDrillSize.Description], 
            T.FullDescription AS [X_DictionaryDrillSize.FullDescription], 
            T.Thumbnail AS [X_DictionaryDrillSize.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryDrillSize.OriginalFileDataID], 
            T.Version AS [X_DictionaryDrillSize.Version], 
            T.VersionAntecedentID AS [X_DictionaryDrillSize.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryDrillSize.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryDrillSize.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryDrillSize.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryDrillSize.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryDrillSize.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryDrillSize.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryDrillSize.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryDrillSizes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryEstimatedStrength.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView119()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryEstimatedStrength
        [NKD.Module.BusinessObjects.Store.X_DictionaryEstimatedStrength](T1.[X_DictionaryEstimatedStrength.EstimatedStrengthID], T1.[X_DictionaryEstimatedStrength.StandardEstimatedStrengthName], T1.[X_DictionaryEstimatedStrength.CoalEstimatedStrengthName], T1.[X_DictionaryEstimatedStrength.GoldEstimatedStrengthName], T1.[X_DictionaryEstimatedStrength.CustomEstimatedStrengthName], T1.[X_DictionaryEstimatedStrength.Description], T1.[X_DictionaryEstimatedStrength.FullDescription], T1.[X_DictionaryEstimatedStrength.Thumbnail], T1.[X_DictionaryEstimatedStrength.OriginalFileDataID], T1.[X_DictionaryEstimatedStrength.Version], T1.[X_DictionaryEstimatedStrength.VersionAntecedentID], T1.[X_DictionaryEstimatedStrength.VersionCertainty], T1.[X_DictionaryEstimatedStrength.VersionWorkflowInstanceID], T1.[X_DictionaryEstimatedStrength.VersionUpdatedBy], T1.[X_DictionaryEstimatedStrength.VersionDeletedBy], T1.[X_DictionaryEstimatedStrength.VersionOwnerContactID], T1.[X_DictionaryEstimatedStrength.VersionOwnerCompanyID], T1.[X_DictionaryEstimatedStrength.VersionUpdated])
    FROM (
        SELECT 
            T.EstimatedStrengthID AS [X_DictionaryEstimatedStrength.EstimatedStrengthID], 
            T.StandardEstimatedStrengthName AS [X_DictionaryEstimatedStrength.StandardEstimatedStrengthName], 
            T.CoalEstimatedStrengthName AS [X_DictionaryEstimatedStrength.CoalEstimatedStrengthName], 
            T.GoldEstimatedStrengthName AS [X_DictionaryEstimatedStrength.GoldEstimatedStrengthName], 
            T.CustomEstimatedStrengthName AS [X_DictionaryEstimatedStrength.CustomEstimatedStrengthName], 
            T.Description AS [X_DictionaryEstimatedStrength.Description], 
            T.FullDescription AS [X_DictionaryEstimatedStrength.FullDescription], 
            T.Thumbnail AS [X_DictionaryEstimatedStrength.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryEstimatedStrength.OriginalFileDataID], 
            T.Version AS [X_DictionaryEstimatedStrength.Version], 
            T.VersionAntecedentID AS [X_DictionaryEstimatedStrength.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryEstimatedStrength.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryEstimatedStrength.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryEstimatedStrength.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryEstimatedStrength.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryEstimatedStrength.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryEstimatedStrength.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryEstimatedStrength.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryEstimatedStrengths AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFailureMode.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView120()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryFailureMode
        [NKD.Module.BusinessObjects.Store.X_DictionaryFailureMode](T1.[X_DictionaryFailureMode.FailureModeID], T1.[X_DictionaryFailureMode.StandardFailureModeName], T1.[X_DictionaryFailureMode.CoalFailureModeName], T1.[X_DictionaryFailureMode.GoldFailureModeName], T1.[X_DictionaryFailureMode.CustomFailureModeName], T1.[X_DictionaryFailureMode.Description], T1.[X_DictionaryFailureMode.FullDescription], T1.[X_DictionaryFailureMode.Thumbnail], T1.[X_DictionaryFailureMode.OriginalFileDataID], T1.[X_DictionaryFailureMode.Version], T1.[X_DictionaryFailureMode.VersionAntecedentID], T1.[X_DictionaryFailureMode.VersionCertainty], T1.[X_DictionaryFailureMode.VersionWorkflowInstanceID], T1.[X_DictionaryFailureMode.VersionUpdatedBy], T1.[X_DictionaryFailureMode.VersionDeletedBy], T1.[X_DictionaryFailureMode.VersionOwnerContactID], T1.[X_DictionaryFailureMode.VersionOwnerCompanyID], T1.[X_DictionaryFailureMode.VersionUpdated])
    FROM (
        SELECT 
            T.FailureModeID AS [X_DictionaryFailureMode.FailureModeID], 
            T.StandardFailureModeName AS [X_DictionaryFailureMode.StandardFailureModeName], 
            T.CoalFailureModeName AS [X_DictionaryFailureMode.CoalFailureModeName], 
            T.GoldFailureModeName AS [X_DictionaryFailureMode.GoldFailureModeName], 
            T.CustomFailureModeName AS [X_DictionaryFailureMode.CustomFailureModeName], 
            T.Description AS [X_DictionaryFailureMode.Description], 
            T.FullDescription AS [X_DictionaryFailureMode.FullDescription], 
            T.Thumbnail AS [X_DictionaryFailureMode.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryFailureMode.OriginalFileDataID], 
            T.Version AS [X_DictionaryFailureMode.Version], 
            T.VersionAntecedentID AS [X_DictionaryFailureMode.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryFailureMode.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryFailureMode.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryFailureMode.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryFailureMode.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryFailureMode.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryFailureMode.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryFailureMode.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryFailureModes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFileType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView121()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryFileType
        [NKD.Module.BusinessObjects.Store.X_DictionaryFileType](T1.[X_DictionaryFileType.FileTypeID], T1.[X_DictionaryFileType.ParentFileTypeID], T1.[X_DictionaryFileType.CompanyID], T1.[X_DictionaryFileType.StandardFileTypeName], T1.[X_DictionaryFileType.CustomFileTypeName], T1.[X_DictionaryFileType.Description], T1.[X_DictionaryFileType.FullDescription], T1.[X_DictionaryFileType.Thumbnail], T1.[X_DictionaryFileType.OriginalFileDataID], T1.[X_DictionaryFileType.Version], T1.[X_DictionaryFileType.VersionAntecedentID], T1.[X_DictionaryFileType.VersionCertainty], T1.[X_DictionaryFileType.VersionWorkflowInstanceID], T1.[X_DictionaryFileType.VersionUpdatedBy], T1.[X_DictionaryFileType.VersionDeletedBy], T1.[X_DictionaryFileType.VersionOwnerContactID], T1.[X_DictionaryFileType.VersionOwnerCompanyID], T1.[X_DictionaryFileType.VersionUpdated])
    FROM (
        SELECT 
            T.FileTypeID AS [X_DictionaryFileType.FileTypeID], 
            T.ParentFileTypeID AS [X_DictionaryFileType.ParentFileTypeID], 
            T.CompanyID AS [X_DictionaryFileType.CompanyID], 
            T.StandardFileTypeName AS [X_DictionaryFileType.StandardFileTypeName], 
            T.CustomFileTypeName AS [X_DictionaryFileType.CustomFileTypeName], 
            T.Description AS [X_DictionaryFileType.Description], 
            T.FullDescription AS [X_DictionaryFileType.FullDescription], 
            T.Thumbnail AS [X_DictionaryFileType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryFileType.OriginalFileDataID], 
            T.Version AS [X_DictionaryFileType.Version], 
            T.VersionAntecedentID AS [X_DictionaryFileType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryFileType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryFileType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryFileType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryFileType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryFileType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryFileType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryFileType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryFileTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFlowTestType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView122()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryFlowTestType
        [NKD.Module.BusinessObjects.Store.X_DictionaryFlowTestType](T1.[X_DictionaryFlowTestType.FlowTestTypeID], T1.[X_DictionaryFlowTestType.StandardFlowTestTypeName], T1.[X_DictionaryFlowTestType.CoalFlowTestTypeName], T1.[X_DictionaryFlowTestType.GoldFlowTestTypeName], T1.[X_DictionaryFlowTestType.CustomFlowTestTypeName], T1.[X_DictionaryFlowTestType.Description], T1.[X_DictionaryFlowTestType.FullDescription], T1.[X_DictionaryFlowTestType.Thumbnail], T1.[X_DictionaryFlowTestType.OriginalFileDataID], T1.[X_DictionaryFlowTestType.Version], T1.[X_DictionaryFlowTestType.VersionAntecedentID], T1.[X_DictionaryFlowTestType.VersionCertainty], T1.[X_DictionaryFlowTestType.VersionWorkflowInstanceID], T1.[X_DictionaryFlowTestType.VersionUpdatedBy], T1.[X_DictionaryFlowTestType.VersionDeletedBy], T1.[X_DictionaryFlowTestType.VersionOwnerContactID], T1.[X_DictionaryFlowTestType.VersionOwnerCompanyID], T1.[X_DictionaryFlowTestType.VersionUpdated])
    FROM (
        SELECT 
            T.FlowTestTypeID AS [X_DictionaryFlowTestType.FlowTestTypeID], 
            T.StandardFlowTestTypeName AS [X_DictionaryFlowTestType.StandardFlowTestTypeName], 
            T.CoalFlowTestTypeName AS [X_DictionaryFlowTestType.CoalFlowTestTypeName], 
            T.GoldFlowTestTypeName AS [X_DictionaryFlowTestType.GoldFlowTestTypeName], 
            T.CustomFlowTestTypeName AS [X_DictionaryFlowTestType.CustomFlowTestTypeName], 
            T.Description AS [X_DictionaryFlowTestType.Description], 
            T.FullDescription AS [X_DictionaryFlowTestType.FullDescription], 
            T.Thumbnail AS [X_DictionaryFlowTestType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryFlowTestType.OriginalFileDataID], 
            T.Version AS [X_DictionaryFlowTestType.Version], 
            T.VersionAntecedentID AS [X_DictionaryFlowTestType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryFlowTestType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryFlowTestType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryFlowTestType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryFlowTestType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryFlowTestType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryFlowTestType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryFlowTestType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryFlowTestTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGasDetected.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView123()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryGasDetected
        [NKD.Module.BusinessObjects.Store.X_DictionaryGasDetected](T1.[X_DictionaryGasDetected.GasDetectedID], T1.[X_DictionaryGasDetected.StandardGasDetectedName], T1.[X_DictionaryGasDetected.CoalGasDetectedName], T1.[X_DictionaryGasDetected.GoldGasDetectedName], T1.[X_DictionaryGasDetected.CustomGasDetectedName], T1.[X_DictionaryGasDetected.Description], T1.[X_DictionaryGasDetected.FullDescription], T1.[X_DictionaryGasDetected.Thumbnail], T1.[X_DictionaryGasDetected.OriginalFileDataID], T1.[X_DictionaryGasDetected.Version], T1.[X_DictionaryGasDetected.VersionAntecedentID], T1.[X_DictionaryGasDetected.VersionCertainty], T1.[X_DictionaryGasDetected.VersionWorkflowInstanceID], T1.[X_DictionaryGasDetected.VersionUpdatedBy], T1.[X_DictionaryGasDetected.VersionDeletedBy], T1.[X_DictionaryGasDetected.VersionOwnerContactID], T1.[X_DictionaryGasDetected.VersionOwnerCompanyID], T1.[X_DictionaryGasDetected.VersionUpdated])
    FROM (
        SELECT 
            T.GasDetectedID AS [X_DictionaryGasDetected.GasDetectedID], 
            T.StandardGasDetectedName AS [X_DictionaryGasDetected.StandardGasDetectedName], 
            T.CoalGasDetectedName AS [X_DictionaryGasDetected.CoalGasDetectedName], 
            T.GoldGasDetectedName AS [X_DictionaryGasDetected.GoldGasDetectedName], 
            T.CustomGasDetectedName AS [X_DictionaryGasDetected.CustomGasDetectedName], 
            T.Description AS [X_DictionaryGasDetected.Description], 
            T.FullDescription AS [X_DictionaryGasDetected.FullDescription], 
            T.Thumbnail AS [X_DictionaryGasDetected.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryGasDetected.OriginalFileDataID], 
            T.Version AS [X_DictionaryGasDetected.Version], 
            T.VersionAntecedentID AS [X_DictionaryGasDetected.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryGasDetected.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryGasDetected.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryGasDetected.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryGasDetected.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryGasDetected.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryGasDetected.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryGasDetected.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryGasDetecteds AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeodeticDatum.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView124()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryGeodeticDatum
        [NKD.Module.BusinessObjects.Store.X_DictionaryGeodeticDatum](T1.[X_DictionaryGeodeticDatum.GeodeticDatumID], T1.[X_DictionaryGeodeticDatum.StandardGeodeticDatumName], T1.[X_DictionaryGeodeticDatum.CoalGeodeticDatumName], T1.[X_DictionaryGeodeticDatum.GoldGeodeticDatumName], T1.[X_DictionaryGeodeticDatum.CustomGeodeticDatumName], T1.[X_DictionaryGeodeticDatum.Description], T1.[X_DictionaryGeodeticDatum.FullDescription], T1.[X_DictionaryGeodeticDatum.Thumbnail], T1.[X_DictionaryGeodeticDatum.OriginalFileDataID], T1.[X_DictionaryGeodeticDatum.Version], T1.[X_DictionaryGeodeticDatum.VersionAntecedentID], T1.[X_DictionaryGeodeticDatum.VersionCertainty], T1.[X_DictionaryGeodeticDatum.VersionWorkflowInstanceID], T1.[X_DictionaryGeodeticDatum.VersionUpdatedBy], T1.[X_DictionaryGeodeticDatum.VersionDeletedBy], T1.[X_DictionaryGeodeticDatum.VersionOwnerContactID], T1.[X_DictionaryGeodeticDatum.VersionOwnerCompanyID], T1.[X_DictionaryGeodeticDatum.VersionUpdated])
    FROM (
        SELECT 
            T.GeodeticDatumID AS [X_DictionaryGeodeticDatum.GeodeticDatumID], 
            T.StandardGeodeticDatumName AS [X_DictionaryGeodeticDatum.StandardGeodeticDatumName], 
            T.CoalGeodeticDatumName AS [X_DictionaryGeodeticDatum.CoalGeodeticDatumName], 
            T.GoldGeodeticDatumName AS [X_DictionaryGeodeticDatum.GoldGeodeticDatumName], 
            T.CustomGeodeticDatumName AS [X_DictionaryGeodeticDatum.CustomGeodeticDatumName], 
            T.Description AS [X_DictionaryGeodeticDatum.Description], 
            T.FullDescription AS [X_DictionaryGeodeticDatum.FullDescription], 
            T.Thumbnail AS [X_DictionaryGeodeticDatum.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryGeodeticDatum.OriginalFileDataID], 
            T.Version AS [X_DictionaryGeodeticDatum.Version], 
            T.VersionAntecedentID AS [X_DictionaryGeodeticDatum.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryGeodeticDatum.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryGeodeticDatum.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryGeodeticDatum.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryGeodeticDatum.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryGeodeticDatum.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryGeodeticDatum.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryGeodeticDatum.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryGeodeticDatums AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeophysicalLogType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView125()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryGeophysicalLogType
        [NKD.Module.BusinessObjects.Store.X_DictionaryGeophysicalLogType](T1.[X_DictionaryGeophysicalLogType.GeophysicalLogTypeID], T1.[X_DictionaryGeophysicalLogType.StandardGeophysicalLogTypeName], T1.[X_DictionaryGeophysicalLogType.CoalGeophysicalLogTypeName], T1.[X_DictionaryGeophysicalLogType.GoldGeophysicalLogTypeName], T1.[X_DictionaryGeophysicalLogType.CustomGeophysicalLogTypeName], T1.[X_DictionaryGeophysicalLogType.Description], T1.[X_DictionaryGeophysicalLogType.FullDescription], T1.[X_DictionaryGeophysicalLogType.Thumbnail], T1.[X_DictionaryGeophysicalLogType.OriginalFileDataID], T1.[X_DictionaryGeophysicalLogType.Version], T1.[X_DictionaryGeophysicalLogType.VersionAntecedentID], T1.[X_DictionaryGeophysicalLogType.VersionCertainty], T1.[X_DictionaryGeophysicalLogType.VersionWorkflowInstanceID], T1.[X_DictionaryGeophysicalLogType.VersionUpdatedBy], T1.[X_DictionaryGeophysicalLogType.VersionDeletedBy], T1.[X_DictionaryGeophysicalLogType.VersionOwnerContactID], T1.[X_DictionaryGeophysicalLogType.VersionOwnerCompanyID], T1.[X_DictionaryGeophysicalLogType.VersionUpdated])
    FROM (
        SELECT 
            T.GeophysicalLogTypeID AS [X_DictionaryGeophysicalLogType.GeophysicalLogTypeID], 
            T.StandardGeophysicalLogTypeName AS [X_DictionaryGeophysicalLogType.StandardGeophysicalLogTypeName], 
            T.CoalGeophysicalLogTypeName AS [X_DictionaryGeophysicalLogType.CoalGeophysicalLogTypeName], 
            T.GoldGeophysicalLogTypeName AS [X_DictionaryGeophysicalLogType.GoldGeophysicalLogTypeName], 
            T.CustomGeophysicalLogTypeName AS [X_DictionaryGeophysicalLogType.CustomGeophysicalLogTypeName], 
            T.Description AS [X_DictionaryGeophysicalLogType.Description], 
            T.FullDescription AS [X_DictionaryGeophysicalLogType.FullDescription], 
            T.Thumbnail AS [X_DictionaryGeophysicalLogType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryGeophysicalLogType.OriginalFileDataID], 
            T.Version AS [X_DictionaryGeophysicalLogType.Version], 
            T.VersionAntecedentID AS [X_DictionaryGeophysicalLogType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryGeophysicalLogType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryGeophysicalLogType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryGeophysicalLogType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryGeophysicalLogType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryGeophysicalLogType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryGeophysicalLogType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryGeophysicalLogType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryGeophysicalLogTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroup.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView126()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryGroup
        [NKD.Module.BusinessObjects.Store.X_DictionaryGroup](T1.[X_DictionaryGroup.GroupID], T1.[X_DictionaryGroup.StandardGroupName], T1.[X_DictionaryGroup.CoalGroupName], T1.[X_DictionaryGroup.GoldGroupName], T1.[X_DictionaryGroup.CustomGroupName], T1.[X_DictionaryGroup.Description], T1.[X_DictionaryGroup.FullDescription], T1.[X_DictionaryGroup.Thumbnail], T1.[X_DictionaryGroup.OriginalFileDataID], T1.[X_DictionaryGroup.Version], T1.[X_DictionaryGroup.VersionAntecedentID], T1.[X_DictionaryGroup.VersionCertainty], T1.[X_DictionaryGroup.VersionWorkflowInstanceID], T1.[X_DictionaryGroup.VersionUpdatedBy], T1.[X_DictionaryGroup.VersionDeletedBy], T1.[X_DictionaryGroup.VersionOwnerContactID], T1.[X_DictionaryGroup.VersionOwnerCompanyID], T1.[X_DictionaryGroup.VersionUpdated])
    FROM (
        SELECT 
            T.GroupID AS [X_DictionaryGroup.GroupID], 
            T.StandardGroupName AS [X_DictionaryGroup.StandardGroupName], 
            T.CoalGroupName AS [X_DictionaryGroup.CoalGroupName], 
            T.GoldGroupName AS [X_DictionaryGroup.GoldGroupName], 
            T.CustomGroupName AS [X_DictionaryGroup.CustomGroupName], 
            T.Description AS [X_DictionaryGroup.Description], 
            T.FullDescription AS [X_DictionaryGroup.FullDescription], 
            T.Thumbnail AS [X_DictionaryGroup.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryGroup.OriginalFileDataID], 
            T.Version AS [X_DictionaryGroup.Version], 
            T.VersionAntecedentID AS [X_DictionaryGroup.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryGroup.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryGroup.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryGroup.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryGroup.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryGroup.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryGroup.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryGroup.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroupMembership.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView127()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryGroupMembership
        [NKD.Module.BusinessObjects.Store.X_DictionaryGroupMembership](T1.[X_DictionaryGroupMembership.GroupMembershipID], T1.[X_DictionaryGroupMembership.ParentGroupID], T1.[X_DictionaryGroupMembership.ChildGroupID], T1.[X_DictionaryGroupMembership.FullDescription], T1.[X_DictionaryGroupMembership.Thumbnail], T1.[X_DictionaryGroupMembership.OriginalFileDataID], T1.[X_DictionaryGroupMembership.Version], T1.[X_DictionaryGroupMembership.VersionAntecedentID], T1.[X_DictionaryGroupMembership.VersionCertainty], T1.[X_DictionaryGroupMembership.VersionWorkflowInstanceID], T1.[X_DictionaryGroupMembership.VersionUpdatedBy], T1.[X_DictionaryGroupMembership.VersionDeletedBy], T1.[X_DictionaryGroupMembership.VersionOwnerContactID], T1.[X_DictionaryGroupMembership.VersionOwnerCompanyID], T1.[X_DictionaryGroupMembership.VersionUpdated])
    FROM (
        SELECT 
            T.GroupMembershipID AS [X_DictionaryGroupMembership.GroupMembershipID], 
            T.ParentGroupID AS [X_DictionaryGroupMembership.ParentGroupID], 
            T.ChildGroupID AS [X_DictionaryGroupMembership.ChildGroupID], 
            T.FullDescription AS [X_DictionaryGroupMembership.FullDescription], 
            T.Thumbnail AS [X_DictionaryGroupMembership.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryGroupMembership.OriginalFileDataID], 
            T.Version AS [X_DictionaryGroupMembership.Version], 
            T.VersionAntecedentID AS [X_DictionaryGroupMembership.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryGroupMembership.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryGroupMembership.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryGroupMembership.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryGroupMembership.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryGroupMembership.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryGroupMembership.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryGroupMembership.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryGroupMemberships AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHeightDatum.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView128()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryHeightDatum
        [NKD.Module.BusinessObjects.Store.X_DictionaryHeightDatum](T1.[X_DictionaryHeightDatum.HeightDatumID], T1.[X_DictionaryHeightDatum.StandardHeightDatumName], T1.[X_DictionaryHeightDatum.CoalHeightDatumName], T1.[X_DictionaryHeightDatum.GoldHeightDatumName], T1.[X_DictionaryHeightDatum.CustomHeightDatumName], T1.[X_DictionaryHeightDatum.Description], T1.[X_DictionaryHeightDatum.FullDescription], T1.[X_DictionaryHeightDatum.Thumbnail], T1.[X_DictionaryHeightDatum.OriginalFileDataID], T1.[X_DictionaryHeightDatum.Version], T1.[X_DictionaryHeightDatum.VersionAntecedentID], T1.[X_DictionaryHeightDatum.VersionCertainty], T1.[X_DictionaryHeightDatum.VersionWorkflowInstanceID], T1.[X_DictionaryHeightDatum.VersionUpdatedBy], T1.[X_DictionaryHeightDatum.VersionDeletedBy], T1.[X_DictionaryHeightDatum.VersionOwnerContactID], T1.[X_DictionaryHeightDatum.VersionOwnerCompanyID], T1.[X_DictionaryHeightDatum.VersionUpdated])
    FROM (
        SELECT 
            T.HeightDatumID AS [X_DictionaryHeightDatum.HeightDatumID], 
            T.StandardHeightDatumName AS [X_DictionaryHeightDatum.StandardHeightDatumName], 
            T.CoalHeightDatumName AS [X_DictionaryHeightDatum.CoalHeightDatumName], 
            T.GoldHeightDatumName AS [X_DictionaryHeightDatum.GoldHeightDatumName], 
            T.CustomHeightDatumName AS [X_DictionaryHeightDatum.CustomHeightDatumName], 
            T.Description AS [X_DictionaryHeightDatum.Description], 
            T.FullDescription AS [X_DictionaryHeightDatum.FullDescription], 
            T.Thumbnail AS [X_DictionaryHeightDatum.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryHeightDatum.OriginalFileDataID], 
            T.Version AS [X_DictionaryHeightDatum.Version], 
            T.VersionAntecedentID AS [X_DictionaryHeightDatum.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryHeightDatum.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryHeightDatum.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryHeightDatum.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryHeightDatum.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryHeightDatum.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryHeightDatum.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryHeightDatum.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryHeightDatums AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHolePurpose.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView129()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryHolePurpose
        [NKD.Module.BusinessObjects.Store.X_DictionaryHolePurpose](T1.[X_DictionaryHolePurpose.HolePurposeID], T1.[X_DictionaryHolePurpose.StandardHolePurposeName], T1.[X_DictionaryHolePurpose.CoalHolePurposeName], T1.[X_DictionaryHolePurpose.GoldHolePurposeName], T1.[X_DictionaryHolePurpose.CustomHolePurposeName], T1.[X_DictionaryHolePurpose.Description], T1.[X_DictionaryHolePurpose.FullDescription], T1.[X_DictionaryHolePurpose.Thumbnail], T1.[X_DictionaryHolePurpose.OriginalFileDataID], T1.[X_DictionaryHolePurpose.Version], T1.[X_DictionaryHolePurpose.VersionAntecedentID], T1.[X_DictionaryHolePurpose.VersionCertainty], T1.[X_DictionaryHolePurpose.VersionWorkflowInstanceID], T1.[X_DictionaryHolePurpose.VersionUpdatedBy], T1.[X_DictionaryHolePurpose.VersionDeletedBy], T1.[X_DictionaryHolePurpose.VersionOwnerContactID], T1.[X_DictionaryHolePurpose.VersionOwnerCompanyID], T1.[X_DictionaryHolePurpose.VersionUpdated])
    FROM (
        SELECT 
            T.HolePurposeID AS [X_DictionaryHolePurpose.HolePurposeID], 
            T.StandardHolePurposeName AS [X_DictionaryHolePurpose.StandardHolePurposeName], 
            T.CoalHolePurposeName AS [X_DictionaryHolePurpose.CoalHolePurposeName], 
            T.GoldHolePurposeName AS [X_DictionaryHolePurpose.GoldHolePurposeName], 
            T.CustomHolePurposeName AS [X_DictionaryHolePurpose.CustomHolePurposeName], 
            T.Description AS [X_DictionaryHolePurpose.Description], 
            T.FullDescription AS [X_DictionaryHolePurpose.FullDescription], 
            T.Thumbnail AS [X_DictionaryHolePurpose.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryHolePurpose.OriginalFileDataID], 
            T.Version AS [X_DictionaryHolePurpose.Version], 
            T.VersionAntecedentID AS [X_DictionaryHolePurpose.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryHolePurpose.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryHolePurpose.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryHolePurpose.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryHolePurpose.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryHolePurpose.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryHolePurpose.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryHolePurpose.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryHolePurposes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView130()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryHoleStatus
        [NKD.Module.BusinessObjects.Store.X_DictionaryHoleStatus](T1.[X_DictionaryHoleStatus.HoleStatusID], T1.[X_DictionaryHoleStatus.StandardHoleStatusName], T1.[X_DictionaryHoleStatus.CoalHoleStatusName], T1.[X_DictionaryHoleStatus.GoldHoleStatusName], T1.[X_DictionaryHoleStatus.CustomHoleStatusName], T1.[X_DictionaryHoleStatus.Description], T1.[X_DictionaryHoleStatus.FullDescription], T1.[X_DictionaryHoleStatus.Thumbnail], T1.[X_DictionaryHoleStatus.OriginalFileDataID], T1.[X_DictionaryHoleStatus.Version], T1.[X_DictionaryHoleStatus.VersionAntecedentID], T1.[X_DictionaryHoleStatus.VersionCertainty], T1.[X_DictionaryHoleStatus.VersionWorkflowInstanceID], T1.[X_DictionaryHoleStatus.VersionUpdatedBy], T1.[X_DictionaryHoleStatus.VersionDeletedBy], T1.[X_DictionaryHoleStatus.VersionOwnerContactID], T1.[X_DictionaryHoleStatus.VersionOwnerCompanyID], T1.[X_DictionaryHoleStatus.VersionUpdated])
    FROM (
        SELECT 
            T.HoleStatusID AS [X_DictionaryHoleStatus.HoleStatusID], 
            T.StandardHoleStatusName AS [X_DictionaryHoleStatus.StandardHoleStatusName], 
            T.CoalHoleStatusName AS [X_DictionaryHoleStatus.CoalHoleStatusName], 
            T.GoldHoleStatusName AS [X_DictionaryHoleStatus.GoldHoleStatusName], 
            T.CustomHoleStatusName AS [X_DictionaryHoleStatus.CustomHoleStatusName], 
            T.Description AS [X_DictionaryHoleStatus.Description], 
            T.FullDescription AS [X_DictionaryHoleStatus.FullDescription], 
            T.Thumbnail AS [X_DictionaryHoleStatus.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryHoleStatus.OriginalFileDataID], 
            T.Version AS [X_DictionaryHoleStatus.Version], 
            T.VersionAntecedentID AS [X_DictionaryHoleStatus.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryHoleStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryHoleStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryHoleStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryHoleStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryHoleStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryHoleStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryHoleStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryHoleStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView131()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryHoleType
        [NKD.Module.BusinessObjects.Store.X_DictionaryHoleType](T1.[X_DictionaryHoleType.HoleTypeID], T1.[X_DictionaryHoleType.StandardHoleTypeName], T1.[X_DictionaryHoleType.CoalHoleTypeName], T1.[X_DictionaryHoleType.GoldHoleTypeName], T1.[X_DictionaryHoleType.CustomHoleTypeName], T1.[X_DictionaryHoleType.Description], T1.[X_DictionaryHoleType.FullDescription], T1.[X_DictionaryHoleType.Thumbnail], T1.[X_DictionaryHoleType.OriginalFileDataID], T1.[X_DictionaryHoleType.Version], T1.[X_DictionaryHoleType.VersionAntecedentID], T1.[X_DictionaryHoleType.VersionCertainty], T1.[X_DictionaryHoleType.VersionWorkflowInstanceID], T1.[X_DictionaryHoleType.VersionUpdatedBy], T1.[X_DictionaryHoleType.VersionDeletedBy], T1.[X_DictionaryHoleType.VersionOwnerContactID], T1.[X_DictionaryHoleType.VersionOwnerCompanyID], T1.[X_DictionaryHoleType.VersionUpdated])
    FROM (
        SELECT 
            T.HoleTypeID AS [X_DictionaryHoleType.HoleTypeID], 
            T.StandardHoleTypeName AS [X_DictionaryHoleType.StandardHoleTypeName], 
            T.CoalHoleTypeName AS [X_DictionaryHoleType.CoalHoleTypeName], 
            T.GoldHoleTypeName AS [X_DictionaryHoleType.GoldHoleTypeName], 
            T.CustomHoleTypeName AS [X_DictionaryHoleType.CustomHoleTypeName], 
            T.Description AS [X_DictionaryHoleType.Description], 
            T.FullDescription AS [X_DictionaryHoleType.FullDescription], 
            T.Thumbnail AS [X_DictionaryHoleType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryHoleType.OriginalFileDataID], 
            T.Version AS [X_DictionaryHoleType.Version], 
            T.VersionAntecedentID AS [X_DictionaryHoleType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryHoleType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryHoleType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryHoleType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryHoleType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryHoleType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryHoleType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryHoleType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryHoleTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHorizon.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView132()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryHorizon
        [NKD.Module.BusinessObjects.Store.X_DictionaryHorizon](T1.[X_DictionaryHorizon.HorizonID], T1.[X_DictionaryHorizon.StandardHorizonName], T1.[X_DictionaryHorizon.CoalHorizonName], T1.[X_DictionaryHorizon.GoldHorizonName], T1.[X_DictionaryHorizon.CustomHorizonName], T1.[X_DictionaryHorizon.Description], T1.[X_DictionaryHorizon.FullDescription], T1.[X_DictionaryHorizon.Thumbnail], T1.[X_DictionaryHorizon.OriginalFileDataID], T1.[X_DictionaryHorizon.Version], T1.[X_DictionaryHorizon.VersionAntecedentID], T1.[X_DictionaryHorizon.VersionCertainty], T1.[X_DictionaryHorizon.VersionWorkflowInstanceID], T1.[X_DictionaryHorizon.VersionUpdatedBy], T1.[X_DictionaryHorizon.VersionDeletedBy], T1.[X_DictionaryHorizon.VersionOwnerContactID], T1.[X_DictionaryHorizon.VersionOwnerCompanyID], T1.[X_DictionaryHorizon.VersionUpdated])
    FROM (
        SELECT 
            T.HorizonID AS [X_DictionaryHorizon.HorizonID], 
            T.StandardHorizonName AS [X_DictionaryHorizon.StandardHorizonName], 
            T.CoalHorizonName AS [X_DictionaryHorizon.CoalHorizonName], 
            T.GoldHorizonName AS [X_DictionaryHorizon.GoldHorizonName], 
            T.CustomHorizonName AS [X_DictionaryHorizon.CustomHorizonName], 
            T.Description AS [X_DictionaryHorizon.Description], 
            T.FullDescription AS [X_DictionaryHorizon.FullDescription], 
            T.Thumbnail AS [X_DictionaryHorizon.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryHorizon.OriginalFileDataID], 
            T.Version AS [X_DictionaryHorizon.Version], 
            T.VersionAntecedentID AS [X_DictionaryHorizon.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryHorizon.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryHorizon.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryHorizon.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryHorizon.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryHorizon.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryHorizon.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryHorizon.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryHorizons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHue.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView133()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryHue
        [NKD.Module.BusinessObjects.Store.X_DictionaryHue](T1.[X_DictionaryHue.HueID], T1.[X_DictionaryHue.StandardHueName], T1.[X_DictionaryHue.CoalHueName], T1.[X_DictionaryHue.GoldHueName], T1.[X_DictionaryHue.CustomHueName], T1.[X_DictionaryHue.Description], T1.[X_DictionaryHue.FullDescription], T1.[X_DictionaryHue.Thumbnail], T1.[X_DictionaryHue.OriginalFileDataID], T1.[X_DictionaryHue.Version], T1.[X_DictionaryHue.VersionAntecedentID], T1.[X_DictionaryHue.VersionCertainty], T1.[X_DictionaryHue.VersionWorkflowInstanceID], T1.[X_DictionaryHue.VersionUpdatedBy], T1.[X_DictionaryHue.VersionDeletedBy], T1.[X_DictionaryHue.VersionOwnerContactID], T1.[X_DictionaryHue.VersionOwnerCompanyID], T1.[X_DictionaryHue.VersionUpdated])
    FROM (
        SELECT 
            T.HueID AS [X_DictionaryHue.HueID], 
            T.StandardHueName AS [X_DictionaryHue.StandardHueName], 
            T.CoalHueName AS [X_DictionaryHue.CoalHueName], 
            T.GoldHueName AS [X_DictionaryHue.GoldHueName], 
            T.CustomHueName AS [X_DictionaryHue.CustomHueName], 
            T.Description AS [X_DictionaryHue.Description], 
            T.FullDescription AS [X_DictionaryHue.FullDescription], 
            T.Thumbnail AS [X_DictionaryHue.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryHue.OriginalFileDataID], 
            T.Version AS [X_DictionaryHue.Version], 
            T.VersionAntecedentID AS [X_DictionaryHue.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryHue.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryHue.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryHue.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryHue.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryHue.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryHue.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryHue.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryHues AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillMode.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView134()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryInfillMode
        [NKD.Module.BusinessObjects.Store.X_DictionaryInfillMode](T1.[X_DictionaryInfillMode.InfillModeID], T1.[X_DictionaryInfillMode.StandardInfillModeName], T1.[X_DictionaryInfillMode.CoalInfillModeName], T1.[X_DictionaryInfillMode.GoldInfillModeName], T1.[X_DictionaryInfillMode.CustomInfillModeName], T1.[X_DictionaryInfillMode.Description], T1.[X_DictionaryInfillMode.FullDescription], T1.[X_DictionaryInfillMode.Thumbnail], T1.[X_DictionaryInfillMode.OriginalFileDataID], T1.[X_DictionaryInfillMode.Version], T1.[X_DictionaryInfillMode.VersionAntecedentID], T1.[X_DictionaryInfillMode.VersionCertainty], T1.[X_DictionaryInfillMode.VersionWorkflowInstanceID], T1.[X_DictionaryInfillMode.VersionUpdatedBy], T1.[X_DictionaryInfillMode.VersionDeletedBy], T1.[X_DictionaryInfillMode.VersionOwnerContactID], T1.[X_DictionaryInfillMode.VersionOwnerCompanyID], T1.[X_DictionaryInfillMode.VersionUpdated])
    FROM (
        SELECT 
            T.InfillModeID AS [X_DictionaryInfillMode.InfillModeID], 
            T.StandardInfillModeName AS [X_DictionaryInfillMode.StandardInfillModeName], 
            T.CoalInfillModeName AS [X_DictionaryInfillMode.CoalInfillModeName], 
            T.GoldInfillModeName AS [X_DictionaryInfillMode.GoldInfillModeName], 
            T.CustomInfillModeName AS [X_DictionaryInfillMode.CustomInfillModeName], 
            T.Description AS [X_DictionaryInfillMode.Description], 
            T.FullDescription AS [X_DictionaryInfillMode.FullDescription], 
            T.Thumbnail AS [X_DictionaryInfillMode.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryInfillMode.OriginalFileDataID], 
            T.Version AS [X_DictionaryInfillMode.Version], 
            T.VersionAntecedentID AS [X_DictionaryInfillMode.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryInfillMode.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryInfillMode.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryInfillMode.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryInfillMode.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryInfillMode.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryInfillMode.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryInfillMode.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryInfillModes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView135()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryInfillType
        [NKD.Module.BusinessObjects.Store.X_DictionaryInfillType](T1.[X_DictionaryInfillType.InfillTypeID], T1.[X_DictionaryInfillType.StandardInfillTypeName], T1.[X_DictionaryInfillType.CoalInfillTypeName], T1.[X_DictionaryInfillType.GoldInfillTypeName], T1.[X_DictionaryInfillType.CustomInfillTypeName], T1.[X_DictionaryInfillType.Description], T1.[X_DictionaryInfillType.FullDescription], T1.[X_DictionaryInfillType.Thumbnail], T1.[X_DictionaryInfillType.OriginalFileDataID], T1.[X_DictionaryInfillType.Version], T1.[X_DictionaryInfillType.VersionAntecedentID], T1.[X_DictionaryInfillType.VersionCertainty], T1.[X_DictionaryInfillType.VersionWorkflowInstanceID], T1.[X_DictionaryInfillType.VersionUpdatedBy], T1.[X_DictionaryInfillType.VersionDeletedBy], T1.[X_DictionaryInfillType.VersionOwnerContactID], T1.[X_DictionaryInfillType.VersionOwnerCompanyID], T1.[X_DictionaryInfillType.VersionUpdated])
    FROM (
        SELECT 
            T.InfillTypeID AS [X_DictionaryInfillType.InfillTypeID], 
            T.StandardInfillTypeName AS [X_DictionaryInfillType.StandardInfillTypeName], 
            T.CoalInfillTypeName AS [X_DictionaryInfillType.CoalInfillTypeName], 
            T.GoldInfillTypeName AS [X_DictionaryInfillType.GoldInfillTypeName], 
            T.CustomInfillTypeName AS [X_DictionaryInfillType.CustomInfillTypeName], 
            T.Description AS [X_DictionaryInfillType.Description], 
            T.FullDescription AS [X_DictionaryInfillType.FullDescription], 
            T.Thumbnail AS [X_DictionaryInfillType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryInfillType.OriginalFileDataID], 
            T.Version AS [X_DictionaryInfillType.Version], 
            T.VersionAntecedentID AS [X_DictionaryInfillType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryInfillType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryInfillType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryInfillType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryInfillType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryInfillType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryInfillType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryInfillType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryInfillTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryIntervalStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView136()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryIntervalStatus
        [NKD.Module.BusinessObjects.Store.X_DictionaryIntervalStatus](T1.[X_DictionaryIntervalStatus.IntervalStatusID], T1.[X_DictionaryIntervalStatus.StandardIntervalStatusName], T1.[X_DictionaryIntervalStatus.CoalIntervalStatusName], T1.[X_DictionaryIntervalStatus.GoldIntervalStatusName], T1.[X_DictionaryIntervalStatus.CustomIntervalStatusName], T1.[X_DictionaryIntervalStatus.Description], T1.[X_DictionaryIntervalStatus.FullDescription], T1.[X_DictionaryIntervalStatus.Thumbnail], T1.[X_DictionaryIntervalStatus.OriginalFileDataID], T1.[X_DictionaryIntervalStatus.Version], T1.[X_DictionaryIntervalStatus.VersionAntecedentID], T1.[X_DictionaryIntervalStatus.VersionCertainty], T1.[X_DictionaryIntervalStatus.VersionWorkflowInstanceID], T1.[X_DictionaryIntervalStatus.VersionUpdatedBy], T1.[X_DictionaryIntervalStatus.VersionDeletedBy], T1.[X_DictionaryIntervalStatus.VersionOwnerContactID], T1.[X_DictionaryIntervalStatus.VersionOwnerCompanyID], T1.[X_DictionaryIntervalStatus.VersionUpdated])
    FROM (
        SELECT 
            T.IntervalStatusID AS [X_DictionaryIntervalStatus.IntervalStatusID], 
            T.StandardIntervalStatusName AS [X_DictionaryIntervalStatus.StandardIntervalStatusName], 
            T.CoalIntervalStatusName AS [X_DictionaryIntervalStatus.CoalIntervalStatusName], 
            T.GoldIntervalStatusName AS [X_DictionaryIntervalStatus.GoldIntervalStatusName], 
            T.CustomIntervalStatusName AS [X_DictionaryIntervalStatus.CustomIntervalStatusName], 
            T.Description AS [X_DictionaryIntervalStatus.Description], 
            T.FullDescription AS [X_DictionaryIntervalStatus.FullDescription], 
            T.Thumbnail AS [X_DictionaryIntervalStatus.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryIntervalStatus.OriginalFileDataID], 
            T.Version AS [X_DictionaryIntervalStatus.Version], 
            T.VersionAntecedentID AS [X_DictionaryIntervalStatus.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryIntervalStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryIntervalStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryIntervalStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryIntervalStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryIntervalStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryIntervalStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryIntervalStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryIntervalStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLeaseApplicationType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView137()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryLeaseApplicationType
        [NKD.Module.BusinessObjects.Store.X_DictionaryLeaseApplicationType](T1.[X_DictionaryLeaseApplicationType.LeaseApplicationTypeID], T1.[X_DictionaryLeaseApplicationType.StandardLeaseApplicationTypeName], T1.[X_DictionaryLeaseApplicationType.CoalLeaseApplicationTypeName], T1.[X_DictionaryLeaseApplicationType.GoldLeaseApplicationTypeName], T1.[X_DictionaryLeaseApplicationType.CustomLeaseApplicationTypeName], T1.[X_DictionaryLeaseApplicationType.Description], T1.[X_DictionaryLeaseApplicationType.FullDescription], T1.[X_DictionaryLeaseApplicationType.Thumbnail], T1.[X_DictionaryLeaseApplicationType.OriginalFileDataID], T1.[X_DictionaryLeaseApplicationType.Version], T1.[X_DictionaryLeaseApplicationType.VersionAntecedentID], T1.[X_DictionaryLeaseApplicationType.VersionCertainty], T1.[X_DictionaryLeaseApplicationType.VersionWorkflowInstanceID], T1.[X_DictionaryLeaseApplicationType.VersionUpdatedBy], T1.[X_DictionaryLeaseApplicationType.VersionDeletedBy], T1.[X_DictionaryLeaseApplicationType.VersionOwnerContactID], T1.[X_DictionaryLeaseApplicationType.VersionOwnerCompanyID], T1.[X_DictionaryLeaseApplicationType.VersionUpdated])
    FROM (
        SELECT 
            T.LeaseApplicationTypeID AS [X_DictionaryLeaseApplicationType.LeaseApplicationTypeID], 
            T.StandardLeaseApplicationTypeName AS [X_DictionaryLeaseApplicationType.StandardLeaseApplicationTypeName], 
            T.CoalLeaseApplicationTypeName AS [X_DictionaryLeaseApplicationType.CoalLeaseApplicationTypeName], 
            T.GoldLeaseApplicationTypeName AS [X_DictionaryLeaseApplicationType.GoldLeaseApplicationTypeName], 
            T.CustomLeaseApplicationTypeName AS [X_DictionaryLeaseApplicationType.CustomLeaseApplicationTypeName], 
            T.Description AS [X_DictionaryLeaseApplicationType.Description], 
            T.FullDescription AS [X_DictionaryLeaseApplicationType.FullDescription], 
            T.Thumbnail AS [X_DictionaryLeaseApplicationType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryLeaseApplicationType.OriginalFileDataID], 
            T.Version AS [X_DictionaryLeaseApplicationType.Version], 
            T.VersionAntecedentID AS [X_DictionaryLeaseApplicationType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryLeaseApplicationType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryLeaseApplicationType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryLeaseApplicationType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryLeaseApplicationType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryLeaseApplicationType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryLeaseApplicationType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryLeaseApplicationType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLeaseApplicationTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLicenseType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView138()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryLicenseType
        [NKD.Module.BusinessObjects.Store.X_DictionaryLicenseType](T1.[X_DictionaryLicenseType.LicenseTypeID], T1.[X_DictionaryLicenseType.StandardLicenseTypeName], T1.[X_DictionaryLicenseType.CustomLicenseTypeName], T1.[X_DictionaryLicenseType.Description], T1.[X_DictionaryLicenseType.FullDescription], T1.[X_DictionaryLicenseType.Thumbnail], T1.[X_DictionaryLicenseType.OriginalFileDataID], T1.[X_DictionaryLicenseType.Version], T1.[X_DictionaryLicenseType.VersionAntecedentID], T1.[X_DictionaryLicenseType.VersionCertainty], T1.[X_DictionaryLicenseType.VersionWorkflowInstanceID], T1.[X_DictionaryLicenseType.VersionUpdatedBy], T1.[X_DictionaryLicenseType.VersionDeletedBy], T1.[X_DictionaryLicenseType.VersionOwnerContactID], T1.[X_DictionaryLicenseType.VersionOwnerCompanyID], T1.[X_DictionaryLicenseType.VersionUpdated])
    FROM (
        SELECT 
            T.LicenseTypeID AS [X_DictionaryLicenseType.LicenseTypeID], 
            T.StandardLicenseTypeName AS [X_DictionaryLicenseType.StandardLicenseTypeName], 
            T.CustomLicenseTypeName AS [X_DictionaryLicenseType.CustomLicenseTypeName], 
            T.Description AS [X_DictionaryLicenseType.Description], 
            T.FullDescription AS [X_DictionaryLicenseType.FullDescription], 
            T.Thumbnail AS [X_DictionaryLicenseType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryLicenseType.OriginalFileDataID], 
            T.Version AS [X_DictionaryLicenseType.Version], 
            T.VersionAntecedentID AS [X_DictionaryLicenseType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryLicenseType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryLicenseType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryLicenseType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryLicenseType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryLicenseType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryLicenseType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryLicenseType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLicenseTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyInterrelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView139()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryLithologyInterrelation
        [NKD.Module.BusinessObjects.Store.X_DictionaryLithologyInterrelation](T1.[X_DictionaryLithologyInterrelation.LithologyInterrelationID], T1.[X_DictionaryLithologyInterrelation.StandardLithologyInterrelationName], T1.[X_DictionaryLithologyInterrelation.CoalLithologyInterrelationName], T1.[X_DictionaryLithologyInterrelation.GoldLithologyInterrelationName], T1.[X_DictionaryLithologyInterrelation.CustomLithologyInterrelationName], T1.[X_DictionaryLithologyInterrelation.Description], T1.[X_DictionaryLithologyInterrelation.FullDescription], T1.[X_DictionaryLithologyInterrelation.Thumbnail], T1.[X_DictionaryLithologyInterrelation.OriginalFileDataID], T1.[X_DictionaryLithologyInterrelation.Version], T1.[X_DictionaryLithologyInterrelation.VersionAntecedentID], T1.[X_DictionaryLithologyInterrelation.VersionCertainty], T1.[X_DictionaryLithologyInterrelation.VersionWorkflowInstanceID], T1.[X_DictionaryLithologyInterrelation.VersionUpdatedBy], T1.[X_DictionaryLithologyInterrelation.VersionDeletedBy], T1.[X_DictionaryLithologyInterrelation.VersionOwnerContactID], T1.[X_DictionaryLithologyInterrelation.VersionOwnerCompanyID], T1.[X_DictionaryLithologyInterrelation.VersionUpdated])
    FROM (
        SELECT 
            T.LithologyInterrelationID AS [X_DictionaryLithologyInterrelation.LithologyInterrelationID], 
            T.StandardLithologyInterrelationName AS [X_DictionaryLithologyInterrelation.StandardLithologyInterrelationName], 
            T.CoalLithologyInterrelationName AS [X_DictionaryLithologyInterrelation.CoalLithologyInterrelationName], 
            T.GoldLithologyInterrelationName AS [X_DictionaryLithologyInterrelation.GoldLithologyInterrelationName], 
            T.CustomLithologyInterrelationName AS [X_DictionaryLithologyInterrelation.CustomLithologyInterrelationName], 
            T.Description AS [X_DictionaryLithologyInterrelation.Description], 
            T.FullDescription AS [X_DictionaryLithologyInterrelation.FullDescription], 
            T.Thumbnail AS [X_DictionaryLithologyInterrelation.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryLithologyInterrelation.OriginalFileDataID], 
            T.Version AS [X_DictionaryLithologyInterrelation.Version], 
            T.VersionAntecedentID AS [X_DictionaryLithologyInterrelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryLithologyInterrelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryLithologyInterrelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryLithologyInterrelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryLithologyInterrelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryLithologyInterrelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryLithologyInterrelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryLithologyInterrelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLithologyInterrelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyQualifier.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView140()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryLithologyQualifier
        [NKD.Module.BusinessObjects.Store.X_DictionaryLithologyQualifier](T1.[X_DictionaryLithologyQualifier.LithologyQualifierID], T1.[X_DictionaryLithologyQualifier.StandardLithologyQualifierName], T1.[X_DictionaryLithologyQualifier.CoalLithologyQualifierName], T1.[X_DictionaryLithologyQualifier.GoldLithologyQualifierName], T1.[X_DictionaryLithologyQualifier.CustomLithologyQualifierName], T1.[X_DictionaryLithologyQualifier.Description], T1.[X_DictionaryLithologyQualifier.FullDescription], T1.[X_DictionaryLithologyQualifier.Thumbnail], T1.[X_DictionaryLithologyQualifier.OriginalFileDataID], T1.[X_DictionaryLithologyQualifier.Version], T1.[X_DictionaryLithologyQualifier.VersionAntecedentID], T1.[X_DictionaryLithologyQualifier.VersionCertainty], T1.[X_DictionaryLithologyQualifier.VersionWorkflowInstanceID], T1.[X_DictionaryLithologyQualifier.VersionUpdatedBy], T1.[X_DictionaryLithologyQualifier.VersionDeletedBy], T1.[X_DictionaryLithologyQualifier.VersionOwnerContactID], T1.[X_DictionaryLithologyQualifier.VersionOwnerCompanyID], T1.[X_DictionaryLithologyQualifier.VersionUpdated])
    FROM (
        SELECT 
            T.LithologyQualifierID AS [X_DictionaryLithologyQualifier.LithologyQualifierID], 
            T.StandardLithologyQualifierName AS [X_DictionaryLithologyQualifier.StandardLithologyQualifierName], 
            T.CoalLithologyQualifierName AS [X_DictionaryLithologyQualifier.CoalLithologyQualifierName], 
            T.GoldLithologyQualifierName AS [X_DictionaryLithologyQualifier.GoldLithologyQualifierName], 
            T.CustomLithologyQualifierName AS [X_DictionaryLithologyQualifier.CustomLithologyQualifierName], 
            T.Description AS [X_DictionaryLithologyQualifier.Description], 
            T.FullDescription AS [X_DictionaryLithologyQualifier.FullDescription], 
            T.Thumbnail AS [X_DictionaryLithologyQualifier.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryLithologyQualifier.OriginalFileDataID], 
            T.Version AS [X_DictionaryLithologyQualifier.Version], 
            T.VersionAntecedentID AS [X_DictionaryLithologyQualifier.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryLithologyQualifier.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryLithologyQualifier.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryLithologyQualifier.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryLithologyQualifier.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryLithologyQualifier.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryLithologyQualifier.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryLithologyQualifier.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLithologyQualifiers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView141()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryLithologyType
        [NKD.Module.BusinessObjects.Store.X_DictionaryLithologyType](T1.[X_DictionaryLithologyType.LithologyTypeID], T1.[X_DictionaryLithologyType.StandardLithologyTypeName], T1.[X_DictionaryLithologyType.CoalLithologyTypeName], T1.[X_DictionaryLithologyType.GoldLithologyTypeName], T1.[X_DictionaryLithologyType.CustomLithologyTypeName], T1.[X_DictionaryLithologyType.Description], T1.[X_DictionaryLithologyType.FullDescription], T1.[X_DictionaryLithologyType.Thumbnail], T1.[X_DictionaryLithologyType.OriginalFileDataID], T1.[X_DictionaryLithologyType.Version], T1.[X_DictionaryLithologyType.VersionAntecedentID], T1.[X_DictionaryLithologyType.VersionCertainty], T1.[X_DictionaryLithologyType.VersionWorkflowInstanceID], T1.[X_DictionaryLithologyType.VersionUpdatedBy], T1.[X_DictionaryLithologyType.VersionDeletedBy], T1.[X_DictionaryLithologyType.VersionOwnerContactID], T1.[X_DictionaryLithologyType.VersionOwnerCompanyID], T1.[X_DictionaryLithologyType.VersionUpdated])
    FROM (
        SELECT 
            T.LithologyTypeID AS [X_DictionaryLithologyType.LithologyTypeID], 
            T.StandardLithologyTypeName AS [X_DictionaryLithologyType.StandardLithologyTypeName], 
            T.CoalLithologyTypeName AS [X_DictionaryLithologyType.CoalLithologyTypeName], 
            T.GoldLithologyTypeName AS [X_DictionaryLithologyType.GoldLithologyTypeName], 
            T.CustomLithologyTypeName AS [X_DictionaryLithologyType.CustomLithologyTypeName], 
            T.Description AS [X_DictionaryLithologyType.Description], 
            T.FullDescription AS [X_DictionaryLithologyType.FullDescription], 
            T.Thumbnail AS [X_DictionaryLithologyType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryLithologyType.OriginalFileDataID], 
            T.Version AS [X_DictionaryLithologyType.Version], 
            T.VersionAntecedentID AS [X_DictionaryLithologyType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryLithologyType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryLithologyType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryLithologyType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryLithologyType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryLithologyType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryLithologyType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryLithologyType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLithologyTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLocationType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView142()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryLocationType
        [NKD.Module.BusinessObjects.Store.X_DictionaryLocationType](T1.[X_DictionaryLocationType.LocationTypeID], T1.[X_DictionaryLocationType.StandardLocationTypeName], T1.[X_DictionaryLocationType.CoalLocationTypeName], T1.[X_DictionaryLocationType.GoldLocationTypeName], T1.[X_DictionaryLocationType.CustomLocationTypeName], T1.[X_DictionaryLocationType.Description], T1.[X_DictionaryLocationType.FullDescription], T1.[X_DictionaryLocationType.Thumbnail], T1.[X_DictionaryLocationType.OriginalFileDataID], T1.[X_DictionaryLocationType.Version], T1.[X_DictionaryLocationType.VersionAntecedentID], T1.[X_DictionaryLocationType.VersionCertainty], T1.[X_DictionaryLocationType.VersionWorkflowInstanceID], T1.[X_DictionaryLocationType.VersionUpdatedBy], T1.[X_DictionaryLocationType.VersionDeletedBy], T1.[X_DictionaryLocationType.VersionOwnerContactID], T1.[X_DictionaryLocationType.VersionOwnerCompanyID], T1.[X_DictionaryLocationType.VersionUpdated])
    FROM (
        SELECT 
            T.LocationTypeID AS [X_DictionaryLocationType.LocationTypeID], 
            T.StandardLocationTypeName AS [X_DictionaryLocationType.StandardLocationTypeName], 
            T.CoalLocationTypeName AS [X_DictionaryLocationType.CoalLocationTypeName], 
            T.GoldLocationTypeName AS [X_DictionaryLocationType.GoldLocationTypeName], 
            T.CustomLocationTypeName AS [X_DictionaryLocationType.CustomLocationTypeName], 
            T.Description AS [X_DictionaryLocationType.Description], 
            T.FullDescription AS [X_DictionaryLocationType.FullDescription], 
            T.Thumbnail AS [X_DictionaryLocationType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryLocationType.OriginalFileDataID], 
            T.Version AS [X_DictionaryLocationType.Version], 
            T.VersionAntecedentID AS [X_DictionaryLocationType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryLocationType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryLocationType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryLocationType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryLocationType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryLocationType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryLocationType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryLocationType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLocationTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMechanicalState.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView143()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMechanicalState
        [NKD.Module.BusinessObjects.Store.X_DictionaryMechanicalState](T1.[X_DictionaryMechanicalState.MechanicalStateID], T1.[X_DictionaryMechanicalState.StandardMechanicalStateName], T1.[X_DictionaryMechanicalState.CoalMechanicalStateName], T1.[X_DictionaryMechanicalState.GoldMechanicalStateName], T1.[X_DictionaryMechanicalState.CustomMechanicalStateName], T1.[X_DictionaryMechanicalState.Description], T1.[X_DictionaryMechanicalState.FullDescription], T1.[X_DictionaryMechanicalState.Thumbnail], T1.[X_DictionaryMechanicalState.OriginalFileDataID], T1.[X_DictionaryMechanicalState.Version], T1.[X_DictionaryMechanicalState.VersionAntecedentID], T1.[X_DictionaryMechanicalState.VersionCertainty], T1.[X_DictionaryMechanicalState.VersionWorkflowInstanceID], T1.[X_DictionaryMechanicalState.VersionUpdatedBy], T1.[X_DictionaryMechanicalState.VersionDeletedBy], T1.[X_DictionaryMechanicalState.VersionOwnerContactID], T1.[X_DictionaryMechanicalState.VersionOwnerCompanyID], T1.[X_DictionaryMechanicalState.VersionUpdated])
    FROM (
        SELECT 
            T.MechanicalStateID AS [X_DictionaryMechanicalState.MechanicalStateID], 
            T.StandardMechanicalStateName AS [X_DictionaryMechanicalState.StandardMechanicalStateName], 
            T.CoalMechanicalStateName AS [X_DictionaryMechanicalState.CoalMechanicalStateName], 
            T.GoldMechanicalStateName AS [X_DictionaryMechanicalState.GoldMechanicalStateName], 
            T.CustomMechanicalStateName AS [X_DictionaryMechanicalState.CustomMechanicalStateName], 
            T.Description AS [X_DictionaryMechanicalState.Description], 
            T.FullDescription AS [X_DictionaryMechanicalState.FullDescription], 
            T.Thumbnail AS [X_DictionaryMechanicalState.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMechanicalState.OriginalFileDataID], 
            T.Version AS [X_DictionaryMechanicalState.Version], 
            T.VersionAntecedentID AS [X_DictionaryMechanicalState.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMechanicalState.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMechanicalState.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMechanicalState.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMechanicalState.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMechanicalState.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMechanicalState.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMechanicalState.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMechanicalStates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAbundance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView144()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralAbundance
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralAbundance](T1.[X_DictionaryMineralAbundance.MineralAbundanceID], T1.[X_DictionaryMineralAbundance.StandardMineralAbundanceName], T1.[X_DictionaryMineralAbundance.CoalMineralAbundanceName], T1.[X_DictionaryMineralAbundance.GoldMineralAbundanceName], T1.[X_DictionaryMineralAbundance.CustomMineralAbundanceName], T1.[X_DictionaryMineralAbundance.Description], T1.[X_DictionaryMineralAbundance.FullDescription], T1.[X_DictionaryMineralAbundance.Thumbnail], T1.[X_DictionaryMineralAbundance.OriginalFileDataID], T1.[X_DictionaryMineralAbundance.Version], T1.[X_DictionaryMineralAbundance.VersionAntecedentID], T1.[X_DictionaryMineralAbundance.VersionCertainty], T1.[X_DictionaryMineralAbundance.VersionWorkflowInstanceID], T1.[X_DictionaryMineralAbundance.VersionUpdatedBy], T1.[X_DictionaryMineralAbundance.VersionDeletedBy], T1.[X_DictionaryMineralAbundance.VersionOwnerContactID], T1.[X_DictionaryMineralAbundance.VersionOwnerCompanyID], T1.[X_DictionaryMineralAbundance.VersionUpdated])
    FROM (
        SELECT 
            T.MineralAbundanceID AS [X_DictionaryMineralAbundance.MineralAbundanceID], 
            T.StandardMineralAbundanceName AS [X_DictionaryMineralAbundance.StandardMineralAbundanceName], 
            T.CoalMineralAbundanceName AS [X_DictionaryMineralAbundance.CoalMineralAbundanceName], 
            T.GoldMineralAbundanceName AS [X_DictionaryMineralAbundance.GoldMineralAbundanceName], 
            T.CustomMineralAbundanceName AS [X_DictionaryMineralAbundance.CustomMineralAbundanceName], 
            T.Description AS [X_DictionaryMineralAbundance.Description], 
            T.FullDescription AS [X_DictionaryMineralAbundance.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralAbundance.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralAbundance.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralAbundance.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralAbundance.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralAbundance.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralAbundance.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralAbundance.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralAbundance.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralAbundance.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralAbundance.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralAbundance.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralAbundances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAbundance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView145()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralAndFossilAbundance
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralAndFossilAbundance](T1.[X_DictionaryMineralAndFossilAbundance.MineralAndFossilAbundanceID], T1.[X_DictionaryMineralAndFossilAbundance.StandardMineralAndFossilAbundanceName], T1.[X_DictionaryMineralAndFossilAbundance.CoalMineralAndFossilAbundanceName], T1.[X_DictionaryMineralAndFossilAbundance.GoldMineralAndFossilAbundanceName], T1.[X_DictionaryMineralAndFossilAbundance.CustomMineralAndFossilAbundanceName], T1.[X_DictionaryMineralAndFossilAbundance.Description], T1.[X_DictionaryMineralAndFossilAbundance.FullDescription], T1.[X_DictionaryMineralAndFossilAbundance.Thumbnail], T1.[X_DictionaryMineralAndFossilAbundance.OriginalFileDataID], T1.[X_DictionaryMineralAndFossilAbundance.Version], T1.[X_DictionaryMineralAndFossilAbundance.VersionAntecedentID], T1.[X_DictionaryMineralAndFossilAbundance.VersionCertainty], T1.[X_DictionaryMineralAndFossilAbundance.VersionWorkflowInstanceID], T1.[X_DictionaryMineralAndFossilAbundance.VersionUpdatedBy], T1.[X_DictionaryMineralAndFossilAbundance.VersionDeletedBy], T1.[X_DictionaryMineralAndFossilAbundance.VersionOwnerContactID], T1.[X_DictionaryMineralAndFossilAbundance.VersionOwnerCompanyID], T1.[X_DictionaryMineralAndFossilAbundance.VersionUpdated])
    FROM (
        SELECT 
            T.MineralAndFossilAbundanceID AS [X_DictionaryMineralAndFossilAbundance.MineralAndFossilAbundanceID], 
            T.StandardMineralAndFossilAbundanceName AS [X_DictionaryMineralAndFossilAbundance.StandardMineralAndFossilAbundanceName], 
            T.CoalMineralAndFossilAbundanceName AS [X_DictionaryMineralAndFossilAbundance.CoalMineralAndFossilAbundanceName], 
            T.GoldMineralAndFossilAbundanceName AS [X_DictionaryMineralAndFossilAbundance.GoldMineralAndFossilAbundanceName], 
            T.CustomMineralAndFossilAbundanceName AS [X_DictionaryMineralAndFossilAbundance.CustomMineralAndFossilAbundanceName], 
            T.Description AS [X_DictionaryMineralAndFossilAbundance.Description], 
            T.FullDescription AS [X_DictionaryMineralAndFossilAbundance.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralAndFossilAbundance.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralAndFossilAbundance.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralAndFossilAbundance.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralAndFossilAbundance.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralAndFossilAbundance.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralAndFossilAbundance.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralAndFossilAbundance.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralAndFossilAbundance.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralAndFossilAbundance.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralAndFossilAbundance.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralAndFossilAbundance.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralAndFossilAbundances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAssociation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView146()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralAndFossilAssociation
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralAndFossilAssociation](T1.[X_DictionaryMineralAndFossilAssociation.MineralAndFossilAssociationID], T1.[X_DictionaryMineralAndFossilAssociation.StandardMineralAndFossilAssociationName], T1.[X_DictionaryMineralAndFossilAssociation.CoalMineralAndFossilAssociationName], T1.[X_DictionaryMineralAndFossilAssociation.GoldMineralAndFossilAssociationName], T1.[X_DictionaryMineralAndFossilAssociation.CustomMineralAndFossilAssociationName], T1.[X_DictionaryMineralAndFossilAssociation.Description], T1.[X_DictionaryMineralAndFossilAssociation.FullDescription], T1.[X_DictionaryMineralAndFossilAssociation.Thumbnail], T1.[X_DictionaryMineralAndFossilAssociation.OriginalFileDataID], T1.[X_DictionaryMineralAndFossilAssociation.Version], T1.[X_DictionaryMineralAndFossilAssociation.VersionAntecedentID], T1.[X_DictionaryMineralAndFossilAssociation.VersionCertainty], T1.[X_DictionaryMineralAndFossilAssociation.VersionWorkflowInstanceID], T1.[X_DictionaryMineralAndFossilAssociation.VersionUpdatedBy], T1.[X_DictionaryMineralAndFossilAssociation.VersionDeletedBy], T1.[X_DictionaryMineralAndFossilAssociation.VersionOwnerContactID], T1.[X_DictionaryMineralAndFossilAssociation.VersionOwnerCompanyID], T1.[X_DictionaryMineralAndFossilAssociation.VersionUpdated])
    FROM (
        SELECT 
            T.MineralAndFossilAssociationID AS [X_DictionaryMineralAndFossilAssociation.MineralAndFossilAssociationID], 
            T.StandardMineralAndFossilAssociationName AS [X_DictionaryMineralAndFossilAssociation.StandardMineralAndFossilAssociationName], 
            T.CoalMineralAndFossilAssociationName AS [X_DictionaryMineralAndFossilAssociation.CoalMineralAndFossilAssociationName], 
            T.GoldMineralAndFossilAssociationName AS [X_DictionaryMineralAndFossilAssociation.GoldMineralAndFossilAssociationName], 
            T.CustomMineralAndFossilAssociationName AS [X_DictionaryMineralAndFossilAssociation.CustomMineralAndFossilAssociationName], 
            T.Description AS [X_DictionaryMineralAndFossilAssociation.Description], 
            T.FullDescription AS [X_DictionaryMineralAndFossilAssociation.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralAndFossilAssociation.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralAndFossilAssociation.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralAndFossilAssociation.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralAndFossilAssociation.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralAndFossilAssociation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralAndFossilAssociation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralAndFossilAssociation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralAndFossilAssociation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralAndFossilAssociation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralAndFossilAssociation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralAndFossilAssociation.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralAndFossilAssociations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView147()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralAndFossilType
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralAndFossilType](T1.[X_DictionaryMineralAndFossilType.MineralAndFossilTypeID], T1.[X_DictionaryMineralAndFossilType.StandardMineralAndFossilTypeName], T1.[X_DictionaryMineralAndFossilType.CoalMineralAndFossilTypeName], T1.[X_DictionaryMineralAndFossilType.GoldMineralAndFossilTypeName], T1.[X_DictionaryMineralAndFossilType.CustomMineralAndFossilTypeName], T1.[X_DictionaryMineralAndFossilType.Description], T1.[X_DictionaryMineralAndFossilType.FullDescription], T1.[X_DictionaryMineralAndFossilType.Thumbnail], T1.[X_DictionaryMineralAndFossilType.OriginalFileDataID], T1.[X_DictionaryMineralAndFossilType.Version], T1.[X_DictionaryMineralAndFossilType.VersionAntecedentID], T1.[X_DictionaryMineralAndFossilType.VersionCertainty], T1.[X_DictionaryMineralAndFossilType.VersionWorkflowInstanceID], T1.[X_DictionaryMineralAndFossilType.VersionUpdatedBy], T1.[X_DictionaryMineralAndFossilType.VersionDeletedBy], T1.[X_DictionaryMineralAndFossilType.VersionOwnerContactID], T1.[X_DictionaryMineralAndFossilType.VersionOwnerCompanyID], T1.[X_DictionaryMineralAndFossilType.VersionUpdated])
    FROM (
        SELECT 
            T.MineralAndFossilTypeID AS [X_DictionaryMineralAndFossilType.MineralAndFossilTypeID], 
            T.StandardMineralAndFossilTypeName AS [X_DictionaryMineralAndFossilType.StandardMineralAndFossilTypeName], 
            T.CoalMineralAndFossilTypeName AS [X_DictionaryMineralAndFossilType.CoalMineralAndFossilTypeName], 
            T.GoldMineralAndFossilTypeName AS [X_DictionaryMineralAndFossilType.GoldMineralAndFossilTypeName], 
            T.CustomMineralAndFossilTypeName AS [X_DictionaryMineralAndFossilType.CustomMineralAndFossilTypeName], 
            T.Description AS [X_DictionaryMineralAndFossilType.Description], 
            T.FullDescription AS [X_DictionaryMineralAndFossilType.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralAndFossilType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralAndFossilType.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralAndFossilType.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralAndFossilType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralAndFossilType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralAndFossilType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralAndFossilType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralAndFossilType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralAndFossilType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralAndFossilType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralAndFossilType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralAndFossilTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralForm.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView148()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralForm
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralForm](T1.[X_DictionaryMineralForm.MineralFormID], T1.[X_DictionaryMineralForm.StandardMineralFormName], T1.[X_DictionaryMineralForm.CoalMineralFormName], T1.[X_DictionaryMineralForm.GoldMineralFormName], T1.[X_DictionaryMineralForm.CustomMineralFormName], T1.[X_DictionaryMineralForm.Description], T1.[X_DictionaryMineralForm.FullDescription], T1.[X_DictionaryMineralForm.Thumbnail], T1.[X_DictionaryMineralForm.OriginalFileDataID], T1.[X_DictionaryMineralForm.Version], T1.[X_DictionaryMineralForm.VersionAntecedentID], T1.[X_DictionaryMineralForm.VersionCertainty], T1.[X_DictionaryMineralForm.VersionWorkflowInstanceID], T1.[X_DictionaryMineralForm.VersionUpdatedBy], T1.[X_DictionaryMineralForm.VersionDeletedBy], T1.[X_DictionaryMineralForm.VersionOwnerContactID], T1.[X_DictionaryMineralForm.VersionOwnerCompanyID], T1.[X_DictionaryMineralForm.VersionUpdated])
    FROM (
        SELECT 
            T.MineralFormID AS [X_DictionaryMineralForm.MineralFormID], 
            T.StandardMineralFormName AS [X_DictionaryMineralForm.StandardMineralFormName], 
            T.CoalMineralFormName AS [X_DictionaryMineralForm.CoalMineralFormName], 
            T.GoldMineralFormName AS [X_DictionaryMineralForm.GoldMineralFormName], 
            T.CustomMineralFormName AS [X_DictionaryMineralForm.CustomMineralFormName], 
            T.Description AS [X_DictionaryMineralForm.Description], 
            T.FullDescription AS [X_DictionaryMineralForm.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralForm.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralForm.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralForm.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralForm.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralForm.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralForm.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralForm.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralForm.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralForm.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralForm.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralForm.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralForms AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralStyle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView149()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralStyle
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralStyle](T1.[X_DictionaryMineralStyle.MineralStyleID], T1.[X_DictionaryMineralStyle.StandardMineralStyleName], T1.[X_DictionaryMineralStyle.CoalMineralStyleName], T1.[X_DictionaryMineralStyle.GoldMineralStyleName], T1.[X_DictionaryMineralStyle.CustomMineralStyleName], T1.[X_DictionaryMineralStyle.Description], T1.[X_DictionaryMineralStyle.FullDescription], T1.[X_DictionaryMineralStyle.Thumbnail], T1.[X_DictionaryMineralStyle.OriginalFileDataID], T1.[X_DictionaryMineralStyle.Version], T1.[X_DictionaryMineralStyle.VersionAntecedentID], T1.[X_DictionaryMineralStyle.VersionCertainty], T1.[X_DictionaryMineralStyle.VersionWorkflowInstanceID], T1.[X_DictionaryMineralStyle.VersionUpdatedBy], T1.[X_DictionaryMineralStyle.VersionDeletedBy], T1.[X_DictionaryMineralStyle.VersionOwnerContactID], T1.[X_DictionaryMineralStyle.VersionOwnerCompanyID], T1.[X_DictionaryMineralStyle.VersionUpdated])
    FROM (
        SELECT 
            T.MineralStyleID AS [X_DictionaryMineralStyle.MineralStyleID], 
            T.StandardMineralStyleName AS [X_DictionaryMineralStyle.StandardMineralStyleName], 
            T.CoalMineralStyleName AS [X_DictionaryMineralStyle.CoalMineralStyleName], 
            T.GoldMineralStyleName AS [X_DictionaryMineralStyle.GoldMineralStyleName], 
            T.CustomMineralStyleName AS [X_DictionaryMineralStyle.CustomMineralStyleName], 
            T.Description AS [X_DictionaryMineralStyle.Description], 
            T.FullDescription AS [X_DictionaryMineralStyle.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralStyle.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralStyle.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralStyle.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralStyle.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralStyle.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralStyle.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralStyle.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralStyle.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralStyle.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralStyle.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralStyle.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralStyles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView150()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMineralType
        [NKD.Module.BusinessObjects.Store.X_DictionaryMineralType](T1.[X_DictionaryMineralType.MineralTypeID], T1.[X_DictionaryMineralType.StandardMineralTypeName], T1.[X_DictionaryMineralType.CoalMineralTypeName], T1.[X_DictionaryMineralType.GoldMineralTypeName], T1.[X_DictionaryMineralType.CustomMineralTypeName], T1.[X_DictionaryMineralType.Description], T1.[X_DictionaryMineralType.FullDescription], T1.[X_DictionaryMineralType.Thumbnail], T1.[X_DictionaryMineralType.OriginalFileDataID], T1.[X_DictionaryMineralType.Version], T1.[X_DictionaryMineralType.VersionAntecedentID], T1.[X_DictionaryMineralType.VersionCertainty], T1.[X_DictionaryMineralType.VersionWorkflowInstanceID], T1.[X_DictionaryMineralType.VersionUpdatedBy], T1.[X_DictionaryMineralType.VersionDeletedBy], T1.[X_DictionaryMineralType.VersionOwnerContactID], T1.[X_DictionaryMineralType.VersionOwnerCompanyID], T1.[X_DictionaryMineralType.VersionUpdated])
    FROM (
        SELECT 
            T.MineralTypeID AS [X_DictionaryMineralType.MineralTypeID], 
            T.StandardMineralTypeName AS [X_DictionaryMineralType.StandardMineralTypeName], 
            T.CoalMineralTypeName AS [X_DictionaryMineralType.CoalMineralTypeName], 
            T.GoldMineralTypeName AS [X_DictionaryMineralType.GoldMineralTypeName], 
            T.CustomMineralTypeName AS [X_DictionaryMineralType.CustomMineralTypeName], 
            T.Description AS [X_DictionaryMineralType.Description], 
            T.FullDescription AS [X_DictionaryMineralType.FullDescription], 
            T.Thumbnail AS [X_DictionaryMineralType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMineralType.OriginalFileDataID], 
            T.Version AS [X_DictionaryMineralType.Version], 
            T.VersionAntecedentID AS [X_DictionaryMineralType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMineralType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMineralType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMineralType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMineralType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMineralType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMineralType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMineralType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMineralTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView151()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryModel
        [NKD.Module.BusinessObjects.Store.X_DictionaryModel](T1.[X_DictionaryModel.ModelID], T1.[X_DictionaryModel.ParentModelID], T1.[X_DictionaryModel.StandardModelName], T1.[X_DictionaryModel.EcriModelName], T1.[X_DictionaryModel.CustomModelName], T1.[X_DictionaryModel.CompanyID], T1.[X_DictionaryModel.OriginalManufacturerName], T1.[X_DictionaryModel.ModelStatusID], T1.[X_DictionaryModel.DeviceTypeID], T1.[X_DictionaryModel.IsMake], T1.[X_DictionaryModel.ManufacturedFrom], T1.[X_DictionaryModel.ManufacturedUntil], T1.[X_DictionaryModel.SupportedUntil], T1.[X_DictionaryModel.EstimatedLifetimeUnitID], T1.[X_DictionaryModel.EstimatedLifetime], T1.[X_DictionaryModel.Description], T1.[X_DictionaryModel.FullDescription], T1.[X_DictionaryModel.UserGuideFileDataID], T1.[X_DictionaryModel.DefaultLicenseTypeID], T1.[X_DictionaryModel.SecureFileDataID], T1.[X_DictionaryModel.SecureRedirectURL], T1.[X_DictionaryModel.Thumbnail], T1.[X_DictionaryModel.OriginalFileDataID], T1.[X_DictionaryModel.Version], T1.[X_DictionaryModel.VersionAntecedentID], T1.[X_DictionaryModel.VersionCertainty], T1.[X_DictionaryModel.VersionWorkflowInstanceID], T1.[X_DictionaryModel.VersionUpdatedBy], T1.[X_DictionaryModel.VersionDeletedBy], T1.[X_DictionaryModel.VersionOwnerContactID], T1.[X_DictionaryModel.VersionOwnerCompanyID], T1.[X_DictionaryModel.VersionUpdated])
    FROM (
        SELECT 
            T.ModelID AS [X_DictionaryModel.ModelID], 
            T.ParentModelID AS [X_DictionaryModel.ParentModelID], 
            T.StandardModelName AS [X_DictionaryModel.StandardModelName], 
            T.EcriModelName AS [X_DictionaryModel.EcriModelName], 
            T.CustomModelName AS [X_DictionaryModel.CustomModelName], 
            T.CompanyID AS [X_DictionaryModel.CompanyID], 
            T.OriginalManufacturerName AS [X_DictionaryModel.OriginalManufacturerName], 
            T.ModelStatusID AS [X_DictionaryModel.ModelStatusID], 
            T.DeviceTypeID AS [X_DictionaryModel.DeviceTypeID], 
            T.IsMake AS [X_DictionaryModel.IsMake], 
            T.ManufacturedFrom AS [X_DictionaryModel.ManufacturedFrom], 
            T.ManufacturedUntil AS [X_DictionaryModel.ManufacturedUntil], 
            T.SupportedUntil AS [X_DictionaryModel.SupportedUntil], 
            T.EstimatedLifetimeUnitID AS [X_DictionaryModel.EstimatedLifetimeUnitID], 
            T.EstimatedLifetime AS [X_DictionaryModel.EstimatedLifetime], 
            T.Description AS [X_DictionaryModel.Description], 
            T.FullDescription AS [X_DictionaryModel.FullDescription], 
            T.UserGuideFileDataID AS [X_DictionaryModel.UserGuideFileDataID], 
            T.DefaultLicenseTypeID AS [X_DictionaryModel.DefaultLicenseTypeID], 
            T.SecureFileDataID AS [X_DictionaryModel.SecureFileDataID], 
            T.SecureRedirectURL AS [X_DictionaryModel.SecureRedirectURL], 
            T.Thumbnail AS [X_DictionaryModel.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryModel.OriginalFileDataID], 
            T.Version AS [X_DictionaryModel.Version], 
            T.VersionAntecedentID AS [X_DictionaryModel.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView152()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryModelCategory
        [NKD.Module.BusinessObjects.Store.X_DictionaryModelCategory](T1.[X_DictionaryModelCategory.ModelCategoryID], T1.[X_DictionaryModelCategory.ModelID], T1.[X_DictionaryModelCategory.CategoryDeviceTypeID], T1.[X_DictionaryModelCategory.Version], T1.[X_DictionaryModelCategory.VersionAntecedentID], T1.[X_DictionaryModelCategory.VersionCertainty], T1.[X_DictionaryModelCategory.VersionWorkflowInstanceID], T1.[X_DictionaryModelCategory.VersionUpdatedBy], T1.[X_DictionaryModelCategory.VersionDeletedBy], T1.[X_DictionaryModelCategory.VersionOwnerContactID], T1.[X_DictionaryModelCategory.VersionOwnerCompanyID], T1.[X_DictionaryModelCategory.VersionUpdated])
    FROM (
        SELECT 
            T.ModelCategoryID AS [X_DictionaryModelCategory.ModelCategoryID], 
            T.ModelID AS [X_DictionaryModelCategory.ModelID], 
            T.CategoryDeviceTypeID AS [X_DictionaryModelCategory.CategoryDeviceTypeID], 
            T.Version AS [X_DictionaryModelCategory.Version], 
            T.VersionAntecedentID AS [X_DictionaryModelCategory.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryModelCategory.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryModelCategory.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryModelCategory.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryModelCategory.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryModelCategory.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryModelCategory.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryModelCategory.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryModelCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView153()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryModelRelation
        [NKD.Module.BusinessObjects.Store.X_DictionaryModelRelation](T1.[X_DictionaryModelRelation.ModelRelationID], T1.[X_DictionaryModelRelation.OriginalModelID], T1.[X_DictionaryModelRelation.RelatedModelID], T1.[X_DictionaryModelRelation.RelationTypeID], T1.[X_DictionaryModelRelation.Related], T1.[X_DictionaryModelRelation.Version], T1.[X_DictionaryModelRelation.VersionAntecedentID], T1.[X_DictionaryModelRelation.VersionCertainty], T1.[X_DictionaryModelRelation.VersionWorkflowInstanceID], T1.[X_DictionaryModelRelation.VersionUpdatedBy], T1.[X_DictionaryModelRelation.VersionDeletedBy], T1.[X_DictionaryModelRelation.VersionOwnerContactID], T1.[X_DictionaryModelRelation.VersionOwnerCompanyID], T1.[X_DictionaryModelRelation.VersionUpdated])
    FROM (
        SELECT 
            T.ModelRelationID AS [X_DictionaryModelRelation.ModelRelationID], 
            T.OriginalModelID AS [X_DictionaryModelRelation.OriginalModelID], 
            T.RelatedModelID AS [X_DictionaryModelRelation.RelatedModelID], 
            T.RelationTypeID AS [X_DictionaryModelRelation.RelationTypeID], 
            T.Related AS [X_DictionaryModelRelation.Related], 
            T.Version AS [X_DictionaryModelRelation.Version], 
            T.VersionAntecedentID AS [X_DictionaryModelRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryModelRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryModelRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryModelRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryModelRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryModelRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryModelRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryModelRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryModelRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView154()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryModelStatus
        [NKD.Module.BusinessObjects.Store.X_DictionaryModelStatus](T1.[X_DictionaryModelStatus.ModelStatusID], T1.[X_DictionaryModelStatus.StandardModelStatusName], T1.[X_DictionaryModelStatus.CustomModelStatusName], T1.[X_DictionaryModelStatus.Description], T1.[X_DictionaryModelStatus.FullDescription], T1.[X_DictionaryModelStatus.Thumbnail], T1.[X_DictionaryModelStatus.OriginalFileDataID], T1.[X_DictionaryModelStatus.Version], T1.[X_DictionaryModelStatus.VersionAntecedentID], T1.[X_DictionaryModelStatus.VersionCertainty], T1.[X_DictionaryModelStatus.VersionWorkflowInstanceID], T1.[X_DictionaryModelStatus.VersionUpdatedBy], T1.[X_DictionaryModelStatus.VersionDeletedBy], T1.[X_DictionaryModelStatus.VersionOwnerContactID], T1.[X_DictionaryModelStatus.VersionOwnerCompanyID], T1.[X_DictionaryModelStatus.VersionUpdated])
    FROM (
        SELECT 
            T.ModelStatusID AS [X_DictionaryModelStatus.ModelStatusID], 
            T.StandardModelStatusName AS [X_DictionaryModelStatus.StandardModelStatusName], 
            T.CustomModelStatusName AS [X_DictionaryModelStatus.CustomModelStatusName], 
            T.Description AS [X_DictionaryModelStatus.Description], 
            T.FullDescription AS [X_DictionaryModelStatus.FullDescription], 
            T.Thumbnail AS [X_DictionaryModelStatus.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryModelStatus.OriginalFileDataID], 
            T.Version AS [X_DictionaryModelStatus.Version], 
            T.VersionAntecedentID AS [X_DictionaryModelStatus.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryModelStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryModelStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryModelStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryModelStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryModelStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryModelStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryModelStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryModelStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMoistureSensitivity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView155()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryMoistureSensitivity
        [NKD.Module.BusinessObjects.Store.X_DictionaryMoistureSensitivity](T1.[X_DictionaryMoistureSensitivity.MoistureSensitivityID], T1.[X_DictionaryMoistureSensitivity.StandardMoistureSensitivityName], T1.[X_DictionaryMoistureSensitivity.CoalMoistureSensitivityName], T1.[X_DictionaryMoistureSensitivity.GoldMoistureSensitivityName], T1.[X_DictionaryMoistureSensitivity.CustomMoistureSensitivityName], T1.[X_DictionaryMoistureSensitivity.Description], T1.[X_DictionaryMoistureSensitivity.FullDescription], T1.[X_DictionaryMoistureSensitivity.Thumbnail], T1.[X_DictionaryMoistureSensitivity.OriginalFileDataID], T1.[X_DictionaryMoistureSensitivity.Version], T1.[X_DictionaryMoistureSensitivity.VersionAntecedentID], T1.[X_DictionaryMoistureSensitivity.VersionCertainty], T1.[X_DictionaryMoistureSensitivity.VersionWorkflowInstanceID], T1.[X_DictionaryMoistureSensitivity.VersionUpdatedBy], T1.[X_DictionaryMoistureSensitivity.VersionDeletedBy], T1.[X_DictionaryMoistureSensitivity.VersionOwnerContactID], T1.[X_DictionaryMoistureSensitivity.VersionOwnerCompanyID], T1.[X_DictionaryMoistureSensitivity.VersionUpdated])
    FROM (
        SELECT 
            T.MoistureSensitivityID AS [X_DictionaryMoistureSensitivity.MoistureSensitivityID], 
            T.StandardMoistureSensitivityName AS [X_DictionaryMoistureSensitivity.StandardMoistureSensitivityName], 
            T.CoalMoistureSensitivityName AS [X_DictionaryMoistureSensitivity.CoalMoistureSensitivityName], 
            T.GoldMoistureSensitivityName AS [X_DictionaryMoistureSensitivity.GoldMoistureSensitivityName], 
            T.CustomMoistureSensitivityName AS [X_DictionaryMoistureSensitivity.CustomMoistureSensitivityName], 
            T.Description AS [X_DictionaryMoistureSensitivity.Description], 
            T.FullDescription AS [X_DictionaryMoistureSensitivity.FullDescription], 
            T.Thumbnail AS [X_DictionaryMoistureSensitivity.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryMoistureSensitivity.OriginalFileDataID], 
            T.Version AS [X_DictionaryMoistureSensitivity.Version], 
            T.VersionAntecedentID AS [X_DictionaryMoistureSensitivity.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryMoistureSensitivity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryMoistureSensitivity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryMoistureSensitivity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryMoistureSensitivity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryMoistureSensitivity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryMoistureSensitivity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryMoistureSensitivity.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryMoistureSensitivities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPartStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView156()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryPartStatus
        [NKD.Module.BusinessObjects.Store.X_DictionaryPartStatus](T1.[X_DictionaryPartStatus.PartStatusID], T1.[X_DictionaryPartStatus.StandardPartStatusName], T1.[X_DictionaryPartStatus.CustomPartStatusName], T1.[X_DictionaryPartStatus.Description], T1.[X_DictionaryPartStatus.FullDescription], T1.[X_DictionaryPartStatus.Thumbnail], T1.[X_DictionaryPartStatus.OriginalFileDataID], T1.[X_DictionaryPartStatus.Version], T1.[X_DictionaryPartStatus.VersionAntecedentID], T1.[X_DictionaryPartStatus.VersionCertainty], T1.[X_DictionaryPartStatus.VersionWorkflowInstanceID], T1.[X_DictionaryPartStatus.VersionUpdatedBy], T1.[X_DictionaryPartStatus.VersionDeletedBy], T1.[X_DictionaryPartStatus.VersionOwnerContactID], T1.[X_DictionaryPartStatus.VersionOwnerCompanyID], T1.[X_DictionaryPartStatus.VersionUpdated])
    FROM (
        SELECT 
            T.PartStatusID AS [X_DictionaryPartStatus.PartStatusID], 
            T.StandardPartStatusName AS [X_DictionaryPartStatus.StandardPartStatusName], 
            T.CustomPartStatusName AS [X_DictionaryPartStatus.CustomPartStatusName], 
            T.Description AS [X_DictionaryPartStatus.Description], 
            T.FullDescription AS [X_DictionaryPartStatus.FullDescription], 
            T.Thumbnail AS [X_DictionaryPartStatus.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryPartStatus.OriginalFileDataID], 
            T.Version AS [X_DictionaryPartStatus.Version], 
            T.VersionAntecedentID AS [X_DictionaryPartStatus.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryPartStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryPartStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryPartStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryPartStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryPartStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryPartStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryPartStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPartStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlasticity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView157()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryPlasticity
        [NKD.Module.BusinessObjects.Store.X_DictionaryPlasticity](T1.[X_DictionaryPlasticity.PlasticityID], T1.[X_DictionaryPlasticity.StandardPlasticityName], T1.[X_DictionaryPlasticity.CoalPlasticityName], T1.[X_DictionaryPlasticity.GoldPlasticityName], T1.[X_DictionaryPlasticity.CustomPlasticityName], T1.[X_DictionaryPlasticity.Description], T1.[X_DictionaryPlasticity.FullDescription], T1.[X_DictionaryPlasticity.Thumbnail], T1.[X_DictionaryPlasticity.OriginalFileDataID], T1.[X_DictionaryPlasticity.Version], T1.[X_DictionaryPlasticity.VersionAntecedentID], T1.[X_DictionaryPlasticity.VersionCertainty], T1.[X_DictionaryPlasticity.VersionWorkflowInstanceID], T1.[X_DictionaryPlasticity.VersionUpdatedBy], T1.[X_DictionaryPlasticity.VersionDeletedBy], T1.[X_DictionaryPlasticity.VersionOwnerContactID], T1.[X_DictionaryPlasticity.VersionOwnerCompanyID], T1.[X_DictionaryPlasticity.VersionUpdated])
    FROM (
        SELECT 
            T.PlasticityID AS [X_DictionaryPlasticity.PlasticityID], 
            T.StandardPlasticityName AS [X_DictionaryPlasticity.StandardPlasticityName], 
            T.CoalPlasticityName AS [X_DictionaryPlasticity.CoalPlasticityName], 
            T.GoldPlasticityName AS [X_DictionaryPlasticity.GoldPlasticityName], 
            T.CustomPlasticityName AS [X_DictionaryPlasticity.CustomPlasticityName], 
            T.Description AS [X_DictionaryPlasticity.Description], 
            T.FullDescription AS [X_DictionaryPlasticity.FullDescription], 
            T.Thumbnail AS [X_DictionaryPlasticity.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryPlasticity.OriginalFileDataID], 
            T.Version AS [X_DictionaryPlasticity.Version], 
            T.VersionAntecedentID AS [X_DictionaryPlasticity.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryPlasticity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryPlasticity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryPlasticity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryPlasticity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryPlasticity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryPlasticity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryPlasticity.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPlasticities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPly.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView158()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryPly
        [NKD.Module.BusinessObjects.Store.X_DictionaryPly](T1.[X_DictionaryPly.PlyID], T1.[X_DictionaryPly.StandardPlyName], T1.[X_DictionaryPly.CustomPlyName], T1.[X_DictionaryPly.Description], T1.[X_DictionaryPly.FullDescription], T1.[X_DictionaryPly.Thumbnail], T1.[X_DictionaryPly.OriginalFileDataID], T1.[X_DictionaryPly.Version], T1.[X_DictionaryPly.VersionAntecedentID], T1.[X_DictionaryPly.VersionCertainty], T1.[X_DictionaryPly.VersionWorkflowInstanceID], T1.[X_DictionaryPly.VersionUpdatedBy], T1.[X_DictionaryPly.VersionDeletedBy], T1.[X_DictionaryPly.VersionOwnerContactID], T1.[X_DictionaryPly.VersionOwnerCompanyID], T1.[X_DictionaryPly.VersionUpdated])
    FROM (
        SELECT 
            T.PlyID AS [X_DictionaryPly.PlyID], 
            T.StandardPlyName AS [X_DictionaryPly.StandardPlyName], 
            T.CustomPlyName AS [X_DictionaryPly.CustomPlyName], 
            T.Description AS [X_DictionaryPly.Description], 
            T.FullDescription AS [X_DictionaryPly.FullDescription], 
            T.Thumbnail AS [X_DictionaryPly.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryPly.OriginalFileDataID], 
            T.Version AS [X_DictionaryPly.Version], 
            T.VersionAntecedentID AS [X_DictionaryPly.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryPly.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryPly.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryPly.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryPly.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryPly.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryPly.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryPly.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPlies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlyAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView159()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryPlyAlias
        [NKD.Module.BusinessObjects.Store.X_DictionaryPlyAlias](T1.[X_DictionaryPlyAlias.PlyAliasID], T1.[X_DictionaryPlyAlias.PlyID], T1.[X_DictionaryPlyAlias.CustomPlyName], T1.[X_DictionaryPlyAlias.FullDescription], T1.[X_DictionaryPlyAlias.Thumbnail], T1.[X_DictionaryPlyAlias.OriginalFileDataID], T1.[X_DictionaryPlyAlias.Version], T1.[X_DictionaryPlyAlias.VersionAntecedentID], T1.[X_DictionaryPlyAlias.VersionCertainty], T1.[X_DictionaryPlyAlias.VersionWorkflowInstanceID], T1.[X_DictionaryPlyAlias.VersionUpdatedBy], T1.[X_DictionaryPlyAlias.VersionDeletedBy], T1.[X_DictionaryPlyAlias.VersionOwnerContactID], T1.[X_DictionaryPlyAlias.VersionOwnerCompanyID], T1.[X_DictionaryPlyAlias.VersionUpdated])
    FROM (
        SELECT 
            T.PlyAliasID AS [X_DictionaryPlyAlias.PlyAliasID], 
            T.PlyID AS [X_DictionaryPlyAlias.PlyID], 
            T.CustomPlyName AS [X_DictionaryPlyAlias.CustomPlyName], 
            T.FullDescription AS [X_DictionaryPlyAlias.FullDescription], 
            T.Thumbnail AS [X_DictionaryPlyAlias.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryPlyAlias.OriginalFileDataID], 
            T.Version AS [X_DictionaryPlyAlias.Version], 
            T.VersionAntecedentID AS [X_DictionaryPlyAlias.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryPlyAlias.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryPlyAlias.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryPlyAlias.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryPlyAlias.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryPlyAlias.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryPlyAlias.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryPlyAlias.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPlyAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPointLoadTestType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView160()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryPointLoadTestType
        [NKD.Module.BusinessObjects.Store.X_DictionaryPointLoadTestType](T1.[X_DictionaryPointLoadTestType.PointLoadTestTypeID], T1.[X_DictionaryPointLoadTestType.StandardPointLoadTestTypeName], T1.[X_DictionaryPointLoadTestType.CoalPointLoadTestTypeName], T1.[X_DictionaryPointLoadTestType.GoldPointLoadTestTypeName], T1.[X_DictionaryPointLoadTestType.CustomPointLoadTestTypeName], T1.[X_DictionaryPointLoadTestType.Description], T1.[X_DictionaryPointLoadTestType.FullDescription], T1.[X_DictionaryPointLoadTestType.Thumbnail], T1.[X_DictionaryPointLoadTestType.OriginalFileDataID], T1.[X_DictionaryPointLoadTestType.Version], T1.[X_DictionaryPointLoadTestType.VersionAntecedentID], T1.[X_DictionaryPointLoadTestType.VersionCertainty], T1.[X_DictionaryPointLoadTestType.VersionWorkflowInstanceID], T1.[X_DictionaryPointLoadTestType.VersionUpdatedBy], T1.[X_DictionaryPointLoadTestType.VersionDeletedBy], T1.[X_DictionaryPointLoadTestType.VersionOwnerContactID], T1.[X_DictionaryPointLoadTestType.VersionOwnerCompanyID], T1.[X_DictionaryPointLoadTestType.VersionUpdated])
    FROM (
        SELECT 
            T.PointLoadTestTypeID AS [X_DictionaryPointLoadTestType.PointLoadTestTypeID], 
            T.StandardPointLoadTestTypeName AS [X_DictionaryPointLoadTestType.StandardPointLoadTestTypeName], 
            T.CoalPointLoadTestTypeName AS [X_DictionaryPointLoadTestType.CoalPointLoadTestTypeName], 
            T.GoldPointLoadTestTypeName AS [X_DictionaryPointLoadTestType.GoldPointLoadTestTypeName], 
            T.CustomPointLoadTestTypeName AS [X_DictionaryPointLoadTestType.CustomPointLoadTestTypeName], 
            T.Description AS [X_DictionaryPointLoadTestType.Description], 
            T.FullDescription AS [X_DictionaryPointLoadTestType.FullDescription], 
            T.Thumbnail AS [X_DictionaryPointLoadTestType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryPointLoadTestType.OriginalFileDataID], 
            T.Version AS [X_DictionaryPointLoadTestType.Version], 
            T.VersionAntecedentID AS [X_DictionaryPointLoadTestType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryPointLoadTestType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryPointLoadTestType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryPointLoadTestType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryPointLoadTestType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryPointLoadTestType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryPointLoadTestType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryPointLoadTestType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPointLoadTestTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPosition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView161()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryPosition
        [NKD.Module.BusinessObjects.Store.X_DictionaryPosition](T1.[X_DictionaryPosition.PositionID], T1.[X_DictionaryPosition.StandardPositionName], T1.[X_DictionaryPosition.CoalPositionName], T1.[X_DictionaryPosition.GoldPositionName], T1.[X_DictionaryPosition.CustomPositionName], T1.[X_DictionaryPosition.Description], T1.[X_DictionaryPosition.FullDescription], T1.[X_DictionaryPosition.Thumbnail], T1.[X_DictionaryPosition.OriginalFileDataID], T1.[X_DictionaryPosition.Version], T1.[X_DictionaryPosition.VersionAntecedentID], T1.[X_DictionaryPosition.VersionCertainty], T1.[X_DictionaryPosition.VersionWorkflowInstanceID], T1.[X_DictionaryPosition.VersionUpdatedBy], T1.[X_DictionaryPosition.VersionDeletedBy], T1.[X_DictionaryPosition.VersionOwnerContactID], T1.[X_DictionaryPosition.VersionOwnerCompanyID], T1.[X_DictionaryPosition.VersionUpdated])
    FROM (
        SELECT 
            T.PositionID AS [X_DictionaryPosition.PositionID], 
            T.StandardPositionName AS [X_DictionaryPosition.StandardPositionName], 
            T.CoalPositionName AS [X_DictionaryPosition.CoalPositionName], 
            T.GoldPositionName AS [X_DictionaryPosition.GoldPositionName], 
            T.CustomPositionName AS [X_DictionaryPosition.CustomPositionName], 
            T.Description AS [X_DictionaryPosition.Description], 
            T.FullDescription AS [X_DictionaryPosition.FullDescription], 
            T.Thumbnail AS [X_DictionaryPosition.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryPosition.OriginalFileDataID], 
            T.Version AS [X_DictionaryPosition.Version], 
            T.VersionAntecedentID AS [X_DictionaryPosition.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryPosition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryPosition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryPosition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryPosition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryPosition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryPosition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryPosition.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryPositions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryProfession.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView162()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryProfession
        [NKD.Module.BusinessObjects.Store.X_DictionaryProfession](T1.[X_DictionaryProfession.ProfessionID], T1.[X_DictionaryProfession.StandardProfessionName], T1.[X_DictionaryProfession.CoalProfessionName], T1.[X_DictionaryProfession.GoldProfessionName], T1.[X_DictionaryProfession.CustomProfessionName], T1.[X_DictionaryProfession.Description], T1.[X_DictionaryProfession.FullDescription], T1.[X_DictionaryProfession.Thumbnail], T1.[X_DictionaryProfession.OriginalFileDataID], T1.[X_DictionaryProfession.Version], T1.[X_DictionaryProfession.VersionAntecedentID], T1.[X_DictionaryProfession.VersionCertainty], T1.[X_DictionaryProfession.VersionWorkflowInstanceID], T1.[X_DictionaryProfession.VersionUpdatedBy], T1.[X_DictionaryProfession.VersionDeletedBy], T1.[X_DictionaryProfession.VersionOwnerContactID], T1.[X_DictionaryProfession.VersionOwnerCompanyID], T1.[X_DictionaryProfession.VersionUpdated])
    FROM (
        SELECT 
            T.ProfessionID AS [X_DictionaryProfession.ProfessionID], 
            T.StandardProfessionName AS [X_DictionaryProfession.StandardProfessionName], 
            T.CoalProfessionName AS [X_DictionaryProfession.CoalProfessionName], 
            T.GoldProfessionName AS [X_DictionaryProfession.GoldProfessionName], 
            T.CustomProfessionName AS [X_DictionaryProfession.CustomProfessionName], 
            T.Description AS [X_DictionaryProfession.Description], 
            T.FullDescription AS [X_DictionaryProfession.FullDescription], 
            T.Thumbnail AS [X_DictionaryProfession.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryProfession.OriginalFileDataID], 
            T.Version AS [X_DictionaryProfession.Version], 
            T.VersionAntecedentID AS [X_DictionaryProfession.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryProfession.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryProfession.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryProfession.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryProfession.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryProfession.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryProfession.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryProfession.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryProfessions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceGroup.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView163()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryProvinceGroup
        [NKD.Module.BusinessObjects.Store.X_DictionaryProvinceGroup](T1.[X_DictionaryProvinceGroup.ProvinceGroupID], T1.[X_DictionaryProvinceGroup.StandardProvinceGroupName], T1.[X_DictionaryProvinceGroup.CoalProvinceGroupName], T1.[X_DictionaryProvinceGroup.GoldProvinceGroupName], T1.[X_DictionaryProvinceGroup.CustomProvinceGroupName], T1.[X_DictionaryProvinceGroup.ParentProvinceTypeID], T1.[X_DictionaryProvinceGroup.Description], T1.[X_DictionaryProvinceGroup.FullDescription], T1.[X_DictionaryProvinceGroup.Thumbnail], T1.[X_DictionaryProvinceGroup.OriginalFileDataID], T1.[X_DictionaryProvinceGroup.Version], T1.[X_DictionaryProvinceGroup.VersionAntecedentID], T1.[X_DictionaryProvinceGroup.VersionCertainty], T1.[X_DictionaryProvinceGroup.VersionWorkflowInstanceID], T1.[X_DictionaryProvinceGroup.VersionUpdatedBy], T1.[X_DictionaryProvinceGroup.VersionDeletedBy], T1.[X_DictionaryProvinceGroup.VersionOwnerContactID], T1.[X_DictionaryProvinceGroup.VersionOwnerCompanyID], T1.[X_DictionaryProvinceGroup.VersionUpdated])
    FROM (
        SELECT 
            T.ProvinceGroupID AS [X_DictionaryProvinceGroup.ProvinceGroupID], 
            T.StandardProvinceGroupName AS [X_DictionaryProvinceGroup.StandardProvinceGroupName], 
            T.CoalProvinceGroupName AS [X_DictionaryProvinceGroup.CoalProvinceGroupName], 
            T.GoldProvinceGroupName AS [X_DictionaryProvinceGroup.GoldProvinceGroupName], 
            T.CustomProvinceGroupName AS [X_DictionaryProvinceGroup.CustomProvinceGroupName], 
            T.ParentProvinceTypeID AS [X_DictionaryProvinceGroup.ParentProvinceTypeID], 
            T.Description AS [X_DictionaryProvinceGroup.Description], 
            T.FullDescription AS [X_DictionaryProvinceGroup.FullDescription], 
            T.Thumbnail AS [X_DictionaryProvinceGroup.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryProvinceGroup.OriginalFileDataID], 
            T.Version AS [X_DictionaryProvinceGroup.Version], 
            T.VersionAntecedentID AS [X_DictionaryProvinceGroup.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryProvinceGroup.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryProvinceGroup.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryProvinceGroup.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryProvinceGroup.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryProvinceGroup.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryProvinceGroup.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryProvinceGroup.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryProvinceGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView164()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryProvinceType
        [NKD.Module.BusinessObjects.Store.X_DictionaryProvinceType](T1.[X_DictionaryProvinceType.ProvinceTypeID], T1.[X_DictionaryProvinceType.StandardProvinceTypeName], T1.[X_DictionaryProvinceType.CoalProvinceTypeName], T1.[X_DictionaryProvinceType.GoldProvinceTypeName], T1.[X_DictionaryProvinceType.CustomProvinceTypeName], T1.[X_DictionaryProvinceType.Description], T1.[X_DictionaryProvinceType.FullDescription], T1.[X_DictionaryProvinceType.Thumbnail], T1.[X_DictionaryProvinceType.OriginalFileDataID], T1.[X_DictionaryProvinceType.Version], T1.[X_DictionaryProvinceType.VersionAntecedentID], T1.[X_DictionaryProvinceType.VersionCertainty], T1.[X_DictionaryProvinceType.VersionWorkflowInstanceID], T1.[X_DictionaryProvinceType.VersionUpdatedBy], T1.[X_DictionaryProvinceType.VersionDeletedBy], T1.[X_DictionaryProvinceType.VersionOwnerContactID], T1.[X_DictionaryProvinceType.VersionOwnerCompanyID], T1.[X_DictionaryProvinceType.VersionUpdated])
    FROM (
        SELECT 
            T.ProvinceTypeID AS [X_DictionaryProvinceType.ProvinceTypeID], 
            T.StandardProvinceTypeName AS [X_DictionaryProvinceType.StandardProvinceTypeName], 
            T.CoalProvinceTypeName AS [X_DictionaryProvinceType.CoalProvinceTypeName], 
            T.GoldProvinceTypeName AS [X_DictionaryProvinceType.GoldProvinceTypeName], 
            T.CustomProvinceTypeName AS [X_DictionaryProvinceType.CustomProvinceTypeName], 
            T.Description AS [X_DictionaryProvinceType.Description], 
            T.FullDescription AS [X_DictionaryProvinceType.FullDescription], 
            T.Thumbnail AS [X_DictionaryProvinceType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryProvinceType.OriginalFileDataID], 
            T.Version AS [X_DictionaryProvinceType.Version], 
            T.VersionAntecedentID AS [X_DictionaryProvinceType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryProvinceType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryProvinceType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryProvinceType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryProvinceType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryProvinceType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryProvinceType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryProvinceType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryProvinceTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryRelationType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView165()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryRelationType
        [NKD.Module.BusinessObjects.Store.X_DictionaryRelationType](T1.[X_DictionaryRelationType.RelationTypeID], T1.[X_DictionaryRelationType.StandardRelationTypeName], T1.[X_DictionaryRelationType.CoalRelationTypeName], T1.[X_DictionaryRelationType.GoldRelationTypeName], T1.[X_DictionaryRelationType.CustomRelationTypeName], T1.[X_DictionaryRelationType.Description], T1.[X_DictionaryRelationType.FullDescription], T1.[X_DictionaryRelationType.Thumbnail], T1.[X_DictionaryRelationType.OriginalFileDataID], T1.[X_DictionaryRelationType.Version], T1.[X_DictionaryRelationType.VersionAntecedentID], T1.[X_DictionaryRelationType.VersionCertainty], T1.[X_DictionaryRelationType.VersionWorkflowInstanceID], T1.[X_DictionaryRelationType.VersionUpdatedBy], T1.[X_DictionaryRelationType.VersionDeletedBy], T1.[X_DictionaryRelationType.VersionOwnerContactID], T1.[X_DictionaryRelationType.VersionOwnerCompanyID], T1.[X_DictionaryRelationType.VersionUpdated])
    FROM (
        SELECT 
            T.RelationTypeID AS [X_DictionaryRelationType.RelationTypeID], 
            T.StandardRelationTypeName AS [X_DictionaryRelationType.StandardRelationTypeName], 
            T.CoalRelationTypeName AS [X_DictionaryRelationType.CoalRelationTypeName], 
            T.GoldRelationTypeName AS [X_DictionaryRelationType.GoldRelationTypeName], 
            T.CustomRelationTypeName AS [X_DictionaryRelationType.CustomRelationTypeName], 
            T.Description AS [X_DictionaryRelationType.Description], 
            T.FullDescription AS [X_DictionaryRelationType.FullDescription], 
            T.Thumbnail AS [X_DictionaryRelationType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryRelationType.OriginalFileDataID], 
            T.Version AS [X_DictionaryRelationType.Version], 
            T.VersionAntecedentID AS [X_DictionaryRelationType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryRelationType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryRelationType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryRelationType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryRelationType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryRelationType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryRelationType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryRelationType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryRelationTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryRockMassUnitType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView166()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryRockMassUnitType
        [NKD.Module.BusinessObjects.Store.X_DictionaryRockMassUnitType](T1.[X_DictionaryRockMassUnitType.RockMassUnitTypeID], T1.[X_DictionaryRockMassUnitType.StandardRockMassUnitTypeName], T1.[X_DictionaryRockMassUnitType.CoalRockMassUnitTypeName], T1.[X_DictionaryRockMassUnitType.GoldRockMassUnitTypeName], T1.[X_DictionaryRockMassUnitType.CustomRockMassUnitTypeName], T1.[X_DictionaryRockMassUnitType.Description], T1.[X_DictionaryRockMassUnitType.FullDescription], T1.[X_DictionaryRockMassUnitType.Thumbnail], T1.[X_DictionaryRockMassUnitType.OriginalFileDataID], T1.[X_DictionaryRockMassUnitType.Version], T1.[X_DictionaryRockMassUnitType.VersionAntecedentID], T1.[X_DictionaryRockMassUnitType.VersionCertainty], T1.[X_DictionaryRockMassUnitType.VersionWorkflowInstanceID], T1.[X_DictionaryRockMassUnitType.VersionUpdatedBy], T1.[X_DictionaryRockMassUnitType.VersionDeletedBy], T1.[X_DictionaryRockMassUnitType.VersionOwnerContactID], T1.[X_DictionaryRockMassUnitType.VersionOwnerCompanyID], T1.[X_DictionaryRockMassUnitType.VersionUpdated])
    FROM (
        SELECT 
            T.RockMassUnitTypeID AS [X_DictionaryRockMassUnitType.RockMassUnitTypeID], 
            T.StandardRockMassUnitTypeName AS [X_DictionaryRockMassUnitType.StandardRockMassUnitTypeName], 
            T.CoalRockMassUnitTypeName AS [X_DictionaryRockMassUnitType.CoalRockMassUnitTypeName], 
            T.GoldRockMassUnitTypeName AS [X_DictionaryRockMassUnitType.GoldRockMassUnitTypeName], 
            T.CustomRockMassUnitTypeName AS [X_DictionaryRockMassUnitType.CustomRockMassUnitTypeName], 
            T.Description AS [X_DictionaryRockMassUnitType.Description], 
            T.FullDescription AS [X_DictionaryRockMassUnitType.FullDescription], 
            T.Thumbnail AS [X_DictionaryRockMassUnitType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryRockMassUnitType.OriginalFileDataID], 
            T.Version AS [X_DictionaryRockMassUnitType.Version], 
            T.VersionAntecedentID AS [X_DictionaryRockMassUnitType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryRockMassUnitType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryRockMassUnitType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryRockMassUnitType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryRockMassUnitType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryRockMassUnitType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryRockMassUnitType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryRockMassUnitType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryRockMassUnitTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView167()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySampleCategory
        [NKD.Module.BusinessObjects.Store.X_DictionarySampleCategory](T1.[X_DictionarySampleCategory.SampleCategoryID], T1.[X_DictionarySampleCategory.StandardSampleCategoryName], T1.[X_DictionarySampleCategory.CoalSampleCategoryName], T1.[X_DictionarySampleCategory.GoldSampleCategoryName], T1.[X_DictionarySampleCategory.CustomSampleCategoryName], T1.[X_DictionarySampleCategory.Description], T1.[X_DictionarySampleCategory.FullDescription], T1.[X_DictionarySampleCategory.Thumbnail], T1.[X_DictionarySampleCategory.OriginalFileDataID], T1.[X_DictionarySampleCategory.Version], T1.[X_DictionarySampleCategory.VersionAntecedentID], T1.[X_DictionarySampleCategory.VersionCertainty], T1.[X_DictionarySampleCategory.VersionWorkflowInstanceID], T1.[X_DictionarySampleCategory.VersionUpdatedBy], T1.[X_DictionarySampleCategory.VersionDeletedBy], T1.[X_DictionarySampleCategory.VersionOwnerContactID], T1.[X_DictionarySampleCategory.VersionOwnerCompanyID], T1.[X_DictionarySampleCategory.VersionUpdated])
    FROM (
        SELECT 
            T.SampleCategoryID AS [X_DictionarySampleCategory.SampleCategoryID], 
            T.StandardSampleCategoryName AS [X_DictionarySampleCategory.StandardSampleCategoryName], 
            T.CoalSampleCategoryName AS [X_DictionarySampleCategory.CoalSampleCategoryName], 
            T.GoldSampleCategoryName AS [X_DictionarySampleCategory.GoldSampleCategoryName], 
            T.CustomSampleCategoryName AS [X_DictionarySampleCategory.CustomSampleCategoryName], 
            T.Description AS [X_DictionarySampleCategory.Description], 
            T.FullDescription AS [X_DictionarySampleCategory.FullDescription], 
            T.Thumbnail AS [X_DictionarySampleCategory.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySampleCategory.OriginalFileDataID], 
            T.Version AS [X_DictionarySampleCategory.Version], 
            T.VersionAntecedentID AS [X_DictionarySampleCategory.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySampleCategory.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySampleCategory.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySampleCategory.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySampleCategory.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySampleCategory.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySampleCategory.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySampleCategory.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySampleCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleState.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView168()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySampleState
        [NKD.Module.BusinessObjects.Store.X_DictionarySampleState](T1.[X_DictionarySampleState.SampleStateID], T1.[X_DictionarySampleState.StandardSampleStateName], T1.[X_DictionarySampleState.CoalSampleStateName], T1.[X_DictionarySampleState.GoldSampleStateName], T1.[X_DictionarySampleState.CustomSampleStateName], T1.[X_DictionarySampleState.Description], T1.[X_DictionarySampleState.FullDescription], T1.[X_DictionarySampleState.Thumbnail], T1.[X_DictionarySampleState.OriginalFileDataID], T1.[X_DictionarySampleState.Version], T1.[X_DictionarySampleState.VersionAntecedentID], T1.[X_DictionarySampleState.VersionCertainty], T1.[X_DictionarySampleState.VersionWorkflowInstanceID], T1.[X_DictionarySampleState.VersionUpdatedBy], T1.[X_DictionarySampleState.VersionDeletedBy], T1.[X_DictionarySampleState.VersionOwnerContactID], T1.[X_DictionarySampleState.VersionOwnerCompanyID], T1.[X_DictionarySampleState.VersionUpdated])
    FROM (
        SELECT 
            T.SampleStateID AS [X_DictionarySampleState.SampleStateID], 
            T.StandardSampleStateName AS [X_DictionarySampleState.StandardSampleStateName], 
            T.CoalSampleStateName AS [X_DictionarySampleState.CoalSampleStateName], 
            T.GoldSampleStateName AS [X_DictionarySampleState.GoldSampleStateName], 
            T.CustomSampleStateName AS [X_DictionarySampleState.CustomSampleStateName], 
            T.Description AS [X_DictionarySampleState.Description], 
            T.FullDescription AS [X_DictionarySampleState.FullDescription], 
            T.Thumbnail AS [X_DictionarySampleState.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySampleState.OriginalFileDataID], 
            T.Version AS [X_DictionarySampleState.Version], 
            T.VersionAntecedentID AS [X_DictionarySampleState.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySampleState.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySampleState.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySampleState.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySampleState.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySampleState.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySampleState.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySampleState.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySampleStates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView169()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySampleType
        [NKD.Module.BusinessObjects.Store.X_DictionarySampleType](T1.[X_DictionarySampleType.SampleTypeID], T1.[X_DictionarySampleType.StandardSampleTypeName], T1.[X_DictionarySampleType.CoalSampleTypeName], T1.[X_DictionarySampleType.GoldSampleTypeName], T1.[X_DictionarySampleType.CustomSampleTypeName], T1.[X_DictionarySampleType.Description], T1.[X_DictionarySampleType.FullDescription], T1.[X_DictionarySampleType.Thumbnail], T1.[X_DictionarySampleType.OriginalFileDataID], T1.[X_DictionarySampleType.Version], T1.[X_DictionarySampleType.VersionAntecedentID], T1.[X_DictionarySampleType.VersionCertainty], T1.[X_DictionarySampleType.VersionWorkflowInstanceID], T1.[X_DictionarySampleType.VersionUpdatedBy], T1.[X_DictionarySampleType.VersionDeletedBy], T1.[X_DictionarySampleType.VersionOwnerContactID], T1.[X_DictionarySampleType.VersionOwnerCompanyID], T1.[X_DictionarySampleType.VersionUpdated])
    FROM (
        SELECT 
            T.SampleTypeID AS [X_DictionarySampleType.SampleTypeID], 
            T.StandardSampleTypeName AS [X_DictionarySampleType.StandardSampleTypeName], 
            T.CoalSampleTypeName AS [X_DictionarySampleType.CoalSampleTypeName], 
            T.GoldSampleTypeName AS [X_DictionarySampleType.GoldSampleTypeName], 
            T.CustomSampleTypeName AS [X_DictionarySampleType.CustomSampleTypeName], 
            T.Description AS [X_DictionarySampleType.Description], 
            T.FullDescription AS [X_DictionarySampleType.FullDescription], 
            T.Thumbnail AS [X_DictionarySampleType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySampleType.OriginalFileDataID], 
            T.Version AS [X_DictionarySampleType.Version], 
            T.VersionAntecedentID AS [X_DictionarySampleType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySampleType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySampleType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySampleType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySampleType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySampleType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySampleType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySampleType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySampleTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySeam.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView170()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySeam
        [NKD.Module.BusinessObjects.Store.X_DictionarySeam](T1.[X_DictionarySeam.SeamID], T1.[X_DictionarySeam.StandardSeamName], T1.[X_DictionarySeam.CustomSeamName], T1.[X_DictionarySeam.Description], T1.[X_DictionarySeam.FullDescription], T1.[X_DictionarySeam.Thumbnail], T1.[X_DictionarySeam.OriginalFileDataID], T1.[X_DictionarySeam.Version], T1.[X_DictionarySeam.VersionAntecedentID], T1.[X_DictionarySeam.VersionCertainty], T1.[X_DictionarySeam.VersionWorkflowInstanceID], T1.[X_DictionarySeam.VersionUpdatedBy], T1.[X_DictionarySeam.VersionDeletedBy], T1.[X_DictionarySeam.VersionOwnerContactID], T1.[X_DictionarySeam.VersionOwnerCompanyID], T1.[X_DictionarySeam.VersionUpdated])
    FROM (
        SELECT 
            T.SeamID AS [X_DictionarySeam.SeamID], 
            T.StandardSeamName AS [X_DictionarySeam.StandardSeamName], 
            T.CustomSeamName AS [X_DictionarySeam.CustomSeamName], 
            T.Description AS [X_DictionarySeam.Description], 
            T.FullDescription AS [X_DictionarySeam.FullDescription], 
            T.Thumbnail AS [X_DictionarySeam.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySeam.OriginalFileDataID], 
            T.Version AS [X_DictionarySeam.Version], 
            T.VersionAntecedentID AS [X_DictionarySeam.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySeam.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySeam.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySeam.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySeam.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySeam.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySeam.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySeam.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySeams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySeamAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView171()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySeamAlias
        [NKD.Module.BusinessObjects.Store.X_DictionarySeamAlias](T1.[X_DictionarySeamAlias.SeamAliasID], T1.[X_DictionarySeamAlias.SeamID], T1.[X_DictionarySeamAlias.CustomSeamName], T1.[X_DictionarySeamAlias.FullDescription], T1.[X_DictionarySeamAlias.Thumbnail], T1.[X_DictionarySeamAlias.OriginalFileDataID], T1.[X_DictionarySeamAlias.Version], T1.[X_DictionarySeamAlias.VersionAntecedentID], T1.[X_DictionarySeamAlias.VersionCertainty], T1.[X_DictionarySeamAlias.VersionWorkflowInstanceID], T1.[X_DictionarySeamAlias.VersionUpdatedBy], T1.[X_DictionarySeamAlias.VersionDeletedBy], T1.[X_DictionarySeamAlias.VersionOwnerContactID], T1.[X_DictionarySeamAlias.VersionOwnerCompanyID], T1.[X_DictionarySeamAlias.VersionUpdated])
    FROM (
        SELECT 
            T.SeamAliasID AS [X_DictionarySeamAlias.SeamAliasID], 
            T.SeamID AS [X_DictionarySeamAlias.SeamID], 
            T.CustomSeamName AS [X_DictionarySeamAlias.CustomSeamName], 
            T.FullDescription AS [X_DictionarySeamAlias.FullDescription], 
            T.Thumbnail AS [X_DictionarySeamAlias.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySeamAlias.OriginalFileDataID], 
            T.Version AS [X_DictionarySeamAlias.Version], 
            T.VersionAntecedentID AS [X_DictionarySeamAlias.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySeamAlias.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySeamAlias.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySeamAlias.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySeamAlias.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySeamAlias.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySeamAlias.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySeamAlias.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySeamAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySedimentaryFeature.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView172()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySedimentaryFeature
        [NKD.Module.BusinessObjects.Store.X_DictionarySedimentaryFeature](T1.[X_DictionarySedimentaryFeature.SedimentaryFeatureID], T1.[X_DictionarySedimentaryFeature.StandardSedimentaryFeatureName], T1.[X_DictionarySedimentaryFeature.CoalSedimentaryFeatureName], T1.[X_DictionarySedimentaryFeature.GoldSedimentaryFeatureName], T1.[X_DictionarySedimentaryFeature.CustomSedimentaryFeatureName], T1.[X_DictionarySedimentaryFeature.Description], T1.[X_DictionarySedimentaryFeature.FullDescription], T1.[X_DictionarySedimentaryFeature.Thumbnail], T1.[X_DictionarySedimentaryFeature.OriginalFileDataID], T1.[X_DictionarySedimentaryFeature.Version], T1.[X_DictionarySedimentaryFeature.VersionAntecedentID], T1.[X_DictionarySedimentaryFeature.VersionCertainty], T1.[X_DictionarySedimentaryFeature.VersionWorkflowInstanceID], T1.[X_DictionarySedimentaryFeature.VersionUpdatedBy], T1.[X_DictionarySedimentaryFeature.VersionDeletedBy], T1.[X_DictionarySedimentaryFeature.VersionOwnerContactID], T1.[X_DictionarySedimentaryFeature.VersionOwnerCompanyID], T1.[X_DictionarySedimentaryFeature.VersionUpdated])
    FROM (
        SELECT 
            T.SedimentaryFeatureID AS [X_DictionarySedimentaryFeature.SedimentaryFeatureID], 
            T.StandardSedimentaryFeatureName AS [X_DictionarySedimentaryFeature.StandardSedimentaryFeatureName], 
            T.CoalSedimentaryFeatureName AS [X_DictionarySedimentaryFeature.CoalSedimentaryFeatureName], 
            T.GoldSedimentaryFeatureName AS [X_DictionarySedimentaryFeature.GoldSedimentaryFeatureName], 
            T.CustomSedimentaryFeatureName AS [X_DictionarySedimentaryFeature.CustomSedimentaryFeatureName], 
            T.Description AS [X_DictionarySedimentaryFeature.Description], 
            T.FullDescription AS [X_DictionarySedimentaryFeature.FullDescription], 
            T.Thumbnail AS [X_DictionarySedimentaryFeature.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySedimentaryFeature.OriginalFileDataID], 
            T.Version AS [X_DictionarySedimentaryFeature.Version], 
            T.VersionAntecedentID AS [X_DictionarySedimentaryFeature.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySedimentaryFeature.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySedimentaryFeature.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySedimentaryFeature.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySedimentaryFeature.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySedimentaryFeature.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySedimentaryFeature.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySedimentaryFeature.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySedimentaryFeatures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryShade.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView173()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryShade
        [NKD.Module.BusinessObjects.Store.X_DictionaryShade](T1.[X_DictionaryShade.ShadeID], T1.[X_DictionaryShade.StandardShadeName], T1.[X_DictionaryShade.CoalShadeName], T1.[X_DictionaryShade.GoldShadeName], T1.[X_DictionaryShade.CustomShadeName], T1.[X_DictionaryShade.Description], T1.[X_DictionaryShade.FullDescription], T1.[X_DictionaryShade.Thumbnail], T1.[X_DictionaryShade.OriginalFileDataID], T1.[X_DictionaryShade.Version], T1.[X_DictionaryShade.VersionAntecedentID], T1.[X_DictionaryShade.VersionCertainty], T1.[X_DictionaryShade.VersionWorkflowInstanceID], T1.[X_DictionaryShade.VersionUpdatedBy], T1.[X_DictionaryShade.VersionDeletedBy], T1.[X_DictionaryShade.VersionOwnerContactID], T1.[X_DictionaryShade.VersionOwnerCompanyID], T1.[X_DictionaryShade.VersionUpdated])
    FROM (
        SELECT 
            T.ShadeID AS [X_DictionaryShade.ShadeID], 
            T.StandardShadeName AS [X_DictionaryShade.StandardShadeName], 
            T.CoalShadeName AS [X_DictionaryShade.CoalShadeName], 
            T.GoldShadeName AS [X_DictionaryShade.GoldShadeName], 
            T.CustomShadeName AS [X_DictionaryShade.CustomShadeName], 
            T.Description AS [X_DictionaryShade.Description], 
            T.FullDescription AS [X_DictionaryShade.FullDescription], 
            T.Thumbnail AS [X_DictionaryShade.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryShade.OriginalFileDataID], 
            T.Version AS [X_DictionaryShade.Version], 
            T.VersionAntecedentID AS [X_DictionaryShade.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryShade.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryShade.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryShade.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryShade.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryShade.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryShade.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryShade.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryShades AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryShape.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView174()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryShape
        [NKD.Module.BusinessObjects.Store.X_DictionaryShape](T1.[X_DictionaryShape.ShapeID], T1.[X_DictionaryShape.StandardShapeName], T1.[X_DictionaryShape.CoalShapeName], T1.[X_DictionaryShape.GoldShapeName], T1.[X_DictionaryShape.CustomShapeName], T1.[X_DictionaryShape.Description], T1.[X_DictionaryShape.FullDescription], T1.[X_DictionaryShape.Thumbnail], T1.[X_DictionaryShape.OriginalFileDataID], T1.[X_DictionaryShape.Version], T1.[X_DictionaryShape.VersionAntecedentID], T1.[X_DictionaryShape.VersionCertainty], T1.[X_DictionaryShape.VersionWorkflowInstanceID], T1.[X_DictionaryShape.VersionUpdatedBy], T1.[X_DictionaryShape.VersionDeletedBy], T1.[X_DictionaryShape.VersionOwnerContactID], T1.[X_DictionaryShape.VersionOwnerCompanyID], T1.[X_DictionaryShape.VersionUpdated])
    FROM (
        SELECT 
            T.ShapeID AS [X_DictionaryShape.ShapeID], 
            T.StandardShapeName AS [X_DictionaryShape.StandardShapeName], 
            T.CoalShapeName AS [X_DictionaryShape.CoalShapeName], 
            T.GoldShapeName AS [X_DictionaryShape.GoldShapeName], 
            T.CustomShapeName AS [X_DictionaryShape.CustomShapeName], 
            T.Description AS [X_DictionaryShape.Description], 
            T.FullDescription AS [X_DictionaryShape.FullDescription], 
            T.Thumbnail AS [X_DictionaryShape.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryShape.OriginalFileDataID], 
            T.Version AS [X_DictionaryShape.Version], 
            T.VersionAntecedentID AS [X_DictionaryShape.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryShape.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryShape.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryShape.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryShape.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryShape.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryShape.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryShape.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryShapes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryStratigraphy.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView175()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryStratigraphy
        [NKD.Module.BusinessObjects.Store.X_DictionaryStratigraphy](T1.[X_DictionaryStratigraphy.StratigraphyID], T1.[X_DictionaryStratigraphy.StandardStratigraphyName], T1.[X_DictionaryStratigraphy.CoalStratigraphyName], T1.[X_DictionaryStratigraphy.GoldStratigraphyName], T1.[X_DictionaryStratigraphy.CustomStratigraphyName], T1.[X_DictionaryStratigraphy.Description], T1.[X_DictionaryStratigraphy.FullDescription], T1.[X_DictionaryStratigraphy.Thumbnail], T1.[X_DictionaryStratigraphy.OriginalFileDataID], T1.[X_DictionaryStratigraphy.Version], T1.[X_DictionaryStratigraphy.VersionAntecedentID], T1.[X_DictionaryStratigraphy.VersionCertainty], T1.[X_DictionaryStratigraphy.VersionWorkflowInstanceID], T1.[X_DictionaryStratigraphy.VersionUpdatedBy], T1.[X_DictionaryStratigraphy.VersionDeletedBy], T1.[X_DictionaryStratigraphy.VersionOwnerContactID], T1.[X_DictionaryStratigraphy.VersionOwnerCompanyID], T1.[X_DictionaryStratigraphy.VersionUpdated])
    FROM (
        SELECT 
            T.StratigraphyID AS [X_DictionaryStratigraphy.StratigraphyID], 
            T.StandardStratigraphyName AS [X_DictionaryStratigraphy.StandardStratigraphyName], 
            T.CoalStratigraphyName AS [X_DictionaryStratigraphy.CoalStratigraphyName], 
            T.GoldStratigraphyName AS [X_DictionaryStratigraphy.GoldStratigraphyName], 
            T.CustomStratigraphyName AS [X_DictionaryStratigraphy.CustomStratigraphyName], 
            T.Description AS [X_DictionaryStratigraphy.Description], 
            T.FullDescription AS [X_DictionaryStratigraphy.FullDescription], 
            T.Thumbnail AS [X_DictionaryStratigraphy.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryStratigraphy.OriginalFileDataID], 
            T.Version AS [X_DictionaryStratigraphy.Version], 
            T.VersionAntecedentID AS [X_DictionaryStratigraphy.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryStratigraphy.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryStratigraphy.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryStratigraphy.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryStratigraphy.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryStratigraphy.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryStratigraphy.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryStratigraphy.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryStratigraphies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySurfaceRoughness.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView176()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySurfaceRoughness
        [NKD.Module.BusinessObjects.Store.X_DictionarySurfaceRoughness](T1.[X_DictionarySurfaceRoughness.SurfaceRoughnessID], T1.[X_DictionarySurfaceRoughness.StandardSurfaceRoughnessName], T1.[X_DictionarySurfaceRoughness.CoalSurfaceRoughnessName], T1.[X_DictionarySurfaceRoughness.GoldSurfaceRoughnessName], T1.[X_DictionarySurfaceRoughness.CustomSurfaceRoughnessName], T1.[X_DictionarySurfaceRoughness.Description], T1.[X_DictionarySurfaceRoughness.FullDescription], T1.[X_DictionarySurfaceRoughness.Thumbnail], T1.[X_DictionarySurfaceRoughness.OriginalFileDataID], T1.[X_DictionarySurfaceRoughness.Version], T1.[X_DictionarySurfaceRoughness.VersionAntecedentID], T1.[X_DictionarySurfaceRoughness.VersionCertainty], T1.[X_DictionarySurfaceRoughness.VersionWorkflowInstanceID], T1.[X_DictionarySurfaceRoughness.VersionUpdatedBy], T1.[X_DictionarySurfaceRoughness.VersionDeletedBy], T1.[X_DictionarySurfaceRoughness.VersionOwnerContactID], T1.[X_DictionarySurfaceRoughness.VersionOwnerCompanyID], T1.[X_DictionarySurfaceRoughness.VersionUpdated])
    FROM (
        SELECT 
            T.SurfaceRoughnessID AS [X_DictionarySurfaceRoughness.SurfaceRoughnessID], 
            T.StandardSurfaceRoughnessName AS [X_DictionarySurfaceRoughness.StandardSurfaceRoughnessName], 
            T.CoalSurfaceRoughnessName AS [X_DictionarySurfaceRoughness.CoalSurfaceRoughnessName], 
            T.GoldSurfaceRoughnessName AS [X_DictionarySurfaceRoughness.GoldSurfaceRoughnessName], 
            T.CustomSurfaceRoughnessName AS [X_DictionarySurfaceRoughness.CustomSurfaceRoughnessName], 
            T.Description AS [X_DictionarySurfaceRoughness.Description], 
            T.FullDescription AS [X_DictionarySurfaceRoughness.FullDescription], 
            T.Thumbnail AS [X_DictionarySurfaceRoughness.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySurfaceRoughness.OriginalFileDataID], 
            T.Version AS [X_DictionarySurfaceRoughness.Version], 
            T.VersionAntecedentID AS [X_DictionarySurfaceRoughness.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySurfaceRoughness.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySurfaceRoughness.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySurfaceRoughness.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySurfaceRoughness.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySurfaceRoughness.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySurfaceRoughness.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySurfaceRoughness.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySurfaceRoughnesses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySurveyAccuracy.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView177()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionarySurveyAccuracy
        [NKD.Module.BusinessObjects.Store.X_DictionarySurveyAccuracy](T1.[X_DictionarySurveyAccuracy.SurveyAccuracyID], T1.[X_DictionarySurveyAccuracy.StandardSurveyAccuracyName], T1.[X_DictionarySurveyAccuracy.CoalSurveyAccuracyName], T1.[X_DictionarySurveyAccuracy.GoldSurveyAccuracyName], T1.[X_DictionarySurveyAccuracy.CustomSurveyAccuracyName], T1.[X_DictionarySurveyAccuracy.Description], T1.[X_DictionarySurveyAccuracy.FullDescription], T1.[X_DictionarySurveyAccuracy.Thumbnail], T1.[X_DictionarySurveyAccuracy.OriginalFileDataID], T1.[X_DictionarySurveyAccuracy.Version], T1.[X_DictionarySurveyAccuracy.VersionAntecedentID], T1.[X_DictionarySurveyAccuracy.VersionCertainty], T1.[X_DictionarySurveyAccuracy.VersionWorkflowInstanceID], T1.[X_DictionarySurveyAccuracy.VersionUpdatedBy], T1.[X_DictionarySurveyAccuracy.VersionDeletedBy], T1.[X_DictionarySurveyAccuracy.VersionOwnerContactID], T1.[X_DictionarySurveyAccuracy.VersionOwnerCompanyID], T1.[X_DictionarySurveyAccuracy.VersionUpdated])
    FROM (
        SELECT 
            T.SurveyAccuracyID AS [X_DictionarySurveyAccuracy.SurveyAccuracyID], 
            T.StandardSurveyAccuracyName AS [X_DictionarySurveyAccuracy.StandardSurveyAccuracyName], 
            T.CoalSurveyAccuracyName AS [X_DictionarySurveyAccuracy.CoalSurveyAccuracyName], 
            T.GoldSurveyAccuracyName AS [X_DictionarySurveyAccuracy.GoldSurveyAccuracyName], 
            T.CustomSurveyAccuracyName AS [X_DictionarySurveyAccuracy.CustomSurveyAccuracyName], 
            T.Description AS [X_DictionarySurveyAccuracy.Description], 
            T.FullDescription AS [X_DictionarySurveyAccuracy.FullDescription], 
            T.Thumbnail AS [X_DictionarySurveyAccuracy.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionarySurveyAccuracy.OriginalFileDataID], 
            T.Version AS [X_DictionarySurveyAccuracy.Version], 
            T.VersionAntecedentID AS [X_DictionarySurveyAccuracy.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionarySurveyAccuracy.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionarySurveyAccuracy.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionarySurveyAccuracy.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionarySurveyAccuracy.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionarySurveyAccuracy.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionarySurveyAccuracy.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionarySurveyAccuracy.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionarySurveyAccuracies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryTexture.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView178()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryTexture
        [NKD.Module.BusinessObjects.Store.X_DictionaryTexture](T1.[X_DictionaryTexture.TextureID], T1.[X_DictionaryTexture.StandardTextureName], T1.[X_DictionaryTexture.CoalTextureName], T1.[X_DictionaryTexture.GoldTextureName], T1.[X_DictionaryTexture.CustomTextureName], T1.[X_DictionaryTexture.Description], T1.[X_DictionaryTexture.FullDescription], T1.[X_DictionaryTexture.Thumbnail], T1.[X_DictionaryTexture.OriginalFileDataID], T1.[X_DictionaryTexture.Version], T1.[X_DictionaryTexture.VersionAntecedentID], T1.[X_DictionaryTexture.VersionCertainty], T1.[X_DictionaryTexture.VersionWorkflowInstanceID], T1.[X_DictionaryTexture.VersionUpdatedBy], T1.[X_DictionaryTexture.VersionDeletedBy], T1.[X_DictionaryTexture.VersionOwnerContactID], T1.[X_DictionaryTexture.VersionOwnerCompanyID], T1.[X_DictionaryTexture.VersionUpdated])
    FROM (
        SELECT 
            T.TextureID AS [X_DictionaryTexture.TextureID], 
            T.StandardTextureName AS [X_DictionaryTexture.StandardTextureName], 
            T.CoalTextureName AS [X_DictionaryTexture.CoalTextureName], 
            T.GoldTextureName AS [X_DictionaryTexture.GoldTextureName], 
            T.CustomTextureName AS [X_DictionaryTexture.CustomTextureName], 
            T.Description AS [X_DictionaryTexture.Description], 
            T.FullDescription AS [X_DictionaryTexture.FullDescription], 
            T.Thumbnail AS [X_DictionaryTexture.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryTexture.OriginalFileDataID], 
            T.Version AS [X_DictionaryTexture.Version], 
            T.VersionAntecedentID AS [X_DictionaryTexture.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryTexture.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryTexture.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryTexture.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryTexture.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryTexture.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryTexture.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryTexture.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryTextures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView179()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryUnit
        [NKD.Module.BusinessObjects.Store.X_DictionaryUnit](T1.[X_DictionaryUnit.UnitID], T1.[X_DictionaryUnit.UnitTypeID], T1.[X_DictionaryUnit.StrictlySI], T1.[X_DictionaryUnit.EquivalentUnitID], T1.[X_DictionaryUnit.EquivalentMultiplier], T1.[X_DictionaryUnit.StandardUnitName], T1.[X_DictionaryUnit.CoalUnitName], T1.[X_DictionaryUnit.GoldUnitName], T1.[X_DictionaryUnit.CustomUnitName], T1.[X_DictionaryUnit.Description], T1.[X_DictionaryUnit.FullDescription], T1.[X_DictionaryUnit.Thumbnail], T1.[X_DictionaryUnit.OriginalFileDataID], T1.[X_DictionaryUnit.Version], T1.[X_DictionaryUnit.VersionAntecedentID], T1.[X_DictionaryUnit.VersionCertainty], T1.[X_DictionaryUnit.VersionWorkflowInstanceID], T1.[X_DictionaryUnit.VersionUpdatedBy], T1.[X_DictionaryUnit.VersionDeletedBy], T1.[X_DictionaryUnit.VersionOwnerContactID], T1.[X_DictionaryUnit.VersionOwnerCompanyID], T1.[X_DictionaryUnit.VersionUpdated])
    FROM (
        SELECT 
            T.UnitID AS [X_DictionaryUnit.UnitID], 
            T.UnitTypeID AS [X_DictionaryUnit.UnitTypeID], 
            T.StrictlySI AS [X_DictionaryUnit.StrictlySI], 
            T.EquivalentUnitID AS [X_DictionaryUnit.EquivalentUnitID], 
            T.EquivalentMultiplier AS [X_DictionaryUnit.EquivalentMultiplier], 
            T.StandardUnitName AS [X_DictionaryUnit.StandardUnitName], 
            T.CoalUnitName AS [X_DictionaryUnit.CoalUnitName], 
            T.GoldUnitName AS [X_DictionaryUnit.GoldUnitName], 
            T.CustomUnitName AS [X_DictionaryUnit.CustomUnitName], 
            T.Description AS [X_DictionaryUnit.Description], 
            T.FullDescription AS [X_DictionaryUnit.FullDescription], 
            T.Thumbnail AS [X_DictionaryUnit.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryUnit.OriginalFileDataID], 
            T.Version AS [X_DictionaryUnit.Version], 
            T.VersionAntecedentID AS [X_DictionaryUnit.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryUnit.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryUnit.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryUnit.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryUnit.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryUnit.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryUnit.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryUnit.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryUnits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnitType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView180()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryUnitType
        [NKD.Module.BusinessObjects.Store.X_DictionaryUnitType](T1.[X_DictionaryUnitType.UnitTypeID], T1.[X_DictionaryUnitType.StandardUnitTypeName], T1.[X_DictionaryUnitType.CustomUnitTypeName], T1.[X_DictionaryUnitType.Description], T1.[X_DictionaryUnitType.FullDescription], T1.[X_DictionaryUnitType.Thumbnail], T1.[X_DictionaryUnitType.OriginalFileDataID], T1.[X_DictionaryUnitType.Version], T1.[X_DictionaryUnitType.VersionAntecedentID], T1.[X_DictionaryUnitType.VersionCertainty], T1.[X_DictionaryUnitType.VersionWorkflowInstanceID], T1.[X_DictionaryUnitType.VersionUpdatedBy], T1.[X_DictionaryUnitType.VersionDeletedBy], T1.[X_DictionaryUnitType.VersionOwnerContactID], T1.[X_DictionaryUnitType.VersionOwnerCompanyID], T1.[X_DictionaryUnitType.VersionUpdated])
    FROM (
        SELECT 
            T.UnitTypeID AS [X_DictionaryUnitType.UnitTypeID], 
            T.StandardUnitTypeName AS [X_DictionaryUnitType.StandardUnitTypeName], 
            T.CustomUnitTypeName AS [X_DictionaryUnitType.CustomUnitTypeName], 
            T.Description AS [X_DictionaryUnitType.Description], 
            T.FullDescription AS [X_DictionaryUnitType.FullDescription], 
            T.Thumbnail AS [X_DictionaryUnitType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryUnitType.OriginalFileDataID], 
            T.Version AS [X_DictionaryUnitType.Version], 
            T.VersionAntecedentID AS [X_DictionaryUnitType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryUnitType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryUnitType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryUnitType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryUnitType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryUnitType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryUnitType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryUnitType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryUnitTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWeathering.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView181()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryWeathering
        [NKD.Module.BusinessObjects.Store.X_DictionaryWeathering](T1.[X_DictionaryWeathering.WeatheringID], T1.[X_DictionaryWeathering.StandardWeatheringName], T1.[X_DictionaryWeathering.CoalWeatheringName], T1.[X_DictionaryWeathering.GoldWeatheringName], T1.[X_DictionaryWeathering.CustomWeatheringName], T1.[X_DictionaryWeathering.Description], T1.[X_DictionaryWeathering.FullDescription], T1.[X_DictionaryWeathering.Thumbnail], T1.[X_DictionaryWeathering.OriginalFileDataID], T1.[X_DictionaryWeathering.Version], T1.[X_DictionaryWeathering.VersionAntecedentID], T1.[X_DictionaryWeathering.VersionCertainty], T1.[X_DictionaryWeathering.VersionWorkflowInstanceID], T1.[X_DictionaryWeathering.VersionUpdatedBy], T1.[X_DictionaryWeathering.VersionDeletedBy], T1.[X_DictionaryWeathering.VersionOwnerContactID], T1.[X_DictionaryWeathering.VersionOwnerCompanyID], T1.[X_DictionaryWeathering.VersionUpdated])
    FROM (
        SELECT 
            T.WeatheringID AS [X_DictionaryWeathering.WeatheringID], 
            T.StandardWeatheringName AS [X_DictionaryWeathering.StandardWeatheringName], 
            T.CoalWeatheringName AS [X_DictionaryWeathering.CoalWeatheringName], 
            T.GoldWeatheringName AS [X_DictionaryWeathering.GoldWeatheringName], 
            T.CustomWeatheringName AS [X_DictionaryWeathering.CustomWeatheringName], 
            T.Description AS [X_DictionaryWeathering.Description], 
            T.FullDescription AS [X_DictionaryWeathering.FullDescription], 
            T.Thumbnail AS [X_DictionaryWeathering.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryWeathering.OriginalFileDataID], 
            T.Version AS [X_DictionaryWeathering.Version], 
            T.VersionAntecedentID AS [X_DictionaryWeathering.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryWeathering.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryWeathering.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryWeathering.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryWeathering.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryWeathering.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryWeathering.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryWeathering.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryWeatherings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView182()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryWorkType
        [NKD.Module.BusinessObjects.Store.X_DictionaryWorkType](T1.[X_DictionaryWorkType.WorkTypeID], T1.[X_DictionaryWorkType.ProfessionID], T1.[X_DictionaryWorkType.WorkTypeClassID], T1.[X_DictionaryWorkType.WorkTypeName], T1.[X_DictionaryWorkType.WorkTypeDescription], T1.[X_DictionaryWorkType.FullDescription], T1.[X_DictionaryWorkType.Thumbnail], T1.[X_DictionaryWorkType.OriginalFileDataID], T1.[X_DictionaryWorkType.Version], T1.[X_DictionaryWorkType.VersionAntecedentID], T1.[X_DictionaryWorkType.VersionCertainty], T1.[X_DictionaryWorkType.VersionWorkflowInstanceID], T1.[X_DictionaryWorkType.VersionUpdatedBy], T1.[X_DictionaryWorkType.VersionDeletedBy], T1.[X_DictionaryWorkType.VersionOwnerContactID], T1.[X_DictionaryWorkType.VersionOwnerCompanyID], T1.[X_DictionaryWorkType.VersionUpdated])
    FROM (
        SELECT 
            T.WorkTypeID AS [X_DictionaryWorkType.WorkTypeID], 
            T.ProfessionID AS [X_DictionaryWorkType.ProfessionID], 
            T.WorkTypeClassID AS [X_DictionaryWorkType.WorkTypeClassID], 
            T.WorkTypeName AS [X_DictionaryWorkType.WorkTypeName], 
            T.WorkTypeDescription AS [X_DictionaryWorkType.WorkTypeDescription], 
            T.FullDescription AS [X_DictionaryWorkType.FullDescription], 
            T.Thumbnail AS [X_DictionaryWorkType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryWorkType.OriginalFileDataID], 
            T.Version AS [X_DictionaryWorkType.Version], 
            T.VersionAntecedentID AS [X_DictionaryWorkType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryWorkType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryWorkType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryWorkType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryWorkType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryWorkType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryWorkType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryWorkType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryWorkTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeClass.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView183()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryWorkTypeClass
        [NKD.Module.BusinessObjects.Store.X_DictionaryWorkTypeClass](T1.[X_DictionaryWorkTypeClass.WorkTypeClassID], T1.[X_DictionaryWorkTypeClass.WorkTypeClassName], T1.[X_DictionaryWorkTypeClass.Description], T1.[X_DictionaryWorkTypeClass.FullDescription], T1.[X_DictionaryWorkTypeClass.Thumbnail], T1.[X_DictionaryWorkTypeClass.OriginalFileDataID], T1.[X_DictionaryWorkTypeClass.Version], T1.[X_DictionaryWorkTypeClass.VersionAntecedentID], T1.[X_DictionaryWorkTypeClass.VersionCertainty], T1.[X_DictionaryWorkTypeClass.VersionWorkflowInstanceID], T1.[X_DictionaryWorkTypeClass.VersionUpdatedBy], T1.[X_DictionaryWorkTypeClass.VersionDeletedBy], T1.[X_DictionaryWorkTypeClass.VersionOwnerContactID], T1.[X_DictionaryWorkTypeClass.VersionOwnerCompanyID], T1.[X_DictionaryWorkTypeClass.VersionUpdated])
    FROM (
        SELECT 
            T.WorkTypeClassID AS [X_DictionaryWorkTypeClass.WorkTypeClassID], 
            T.WorkTypeClassName AS [X_DictionaryWorkTypeClass.WorkTypeClassName], 
            T.Description AS [X_DictionaryWorkTypeClass.Description], 
            T.FullDescription AS [X_DictionaryWorkTypeClass.FullDescription], 
            T.Thumbnail AS [X_DictionaryWorkTypeClass.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryWorkTypeClass.OriginalFileDataID], 
            T.Version AS [X_DictionaryWorkTypeClass.Version], 
            T.VersionAntecedentID AS [X_DictionaryWorkTypeClass.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryWorkTypeClass.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryWorkTypeClass.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryWorkTypeClass.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryWorkTypeClass.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryWorkTypeClass.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryWorkTypeClass.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryWorkTypeClass.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryWorkTypeClasses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView184()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryWorkTypeRelation
        [NKD.Module.BusinessObjects.Store.X_DictionaryWorkTypeRelation](T1.[X_DictionaryWorkTypeRelation.WorkTypeRelationID], T1.[X_DictionaryWorkTypeRelation.WorkTypeID], T1.[X_DictionaryWorkTypeRelation.ParentWorkTypeID], T1.[X_DictionaryWorkTypeRelation.Version], T1.[X_DictionaryWorkTypeRelation.VersionAntecedentID], T1.[X_DictionaryWorkTypeRelation.VersionCertainty], T1.[X_DictionaryWorkTypeRelation.VersionWorkflowInstanceID], T1.[X_DictionaryWorkTypeRelation.VersionUpdatedBy], T1.[X_DictionaryWorkTypeRelation.VersionDeletedBy], T1.[X_DictionaryWorkTypeRelation.VersionOwnerContactID], T1.[X_DictionaryWorkTypeRelation.VersionOwnerCompanyID], T1.[X_DictionaryWorkTypeRelation.VersionUpdated])
    FROM (
        SELECT 
            T.WorkTypeRelationID AS [X_DictionaryWorkTypeRelation.WorkTypeRelationID], 
            T.WorkTypeID AS [X_DictionaryWorkTypeRelation.WorkTypeID], 
            T.ParentWorkTypeID AS [X_DictionaryWorkTypeRelation.ParentWorkTypeID], 
            T.Version AS [X_DictionaryWorkTypeRelation.Version], 
            T.VersionAntecedentID AS [X_DictionaryWorkTypeRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryWorkTypeRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryWorkTypeRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryWorkTypeRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryWorkTypeRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryWorkTypeRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryWorkTypeRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryWorkTypeRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryWorkTypeRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Drilling.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView185()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Drilling
        [NKD.Module.BusinessObjects.Store.X_Drilling](T1.[X_Drilling.DrillingID], T1.[X_Drilling.HeaderID], T1.[X_Drilling.DrillerFromDepth], T1.[X_Drilling.DrillerToDepth], T1.[X_Drilling.DrillerRecoveredLength], T1.[X_Drilling.RunNumber], T1.[X_Drilling.DrillingDate], T1.[X_Drilling.DrillingCompanyID], T1.[X_Drilling.DrillRigNumber], T1.[X_Drilling.DrillRigTypeID], T1.[X_Drilling.DrillerID], T1.[X_Drilling.DrillBitTypeID], T1.[X_Drilling.DrillFluidID], T1.[X_Drilling.DrillSizeID], T1.[X_Drilling.CoreSize], T1.[X_Drilling.HoleSize], T1.[X_Drilling.Reamed], T1.[X_Drilling.GeologistFromDepth], T1.[X_Drilling.GeologistToDepth], T1.[X_Drilling.GeologistRecoveredLength], T1.[X_Drilling.RockQualityDesignationLength], T1.[X_Drilling.Comment], T1.[X_Drilling.Version], T1.[X_Drilling.VersionAntecedentID], T1.[X_Drilling.VersionCertainty], T1.[X_Drilling.VersionWorkflowInstanceID], T1.[X_Drilling.VersionUpdatedBy], T1.[X_Drilling.VersionDeletedBy], T1.[X_Drilling.VersionOwnerContactID], T1.[X_Drilling.VersionOwnerCompanyID], T1.[X_Drilling.VersionUpdated])
    FROM (
        SELECT 
            T.DrillingID AS [X_Drilling.DrillingID], 
            T.HeaderID AS [X_Drilling.HeaderID], 
            T.DrillerFromDepth AS [X_Drilling.DrillerFromDepth], 
            T.DrillerToDepth AS [X_Drilling.DrillerToDepth], 
            T.DrillerRecoveredLength AS [X_Drilling.DrillerRecoveredLength], 
            T.RunNumber AS [X_Drilling.RunNumber], 
            T.DrillingDate AS [X_Drilling.DrillingDate], 
            T.DrillingCompanyID AS [X_Drilling.DrillingCompanyID], 
            T.DrillRigNumber AS [X_Drilling.DrillRigNumber], 
            T.DrillRigTypeID AS [X_Drilling.DrillRigTypeID], 
            T.DrillerID AS [X_Drilling.DrillerID], 
            T.DrillBitTypeID AS [X_Drilling.DrillBitTypeID], 
            T.DrillFluidID AS [X_Drilling.DrillFluidID], 
            T.DrillSizeID AS [X_Drilling.DrillSizeID], 
            T.CoreSize AS [X_Drilling.CoreSize], 
            T.HoleSize AS [X_Drilling.HoleSize], 
            T.Reamed AS [X_Drilling.Reamed], 
            T.GeologistFromDepth AS [X_Drilling.GeologistFromDepth], 
            T.GeologistToDepth AS [X_Drilling.GeologistToDepth], 
            T.GeologistRecoveredLength AS [X_Drilling.GeologistRecoveredLength], 
            T.RockQualityDesignationLength AS [X_Drilling.RockQualityDesignationLength], 
            T.Comment AS [X_Drilling.Comment], 
            T.Version AS [X_Drilling.Version], 
            T.VersionAntecedentID AS [X_Drilling.VersionAntecedentID], 
            T.VersionCertainty AS [X_Drilling.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Drilling.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Drilling.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Drilling.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Drilling.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Drilling.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Drilling.VersionUpdated], 
            True AS _from0
        FROM NKDC.Drillings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Experience.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView186()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Experience
        [NKD.Module.BusinessObjects.Store.X_Experience](T1.[X_Experience.ExperienceID], T1.[X_Experience.ExperienceName], T1.[X_Experience.ExperienceGroupID], T1.[X_Experience.CompanyID], T1.[X_Experience.ProjectID], T1.[X_Experience.ContactID], T1.[X_Experience.LocationID], T1.[X_Experience.ProvinceID], T1.[X_Experience.LinestringID], T1.[X_Experience.WorkTypeID], T1.[X_Experience.ProfessionID], T1.[X_Experience.PositionID], T1.[X_Experience.ClientAlias], T1.[X_Experience.Division], T1.[X_Experience.OfficeLocationAlias], T1.[X_Experience.ExternalProjectCode], T1.[X_Experience.EstimatedDurationDays], T1.[X_Experience.UserExperienceLevel], T1.[X_Experience.AssignedExperienceLevel], T1.[X_Experience.NormalizedExperienceLevel], T1.[X_Experience.DateStart], T1.[X_Experience.DateFinished], T1.[X_Experience.Expiry], T1.[X_Experience.HourlyRate], T1.[X_Experience.DailyRate], T1.[X_Experience.AnnualRate], T1.[X_Experience.BlendedHourlyRate], T1.[X_Experience.BlendedHourlyCost], T1.[X_Experience.Comment], T1.[X_Experience.IsApproved], T1.[X_Experience.Version], T1.[X_Experience.VersionAntecedentID], T1.[X_Experience.VersionCertainty], T1.[X_Experience.VersionWorkflowInstanceID], T1.[X_Experience.VersionUpdatedBy], T1.[X_Experience.VersionDeletedBy], T1.[X_Experience.VersionOwnerContactID], T1.[X_Experience.VersionOwnerCompanyID], T1.[X_Experience.VersionUpdated])
    FROM (
        SELECT 
            T.ExperienceID AS [X_Experience.ExperienceID], 
            T.ExperienceName AS [X_Experience.ExperienceName], 
            T.ExperienceGroupID AS [X_Experience.ExperienceGroupID], 
            T.CompanyID AS [X_Experience.CompanyID], 
            T.ProjectID AS [X_Experience.ProjectID], 
            T.ContactID AS [X_Experience.ContactID], 
            T.LocationID AS [X_Experience.LocationID], 
            T.ProvinceID AS [X_Experience.ProvinceID], 
            T.LinestringID AS [X_Experience.LinestringID], 
            T.WorkTypeID AS [X_Experience.WorkTypeID], 
            T.ProfessionID AS [X_Experience.ProfessionID], 
            T.PositionID AS [X_Experience.PositionID], 
            T.ClientAlias AS [X_Experience.ClientAlias], 
            T.Division AS [X_Experience.Division], 
            T.OfficeLocationAlias AS [X_Experience.OfficeLocationAlias], 
            T.ExternalProjectCode AS [X_Experience.ExternalProjectCode], 
            T.EstimatedDurationDays AS [X_Experience.EstimatedDurationDays], 
            T.UserExperienceLevel AS [X_Experience.UserExperienceLevel], 
            T.AssignedExperienceLevel AS [X_Experience.AssignedExperienceLevel], 
            T.NormalizedExperienceLevel AS [X_Experience.NormalizedExperienceLevel], 
            T.DateStart AS [X_Experience.DateStart], 
            T.DateFinished AS [X_Experience.DateFinished], 
            T.Expiry AS [X_Experience.Expiry], 
            T.HourlyRate AS [X_Experience.HourlyRate], 
            T.DailyRate AS [X_Experience.DailyRate], 
            T.AnnualRate AS [X_Experience.AnnualRate], 
            T.BlendedHourlyRate AS [X_Experience.BlendedHourlyRate], 
            T.BlendedHourlyCost AS [X_Experience.BlendedHourlyCost], 
            T.Comment AS [X_Experience.Comment], 
            T.IsApproved AS [X_Experience.IsApproved], 
            T.Version AS [X_Experience.Version], 
            T.VersionAntecedentID AS [X_Experience.VersionAntecedentID], 
            T.VersionCertainty AS [X_Experience.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Experience.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Experience.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Experience.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Experience.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Experience.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Experience.VersionUpdated], 
            True AS _from0
        FROM NKDC.Experiences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_FileData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView187()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_FileData
        [NKD.Module.BusinessObjects.Store.X_FileData](T1.[X_FileData.FileDataID], T1.[X_FileData.ParentFileID], T1.[X_FileData.TableType], T1.[X_FileData.ReferenceID], T1.[X_FileData.WorkerID], T1.[X_FileData.FileTypeID], T1.[X_FileData.FileName], T1.[X_FileData.DocumentType], T1.[X_FileData.MimeType], T1.[X_FileData.Author], T1.[X_FileData.FileBytes], T1.[X_FileData.FileContent], T1.[X_FileData.FileChecksum], T1.[X_FileData.FileLength], T1.[X_FileData.Comment], T1.[X_FileData.Version], T1.[X_FileData.VersionAntecedentID], T1.[X_FileData.VersionCertainty], T1.[X_FileData.VersionWorkflowInstanceID], T1.[X_FileData.VersionUpdatedBy], T1.[X_FileData.VersionDeletedBy], T1.[X_FileData.VersionOwnerContactID], T1.[X_FileData.VersionOwnerCompanyID], T1.[X_FileData.VersionUpdated])
    FROM (
        SELECT 
            T.FileDataID AS [X_FileData.FileDataID], 
            T.ParentFileID AS [X_FileData.ParentFileID], 
            T.TableType AS [X_FileData.TableType], 
            T.ReferenceID AS [X_FileData.ReferenceID], 
            T.WorkerID AS [X_FileData.WorkerID], 
            T.FileTypeID AS [X_FileData.FileTypeID], 
            T.FileName AS [X_FileData.FileName], 
            T.DocumentType AS [X_FileData.DocumentType], 
            T.MimeType AS [X_FileData.MimeType], 
            T.Author AS [X_FileData.Author], 
            T.FileBytes AS [X_FileData.FileBytes], 
            T.FileContent AS [X_FileData.FileContent], 
            T.FileChecksum AS [X_FileData.FileChecksum], 
            T.FileLength AS [X_FileData.FileLength], 
            T.Comment AS [X_FileData.Comment], 
            T.Version AS [X_FileData.Version], 
            T.VersionAntecedentID AS [X_FileData.VersionAntecedentID], 
            T.VersionCertainty AS [X_FileData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_FileData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_FileData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_FileData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_FileData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_FileData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_FileData.VersionUpdated], 
            True AS _from0
        FROM NKDC.FileDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Geology.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView188()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Geology
        [NKD.Module.BusinessObjects.Store.X_Geology](T1.[X_Geology.GeologyID], T1.[X_Geology.HeaderID], T1.[X_Geology.GeologyContactID], T1.[X_Geology.FromDepth], T1.[X_Geology.ToDepth], T1.[X_Geology.Comment], T1.[X_Geology.Version], T1.[X_Geology.VersionAntecedentID], T1.[X_Geology.VersionCertainty], T1.[X_Geology.VersionWorkflowInstanceID], T1.[X_Geology.VersionUpdatedBy], T1.[X_Geology.VersionDeletedBy], T1.[X_Geology.VersionOwnerContactID], T1.[X_Geology.VersionOwnerCompanyID], T1.[X_Geology.VersionUpdated])
    FROM (
        SELECT 
            T.GeologyID AS [X_Geology.GeologyID], 
            T.HeaderID AS [X_Geology.HeaderID], 
            T.GeologyContactID AS [X_Geology.GeologyContactID], 
            T.FromDepth AS [X_Geology.FromDepth], 
            T.ToDepth AS [X_Geology.ToDepth], 
            T.Comment AS [X_Geology.Comment], 
            T.Version AS [X_Geology.Version], 
            T.VersionAntecedentID AS [X_Geology.VersionAntecedentID], 
            T.VersionCertainty AS [X_Geology.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Geology.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Geology.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Geology.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Geology.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Geology.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Geology.VersionUpdated], 
            True AS _from0
        FROM NKDC.Geologies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Geophysics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView189()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Geophysics
        [NKD.Module.BusinessObjects.Store.X_Geophysics](T1.[X_Geophysics.GeophysicsID], T1.[X_Geophysics.FileName], T1.[X_Geophysics.OriginalFileDataID], T1.[X_Geophysics.HeaderID], T1.[X_Geophysics.DimensionUnitID], T1.[X_Geophysics.LasVersion], T1.[X_Geophysics.LasFormat], T1.[X_Geophysics.LasWrap], T1.[X_Geophysics.LasDelimiter], T1.[X_Geophysics.LasNullValue], T1.[X_Geophysics.Version], T1.[X_Geophysics.VersionAntecedentID], T1.[X_Geophysics.VersionCertainty], T1.[X_Geophysics.VersionWorkflowInstanceID], T1.[X_Geophysics.VersionUpdatedBy], T1.[X_Geophysics.VersionDeletedBy], T1.[X_Geophysics.VersionOwnerContactID], T1.[X_Geophysics.VersionOwnerCompanyID], T1.[X_Geophysics.VersionUpdated])
    FROM (
        SELECT 
            T.GeophysicsID AS [X_Geophysics.GeophysicsID], 
            T.FileName AS [X_Geophysics.FileName], 
            T.OriginalFileDataID AS [X_Geophysics.OriginalFileDataID], 
            T.HeaderID AS [X_Geophysics.HeaderID], 
            T.DimensionUnitID AS [X_Geophysics.DimensionUnitID], 
            T.LasVersion AS [X_Geophysics.LasVersion], 
            T.LasFormat AS [X_Geophysics.LasFormat], 
            T.LasWrap AS [X_Geophysics.LasWrap], 
            T.LasDelimiter AS [X_Geophysics.LasDelimiter], 
            T.LasNullValue AS [X_Geophysics.LasNullValue], 
            T.Version AS [X_Geophysics.Version], 
            T.VersionAntecedentID AS [X_Geophysics.VersionAntecedentID], 
            T.VersionCertainty AS [X_Geophysics.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Geophysics.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Geophysics.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Geophysics.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Geophysics.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Geophysics.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Geophysics.VersionUpdated], 
            True AS _from0
        FROM NKDC.Geophysics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_GeophysicsData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView190()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_GeophysicsData
        [NKD.Module.BusinessObjects.Store.X_GeophysicsData](T1.[X_GeophysicsData.GeophysicsDataID], T1.[X_GeophysicsData.GeophysicsMetadataID], T1.[X_GeophysicsData.Dimension], T1.[X_GeophysicsData.MeasurementValue], T1.[X_GeophysicsData.MeasurementText], T1.[X_GeophysicsData.Version], T1.[X_GeophysicsData.VersionAntecedentID], T1.[X_GeophysicsData.VersionCertainty], T1.[X_GeophysicsData.VersionWorkflowInstanceID], T1.[X_GeophysicsData.VersionUpdatedBy], T1.[X_GeophysicsData.VersionDeletedBy], T1.[X_GeophysicsData.VersionOwnerContactID], T1.[X_GeophysicsData.VersionOwnerCompanyID], T1.[X_GeophysicsData.VersionUpdated])
    FROM (
        SELECT 
            T.GeophysicsDataID AS [X_GeophysicsData.GeophysicsDataID], 
            T.GeophysicsMetadataID AS [X_GeophysicsData.GeophysicsMetadataID], 
            T.Dimension AS [X_GeophysicsData.Dimension], 
            T.MeasurementValue AS [X_GeophysicsData.MeasurementValue], 
            T.MeasurementText AS [X_GeophysicsData.MeasurementText], 
            T.Version AS [X_GeophysicsData.Version], 
            T.VersionAntecedentID AS [X_GeophysicsData.VersionAntecedentID], 
            T.VersionCertainty AS [X_GeophysicsData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_GeophysicsData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_GeophysicsData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_GeophysicsData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_GeophysicsData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_GeophysicsData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_GeophysicsData.VersionUpdated], 
            True AS _from0
        FROM NKDC.GeophysicsDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_GeophysicsMetadata.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView191()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_GeophysicsMetadata
        [NKD.Module.BusinessObjects.Store.X_GeophysicsMetadata](T1.[X_GeophysicsMetadata.GeophysicsMetadataID], T1.[X_GeophysicsMetadata.GeophysicsID], T1.[X_GeophysicsMetadata.ParameterID], T1.[X_GeophysicsMetadata.Mnemonic], T1.[X_GeophysicsMetadata.Unit], T1.[X_GeophysicsMetadata.Data], T1.[X_GeophysicsMetadata.Code], T1.[X_GeophysicsMetadata.Description], T1.[X_GeophysicsMetadata.Format], T1.[X_GeophysicsMetadata.Version], T1.[X_GeophysicsMetadata.VersionAntecedentID], T1.[X_GeophysicsMetadata.VersionCertainty], T1.[X_GeophysicsMetadata.VersionWorkflowInstanceID], T1.[X_GeophysicsMetadata.VersionUpdatedBy], T1.[X_GeophysicsMetadata.VersionDeletedBy], T1.[X_GeophysicsMetadata.VersionOwnerContactID], T1.[X_GeophysicsMetadata.VersionOwnerCompanyID], T1.[X_GeophysicsMetadata.VersionUpdated])
    FROM (
        SELECT 
            T.GeophysicsMetadataID AS [X_GeophysicsMetadata.GeophysicsMetadataID], 
            T.GeophysicsID AS [X_GeophysicsMetadata.GeophysicsID], 
            T.ParameterID AS [X_GeophysicsMetadata.ParameterID], 
            T.Mnemonic AS [X_GeophysicsMetadata.Mnemonic], 
            T.Unit AS [X_GeophysicsMetadata.Unit], 
            T.Data AS [X_GeophysicsMetadata.Data], 
            T.Code AS [X_GeophysicsMetadata.Code], 
            T.Description AS [X_GeophysicsMetadata.Description], 
            T.Format AS [X_GeophysicsMetadata.Format], 
            T.Version AS [X_GeophysicsMetadata.Version], 
            T.VersionAntecedentID AS [X_GeophysicsMetadata.VersionAntecedentID], 
            T.VersionCertainty AS [X_GeophysicsMetadata.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_GeophysicsMetadata.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_GeophysicsMetadata.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_GeophysicsMetadata.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_GeophysicsMetadata.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_GeophysicsMetadata.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_GeophysicsMetadata.VersionUpdated], 
            True AS _from0
        FROM NKDC.GeophysicsMetadatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Header.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView192()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Header
        [NKD.Module.BusinessObjects.Store.X_Header](T1.[X_Header.HeaderID], T1.[X_Header.ProjectID], T1.[X_Header.HoleName], T1.[X_Header.Site], T1.[X_Header.HoleTypeID], T1.[X_Header.DataStatusID], T1.[X_Header.PrimaryHolePurposeID], T1.[X_Header.SurveyAccuracyID], T1.[X_Header.GeodeticDatumID], T1.[X_Header.UtmZoneNumber], T1.[X_Header.UtmZoneHemisphere], T1.[X_Header.HeightDatumID], T1.[X_Header.EastingUtm], T1.[X_Header.NorthingUtm], T1.[X_Header.Elevation], T1.[X_Header.Inclination], T1.[X_Header.Azimuth], T1.[X_Header.LocationID], T1.[X_Header.StartDate], T1.[X_Header.CompleteDate], T1.[X_Header.TotalDepth], T1.[X_Header.HoleRedrilled], T1.[X_Header.GeologyCompanyID], T1.[X_Header.HasHadGeotechLogs], T1.[X_Header.HasHadCorePhotos], T1.[X_Header.DefaultGeophysicalLoggingCompanyID], T1.[X_Header.DefaultGeophysicalLoggerID], T1.[X_Header.StandingWaterLevel], T1.[X_Header.StandingWaterLevelDate], T1.[X_Header.DateRehabilitated], T1.[X_Header.HoleStatusID], T1.[X_Header.Comment], T1.[X_Header.Version], T1.[X_Header.VersionAntecedentID], T1.[X_Header.VersionCertainty], T1.[X_Header.VersionWorkflowInstanceID], T1.[X_Header.VersionUpdatedBy], T1.[X_Header.VersionDeletedBy], T1.[X_Header.VersionOwnerContactID], T1.[X_Header.VersionOwnerCompanyID], T1.[X_Header.VersionUpdated])
    FROM (
        SELECT 
            T.HeaderID AS [X_Header.HeaderID], 
            T.ProjectID AS [X_Header.ProjectID], 
            T.HoleName AS [X_Header.HoleName], 
            T.Site AS [X_Header.Site], 
            T.HoleTypeID AS [X_Header.HoleTypeID], 
            T.DataStatusID AS [X_Header.DataStatusID], 
            T.PrimaryHolePurposeID AS [X_Header.PrimaryHolePurposeID], 
            T.SurveyAccuracyID AS [X_Header.SurveyAccuracyID], 
            T.GeodeticDatumID AS [X_Header.GeodeticDatumID], 
            T.UtmZoneNumber AS [X_Header.UtmZoneNumber], 
            T.UtmZoneHemisphere AS [X_Header.UtmZoneHemisphere], 
            T.HeightDatumID AS [X_Header.HeightDatumID], 
            T.EastingUtm AS [X_Header.EastingUtm], 
            T.NorthingUtm AS [X_Header.NorthingUtm], 
            T.Elevation AS [X_Header.Elevation], 
            T.Inclination AS [X_Header.Inclination], 
            T.Azimuth AS [X_Header.Azimuth], 
            T.LocationID AS [X_Header.LocationID], 
            T.StartDate AS [X_Header.StartDate], 
            T.CompleteDate AS [X_Header.CompleteDate], 
            T.TotalDepth AS [X_Header.TotalDepth], 
            T.HoleRedrilled AS [X_Header.HoleRedrilled], 
            T.GeologyCompanyID AS [X_Header.GeologyCompanyID], 
            T.HasHadGeotechLogs AS [X_Header.HasHadGeotechLogs], 
            T.HasHadCorePhotos AS [X_Header.HasHadCorePhotos], 
            T.DefaultGeophysicalLoggingCompanyID AS [X_Header.DefaultGeophysicalLoggingCompanyID], 
            T.DefaultGeophysicalLoggerID AS [X_Header.DefaultGeophysicalLoggerID], 
            T.StandingWaterLevel AS [X_Header.StandingWaterLevel], 
            T.StandingWaterLevelDate AS [X_Header.StandingWaterLevelDate], 
            T.DateRehabilitated AS [X_Header.DateRehabilitated], 
            T.HoleStatusID AS [X_Header.HoleStatusID], 
            T.Comment AS [X_Header.Comment], 
            T.Version AS [X_Header.Version], 
            T.VersionAntecedentID AS [X_Header.VersionAntecedentID], 
            T.VersionCertainty AS [X_Header.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Header.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Header.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Header.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Header.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Header.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Header.VersionUpdated], 
            True AS _from0
        FROM NKDC.Headers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_HeaderGeophysicalLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView193()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_HeaderGeophysicalLog
        [NKD.Module.BusinessObjects.Store.X_HeaderGeophysicalLog](T1.[X_HeaderGeophysicalLog.HeaderGeophysicalLogID], T1.[X_HeaderGeophysicalLog.HeaderID], T1.[X_HeaderGeophysicalLog.GeophysicalLogTypeID], T1.[X_HeaderGeophysicalLog.Sequence], T1.[X_HeaderGeophysicalLog.GeophysicalLoggingCompanyID], T1.[X_HeaderGeophysicalLog.GeophysicalLoggerID], T1.[X_HeaderGeophysicalLog.Version], T1.[X_HeaderGeophysicalLog.VersionAntecedentID], T1.[X_HeaderGeophysicalLog.VersionCertainty], T1.[X_HeaderGeophysicalLog.VersionWorkflowInstanceID], T1.[X_HeaderGeophysicalLog.VersionUpdatedBy], T1.[X_HeaderGeophysicalLog.VersionDeletedBy], T1.[X_HeaderGeophysicalLog.VersionOwnerContactID], T1.[X_HeaderGeophysicalLog.VersionOwnerCompanyID], T1.[X_HeaderGeophysicalLog.VersionUpdated])
    FROM (
        SELECT 
            T.HeaderGeophysicalLogID AS [X_HeaderGeophysicalLog.HeaderGeophysicalLogID], 
            T.HeaderID AS [X_HeaderGeophysicalLog.HeaderID], 
            T.GeophysicalLogTypeID AS [X_HeaderGeophysicalLog.GeophysicalLogTypeID], 
            T.Sequence AS [X_HeaderGeophysicalLog.Sequence], 
            T.GeophysicalLoggingCompanyID AS [X_HeaderGeophysicalLog.GeophysicalLoggingCompanyID], 
            T.GeophysicalLoggerID AS [X_HeaderGeophysicalLog.GeophysicalLoggerID], 
            T.Version AS [X_HeaderGeophysicalLog.Version], 
            T.VersionAntecedentID AS [X_HeaderGeophysicalLog.VersionAntecedentID], 
            T.VersionCertainty AS [X_HeaderGeophysicalLog.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_HeaderGeophysicalLog.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_HeaderGeophysicalLog.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_HeaderGeophysicalLog.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_HeaderGeophysicalLog.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_HeaderGeophysicalLog.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_HeaderGeophysicalLog.VersionUpdated], 
            True AS _from0
        FROM NKDC.HeaderGeophysicalLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_HeaderRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView194()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_HeaderRelation
        [NKD.Module.BusinessObjects.Store.X_HeaderRelation](T1.[X_HeaderRelation.HeaderRelationID], T1.[X_HeaderRelation.OriginalHeaderID], T1.[X_HeaderRelation.RelatedHeaderID], T1.[X_HeaderRelation.RelationTypeID], T1.[X_HeaderRelation.Related], T1.[X_HeaderRelation.Version], T1.[X_HeaderRelation.VersionAntecedentID], T1.[X_HeaderRelation.VersionCertainty], T1.[X_HeaderRelation.VersionWorkflowInstanceID], T1.[X_HeaderRelation.VersionUpdatedBy], T1.[X_HeaderRelation.VersionDeletedBy], T1.[X_HeaderRelation.VersionOwnerContactID], T1.[X_HeaderRelation.VersionOwnerCompanyID], T1.[X_HeaderRelation.VersionUpdated])
    FROM (
        SELECT 
            T.HeaderRelationID AS [X_HeaderRelation.HeaderRelationID], 
            T.OriginalHeaderID AS [X_HeaderRelation.OriginalHeaderID], 
            T.RelatedHeaderID AS [X_HeaderRelation.RelatedHeaderID], 
            T.RelationTypeID AS [X_HeaderRelation.RelationTypeID], 
            T.Related AS [X_HeaderRelation.Related], 
            T.Version AS [X_HeaderRelation.Version], 
            T.VersionAntecedentID AS [X_HeaderRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_HeaderRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_HeaderRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_HeaderRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_HeaderRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_HeaderRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_HeaderRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_HeaderRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.HeaderRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Interpretation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView195()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Interpretation
        [NKD.Module.BusinessObjects.Store.X_Interpretation](T1.[X_Interpretation.InterpretationID], T1.[X_Interpretation.FromDepth], T1.[X_Interpretation.ToDepth], T1.[X_Interpretation.TopX], T1.[X_Interpretation.TopY], T1.[X_Interpretation.TopZ], T1.[X_Interpretation.CentroidX], T1.[X_Interpretation.CentroidY], T1.[X_Interpretation.CentroidZ], T1.[X_Interpretation.BottomX], T1.[X_Interpretation.BottomY], T1.[X_Interpretation.BottomZ], T1.[X_Interpretation.DesurveyID], T1.[X_Interpretation.HeaderID], T1.[X_Interpretation.AssayGroupTestSampleID], T1.[X_Interpretation.CasingID], T1.[X_Interpretation.CementingID], T1.[X_Interpretation.DefectID], T1.[X_Interpretation.DrillingID], T1.[X_Interpretation.GeologyID], T1.[X_Interpretation.GeophysicsDataID], T1.[X_Interpretation.LithologyID], T1.[X_Interpretation.SeamID], T1.[X_Interpretation.PlyID], T1.[X_Interpretation.MineralogyID], T1.[X_Interpretation.PointLoadID], T1.[X_Interpretation.RecoveryID], T1.[X_Interpretation.BlockModelBlockID], T1.[X_Interpretation.Version], T1.[X_Interpretation.VersionAntecedentID], T1.[X_Interpretation.VersionCertainty], T1.[X_Interpretation.VersionWorkflowInstanceID], T1.[X_Interpretation.VersionUpdatedBy], T1.[X_Interpretation.VersionDeletedBy], T1.[X_Interpretation.VersionOwnerContactID], T1.[X_Interpretation.VersionOwnerCompanyID], T1.[X_Interpretation.VersionUpdated])
    FROM (
        SELECT 
            T.InterpretationID AS [X_Interpretation.InterpretationID], 
            T.FromDepth AS [X_Interpretation.FromDepth], 
            T.ToDepth AS [X_Interpretation.ToDepth], 
            T.TopX AS [X_Interpretation.TopX], 
            T.TopY AS [X_Interpretation.TopY], 
            T.TopZ AS [X_Interpretation.TopZ], 
            T.CentroidX AS [X_Interpretation.CentroidX], 
            T.CentroidY AS [X_Interpretation.CentroidY], 
            T.CentroidZ AS [X_Interpretation.CentroidZ], 
            T.BottomX AS [X_Interpretation.BottomX], 
            T.BottomY AS [X_Interpretation.BottomY], 
            T.BottomZ AS [X_Interpretation.BottomZ], 
            T.DesurveyID AS [X_Interpretation.DesurveyID], 
            T.HeaderID AS [X_Interpretation.HeaderID], 
            T.AssayGroupTestSampleID AS [X_Interpretation.AssayGroupTestSampleID], 
            T.CasingID AS [X_Interpretation.CasingID], 
            T.CementingID AS [X_Interpretation.CementingID], 
            T.DefectID AS [X_Interpretation.DefectID], 
            T.DrillingID AS [X_Interpretation.DrillingID], 
            T.GeologyID AS [X_Interpretation.GeologyID], 
            T.GeophysicsDataID AS [X_Interpretation.GeophysicsDataID], 
            T.LithologyID AS [X_Interpretation.LithologyID], 
            T.SeamID AS [X_Interpretation.SeamID], 
            T.PlyID AS [X_Interpretation.PlyID], 
            T.MineralogyID AS [X_Interpretation.MineralogyID], 
            T.PointLoadID AS [X_Interpretation.PointLoadID], 
            T.RecoveryID AS [X_Interpretation.RecoveryID], 
            T.BlockModelBlockID AS [X_Interpretation.BlockModelBlockID], 
            T.Version AS [X_Interpretation.Version], 
            T.VersionAntecedentID AS [X_Interpretation.VersionAntecedentID], 
            T.VersionCertainty AS [X_Interpretation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Interpretation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Interpretation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Interpretation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Interpretation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Interpretation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Interpretation.VersionUpdated], 
            True AS _from0
        FROM NKDC.Interpretations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_InterpretationData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView196()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_InterpretationData
        [NKD.Module.BusinessObjects.Store.X_InterpretationData](T1.[X_InterpretationData.InterpretationDataID], T1.[X_InterpretationData.InterpretationID], T1.[X_InterpretationData.ParameterID], T1.[X_InterpretationData.InterpretationDataText], T1.[X_InterpretationData.InterpretationDataValue], T1.[X_InterpretationData.Version], T1.[X_InterpretationData.VersionAntecedentID], T1.[X_InterpretationData.VersionCertainty], T1.[X_InterpretationData.VersionWorkflowInstanceID], T1.[X_InterpretationData.VersionUpdatedBy], T1.[X_InterpretationData.VersionDeletedBy], T1.[X_InterpretationData.VersionOwnerContactID], T1.[X_InterpretationData.VersionOwnerCompanyID], T1.[X_InterpretationData.VersionUpdated])
    FROM (
        SELECT 
            T.InterpretationDataID AS [X_InterpretationData.InterpretationDataID], 
            T.InterpretationID AS [X_InterpretationData.InterpretationID], 
            T.ParameterID AS [X_InterpretationData.ParameterID], 
            T.InterpretationDataText AS [X_InterpretationData.InterpretationDataText], 
            T.InterpretationDataValue AS [X_InterpretationData.InterpretationDataValue], 
            T.Version AS [X_InterpretationData.Version], 
            T.VersionAntecedentID AS [X_InterpretationData.VersionAntecedentID], 
            T.VersionCertainty AS [X_InterpretationData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_InterpretationData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_InterpretationData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_InterpretationData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_InterpretationData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_InterpretationData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_InterpretationData.VersionUpdated], 
            True AS _from0
        FROM NKDC.InterpretationDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Lease.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView197()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Lease
        [NKD.Module.BusinessObjects.Store.X_Lease](T1.[X_Lease.LeaseID], T1.[X_Lease.TenementID], T1.[X_Lease.LeaseNumber], T1.[X_Lease.OwnerCompanyID], T1.[X_Lease.ApprovedByContactID], T1.[X_Lease.ValidFrom], T1.[X_Lease.Expiry], T1.[X_Lease.Comment], T1.[X_Lease.Version], T1.[X_Lease.VersionAntecedentID], T1.[X_Lease.VersionCertainty], T1.[X_Lease.VersionWorkflowInstanceID], T1.[X_Lease.VersionUpdatedBy], T1.[X_Lease.VersionDeletedBy], T1.[X_Lease.VersionOwnerContactID], T1.[X_Lease.VersionOwnerCompanyID], T1.[X_Lease.VersionUpdated])
    FROM (
        SELECT 
            T.LeaseID AS [X_Lease.LeaseID], 
            T.TenementID AS [X_Lease.TenementID], 
            T.LeaseNumber AS [X_Lease.LeaseNumber], 
            T.OwnerCompanyID AS [X_Lease.OwnerCompanyID], 
            T.ApprovedByContactID AS [X_Lease.ApprovedByContactID], 
            T.ValidFrom AS [X_Lease.ValidFrom], 
            T.Expiry AS [X_Lease.Expiry], 
            T.Comment AS [X_Lease.Comment], 
            T.Version AS [X_Lease.Version], 
            T.VersionAntecedentID AS [X_Lease.VersionAntecedentID], 
            T.VersionCertainty AS [X_Lease.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Lease.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Lease.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Lease.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Lease.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Lease.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Lease.VersionUpdated], 
            True AS _from0
        FROM NKDC.Leases AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LeaseApplication.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView198()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LeaseApplication
        [NKD.Module.BusinessObjects.Store.X_LeaseApplication](T1.[X_LeaseApplication.LeaseApplicationID], T1.[X_LeaseApplication.TenementID], T1.[X_LeaseApplication.LeaseApplicationTypeID], T1.[X_LeaseApplication.LeaseApplicationNumber], T1.[X_LeaseApplication.OwnerCompanyID], T1.[X_LeaseApplication.OfficeOfApproval], T1.[X_LeaseApplication.Approved], T1.[X_LeaseApplication.ApprovedByContactID], T1.[X_LeaseApplication.ValidFrom], T1.[X_LeaseApplication.Expiry], T1.[X_LeaseApplication.Comment], T1.[X_LeaseApplication.Version], T1.[X_LeaseApplication.VersionAntecedentID], T1.[X_LeaseApplication.VersionCertainty], T1.[X_LeaseApplication.VersionWorkflowInstanceID], T1.[X_LeaseApplication.VersionUpdatedBy], T1.[X_LeaseApplication.VersionDeletedBy], T1.[X_LeaseApplication.VersionOwnerContactID], T1.[X_LeaseApplication.VersionOwnerCompanyID], T1.[X_LeaseApplication.VersionUpdated])
    FROM (
        SELECT 
            T.LeaseApplicationID AS [X_LeaseApplication.LeaseApplicationID], 
            T.TenementID AS [X_LeaseApplication.TenementID], 
            T.LeaseApplicationTypeID AS [X_LeaseApplication.LeaseApplicationTypeID], 
            T.LeaseApplicationNumber AS [X_LeaseApplication.LeaseApplicationNumber], 
            T.OwnerCompanyID AS [X_LeaseApplication.OwnerCompanyID], 
            T.OfficeOfApproval AS [X_LeaseApplication.OfficeOfApproval], 
            T.Approved AS [X_LeaseApplication.Approved], 
            T.ApprovedByContactID AS [X_LeaseApplication.ApprovedByContactID], 
            T.ValidFrom AS [X_LeaseApplication.ValidFrom], 
            T.Expiry AS [X_LeaseApplication.Expiry], 
            T.Comment AS [X_LeaseApplication.Comment], 
            T.Version AS [X_LeaseApplication.Version], 
            T.VersionAntecedentID AS [X_LeaseApplication.VersionAntecedentID], 
            T.VersionCertainty AS [X_LeaseApplication.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LeaseApplication.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LeaseApplication.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LeaseApplication.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LeaseApplication.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LeaseApplication.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LeaseApplication.VersionUpdated], 
            True AS _from0
        FROM NKDC.LeaseApplications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_License.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView199()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_License
        [NKD.Module.BusinessObjects.Store.X_License](T1.[X_License.LicenseID], T1.[X_License.CompanyID], T1.[X_License.ContactID], T1.[X_License.LicenseeGUID], T1.[X_License.LicenseeName], T1.[X_License.LicenseeUsername], T1.[X_License.LicenseeUniqueMachineCode1], T1.[X_License.LicenseeUniqueMachineCode2], T1.[X_License.LicenseeGroupID], T1.[X_License.LicensorIP], T1.[X_License.LicensorName], T1.[X_License.LicenseTypeID], T1.[X_License.LicenseType], T1.[X_License.LicenseURL], T1.[X_License.RootServerName], T1.[X_License.RootServerID], T1.[X_License.ServerName], T1.[X_License.ServerID], T1.[X_License.ApplicationID], T1.[X_License.ServiceAuthenticationMethod], T1.[X_License.ServiceAuthorisationMethod], T1.[X_License.ValidFrom], T1.[X_License.Expiry], T1.[X_License.SupportExpiry], T1.[X_License.ValidForDuration], T1.[X_License.ValidForUnitID], T1.[X_License.ValidForUnitTarget], T1.[X_License.VersionMajor], T1.[X_License.VersionMinor], T1.[X_License.VersionBuild], T1.[X_License.SupportedToMajor], T1.[X_License.SupportedToMinor], T1.[X_License.SupportedToBuild], T1.[X_License.Nuked], T1.[X_License.NukedReason], T1.[X_License.TimeServerID], T1.[X_License.TimeServerName], T1.[X_License.TimeServerResolutionMask], T1.[X_License.TimeServerIP], T1.[X_License.PreAuthorizationCode], T1.[X_License.PreAuthorizationExecuted], T1.[X_License.Signatory1], T1.[X_License.Signatory2], T1.[X_License.Signatory3], T1.[X_License.Signature1], T1.[X_License.Signature2], T1.[X_License.Signature3], T1.[X_License.Received], T1.[X_License.CheckedIn], T1.[X_License.LicenceeCertificate], T1.[X_License.LicensorCertificate], T1.[X_License.ChecksumType], T1.[X_License.Checksum], T1.[X_License.EncryptedKey], T1.[X_License.LicenseKeyCode], T1.[X_License.Version], T1.[X_License.VersionAntecedentID], T1.[X_License.VersionCertainty], T1.[X_License.VersionWorkflowInstanceID], T1.[X_License.VersionUpdatedBy], T1.[X_License.VersionDeletedBy], T1.[X_License.VersionOwnerContactID], T1.[X_License.VersionOwnerCompanyID], T1.[X_License.VersionUpdated])
    FROM (
        SELECT 
            T.LicenseID AS [X_License.LicenseID], 
            T.CompanyID AS [X_License.CompanyID], 
            T.ContactID AS [X_License.ContactID], 
            T.LicenseeGUID AS [X_License.LicenseeGUID], 
            T.LicenseeName AS [X_License.LicenseeName], 
            T.LicenseeUsername AS [X_License.LicenseeUsername], 
            T.LicenseeUniqueMachineCode1 AS [X_License.LicenseeUniqueMachineCode1], 
            T.LicenseeUniqueMachineCode2 AS [X_License.LicenseeUniqueMachineCode2], 
            T.LicenseeGroupID AS [X_License.LicenseeGroupID], 
            T.LicensorIP AS [X_License.LicensorIP], 
            T.LicensorName AS [X_License.LicensorName], 
            T.LicenseTypeID AS [X_License.LicenseTypeID], 
            T.LicenseType AS [X_License.LicenseType], 
            T.LicenseURL AS [X_License.LicenseURL], 
            T.RootServerName AS [X_License.RootServerName], 
            T.RootServerID AS [X_License.RootServerID], 
            T.ServerName AS [X_License.ServerName], 
            T.ServerID AS [X_License.ServerID], 
            T.ApplicationID AS [X_License.ApplicationID], 
            T.ServiceAuthenticationMethod AS [X_License.ServiceAuthenticationMethod], 
            T.ServiceAuthorisationMethod AS [X_License.ServiceAuthorisationMethod], 
            T.ValidFrom AS [X_License.ValidFrom], 
            T.Expiry AS [X_License.Expiry], 
            T.SupportExpiry AS [X_License.SupportExpiry], 
            T.ValidForDuration AS [X_License.ValidForDuration], 
            T.ValidForUnitID AS [X_License.ValidForUnitID], 
            T.ValidForUnitTarget AS [X_License.ValidForUnitTarget], 
            T.VersionMajor AS [X_License.VersionMajor], 
            T.VersionMinor AS [X_License.VersionMinor], 
            T.VersionBuild AS [X_License.VersionBuild], 
            T.SupportedToMajor AS [X_License.SupportedToMajor], 
            T.SupportedToMinor AS [X_License.SupportedToMinor], 
            T.SupportedToBuild AS [X_License.SupportedToBuild], 
            T.Nuked AS [X_License.Nuked], 
            T.NukedReason AS [X_License.NukedReason], 
            T.TimeServerID AS [X_License.TimeServerID], 
            T.TimeServerName AS [X_License.TimeServerName], 
            T.TimeServerResolutionMask AS [X_License.TimeServerResolutionMask], 
            T.TimeServerIP AS [X_License.TimeServerIP], 
            T.PreAuthorizationCode AS [X_License.PreAuthorizationCode], 
            T.PreAuthorizationExecuted AS [X_License.PreAuthorizationExecuted], 
            T.Signatory1 AS [X_License.Signatory1], 
            T.Signatory2 AS [X_License.Signatory2], 
            T.Signatory3 AS [X_License.Signatory3], 
            T.Signature1 AS [X_License.Signature1], 
            T.Signature2 AS [X_License.Signature2], 
            T.Signature3 AS [X_License.Signature3], 
            T.Received AS [X_License.Received], 
            T.CheckedIn AS [X_License.CheckedIn], 
            T.LicenceeCertificate AS [X_License.LicenceeCertificate], 
            T.LicensorCertificate AS [X_License.LicensorCertificate], 
            T.ChecksumType AS [X_License.ChecksumType], 
            T.Checksum AS [X_License.Checksum], 
            T.EncryptedKey AS [X_License.EncryptedKey], 
            T.LicenseKeyCode AS [X_License.LicenseKeyCode], 
            T.Version AS [X_License.Version], 
            T.VersionAntecedentID AS [X_License.VersionAntecedentID], 
            T.VersionCertainty AS [X_License.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_License.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_License.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_License.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_License.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_License.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_License.VersionUpdated], 
            True AS _from0
        FROM NKDC.Licenses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LicenseAsset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView200()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LicenseAsset
        [NKD.Module.BusinessObjects.Store.X_LicenseAsset](T1.[X_LicenseAsset.LicenseAssetID], T1.[X_LicenseAsset.LicenseID], T1.[X_LicenseAsset.AssetID], T1.[X_LicenseAsset.ModelID], T1.[X_LicenseAsset.Restrictions], T1.[X_LicenseAsset.Version], T1.[X_LicenseAsset.VersionAntecedentID], T1.[X_LicenseAsset.VersionCertainty], T1.[X_LicenseAsset.VersionWorkflowInstanceID], T1.[X_LicenseAsset.VersionUpdatedBy], T1.[X_LicenseAsset.VersionDeletedBy], T1.[X_LicenseAsset.VersionOwnerContactID], T1.[X_LicenseAsset.VersionOwnerCompanyID], T1.[X_LicenseAsset.VersionUpdated])
    FROM (
        SELECT 
            T.LicenseAssetID AS [X_LicenseAsset.LicenseAssetID], 
            T.LicenseID AS [X_LicenseAsset.LicenseID], 
            T.AssetID AS [X_LicenseAsset.AssetID], 
            T.ModelID AS [X_LicenseAsset.ModelID], 
            T.Restrictions AS [X_LicenseAsset.Restrictions], 
            T.Version AS [X_LicenseAsset.Version], 
            T.VersionAntecedentID AS [X_LicenseAsset.VersionAntecedentID], 
            T.VersionCertainty AS [X_LicenseAsset.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LicenseAsset.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LicenseAsset.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LicenseAsset.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LicenseAsset.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LicenseAsset.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LicenseAsset.VersionUpdated], 
            True AS _from0
        FROM NKDC.LicenseAssets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Lithology.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView201()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Lithology
        [NKD.Module.BusinessObjects.Store.X_Lithology](T1.[X_Lithology.LithologyID], T1.[X_Lithology.HeaderID], T1.[X_Lithology.FromDepth], T1.[X_Lithology.ToDepth], T1.[X_Lithology.RecoveredThickness], T1.[X_Lithology.DomainID], T1.[X_Lithology.SeamID], T1.[X_Lithology.PlyID], T1.[X_Lithology.StratigraphyID], T1.[X_Lithology.HorizonID], T1.[X_Lithology.SampleTypeID], T1.[X_Lithology.SampleNumber], T1.[X_Lithology.SampleMassKg], T1.[X_Lithology.IntervalStatusID], T1.[X_Lithology.LithologyPercentage], T1.[X_Lithology.LithologyTypeID], T1.[X_Lithology.LithologyQualifierID], T1.[X_Lithology.ShadeID], T1.[X_Lithology.HueID], T1.[X_Lithology.ColourID], T1.[X_Lithology.PrimaryAdjectiveID], T1.[X_Lithology.LithologyInterrelationID], T1.[X_Lithology.WeatheringID], T1.[X_Lithology.EstimatedStrengthID], T1.[X_Lithology.BedSpacingID], T1.[X_Lithology.DefectTypeID], T1.[X_Lithology.DefectCompletenessID], T1.[X_Lithology.DefectSpacingID], T1.[X_Lithology.DefectDip], T1.[X_Lithology.CoreStateID], T1.[X_Lithology.MechanicalStateID], T1.[X_Lithology.TextureID], T1.[X_Lithology.BasalContactID], T1.[X_Lithology.PrimarySedimentaryFeatureID], T1.[X_Lithology.BeddingDip], T1.[X_Lithology.MineralAndFossilAbundanceID], T1.[X_Lithology.MineralAndFossilTypeID], T1.[X_Lithology.MineralAndFossilAssociationID], T1.[X_Lithology.GasDetectedID], T1.[X_Lithology.Description], T1.[X_Lithology.Version], T1.[X_Lithology.VersionAntecedentID], T1.[X_Lithology.VersionCertainty], T1.[X_Lithology.VersionWorkflowInstanceID], T1.[X_Lithology.VersionUpdatedBy], T1.[X_Lithology.VersionDeletedBy], T1.[X_Lithology.VersionOwnerContactID], T1.[X_Lithology.VersionOwnerCompanyID], T1.[X_Lithology.VersionUpdated])
    FROM (
        SELECT 
            T.LithologyID AS [X_Lithology.LithologyID], 
            T.HeaderID AS [X_Lithology.HeaderID], 
            T.FromDepth AS [X_Lithology.FromDepth], 
            T.ToDepth AS [X_Lithology.ToDepth], 
            T.RecoveredThickness AS [X_Lithology.RecoveredThickness], 
            T.DomainID AS [X_Lithology.DomainID], 
            T.SeamID AS [X_Lithology.SeamID], 
            T.PlyID AS [X_Lithology.PlyID], 
            T.StratigraphyID AS [X_Lithology.StratigraphyID], 
            T.HorizonID AS [X_Lithology.HorizonID], 
            T.SampleTypeID AS [X_Lithology.SampleTypeID], 
            T.SampleNumber AS [X_Lithology.SampleNumber], 
            T.SampleMassKg AS [X_Lithology.SampleMassKg], 
            T.IntervalStatusID AS [X_Lithology.IntervalStatusID], 
            T.LithologyPercentage AS [X_Lithology.LithologyPercentage], 
            T.LithologyTypeID AS [X_Lithology.LithologyTypeID], 
            T.LithologyQualifierID AS [X_Lithology.LithologyQualifierID], 
            T.ShadeID AS [X_Lithology.ShadeID], 
            T.HueID AS [X_Lithology.HueID], 
            T.ColourID AS [X_Lithology.ColourID], 
            T.PrimaryAdjectiveID AS [X_Lithology.PrimaryAdjectiveID], 
            T.LithologyInterrelationID AS [X_Lithology.LithologyInterrelationID], 
            T.WeatheringID AS [X_Lithology.WeatheringID], 
            T.EstimatedStrengthID AS [X_Lithology.EstimatedStrengthID], 
            T.BedSpacingID AS [X_Lithology.BedSpacingID], 
            T.DefectTypeID AS [X_Lithology.DefectTypeID], 
            T.DefectCompletenessID AS [X_Lithology.DefectCompletenessID], 
            T.DefectSpacingID AS [X_Lithology.DefectSpacingID], 
            T.DefectDip AS [X_Lithology.DefectDip], 
            T.CoreStateID AS [X_Lithology.CoreStateID], 
            T.MechanicalStateID AS [X_Lithology.MechanicalStateID], 
            T.TextureID AS [X_Lithology.TextureID], 
            T.BasalContactID AS [X_Lithology.BasalContactID], 
            T.PrimarySedimentaryFeatureID AS [X_Lithology.PrimarySedimentaryFeatureID], 
            T.BeddingDip AS [X_Lithology.BeddingDip], 
            T.MineralAndFossilAbundanceID AS [X_Lithology.MineralAndFossilAbundanceID], 
            T.MineralAndFossilTypeID AS [X_Lithology.MineralAndFossilTypeID], 
            T.MineralAndFossilAssociationID AS [X_Lithology.MineralAndFossilAssociationID], 
            T.GasDetectedID AS [X_Lithology.GasDetectedID], 
            T.Description AS [X_Lithology.Description], 
            T.Version AS [X_Lithology.Version], 
            T.VersionAntecedentID AS [X_Lithology.VersionAntecedentID], 
            T.VersionCertainty AS [X_Lithology.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Lithology.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Lithology.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Lithology.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Lithology.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Lithology.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Lithology.VersionUpdated], 
            True AS _from0
        FROM NKDC.Lithologies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Location.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView202()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Location
        [NKD.Module.BusinessObjects.Store.X_Location](T1.[X_Location.LocationID], T1.[X_Location.LocationTypeID], T1.[X_Location.DefaultLocationName], T1.[X_Location.LocationCode], T1.[X_Location.LocationGeography], T1.[X_Location.LatitudeWGS84], T1.[X_Location.LongitudeWGS84], T1.[X_Location.Elevation], T1.[X_Location.CountryID], T1.[X_Location.CountryStateID], T1.[X_Location.Postcode], T1.[X_Location.DefaultCulture], T1.[X_Location.OwnerCompanyID], T1.[X_Location.ResponsibleContactID], T1.[X_Location.Comment], T1.[X_Location.Version], T1.[X_Location.VersionAntecedentID], T1.[X_Location.VersionCertainty], T1.[X_Location.VersionWorkflowInstanceID], T1.[X_Location.VersionUpdatedBy], T1.[X_Location.VersionDeletedBy], T1.[X_Location.VersionOwnerContactID], T1.[X_Location.VersionOwnerCompanyID], T1.[X_Location.VersionUpdated])
    FROM (
        SELECT 
            T.LocationID AS [X_Location.LocationID], 
            T.LocationTypeID AS [X_Location.LocationTypeID], 
            T.DefaultLocationName AS [X_Location.DefaultLocationName], 
            T.LocationCode AS [X_Location.LocationCode], 
            T.LocationGeography AS [X_Location.LocationGeography], 
            T.LatitudeWGS84 AS [X_Location.LatitudeWGS84], 
            T.LongitudeWGS84 AS [X_Location.LongitudeWGS84], 
            T.Elevation AS [X_Location.Elevation], 
            T.CountryID AS [X_Location.CountryID], 
            T.CountryStateID AS [X_Location.CountryStateID], 
            T.Postcode AS [X_Location.Postcode], 
            T.DefaultCulture AS [X_Location.DefaultCulture], 
            T.OwnerCompanyID AS [X_Location.OwnerCompanyID], 
            T.ResponsibleContactID AS [X_Location.ResponsibleContactID], 
            T.Comment AS [X_Location.Comment], 
            T.Version AS [X_Location.Version], 
            T.VersionAntecedentID AS [X_Location.VersionAntecedentID], 
            T.VersionCertainty AS [X_Location.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Location.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Location.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Location.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Location.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Location.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Location.VersionUpdated], 
            True AS _from0
        FROM NKDC.Locations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LocationAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView203()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LocationAlias
        [NKD.Module.BusinessObjects.Store.X_LocationAlias](T1.[X_LocationAlias.LocationAliasID], T1.[X_LocationAlias.LocationID], T1.[X_LocationAlias.Alias], T1.[X_LocationAlias.Culture], T1.[X_LocationAlias.Priority], T1.[X_LocationAlias.Version], T1.[X_LocationAlias.VersionAntecedentID], T1.[X_LocationAlias.VersionCertainty], T1.[X_LocationAlias.VersionWorkflowInstanceID], T1.[X_LocationAlias.VersionUpdatedBy], T1.[X_LocationAlias.VersionDeletedBy], T1.[X_LocationAlias.VersionOwnerContactID], T1.[X_LocationAlias.VersionOwnerCompanyID], T1.[X_LocationAlias.VersionUpdated])
    FROM (
        SELECT 
            T.LocationAliasID AS [X_LocationAlias.LocationAliasID], 
            T.LocationID AS [X_LocationAlias.LocationID], 
            T.Alias AS [X_LocationAlias.Alias], 
            T.Culture AS [X_LocationAlias.Culture], 
            T.Priority AS [X_LocationAlias.Priority], 
            T.Version AS [X_LocationAlias.Version], 
            T.VersionAntecedentID AS [X_LocationAlias.VersionAntecedentID], 
            T.VersionCertainty AS [X_LocationAlias.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LocationAlias.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LocationAlias.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LocationAlias.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LocationAlias.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LocationAlias.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LocationAlias.VersionUpdated], 
            True AS _from0
        FROM NKDC.LocationAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LocationData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView204()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LocationData
        [NKD.Module.BusinessObjects.Store.X_LocationData](T1.[X_LocationData.LocationDataID], T1.[X_LocationData.ParentLocationDataID], T1.[X_LocationData.TableType], T1.[X_LocationData.ReferenceID], T1.[X_LocationData.LocationID], T1.[X_LocationData.Version], T1.[X_LocationData.VersionAntecedentID], T1.[X_LocationData.VersionCertainty], T1.[X_LocationData.VersionWorkflowInstanceID], T1.[X_LocationData.VersionUpdatedBy], T1.[X_LocationData.VersionDeletedBy], T1.[X_LocationData.VersionOwnerContactID], T1.[X_LocationData.VersionOwnerCompanyID], T1.[X_LocationData.VersionUpdated])
    FROM (
        SELECT 
            T.LocationDataID AS [X_LocationData.LocationDataID], 
            T.ParentLocationDataID AS [X_LocationData.ParentLocationDataID], 
            T.TableType AS [X_LocationData.TableType], 
            T.ReferenceID AS [X_LocationData.ReferenceID], 
            T.LocationID AS [X_LocationData.LocationID], 
            T.Version AS [X_LocationData.Version], 
            T.VersionAntecedentID AS [X_LocationData.VersionAntecedentID], 
            T.VersionCertainty AS [X_LocationData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LocationData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LocationData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LocationData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LocationData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LocationData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LocationData.VersionUpdated], 
            True AS _from0
        FROM NKDC.LocationDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LocationHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView205()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LocationHistory
        [NKD.Module.BusinessObjects.Store.X_LocationHistory](T1.[X_LocationHistory.LocationHistoryID], T1.[X_LocationHistory.LocationHistory], T1.[X_LocationHistory.LocationTaken], T1.[X_LocationHistory.CorrectedLocationID], T1.[X_LocationHistory.ContactID], T1.[X_LocationHistory.Version], T1.[X_LocationHistory.VersionAntecedentID], T1.[X_LocationHistory.VersionCertainty], T1.[X_LocationHistory.VersionWorkflowInstanceID], T1.[X_LocationHistory.VersionUpdatedBy], T1.[X_LocationHistory.VersionDeletedBy], T1.[X_LocationHistory.VersionOwnerContactID], T1.[X_LocationHistory.VersionOwnerCompanyID], T1.[X_LocationHistory.VersionUpdated])
    FROM (
        SELECT 
            T.LocationHistoryID AS [X_LocationHistory.LocationHistoryID], 
            T.LocationHistory AS [X_LocationHistory.LocationHistory], 
            T.LocationTaken AS [X_LocationHistory.LocationTaken], 
            T.CorrectedLocationID AS [X_LocationHistory.CorrectedLocationID], 
            T.ContactID AS [X_LocationHistory.ContactID], 
            T.Version AS [X_LocationHistory.Version], 
            T.VersionAntecedentID AS [X_LocationHistory.VersionAntecedentID], 
            T.VersionCertainty AS [X_LocationHistory.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LocationHistory.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LocationHistory.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LocationHistory.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LocationHistory.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LocationHistory.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LocationHistory.VersionUpdated], 
            True AS _from0
        FROM NKDC.LocationTraces AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Mineralogy.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView206()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Mineralogy
        [NKD.Module.BusinessObjects.Store.X_Mineralogy](T1.[X_Mineralogy.MineralogyID], T1.[X_Mineralogy.HeaderID], T1.[X_Mineralogy.FromDepth], T1.[X_Mineralogy.ToDepth], T1.[X_Mineralogy.MineralAbundanceID], T1.[X_Mineralogy.MineralFormID], T1.[X_Mineralogy.MineralTypeID], T1.[X_Mineralogy.MineralStyleID], T1.[X_Mineralogy.Logged], T1.[X_Mineralogy.LoggedBy], T1.[X_Mineralogy.Comment], T1.[X_Mineralogy.Version], T1.[X_Mineralogy.VersionAntecedentID], T1.[X_Mineralogy.VersionCertainty], T1.[X_Mineralogy.VersionWorkflowInstanceID], T1.[X_Mineralogy.VersionUpdatedBy], T1.[X_Mineralogy.VersionDeletedBy], T1.[X_Mineralogy.VersionOwnerContactID], T1.[X_Mineralogy.VersionOwnerCompanyID], T1.[X_Mineralogy.VersionUpdated])
    FROM (
        SELECT 
            T.MineralogyID AS [X_Mineralogy.MineralogyID], 
            T.HeaderID AS [X_Mineralogy.HeaderID], 
            T.FromDepth AS [X_Mineralogy.FromDepth], 
            T.ToDepth AS [X_Mineralogy.ToDepth], 
            T.MineralAbundanceID AS [X_Mineralogy.MineralAbundanceID], 
            T.MineralFormID AS [X_Mineralogy.MineralFormID], 
            T.MineralTypeID AS [X_Mineralogy.MineralTypeID], 
            T.MineralStyleID AS [X_Mineralogy.MineralStyleID], 
            T.Logged AS [X_Mineralogy.Logged], 
            T.LoggedBy AS [X_Mineralogy.LoggedBy], 
            T.Comment AS [X_Mineralogy.Comment], 
            T.Version AS [X_Mineralogy.Version], 
            T.VersionAntecedentID AS [X_Mineralogy.VersionAntecedentID], 
            T.VersionCertainty AS [X_Mineralogy.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Mineralogy.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Mineralogy.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Mineralogy.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Mineralogy.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Mineralogy.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Mineralogy.VersionUpdated], 
            True AS _from0
        FROM NKDC.Mineralogies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ModelCharacteristic.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView207()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ModelCharacteristic
        [NKD.Module.BusinessObjects.Store.X_ModelCharacteristic](T1.[X_ModelCharacteristic.ModelCharacteristicID], T1.[X_ModelCharacteristic.ModelID], T1.[X_ModelCharacteristic.CharacteristicID], T1.[X_ModelCharacteristic.Value], T1.[X_ModelCharacteristic.Version], T1.[X_ModelCharacteristic.VersionAntecedentID], T1.[X_ModelCharacteristic.VersionCertainty], T1.[X_ModelCharacteristic.VersionWorkflowInstanceID], T1.[X_ModelCharacteristic.VersionUpdatedBy], T1.[X_ModelCharacteristic.VersionDeletedBy], T1.[X_ModelCharacteristic.VersionOwnerContactID], T1.[X_ModelCharacteristic.VersionOwnerCompanyID], T1.[X_ModelCharacteristic.VersionUpdated])
    FROM (
        SELECT 
            T.ModelCharacteristicID AS [X_ModelCharacteristic.ModelCharacteristicID], 
            T.ModelID AS [X_ModelCharacteristic.ModelID], 
            T.CharacteristicID AS [X_ModelCharacteristic.CharacteristicID], 
            T.[Value] AS [X_ModelCharacteristic.Value], 
            T.Version AS [X_ModelCharacteristic.Version], 
            T.VersionAntecedentID AS [X_ModelCharacteristic.VersionAntecedentID], 
            T.VersionCertainty AS [X_ModelCharacteristic.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ModelCharacteristic.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ModelCharacteristic.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ModelCharacteristic.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ModelCharacteristic.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ModelCharacteristic.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ModelCharacteristic.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelCharacteristics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Opportunity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView208()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Opportunity
        [NKD.Module.BusinessObjects.Store.X_Opportunity](T1.[X_Opportunity.OpportunityID], T1.[X_Opportunity.OpportunityName], T1.[X_Opportunity.OpportunityContactID], T1.[X_Opportunity.OpportunityCompanyID], T1.[X_Opportunity.StatusWorkTypeID], T1.[X_Opportunity.RegardingWorkTypeID], T1.[X_Opportunity.Description], T1.[X_Opportunity.ProposalContactID], T1.[X_Opportunity.ProposalFileDataID], T1.[X_Opportunity.ProjectID], T1.[X_Opportunity.ExperienceID], T1.[X_Opportunity.OpenedBy], T1.[X_Opportunity.AssignedBy], T1.[X_Opportunity.MaintainedBy], T1.[X_Opportunity.ConvertedBy], T1.[X_Opportunity.EstimatedConversion], T1.[X_Opportunity.EstimatedDurationHours], T1.[X_Opportunity.EstimatedRevenue], T1.[X_Opportunity.Probability], T1.[X_Opportunity.Version], T1.[X_Opportunity.VersionAntecedentID], T1.[X_Opportunity.VersionCertainty], T1.[X_Opportunity.VersionWorkflowInstanceID], T1.[X_Opportunity.VersionUpdatedBy], T1.[X_Opportunity.VersionDeletedBy], T1.[X_Opportunity.VersionOwnerContactID], T1.[X_Opportunity.VersionOwnerCompanyID], T1.[X_Opportunity.VersionUpdated])
    FROM (
        SELECT 
            T.OpportunityID AS [X_Opportunity.OpportunityID], 
            T.OpportunityName AS [X_Opportunity.OpportunityName], 
            T.OpportunityContactID AS [X_Opportunity.OpportunityContactID], 
            T.OpportunityCompanyID AS [X_Opportunity.OpportunityCompanyID], 
            T.StatusWorkTypeID AS [X_Opportunity.StatusWorkTypeID], 
            T.RegardingWorkTypeID AS [X_Opportunity.RegardingWorkTypeID], 
            T.Description AS [X_Opportunity.Description], 
            T.ProposalContactID AS [X_Opportunity.ProposalContactID], 
            T.ProposalFileDataID AS [X_Opportunity.ProposalFileDataID], 
            T.ProjectID AS [X_Opportunity.ProjectID], 
            T.ExperienceID AS [X_Opportunity.ExperienceID], 
            T.OpenedBy AS [X_Opportunity.OpenedBy], 
            T.AssignedBy AS [X_Opportunity.AssignedBy], 
            T.MaintainedBy AS [X_Opportunity.MaintainedBy], 
            T.ConvertedBy AS [X_Opportunity.ConvertedBy], 
            T.EstimatedConversion AS [X_Opportunity.EstimatedConversion], 
            T.EstimatedDurationHours AS [X_Opportunity.EstimatedDurationHours], 
            T.EstimatedRevenue AS [X_Opportunity.EstimatedRevenue], 
            T.Probability AS [X_Opportunity.Probability], 
            T.Version AS [X_Opportunity.Version], 
            T.VersionAntecedentID AS [X_Opportunity.VersionAntecedentID], 
            T.VersionCertainty AS [X_Opportunity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Opportunity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Opportunity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Opportunity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Opportunity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Opportunity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Opportunity.VersionUpdated], 
            True AS _from0
        FROM NKDC.Opportunities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Parameter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView209()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Parameter
        [NKD.Module.BusinessObjects.Store.X_Parameter](T1.[X_Parameter.ParameterID], T1.[X_Parameter.ParameterType], T1.[X_Parameter.ParameterName], T1.[X_Parameter.DefaultParameterValue], T1.[X_Parameter.DefaultParameterText], T1.[X_Parameter.UnitID], T1.[X_Parameter.Format], T1.[X_Parameter.Description], T1.[X_Parameter.Locale], T1.[X_Parameter.Version], T1.[X_Parameter.VersionAntecedentID], T1.[X_Parameter.VersionCertainty], T1.[X_Parameter.VersionWorkflowInstanceID], T1.[X_Parameter.VersionUpdatedBy], T1.[X_Parameter.VersionDeletedBy], T1.[X_Parameter.VersionOwnerContactID], T1.[X_Parameter.VersionOwnerCompanyID], T1.[X_Parameter.VersionUpdated])
    FROM (
        SELECT 
            T.ParameterID AS [X_Parameter.ParameterID], 
            T.ParameterType AS [X_Parameter.ParameterType], 
            T.ParameterName AS [X_Parameter.ParameterName], 
            T.DefaultParameterValue AS [X_Parameter.DefaultParameterValue], 
            T.DefaultParameterText AS [X_Parameter.DefaultParameterText], 
            T.UnitID AS [X_Parameter.UnitID], 
            T.Format AS [X_Parameter.Format], 
            T.Description AS [X_Parameter.Description], 
            T.Locale AS [X_Parameter.Locale], 
            T.Version AS [X_Parameter.Version], 
            T.VersionAntecedentID AS [X_Parameter.VersionAntecedentID], 
            T.VersionCertainty AS [X_Parameter.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Parameter.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Parameter.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Parameter.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Parameter.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Parameter.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Parameter.VersionUpdated], 
            True AS _from0
        FROM NKDC.Parameters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ParameterDuplicate.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView210()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ParameterDuplicate
        [NKD.Module.BusinessObjects.Store.X_ParameterDuplicate](T1.[X_ParameterDuplicate.ParameterDuplicateID], T1.[X_ParameterDuplicate.Parameter1ID], T1.[X_ParameterDuplicate.Parameter2ID], T1.[X_ParameterDuplicate.Version], T1.[X_ParameterDuplicate.VersionAntecedentID], T1.[X_ParameterDuplicate.VersionCertainty], T1.[X_ParameterDuplicate.VersionWorkflowInstanceID], T1.[X_ParameterDuplicate.VersionUpdatedBy], T1.[X_ParameterDuplicate.VersionDeletedBy], T1.[X_ParameterDuplicate.VersionOwnerContactID], T1.[X_ParameterDuplicate.VersionOwnerCompanyID], T1.[X_ParameterDuplicate.VersionUpdated])
    FROM (
        SELECT 
            T.ParameterDuplicateID AS [X_ParameterDuplicate.ParameterDuplicateID], 
            T.Parameter1ID AS [X_ParameterDuplicate.Parameter1ID], 
            T.Parameter2ID AS [X_ParameterDuplicate.Parameter2ID], 
            T.Version AS [X_ParameterDuplicate.Version], 
            T.VersionAntecedentID AS [X_ParameterDuplicate.VersionAntecedentID], 
            T.VersionCertainty AS [X_ParameterDuplicate.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ParameterDuplicate.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ParameterDuplicate.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ParameterDuplicate.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ParameterDuplicate.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ParameterDuplicate.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ParameterDuplicate.VersionUpdated], 
            True AS _from0
        FROM NKDC.ParameterDuplicates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ParameterGroup.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView211()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ParameterGroup
        [NKD.Module.BusinessObjects.Store.X_ParameterGroup](T1.[X_ParameterGroup.ParameterGroupID], T1.[X_ParameterGroup.ParameterID], T1.[X_ParameterGroup.GroupID], T1.[X_ParameterGroup.Version], T1.[X_ParameterGroup.VersionAntecedentID], T1.[X_ParameterGroup.VersionCertainty], T1.[X_ParameterGroup.VersionWorkflowInstanceID], T1.[X_ParameterGroup.VersionUpdatedBy], T1.[X_ParameterGroup.VersionDeletedBy], T1.[X_ParameterGroup.VersionOwnerContactID], T1.[X_ParameterGroup.VersionOwnerCompanyID], T1.[X_ParameterGroup.VersionUpdated])
    FROM (
        SELECT 
            T.ParameterGroupID AS [X_ParameterGroup.ParameterGroupID], 
            T.ParameterID AS [X_ParameterGroup.ParameterID], 
            T.GroupID AS [X_ParameterGroup.GroupID], 
            T.Version AS [X_ParameterGroup.Version], 
            T.VersionAntecedentID AS [X_ParameterGroup.VersionAntecedentID], 
            T.VersionCertainty AS [X_ParameterGroup.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ParameterGroup.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ParameterGroup.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ParameterGroup.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ParameterGroup.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ParameterGroup.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ParameterGroup.VersionUpdated], 
            True AS _from0
        FROM NKDC.ParameterGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_PartCharacteristic.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView212()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_PartCharacteristic
        [NKD.Module.BusinessObjects.Store.X_PartCharacteristic](T1.[X_PartCharacteristic.PartCharacteristicID], T1.[X_PartCharacteristic.PartID], T1.[X_PartCharacteristic.CharacteristicID], T1.[X_PartCharacteristic.Value], T1.[X_PartCharacteristic.Version], T1.[X_PartCharacteristic.VersionAntecedentID], T1.[X_PartCharacteristic.VersionCertainty], T1.[X_PartCharacteristic.VersionWorkflowInstanceID], T1.[X_PartCharacteristic.VersionUpdatedBy], T1.[X_PartCharacteristic.VersionDeletedBy], T1.[X_PartCharacteristic.VersionOwnerContactID], T1.[X_PartCharacteristic.VersionOwnerCompanyID], T1.[X_PartCharacteristic.VersionUpdated])
    FROM (
        SELECT 
            T.PartCharacteristicID AS [X_PartCharacteristic.PartCharacteristicID], 
            T.PartID AS [X_PartCharacteristic.PartID], 
            T.CharacteristicID AS [X_PartCharacteristic.CharacteristicID], 
            T.[Value] AS [X_PartCharacteristic.Value], 
            T.Version AS [X_PartCharacteristic.Version], 
            T.VersionAntecedentID AS [X_PartCharacteristic.VersionAntecedentID], 
            T.VersionCertainty AS [X_PartCharacteristic.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_PartCharacteristic.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_PartCharacteristic.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_PartCharacteristic.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_PartCharacteristic.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_PartCharacteristic.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_PartCharacteristic.VersionUpdated], 
            True AS _from0
        FROM NKDC.PartCharacteristics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_PointLoad.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView213()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_PointLoad
        [NKD.Module.BusinessObjects.Store.X_PointLoad](T1.[X_PointLoad.PointLoadID], T1.[X_PointLoad.HeaderID], T1.[X_PointLoad.FromDepth], T1.[X_PointLoad.ToDepth], T1.[X_PointLoad.SampleNumber], T1.[X_PointLoad.SampleLength], T1.[X_PointLoad.SampleStateID], T1.[X_PointLoad.SampleTypeID], T1.[X_PointLoad.TestSampleCode], T1.[X_PointLoad.TestSampleDepth], T1.[X_PointLoad.PointLoadTestTypeID], T1.[X_PointLoad.PlatenSeparation], T1.[X_PointLoad.Width], T1.[X_PointLoad.FailureLoad], T1.[X_PointLoad.FailureModeID], T1.[X_PointLoad.Comment], T1.[X_PointLoad.Version], T1.[X_PointLoad.VersionAntecedentID], T1.[X_PointLoad.VersionCertainty], T1.[X_PointLoad.VersionWorkflowInstanceID], T1.[X_PointLoad.VersionUpdatedBy], T1.[X_PointLoad.VersionDeletedBy], T1.[X_PointLoad.VersionOwnerContactID], T1.[X_PointLoad.VersionOwnerCompanyID], T1.[X_PointLoad.VersionUpdated])
    FROM (
        SELECT 
            T.PointLoadID AS [X_PointLoad.PointLoadID], 
            T.HeaderID AS [X_PointLoad.HeaderID], 
            T.FromDepth AS [X_PointLoad.FromDepth], 
            T.ToDepth AS [X_PointLoad.ToDepth], 
            T.SampleNumber AS [X_PointLoad.SampleNumber], 
            T.SampleLength AS [X_PointLoad.SampleLength], 
            T.SampleStateID AS [X_PointLoad.SampleStateID], 
            T.SampleTypeID AS [X_PointLoad.SampleTypeID], 
            T.TestSampleCode AS [X_PointLoad.TestSampleCode], 
            T.TestSampleDepth AS [X_PointLoad.TestSampleDepth], 
            T.PointLoadTestTypeID AS [X_PointLoad.PointLoadTestTypeID], 
            T.PlatenSeparation AS [X_PointLoad.PlatenSeparation], 
            T.Width AS [X_PointLoad.Width], 
            T.FailureLoad AS [X_PointLoad.FailureLoad], 
            T.FailureModeID AS [X_PointLoad.FailureModeID], 
            T.Comment AS [X_PointLoad.Comment], 
            T.Version AS [X_PointLoad.Version], 
            T.VersionAntecedentID AS [X_PointLoad.VersionAntecedentID], 
            T.VersionCertainty AS [X_PointLoad.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_PointLoad.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_PointLoad.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_PointLoad.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_PointLoad.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_PointLoad.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_PointLoad.VersionUpdated], 
            True AS _from0
        FROM NKDC.PointLoads AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Project.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView214()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Project
        [NKD.Module.BusinessObjects.Store.X_Project](T1.[X_Project.ProjectID], T1.[X_Project.ParentProjectID], T1.[X_Project.ProjectName], T1.[X_Project.ProjectCode], T1.[X_Project.ProjectTypeID], T1.[X_Project.ClientCompanyID], T1.[X_Project.ClientContactID], T1.[X_Project.TenementID], T1.[X_Project.Comment], T1.[X_Project.Version], T1.[X_Project.VersionAntecedentID], T1.[X_Project.VersionCertainty], T1.[X_Project.VersionWorkflowInstanceID], T1.[X_Project.VersionUpdatedBy], T1.[X_Project.VersionDeletedBy], T1.[X_Project.VersionOwnerContactID], T1.[X_Project.VersionOwnerCompanyID], T1.[X_Project.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectID AS [X_Project.ProjectID], 
            T.ParentProjectID AS [X_Project.ParentProjectID], 
            T.ProjectName AS [X_Project.ProjectName], 
            T.ProjectCode AS [X_Project.ProjectCode], 
            T.ProjectTypeID AS [X_Project.ProjectTypeID], 
            T.ClientCompanyID AS [X_Project.ClientCompanyID], 
            T.ClientContactID AS [X_Project.ClientContactID], 
            T.TenementID AS [X_Project.TenementID], 
            T.Comment AS [X_Project.Comment], 
            T.Version AS [X_Project.Version], 
            T.VersionAntecedentID AS [X_Project.VersionAntecedentID], 
            T.VersionCertainty AS [X_Project.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Project.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Project.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Project.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Project.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Project.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Project.VersionUpdated], 
            True AS _from0
        FROM NKDC.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectDeliverable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView215()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectDeliverable
        [NKD.Module.BusinessObjects.Store.X_ProjectDeliverable](T1.[X_ProjectDeliverable.ProjectDeliverableID], T1.[X_ProjectDeliverable.ProjectID], T1.[X_ProjectDeliverable.Sequence], T1.[X_ProjectDeliverable.DeliverableName], T1.[X_ProjectDeliverable.WorkTypeID], T1.[X_ProjectDeliverable.MilestoneTaskID], T1.[X_ProjectDeliverable.Description], T1.[X_ProjectDeliverable.InitiatedBy], T1.[X_ProjectDeliverable.Initiated], T1.[X_ProjectDeliverable.ApprovedBy], T1.[X_ProjectDeliverable.Approved], T1.[X_ProjectDeliverable.EvidenceDescription], T1.[X_ProjectDeliverable.EvidenceFileDataID], T1.[X_ProjectDeliverable.EvidenceContractID], T1.[X_ProjectDeliverable.EvidenceContactID], T1.[X_ProjectDeliverable.EvidenceCreated], T1.[X_ProjectDeliverable.ExpectedProRataUnits], T1.[X_ProjectDeliverable.ExpectedProRataPerUnitID], T1.[X_ProjectDeliverable.ExpectedProRataValue], T1.[X_ProjectDeliverable.EstimatedDurationManHours], T1.[X_ProjectDeliverable.EstimatedCost], T1.[X_ProjectDeliverable.Due], T1.[X_ProjectDeliverable.HourlyPenalties], T1.[X_ProjectDeliverable.TotalValue], T1.[X_ProjectDeliverable.Completed], T1.[X_ProjectDeliverable.Comment], T1.[X_ProjectDeliverable.Version], T1.[X_ProjectDeliverable.VersionAntecedentID], T1.[X_ProjectDeliverable.VersionCertainty], T1.[X_ProjectDeliverable.VersionWorkflowInstanceID], T1.[X_ProjectDeliverable.VersionUpdatedBy], T1.[X_ProjectDeliverable.VersionDeletedBy], T1.[X_ProjectDeliverable.VersionOwnerContactID], T1.[X_ProjectDeliverable.VersionOwnerCompanyID], T1.[X_ProjectDeliverable.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectDeliverableID AS [X_ProjectDeliverable.ProjectDeliverableID], 
            T.ProjectID AS [X_ProjectDeliverable.ProjectID], 
            T.Sequence AS [X_ProjectDeliverable.Sequence], 
            T.DeliverableName AS [X_ProjectDeliverable.DeliverableName], 
            T.WorkTypeID AS [X_ProjectDeliverable.WorkTypeID], 
            T.MilestoneTaskID AS [X_ProjectDeliverable.MilestoneTaskID], 
            T.Description AS [X_ProjectDeliverable.Description], 
            T.InitiatedBy AS [X_ProjectDeliverable.InitiatedBy], 
            T.Initiated AS [X_ProjectDeliverable.Initiated], 
            T.ApprovedBy AS [X_ProjectDeliverable.ApprovedBy], 
            T.Approved AS [X_ProjectDeliverable.Approved], 
            T.EvidenceDescription AS [X_ProjectDeliverable.EvidenceDescription], 
            T.EvidenceFileDataID AS [X_ProjectDeliverable.EvidenceFileDataID], 
            T.EvidenceContractID AS [X_ProjectDeliverable.EvidenceContractID], 
            T.EvidenceContactID AS [X_ProjectDeliverable.EvidenceContactID], 
            T.EvidenceCreated AS [X_ProjectDeliverable.EvidenceCreated], 
            T.ExpectedProRataUnits AS [X_ProjectDeliverable.ExpectedProRataUnits], 
            T.ExpectedProRataPerUnitID AS [X_ProjectDeliverable.ExpectedProRataPerUnitID], 
            T.ExpectedProRataValue AS [X_ProjectDeliverable.ExpectedProRataValue], 
            T.EstimatedDurationManHours AS [X_ProjectDeliverable.EstimatedDurationManHours], 
            T.EstimatedCost AS [X_ProjectDeliverable.EstimatedCost], 
            T.Due AS [X_ProjectDeliverable.Due], 
            T.HourlyPenalties AS [X_ProjectDeliverable.HourlyPenalties], 
            T.TotalValue AS [X_ProjectDeliverable.TotalValue], 
            T.Completed AS [X_ProjectDeliverable.Completed], 
            T.Comment AS [X_ProjectDeliverable.Comment], 
            T.Version AS [X_ProjectDeliverable.Version], 
            T.VersionAntecedentID AS [X_ProjectDeliverable.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectDeliverable.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectDeliverable.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectDeliverable.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectDeliverable.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectDeliverable.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectDeliverable.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectDeliverable.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectDeliverables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView216()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlan
        [NKD.Module.BusinessObjects.Store.X_ProjectPlan](T1.[X_ProjectPlan.ProjectPlanID], T1.[X_ProjectPlan.ProjectID], T1.[X_ProjectPlan.ParentProjectPlanID], T1.[X_ProjectPlan.ProjectPlanName], T1.[X_ProjectPlan.ResponsibleContactID], T1.[X_ProjectPlan.Comment], T1.[X_ProjectPlan.Version], T1.[X_ProjectPlan.VersionAntecedentID], T1.[X_ProjectPlan.VersionCertainty], T1.[X_ProjectPlan.VersionWorkflowInstanceID], T1.[X_ProjectPlan.VersionUpdatedBy], T1.[X_ProjectPlan.VersionDeletedBy], T1.[X_ProjectPlan.VersionOwnerContactID], T1.[X_ProjectPlan.VersionOwnerCompanyID], T1.[X_ProjectPlan.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanID AS [X_ProjectPlan.ProjectPlanID], 
            T.ProjectID AS [X_ProjectPlan.ProjectID], 
            T.ParentProjectPlanID AS [X_ProjectPlan.ParentProjectPlanID], 
            T.ProjectPlanName AS [X_ProjectPlan.ProjectPlanName], 
            T.ResponsibleContactID AS [X_ProjectPlan.ResponsibleContactID], 
            T.Comment AS [X_ProjectPlan.Comment], 
            T.Version AS [X_ProjectPlan.Version], 
            T.VersionAntecedentID AS [X_ProjectPlan.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlan.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlan.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlan.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlan.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlan.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlan.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlan.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlans AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTask.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView217()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlanTask
        [NKD.Module.BusinessObjects.Store.X_ProjectPlanTask](T1.[X_ProjectPlanTask.ProjectPlanTaskID], T1.[X_ProjectPlanTask.ProjectPlanID], T1.[X_ProjectPlanTask.ParentProjectPlanTaskID], T1.[X_ProjectPlanTask.ProjectTaskName], T1.[X_ProjectPlanTask.TaskID], T1.[X_ProjectPlanTask.WorkTypeID], T1.[X_ProjectPlanTask.Priority], T1.[X_ProjectPlanTask.Progress], T1.[X_ProjectPlanTask.StartDate], T1.[X_ProjectPlanTask.StopDate], T1.[X_ProjectPlanTask.AllocatedManHours], T1.[X_ProjectPlanTask.Comment], T1.[X_ProjectPlanTask.Version], T1.[X_ProjectPlanTask.VersionAntecedentID], T1.[X_ProjectPlanTask.VersionCertainty], T1.[X_ProjectPlanTask.VersionWorkflowInstanceID], T1.[X_ProjectPlanTask.VersionUpdatedBy], T1.[X_ProjectPlanTask.VersionDeletedBy], T1.[X_ProjectPlanTask.VersionOwnerContactID], T1.[X_ProjectPlanTask.VersionOwnerCompanyID], T1.[X_ProjectPlanTask.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskID AS [X_ProjectPlanTask.ProjectPlanTaskID], 
            T.ProjectPlanID AS [X_ProjectPlanTask.ProjectPlanID], 
            T.ParentProjectPlanTaskID AS [X_ProjectPlanTask.ParentProjectPlanTaskID], 
            T.ProjectTaskName AS [X_ProjectPlanTask.ProjectTaskName], 
            T.TaskID AS [X_ProjectPlanTask.TaskID], 
            T.WorkTypeID AS [X_ProjectPlanTask.WorkTypeID], 
            T.Priority AS [X_ProjectPlanTask.Priority], 
            T.Progress AS [X_ProjectPlanTask.Progress], 
            T.StartDate AS [X_ProjectPlanTask.StartDate], 
            T.StopDate AS [X_ProjectPlanTask.StopDate], 
            T.AllocatedManHours AS [X_ProjectPlanTask.AllocatedManHours], 
            T.Comment AS [X_ProjectPlanTask.Comment], 
            T.Version AS [X_ProjectPlanTask.Version], 
            T.VersionAntecedentID AS [X_ProjectPlanTask.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlanTask.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlanTask.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlanTask.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlanTask.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlanTask.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlanTask.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlanTask.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTasks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskComplianceResponse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView218()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlanTaskComplianceResponse
        [NKD.Module.BusinessObjects.Store.X_ProjectPlanTaskComplianceResponse](T1.[X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskComplianceResponseID], T1.[X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskID], T1.[X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskResponseID], T1.[X_ProjectPlanTaskComplianceResponse.ComplianceWorkTypeID], T1.[X_ProjectPlanTaskComplianceResponse.ComplianceFormResponse], T1.[X_ProjectPlanTaskComplianceResponse.CompletedBy], T1.[X_ProjectPlanTaskComplianceResponse.Completed], T1.[X_ProjectPlanTaskComplianceResponse.ApprovedBy], T1.[X_ProjectPlanTaskComplianceResponse.Approved], T1.[X_ProjectPlanTaskComplianceResponse.Version], T1.[X_ProjectPlanTaskComplianceResponse.VersionAntecedentID], T1.[X_ProjectPlanTaskComplianceResponse.VersionCertainty], T1.[X_ProjectPlanTaskComplianceResponse.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskComplianceResponse.VersionUpdatedBy], T1.[X_ProjectPlanTaskComplianceResponse.VersionDeletedBy], T1.[X_ProjectPlanTaskComplianceResponse.VersionOwnerContactID], T1.[X_ProjectPlanTaskComplianceResponse.VersionOwnerCompanyID], T1.[X_ProjectPlanTaskComplianceResponse.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskComplianceResponseID AS [X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskComplianceResponseID], 
            T.ProjectPlanTaskID AS [X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskID], 
            T.ProjectPlanTaskResponseID AS [X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskResponseID], 
            T.ComplianceWorkTypeID AS [X_ProjectPlanTaskComplianceResponse.ComplianceWorkTypeID], 
            T.ComplianceFormResponse AS [X_ProjectPlanTaskComplianceResponse.ComplianceFormResponse], 
            T.CompletedBy AS [X_ProjectPlanTaskComplianceResponse.CompletedBy], 
            T.Completed AS [X_ProjectPlanTaskComplianceResponse.Completed], 
            T.ApprovedBy AS [X_ProjectPlanTaskComplianceResponse.ApprovedBy], 
            T.Approved AS [X_ProjectPlanTaskComplianceResponse.Approved], 
            T.Version AS [X_ProjectPlanTaskComplianceResponse.Version], 
            T.VersionAntecedentID AS [X_ProjectPlanTaskComplianceResponse.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlanTaskComplianceResponse.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskComplianceResponse.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlanTaskComplianceResponse.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlanTaskComplianceResponse.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlanTaskComplianceResponse.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlanTaskComplianceResponse.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlanTaskComplianceResponse.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskComplianceResponses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView219()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlanTaskData
        [NKD.Module.BusinessObjects.Store.X_ProjectPlanTaskData](T1.[X_ProjectPlanTaskData.ProjectPlanTaskDataID], T1.[X_ProjectPlanTaskData.ParentProjectPlanTaskDataID], T1.[X_ProjectPlanTaskData.TableType], T1.[X_ProjectPlanTaskData.ReferenceID], T1.[X_ProjectPlanTaskData.ProjectPlanTaskID], T1.[X_ProjectPlanTaskData.Version], T1.[X_ProjectPlanTaskData.VersionAntecedentID], T1.[X_ProjectPlanTaskData.VersionCertainty], T1.[X_ProjectPlanTaskData.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskData.VersionUpdatedBy], T1.[X_ProjectPlanTaskData.VersionDeletedBy], T1.[X_ProjectPlanTaskData.VersionOwnerContactID], T1.[X_ProjectPlanTaskData.VersionOwnerCompanyID], T1.[X_ProjectPlanTaskData.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskDataID AS [X_ProjectPlanTaskData.ProjectPlanTaskDataID], 
            T.ParentProjectPlanTaskDataID AS [X_ProjectPlanTaskData.ParentProjectPlanTaskDataID], 
            T.TableType AS [X_ProjectPlanTaskData.TableType], 
            T.ReferenceID AS [X_ProjectPlanTaskData.ReferenceID], 
            T.ProjectPlanTaskID AS [X_ProjectPlanTaskData.ProjectPlanTaskID], 
            T.Version AS [X_ProjectPlanTaskData.Version], 
            T.VersionAntecedentID AS [X_ProjectPlanTaskData.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlanTaskData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlanTaskData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlanTaskData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlanTaskData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlanTaskData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlanTaskData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView220()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlanTaskResponse
        [NKD.Module.BusinessObjects.Store.X_ProjectPlanTaskResponse](T1.[X_ProjectPlanTaskResponse.ProjectPlanTaskResponseID], T1.[X_ProjectPlanTaskResponse.ProjectID], T1.[X_ProjectPlanTaskResponse.ProjectPlanTaskID], T1.[X_ProjectPlanTaskResponse.ResponsibleCompanyID], T1.[X_ProjectPlanTaskResponse.ResponsibleContactID], T1.[X_ProjectPlanTaskResponse.ActualTaskID], T1.[X_ProjectPlanTaskResponse.ActualWorkTypeID], T1.[X_ProjectPlanTaskResponse.ActualGraphDataGroupID], T1.[X_ProjectPlanTaskResponse.ActualGraphDataID], T1.[X_ProjectPlanTaskResponse.Began], T1.[X_ProjectPlanTaskResponse.Completed], T1.[X_ProjectPlanTaskResponse.Hours], T1.[X_ProjectPlanTaskResponse.EstimatedProRataUnits], T1.[X_ProjectPlanTaskResponse.EstimatedProRataCost], T1.[X_ProjectPlanTaskResponse.EstimatedValue], T1.[X_ProjectPlanTaskResponse.EstimatedRevenue], T1.[X_ProjectPlanTaskResponse.PerformanceMetricParameterID], T1.[X_ProjectPlanTaskResponse.PerformanceMetricQuantity], T1.[X_ProjectPlanTaskResponse.PerformanceMetricContributedPercent], T1.[X_ProjectPlanTaskResponse.ApprovedProRataUnits], T1.[X_ProjectPlanTaskResponse.ApprovedProRataCost], T1.[X_ProjectPlanTaskResponse.Approved], T1.[X_ProjectPlanTaskResponse.ApprovedBy], T1.[X_ProjectPlanTaskResponse.Comments], T1.[X_ProjectPlanTaskResponse.VersionPriority], T1.[X_ProjectPlanTaskResponse.Version], T1.[X_ProjectPlanTaskResponse.VersionAntecedentID], T1.[X_ProjectPlanTaskResponse.VersionCertainty], T1.[X_ProjectPlanTaskResponse.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskResponse.VersionUpdatedBy], T1.[X_ProjectPlanTaskResponse.VersionDeletedBy], T1.[X_ProjectPlanTaskResponse.VersionOwnerContactID], T1.[X_ProjectPlanTaskResponse.VersionOwnerCompanyID], T1.[X_ProjectPlanTaskResponse.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskResponseID AS [X_ProjectPlanTaskResponse.ProjectPlanTaskResponseID], 
            T.ProjectID AS [X_ProjectPlanTaskResponse.ProjectID], 
            T.ProjectPlanTaskID AS [X_ProjectPlanTaskResponse.ProjectPlanTaskID], 
            T.ResponsibleCompanyID AS [X_ProjectPlanTaskResponse.ResponsibleCompanyID], 
            T.ResponsibleContactID AS [X_ProjectPlanTaskResponse.ResponsibleContactID], 
            T.ActualTaskID AS [X_ProjectPlanTaskResponse.ActualTaskID], 
            T.ActualWorkTypeID AS [X_ProjectPlanTaskResponse.ActualWorkTypeID], 
            T.ActualGraphDataGroupID AS [X_ProjectPlanTaskResponse.ActualGraphDataGroupID], 
            T.ActualGraphDataID AS [X_ProjectPlanTaskResponse.ActualGraphDataID], 
            T.Began AS [X_ProjectPlanTaskResponse.Began], 
            T.Completed AS [X_ProjectPlanTaskResponse.Completed], 
            T.Hours AS [X_ProjectPlanTaskResponse.Hours], 
            T.EstimatedProRataUnits AS [X_ProjectPlanTaskResponse.EstimatedProRataUnits], 
            T.EstimatedProRataCost AS [X_ProjectPlanTaskResponse.EstimatedProRataCost], 
            T.EstimatedValue AS [X_ProjectPlanTaskResponse.EstimatedValue], 
            T.EstimatedRevenue AS [X_ProjectPlanTaskResponse.EstimatedRevenue], 
            T.PerformanceMetricParameterID AS [X_ProjectPlanTaskResponse.PerformanceMetricParameterID], 
            T.PerformanceMetricQuantity AS [X_ProjectPlanTaskResponse.PerformanceMetricQuantity], 
            T.PerformanceMetricContributedPercent AS [X_ProjectPlanTaskResponse.PerformanceMetricContributedPercent], 
            T.ApprovedProRataUnits AS [X_ProjectPlanTaskResponse.ApprovedProRataUnits], 
            T.ApprovedProRataCost AS [X_ProjectPlanTaskResponse.ApprovedProRataCost], 
            T.Approved AS [X_ProjectPlanTaskResponse.Approved], 
            T.ApprovedBy AS [X_ProjectPlanTaskResponse.ApprovedBy], 
            T.Comments AS [X_ProjectPlanTaskResponse.Comments], 
            T.VersionPriority AS [X_ProjectPlanTaskResponse.VersionPriority], 
            T.Version AS [X_ProjectPlanTaskResponse.Version], 
            T.VersionAntecedentID AS [X_ProjectPlanTaskResponse.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlanTaskResponse.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskResponse.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlanTaskResponse.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlanTaskResponse.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlanTaskResponse.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlanTaskResponse.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlanTaskResponse.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskResponses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponseData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView221()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlanTaskResponseData
        [NKD.Module.BusinessObjects.Store.X_ProjectPlanTaskResponseData](T1.[X_ProjectPlanTaskResponseData.ProjectPlanTaskResponseDataID], T1.[X_ProjectPlanTaskResponseData.ParentProjectPlanTaskResponseDataID], T1.[X_ProjectPlanTaskResponseData.TableType], T1.[X_ProjectPlanTaskResponseData.ReferenceID], T1.[X_ProjectPlanTaskResponseData.ProjectPlanTaskResponseID], T1.[X_ProjectPlanTaskResponseData.Version], T1.[X_ProjectPlanTaskResponseData.VersionAntecedentID], T1.[X_ProjectPlanTaskResponseData.VersionCertainty], T1.[X_ProjectPlanTaskResponseData.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskResponseData.VersionUpdatedBy], T1.[X_ProjectPlanTaskResponseData.VersionDeletedBy], T1.[X_ProjectPlanTaskResponseData.VersionOwnerContactID], T1.[X_ProjectPlanTaskResponseData.VersionOwnerCompanyID], T1.[X_ProjectPlanTaskResponseData.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskResponseDataID AS [X_ProjectPlanTaskResponseData.ProjectPlanTaskResponseDataID], 
            T.ParentProjectPlanTaskResponseDataID AS [X_ProjectPlanTaskResponseData.ParentProjectPlanTaskResponseDataID], 
            T.TableType AS [X_ProjectPlanTaskResponseData.TableType], 
            T.ReferenceID AS [X_ProjectPlanTaskResponseData.ReferenceID], 
            T.ProjectPlanTaskResponseID AS [X_ProjectPlanTaskResponseData.ProjectPlanTaskResponseID], 
            T.Version AS [X_ProjectPlanTaskResponseData.Version], 
            T.VersionAntecedentID AS [X_ProjectPlanTaskResponseData.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlanTaskResponseData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskResponseData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlanTaskResponseData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlanTaskResponseData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlanTaskResponseData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlanTaskResponseData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlanTaskResponseData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskResponseDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskWorker.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView222()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProjectPlanTaskWorker
        [NKD.Module.BusinessObjects.Store.X_ProjectPlanTaskWorker](T1.[X_ProjectPlanTaskWorker.ProjectPlanTaskWorkerID], T1.[X_ProjectPlanTaskWorker.ProjectPlanTaskID], T1.[X_ProjectPlanTaskWorker.ExperienceID], T1.[X_ProjectPlanTaskWorker.AvailableFromDate], T1.[X_ProjectPlanTaskWorker.AvailableUntilDate], T1.[X_ProjectPlanTaskWorker.Version], T1.[X_ProjectPlanTaskWorker.VersionAntecedentID], T1.[X_ProjectPlanTaskWorker.VersionCertainty], T1.[X_ProjectPlanTaskWorker.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskWorker.VersionUpdatedBy], T1.[X_ProjectPlanTaskWorker.VersionDeletedBy], T1.[X_ProjectPlanTaskWorker.VersionOwnerContactID], T1.[X_ProjectPlanTaskWorker.VersionOwnerCompanyID], T1.[X_ProjectPlanTaskWorker.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskWorkerID AS [X_ProjectPlanTaskWorker.ProjectPlanTaskWorkerID], 
            T.ProjectPlanTaskID AS [X_ProjectPlanTaskWorker.ProjectPlanTaskID], 
            T.ExperienceID AS [X_ProjectPlanTaskWorker.ExperienceID], 
            T.AvailableFromDate AS [X_ProjectPlanTaskWorker.AvailableFromDate], 
            T.AvailableUntilDate AS [X_ProjectPlanTaskWorker.AvailableUntilDate], 
            T.Version AS [X_ProjectPlanTaskWorker.Version], 
            T.VersionAntecedentID AS [X_ProjectPlanTaskWorker.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProjectPlanTaskWorker.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskWorker.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProjectPlanTaskWorker.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProjectPlanTaskWorker.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProjectPlanTaskWorker.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProjectPlanTaskWorker.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProjectPlanTaskWorker.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskWorkers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProspectusProject.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView223()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProspectusProject
        [NKD.Module.BusinessObjects.Store.X_ProspectusProject](T1.[X_ProspectusProject.ProspectusProjectID], T1.[X_ProspectusProject.ProjectID], T1.[X_ProspectusProject.ProspectusProjectName], T1.[X_ProspectusProject.CompanyName], T1.[X_ProspectusProject.CompanyID], T1.[X_ProspectusProject.Geologist], T1.[X_ProspectusProject.GeologistContactID], T1.[X_ProspectusProject.GeologyCompanyID], T1.[X_ProspectusProject.ListDate], T1.[X_ProspectusProject.Cost], T1.[X_ProspectusProject.CurrencyID], T1.[X_ProspectusProject.Pages], T1.[X_ProspectusProject.CountryID], T1.[X_ProspectusProject.CountryStateID], T1.[X_ProspectusProject.Place], T1.[X_ProspectusProject.TenementID], T1.[X_ProspectusProject.ProvinceID], T1.[X_ProspectusProject.Version], T1.[X_ProspectusProject.VersionAntecedentID], T1.[X_ProspectusProject.VersionCertainty], T1.[X_ProspectusProject.VersionWorkflowInstanceID], T1.[X_ProspectusProject.VersionUpdatedBy], T1.[X_ProspectusProject.VersionDeletedBy], T1.[X_ProspectusProject.VersionOwnerContactID], T1.[X_ProspectusProject.VersionOwnerCompanyID], T1.[X_ProspectusProject.VersionUpdated])
    FROM (
        SELECT 
            T.ProspectusProjectID AS [X_ProspectusProject.ProspectusProjectID], 
            T.ProjectID AS [X_ProspectusProject.ProjectID], 
            T.ProspectusProjectName AS [X_ProspectusProject.ProspectusProjectName], 
            T.CompanyName AS [X_ProspectusProject.CompanyName], 
            T.CompanyID AS [X_ProspectusProject.CompanyID], 
            T.Geologist AS [X_ProspectusProject.Geologist], 
            T.GeologistContactID AS [X_ProspectusProject.GeologistContactID], 
            T.GeologyCompanyID AS [X_ProspectusProject.GeologyCompanyID], 
            T.ListDate AS [X_ProspectusProject.ListDate], 
            T.Cost AS [X_ProspectusProject.Cost], 
            T.CurrencyID AS [X_ProspectusProject.CurrencyID], 
            T.Pages AS [X_ProspectusProject.Pages], 
            T.CountryID AS [X_ProspectusProject.CountryID], 
            T.CountryStateID AS [X_ProspectusProject.CountryStateID], 
            T.Place AS [X_ProspectusProject.Place], 
            T.TenementID AS [X_ProspectusProject.TenementID], 
            T.ProvinceID AS [X_ProspectusProject.ProvinceID], 
            T.Version AS [X_ProspectusProject.Version], 
            T.VersionAntecedentID AS [X_ProspectusProject.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProspectusProject.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProspectusProject.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProspectusProject.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProspectusProject.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProspectusProject.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProspectusProject.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProspectusProject.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProspectusProjects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProspectusProjectCommodity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView224()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProspectusProjectCommodity
        [NKD.Module.BusinessObjects.Store.X_ProspectusProjectCommodity](T1.[X_ProspectusProjectCommodity.ProspectusProjectCommodityID], T1.[X_ProspectusProjectCommodity.ProspectusProjectID], T1.[X_ProspectusProjectCommodity.CommodityID], T1.[X_ProspectusProjectCommodity.Version], T1.[X_ProspectusProjectCommodity.VersionAntecedentID], T1.[X_ProspectusProjectCommodity.VersionCertainty], T1.[X_ProspectusProjectCommodity.VersionWorkflowInstanceID], T1.[X_ProspectusProjectCommodity.VersionUpdatedBy], T1.[X_ProspectusProjectCommodity.VersionDeletedBy], T1.[X_ProspectusProjectCommodity.VersionOwnerContactID], T1.[X_ProspectusProjectCommodity.VersionOwnerCompanyID], T1.[X_ProspectusProjectCommodity.VersionUpdated])
    FROM (
        SELECT 
            T.ProspectusProjectCommodityID AS [X_ProspectusProjectCommodity.ProspectusProjectCommodityID], 
            T.ProspectusProjectID AS [X_ProspectusProjectCommodity.ProspectusProjectID], 
            T.CommodityID AS [X_ProspectusProjectCommodity.CommodityID], 
            T.Version AS [X_ProspectusProjectCommodity.Version], 
            T.VersionAntecedentID AS [X_ProspectusProjectCommodity.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProspectusProjectCommodity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProspectusProjectCommodity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProspectusProjectCommodity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProspectusProjectCommodity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProspectusProjectCommodity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProspectusProjectCommodity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProspectusProjectCommodity.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProspectusProjectCommodities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Province.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView225()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Province
        [NKD.Module.BusinessObjects.Store.X_Province](T1.[X_Province.ProvinceID], T1.[X_Province.ProvinceTypeID], T1.[X_Province.DefaultProvinceName], T1.[X_Province.ProvinceCode], T1.[X_Province.ProvinceGeography], T1.[X_Province.MarkerLatitudeWGS84], T1.[X_Province.MarkerLongitudeWGS84], T1.[X_Province.ProvinceGroupID], T1.[X_Province.CountryID], T1.[X_Province.CountryStateID], T1.[X_Province.DefaultCulture], T1.[X_Province.OwnerCompanyID], T1.[X_Province.ResponsibleContactID], T1.[X_Province.Comment], T1.[X_Province.Version], T1.[X_Province.VersionAntecedentID], T1.[X_Province.VersionCertainty], T1.[X_Province.VersionWorkflowInstanceID], T1.[X_Province.VersionUpdatedBy], T1.[X_Province.VersionDeletedBy], T1.[X_Province.VersionOwnerContactID], T1.[X_Province.VersionOwnerCompanyID], T1.[X_Province.VersionUpdated])
    FROM (
        SELECT 
            T.ProvinceID AS [X_Province.ProvinceID], 
            T.ProvinceTypeID AS [X_Province.ProvinceTypeID], 
            T.DefaultProvinceName AS [X_Province.DefaultProvinceName], 
            T.ProvinceCode AS [X_Province.ProvinceCode], 
            T.ProvinceGeography AS [X_Province.ProvinceGeography], 
            T.MarkerLatitudeWGS84 AS [X_Province.MarkerLatitudeWGS84], 
            T.MarkerLongitudeWGS84 AS [X_Province.MarkerLongitudeWGS84], 
            T.ProvinceGroupID AS [X_Province.ProvinceGroupID], 
            T.CountryID AS [X_Province.CountryID], 
            T.CountryStateID AS [X_Province.CountryStateID], 
            T.DefaultCulture AS [X_Province.DefaultCulture], 
            T.OwnerCompanyID AS [X_Province.OwnerCompanyID], 
            T.ResponsibleContactID AS [X_Province.ResponsibleContactID], 
            T.Comment AS [X_Province.Comment], 
            T.Version AS [X_Province.Version], 
            T.VersionAntecedentID AS [X_Province.VersionAntecedentID], 
            T.VersionCertainty AS [X_Province.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Province.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Province.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Province.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Province.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Province.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Province.VersionUpdated], 
            True AS _from0
        FROM NKDC.Provinces AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProvinceAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView226()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProvinceAlias
        [NKD.Module.BusinessObjects.Store.X_ProvinceAlias](T1.[X_ProvinceAlias.ProvinceAliasID], T1.[X_ProvinceAlias.ProvinceID], T1.[X_ProvinceAlias.Alias], T1.[X_ProvinceAlias.Culture], T1.[X_ProvinceAlias.Priority], T1.[X_ProvinceAlias.Version], T1.[X_ProvinceAlias.VersionAntecedentID], T1.[X_ProvinceAlias.VersionCertainty], T1.[X_ProvinceAlias.VersionWorkflowInstanceID], T1.[X_ProvinceAlias.VersionUpdatedBy], T1.[X_ProvinceAlias.VersionDeletedBy], T1.[X_ProvinceAlias.VersionOwnerContactID], T1.[X_ProvinceAlias.VersionOwnerCompanyID], T1.[X_ProvinceAlias.VersionUpdated])
    FROM (
        SELECT 
            T.ProvinceAliasID AS [X_ProvinceAlias.ProvinceAliasID], 
            T.ProvinceID AS [X_ProvinceAlias.ProvinceID], 
            T.Alias AS [X_ProvinceAlias.Alias], 
            T.Culture AS [X_ProvinceAlias.Culture], 
            T.Priority AS [X_ProvinceAlias.Priority], 
            T.Version AS [X_ProvinceAlias.Version], 
            T.VersionAntecedentID AS [X_ProvinceAlias.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProvinceAlias.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProvinceAlias.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProvinceAlias.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProvinceAlias.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProvinceAlias.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProvinceAlias.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProvinceAlias.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProvinceAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProvinceData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView227()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProvinceData
        [NKD.Module.BusinessObjects.Store.X_ProvinceData](T1.[X_ProvinceData.ProvinceDataID], T1.[X_ProvinceData.ParentProvinceDataID], T1.[X_ProvinceData.TableType], T1.[X_ProvinceData.ReferenceID], T1.[X_ProvinceData.ProvinceID], T1.[X_ProvinceData.Version], T1.[X_ProvinceData.VersionAntecedentID], T1.[X_ProvinceData.VersionCertainty], T1.[X_ProvinceData.VersionWorkflowInstanceID], T1.[X_ProvinceData.VersionUpdatedBy], T1.[X_ProvinceData.VersionDeletedBy], T1.[X_ProvinceData.VersionOwnerContactID], T1.[X_ProvinceData.VersionOwnerCompanyID], T1.[X_ProvinceData.VersionUpdated])
    FROM (
        SELECT 
            T.ProvinceDataID AS [X_ProvinceData.ProvinceDataID], 
            T.ParentProvinceDataID AS [X_ProvinceData.ParentProvinceDataID], 
            T.TableType AS [X_ProvinceData.TableType], 
            T.ReferenceID AS [X_ProvinceData.ReferenceID], 
            T.ProvinceID AS [X_ProvinceData.ProvinceID], 
            T.Version AS [X_ProvinceData.Version], 
            T.VersionAntecedentID AS [X_ProvinceData.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProvinceData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProvinceData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProvinceData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProvinceData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProvinceData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProvinceData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProvinceData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProvinceDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ProvinceRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView228()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ProvinceRelation
        [NKD.Module.BusinessObjects.Store.X_ProvinceRelation](T1.[X_ProvinceRelation.ProvinceRelationID], T1.[X_ProvinceRelation.OriginalProvinceID], T1.[X_ProvinceRelation.RelatedProvinceID], T1.[X_ProvinceRelation.RelationTypeID], T1.[X_ProvinceRelation.Related], T1.[X_ProvinceRelation.Version], T1.[X_ProvinceRelation.VersionAntecedentID], T1.[X_ProvinceRelation.VersionCertainty], T1.[X_ProvinceRelation.VersionWorkflowInstanceID], T1.[X_ProvinceRelation.VersionUpdatedBy], T1.[X_ProvinceRelation.VersionDeletedBy], T1.[X_ProvinceRelation.VersionOwnerContactID], T1.[X_ProvinceRelation.VersionOwnerCompanyID], T1.[X_ProvinceRelation.VersionUpdated])
    FROM (
        SELECT 
            T.ProvinceRelationID AS [X_ProvinceRelation.ProvinceRelationID], 
            T.OriginalProvinceID AS [X_ProvinceRelation.OriginalProvinceID], 
            T.RelatedProvinceID AS [X_ProvinceRelation.RelatedProvinceID], 
            T.RelationTypeID AS [X_ProvinceRelation.RelationTypeID], 
            T.Related AS [X_ProvinceRelation.Related], 
            T.Version AS [X_ProvinceRelation.Version], 
            T.VersionAntecedentID AS [X_ProvinceRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_ProvinceRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ProvinceRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ProvinceRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ProvinceRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ProvinceRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ProvinceRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ProvinceRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProvinceRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Recovery.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView229()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Recovery
        [NKD.Module.BusinessObjects.Store.X_Recovery](T1.[X_Recovery.RecoveryID], T1.[X_Recovery.HeaderID], T1.[X_Recovery.FromDepth], T1.[X_Recovery.ToDepth], T1.[X_Recovery.Advance], T1.[X_Recovery.CoreLoss], T1.[X_Recovery.CoreRecovered], T1.[X_Recovery.Solid], T1.[X_Recovery.Total], T1.[X_Recovery.Confident], T1.[X_Recovery.DrillSizeID], T1.[X_Recovery.CoreSize], T1.[X_Recovery.Comment], T1.[X_Recovery.Version], T1.[X_Recovery.VersionAntecedentID], T1.[X_Recovery.VersionCertainty], T1.[X_Recovery.VersionWorkflowInstanceID], T1.[X_Recovery.VersionUpdatedBy], T1.[X_Recovery.VersionDeletedBy], T1.[X_Recovery.VersionOwnerContactID], T1.[X_Recovery.VersionOwnerCompanyID], T1.[X_Recovery.VersionUpdated])
    FROM (
        SELECT 
            T.RecoveryID AS [X_Recovery.RecoveryID], 
            T.HeaderID AS [X_Recovery.HeaderID], 
            T.FromDepth AS [X_Recovery.FromDepth], 
            T.ToDepth AS [X_Recovery.ToDepth], 
            T.Advance AS [X_Recovery.Advance], 
            T.CoreLoss AS [X_Recovery.CoreLoss], 
            T.CoreRecovered AS [X_Recovery.CoreRecovered], 
            T.Solid AS [X_Recovery.Solid], 
            T.Total AS [X_Recovery.Total], 
            T.Confident AS [X_Recovery.Confident], 
            T.DrillSizeID AS [X_Recovery.DrillSizeID], 
            T.CoreSize AS [X_Recovery.CoreSize], 
            T.Comment AS [X_Recovery.Comment], 
            T.Version AS [X_Recovery.Version], 
            T.VersionAntecedentID AS [X_Recovery.VersionAntecedentID], 
            T.VersionCertainty AS [X_Recovery.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Recovery.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Recovery.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Recovery.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Recovery.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Recovery.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Recovery.VersionUpdated], 
            True AS _from0
        FROM NKDC.Recoveries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Sample.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView230()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Sample
        [NKD.Module.BusinessObjects.Store.X_Sample](T1.[X_Sample.SampleID], T1.[X_Sample.HeaderID], T1.[X_Sample.SampleCategoryID], T1.[X_Sample.SampleStateID], T1.[X_Sample.SampleTypeID], T1.[X_Sample.SampleName], T1.[X_Sample.SampleNumber], T1.[X_Sample.SampleTaken], T1.[X_Sample.FromDepth], T1.[X_Sample.ToDepth], T1.[X_Sample.SampleMassKg], T1.[X_Sample.DryMassKg], T1.[X_Sample.LocationID], T1.[X_Sample.Version], T1.[X_Sample.VersionAntecedentID], T1.[X_Sample.VersionCertainty], T1.[X_Sample.VersionWorkflowInstanceID], T1.[X_Sample.VersionUpdatedBy], T1.[X_Sample.VersionDeletedBy], T1.[X_Sample.VersionOwnerContactID], T1.[X_Sample.VersionOwnerCompanyID], T1.[X_Sample.VersionUpdated])
    FROM (
        SELECT 
            T.SampleID AS [X_Sample.SampleID], 
            T.HeaderID AS [X_Sample.HeaderID], 
            T.SampleCategoryID AS [X_Sample.SampleCategoryID], 
            T.SampleStateID AS [X_Sample.SampleStateID], 
            T.SampleTypeID AS [X_Sample.SampleTypeID], 
            T.SampleName AS [X_Sample.SampleName], 
            T.SampleNumber AS [X_Sample.SampleNumber], 
            T.SampleTaken AS [X_Sample.SampleTaken], 
            T.FromDepth AS [X_Sample.FromDepth], 
            T.ToDepth AS [X_Sample.ToDepth], 
            T.SampleMassKg AS [X_Sample.SampleMassKg], 
            T.DryMassKg AS [X_Sample.DryMassKg], 
            T.LocationID AS [X_Sample.LocationID], 
            T.Version AS [X_Sample.Version], 
            T.VersionAntecedentID AS [X_Sample.VersionAntecedentID], 
            T.VersionCertainty AS [X_Sample.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Sample.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Sample.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Sample.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Sample.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Sample.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Sample.VersionUpdated], 
            True AS _from0
        FROM NKDC.Samples AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_SecurityBlacklist.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView231()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_SecurityBlacklist
        [NKD.Module.BusinessObjects.Store.X_SecurityBlacklist](T1.[X_SecurityBlacklist.SecurityBlacklistID], T1.[X_SecurityBlacklist.OwnerApplicationID], T1.[X_SecurityBlacklist.OwnerCompanyID], T1.[X_SecurityBlacklist.OwnerContactID], T1.[X_SecurityBlacklist.OwnerProjectID], T1.[X_SecurityBlacklist.OwnerEntitySystemType], T1.[X_SecurityBlacklist.OwnerTableType], T1.[X_SecurityBlacklist.OwnerField], T1.[X_SecurityBlacklist.OwnerReferenceID], T1.[X_SecurityBlacklist.AccessorApplicationID], T1.[X_SecurityBlacklist.AccessorCompanyID], T1.[X_SecurityBlacklist.AccessorProjectID], T1.[X_SecurityBlacklist.AccessorContactID], T1.[X_SecurityBlacklist.AccessorRoleID], T1.[X_SecurityBlacklist.CanCreate], T1.[X_SecurityBlacklist.CanRead], T1.[X_SecurityBlacklist.CanUpdate], T1.[X_SecurityBlacklist.CanDelete], T1.[X_SecurityBlacklist.Version], T1.[X_SecurityBlacklist.VersionAntecedentID], T1.[X_SecurityBlacklist.VersionCertainty], T1.[X_SecurityBlacklist.VersionWorkflowInstanceID], T1.[X_SecurityBlacklist.VersionUpdatedBy], T1.[X_SecurityBlacklist.VersionDeletedBy], T1.[X_SecurityBlacklist.VersionOwnerContactID], T1.[X_SecurityBlacklist.VersionOwnerCompanyID], T1.[X_SecurityBlacklist.VersionUpdated])
    FROM (
        SELECT 
            T.SecurityBlacklistID AS [X_SecurityBlacklist.SecurityBlacklistID], 
            T.OwnerApplicationID AS [X_SecurityBlacklist.OwnerApplicationID], 
            T.OwnerCompanyID AS [X_SecurityBlacklist.OwnerCompanyID], 
            T.OwnerContactID AS [X_SecurityBlacklist.OwnerContactID], 
            T.OwnerProjectID AS [X_SecurityBlacklist.OwnerProjectID], 
            T.OwnerEntitySystemType AS [X_SecurityBlacklist.OwnerEntitySystemType], 
            T.OwnerTableType AS [X_SecurityBlacklist.OwnerTableType], 
            T.OwnerField AS [X_SecurityBlacklist.OwnerField], 
            T.OwnerReferenceID AS [X_SecurityBlacklist.OwnerReferenceID], 
            T.AccessorApplicationID AS [X_SecurityBlacklist.AccessorApplicationID], 
            T.AccessorCompanyID AS [X_SecurityBlacklist.AccessorCompanyID], 
            T.AccessorProjectID AS [X_SecurityBlacklist.AccessorProjectID], 
            T.AccessorContactID AS [X_SecurityBlacklist.AccessorContactID], 
            T.AccessorRoleID AS [X_SecurityBlacklist.AccessorRoleID], 
            T.CanCreate AS [X_SecurityBlacklist.CanCreate], 
            T.CanRead AS [X_SecurityBlacklist.CanRead], 
            T.CanUpdate AS [X_SecurityBlacklist.CanUpdate], 
            T.CanDelete AS [X_SecurityBlacklist.CanDelete], 
            T.Version AS [X_SecurityBlacklist.Version], 
            T.VersionAntecedentID AS [X_SecurityBlacklist.VersionAntecedentID], 
            T.VersionCertainty AS [X_SecurityBlacklist.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_SecurityBlacklist.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_SecurityBlacklist.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_SecurityBlacklist.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_SecurityBlacklist.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_SecurityBlacklist.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_SecurityBlacklist.VersionUpdated], 
            True AS _from0
        FROM NKDC.SecurityBlacklists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_SecurityWhitelist.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView232()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_SecurityWhitelist
        [NKD.Module.BusinessObjects.Store.X_SecurityWhitelist](T1.[X_SecurityWhitelist.SecurityWhitelistID], T1.[X_SecurityWhitelist.OwnerApplicationID], T1.[X_SecurityWhitelist.OwnerCompanyID], T1.[X_SecurityWhitelist.OwnerContactID], T1.[X_SecurityWhitelist.OwnerProjectID], T1.[X_SecurityWhitelist.OwnerEntitySystemType], T1.[X_SecurityWhitelist.OwnerTableType], T1.[X_SecurityWhitelist.OwnerField], T1.[X_SecurityWhitelist.OwnerReferenceID], T1.[X_SecurityWhitelist.AccessorApplicationID], T1.[X_SecurityWhitelist.AccessorCompanyID], T1.[X_SecurityWhitelist.AccessorProjectID], T1.[X_SecurityWhitelist.AccessorContactID], T1.[X_SecurityWhitelist.AccessorRoleID], T1.[X_SecurityWhitelist.CanCreate], T1.[X_SecurityWhitelist.CanRead], T1.[X_SecurityWhitelist.CanUpdate], T1.[X_SecurityWhitelist.CanDelete], T1.[X_SecurityWhitelist.Version], T1.[X_SecurityWhitelist.VersionAntecedentID], T1.[X_SecurityWhitelist.VersionCertainty], T1.[X_SecurityWhitelist.VersionWorkflowInstanceID], T1.[X_SecurityWhitelist.VersionUpdatedBy], T1.[X_SecurityWhitelist.VersionDeletedBy], T1.[X_SecurityWhitelist.VersionOwnerContactID], T1.[X_SecurityWhitelist.VersionOwnerCompanyID], T1.[X_SecurityWhitelist.VersionUpdated])
    FROM (
        SELECT 
            T.SecurityWhitelistID AS [X_SecurityWhitelist.SecurityWhitelistID], 
            T.OwnerApplicationID AS [X_SecurityWhitelist.OwnerApplicationID], 
            T.OwnerCompanyID AS [X_SecurityWhitelist.OwnerCompanyID], 
            T.OwnerContactID AS [X_SecurityWhitelist.OwnerContactID], 
            T.OwnerProjectID AS [X_SecurityWhitelist.OwnerProjectID], 
            T.OwnerEntitySystemType AS [X_SecurityWhitelist.OwnerEntitySystemType], 
            T.OwnerTableType AS [X_SecurityWhitelist.OwnerTableType], 
            T.OwnerField AS [X_SecurityWhitelist.OwnerField], 
            T.OwnerReferenceID AS [X_SecurityWhitelist.OwnerReferenceID], 
            T.AccessorApplicationID AS [X_SecurityWhitelist.AccessorApplicationID], 
            T.AccessorCompanyID AS [X_SecurityWhitelist.AccessorCompanyID], 
            T.AccessorProjectID AS [X_SecurityWhitelist.AccessorProjectID], 
            T.AccessorContactID AS [X_SecurityWhitelist.AccessorContactID], 
            T.AccessorRoleID AS [X_SecurityWhitelist.AccessorRoleID], 
            T.CanCreate AS [X_SecurityWhitelist.CanCreate], 
            T.CanRead AS [X_SecurityWhitelist.CanRead], 
            T.CanUpdate AS [X_SecurityWhitelist.CanUpdate], 
            T.CanDelete AS [X_SecurityWhitelist.CanDelete], 
            T.Version AS [X_SecurityWhitelist.Version], 
            T.VersionAntecedentID AS [X_SecurityWhitelist.VersionAntecedentID], 
            T.VersionCertainty AS [X_SecurityWhitelist.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_SecurityWhitelist.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_SecurityWhitelist.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_SecurityWhitelist.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_SecurityWhitelist.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_SecurityWhitelist.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_SecurityWhitelist.VersionUpdated], 
            True AS _from0
        FROM NKDC.SecurityWhitelists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Server.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView233()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Server
        [NKD.Module.BusinessObjects.Store.X_Server](T1.[X_Server.ServerID], T1.[X_Server.Hostname], T1.[X_Server.Domain], T1.[X_Server.IP], T1.[X_Server.ServerUniqueMachineCode1], T1.[X_Server.ServerUniqueMachineCode2], T1.[X_Server.ServerUniqueMachineCode3], T1.[X_Server.Certificate1], T1.[X_Server.Certificate2], T1.[X_Server.Version], T1.[X_Server.VersionAntecedentID], T1.[X_Server.VersionCertainty], T1.[X_Server.VersionWorkflowInstanceID], T1.[X_Server.VersionUpdatedBy], T1.[X_Server.VersionDeletedBy], T1.[X_Server.VersionOwnerContactID], T1.[X_Server.VersionOwnerCompanyID], T1.[X_Server.VersionUpdated])
    FROM (
        SELECT 
            T.ServerID AS [X_Server.ServerID], 
            T.Hostname AS [X_Server.Hostname], 
            T.Domain AS [X_Server.Domain], 
            T.IP AS [X_Server.IP], 
            T.ServerUniqueMachineCode1 AS [X_Server.ServerUniqueMachineCode1], 
            T.ServerUniqueMachineCode2 AS [X_Server.ServerUniqueMachineCode2], 
            T.ServerUniqueMachineCode3 AS [X_Server.ServerUniqueMachineCode3], 
            T.Certificate1 AS [X_Server.Certificate1], 
            T.Certificate2 AS [X_Server.Certificate2], 
            T.Version AS [X_Server.Version], 
            T.VersionAntecedentID AS [X_Server.VersionAntecedentID], 
            T.VersionCertainty AS [X_Server.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Server.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Server.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Server.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Server.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Server.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Server.VersionUpdated], 
            True AS _from0
        FROM NKDC.Servers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Survey.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView234()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Survey
        [NKD.Module.BusinessObjects.Store.X_Survey](T1.[X_Survey.SurveyID], T1.[X_Survey.HeaderID], T1.[X_Survey.Depth], T1.[X_Survey.Dip], T1.[X_Survey.MagneticDip], T1.[X_Survey.MagnetAffected], T1.[X_Survey.OriginalAzimuth], T1.[X_Survey.CorrectedAzimuth], T1.[X_Survey.Gravity], T1.[X_Survey.InstrumentModelID], T1.[X_Survey.InstrumentAssetID], T1.[X_Survey.Surveyed], T1.[X_Survey.SurveyContactID], T1.[X_Survey.SurveyCompanyID], T1.[X_Survey.Version], T1.[X_Survey.VersionAntecedentID], T1.[X_Survey.VersionCertainty], T1.[X_Survey.VersionWorkflowInstanceID], T1.[X_Survey.VersionUpdatedBy], T1.[X_Survey.VersionDeletedBy], T1.[X_Survey.VersionOwnerContactID], T1.[X_Survey.VersionOwnerCompanyID], T1.[X_Survey.VersionUpdated])
    FROM (
        SELECT 
            T.SurveyID AS [X_Survey.SurveyID], 
            T.HeaderID AS [X_Survey.HeaderID], 
            T.Depth AS [X_Survey.Depth], 
            T.Dip AS [X_Survey.Dip], 
            T.MagneticDip AS [X_Survey.MagneticDip], 
            T.MagnetAffected AS [X_Survey.MagnetAffected], 
            T.OriginalAzimuth AS [X_Survey.OriginalAzimuth], 
            T.CorrectedAzimuth AS [X_Survey.CorrectedAzimuth], 
            T.Gravity AS [X_Survey.Gravity], 
            T.InstrumentModelID AS [X_Survey.InstrumentModelID], 
            T.InstrumentAssetID AS [X_Survey.InstrumentAssetID], 
            T.Surveyed AS [X_Survey.Surveyed], 
            T.SurveyContactID AS [X_Survey.SurveyContactID], 
            T.SurveyCompanyID AS [X_Survey.SurveyCompanyID], 
            T.Version AS [X_Survey.Version], 
            T.VersionAntecedentID AS [X_Survey.VersionAntecedentID], 
            T.VersionCertainty AS [X_Survey.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Survey.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Survey.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Survey.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Survey.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Survey.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Survey.VersionUpdated], 
            True AS _from0
        FROM NKDC.Surveys AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Task.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView235()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Task
        [NKD.Module.BusinessObjects.Store.X_Task](T1.[X_Task.TaskID], T1.[X_Task.TaskName], T1.[X_Task.WorkTypeID], T1.[X_Task.WorkCompanyID], T1.[X_Task.WorkContactID], T1.[X_Task.GraphDataGroupID], T1.[X_Task.GraphDataID], T1.[X_Task.DefaultPriority], T1.[X_Task.EstimatedDuration], T1.[X_Task.EstimatedDurationUnitID], T1.[X_Task.EstimatedCompletion], T1.[X_Task.EstimatedCompletionUnitID], T1.[X_Task.EstimatedLabourCosts], T1.[X_Task.EstimatedCapitalCosts], T1.[X_Task.EstimatedValue], T1.[X_Task.EstimatedIntangibleValue], T1.[X_Task.EstimatedRevenue], T1.[X_Task.PerformanceMetricParameterID], T1.[X_Task.PerformanceMetricQuantity], T1.[X_Task.Comment], T1.[X_Task.Version], T1.[X_Task.VersionAntecedentID], T1.[X_Task.VersionCertainty], T1.[X_Task.VersionWorkflowInstanceID], T1.[X_Task.VersionUpdatedBy], T1.[X_Task.VersionDeletedBy], T1.[X_Task.VersionOwnerContactID], T1.[X_Task.VersionOwnerCompanyID], T1.[X_Task.VersionUpdated])
    FROM (
        SELECT 
            T.TaskID AS [X_Task.TaskID], 
            T.TaskName AS [X_Task.TaskName], 
            T.WorkTypeID AS [X_Task.WorkTypeID], 
            T.WorkCompanyID AS [X_Task.WorkCompanyID], 
            T.WorkContactID AS [X_Task.WorkContactID], 
            T.GraphDataGroupID AS [X_Task.GraphDataGroupID], 
            T.GraphDataID AS [X_Task.GraphDataID], 
            T.DefaultPriority AS [X_Task.DefaultPriority], 
            T.EstimatedDuration AS [X_Task.EstimatedDuration], 
            T.EstimatedDurationUnitID AS [X_Task.EstimatedDurationUnitID], 
            T.EstimatedCompletion AS [X_Task.EstimatedCompletion], 
            T.EstimatedCompletionUnitID AS [X_Task.EstimatedCompletionUnitID], 
            T.EstimatedLabourCosts AS [X_Task.EstimatedLabourCosts], 
            T.EstimatedCapitalCosts AS [X_Task.EstimatedCapitalCosts], 
            T.EstimatedValue AS [X_Task.EstimatedValue], 
            T.EstimatedIntangibleValue AS [X_Task.EstimatedIntangibleValue], 
            T.EstimatedRevenue AS [X_Task.EstimatedRevenue], 
            T.PerformanceMetricParameterID AS [X_Task.PerformanceMetricParameterID], 
            T.PerformanceMetricQuantity AS [X_Task.PerformanceMetricQuantity], 
            T.Comment AS [X_Task.Comment], 
            T.Version AS [X_Task.Version], 
            T.VersionAntecedentID AS [X_Task.VersionAntecedentID], 
            T.VersionCertainty AS [X_Task.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Task.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Task.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Task.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Task.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Task.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Task.VersionUpdated], 
            True AS _from0
        FROM NKDC.Tasks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_TaskData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView236()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_TaskData
        [NKD.Module.BusinessObjects.Store.X_TaskData](T1.[X_TaskData.TaskDataID], T1.[X_TaskData.ParentTaskDataID], T1.[X_TaskData.TableType], T1.[X_TaskData.ReferenceID], T1.[X_TaskData.TaskID], T1.[X_TaskData.Version], T1.[X_TaskData.VersionAntecedentID], T1.[X_TaskData.VersionCertainty], T1.[X_TaskData.VersionWorkflowInstanceID], T1.[X_TaskData.VersionUpdatedBy], T1.[X_TaskData.VersionDeletedBy], T1.[X_TaskData.VersionOwnerContactID], T1.[X_TaskData.VersionOwnerCompanyID], T1.[X_TaskData.VersionUpdated])
    FROM (
        SELECT 
            T.TaskDataID AS [X_TaskData.TaskDataID], 
            T.ParentTaskDataID AS [X_TaskData.ParentTaskDataID], 
            T.TableType AS [X_TaskData.TableType], 
            T.ReferenceID AS [X_TaskData.ReferenceID], 
            T.TaskID AS [X_TaskData.TaskID], 
            T.Version AS [X_TaskData.Version], 
            T.VersionAntecedentID AS [X_TaskData.VersionAntecedentID], 
            T.VersionCertainty AS [X_TaskData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_TaskData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_TaskData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_TaskData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_TaskData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_TaskData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_TaskData.VersionUpdated], 
            True AS _from0
        FROM NKDC.TaskDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_TaskRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView237()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_TaskRelation
        [NKD.Module.BusinessObjects.Store.X_TaskRelation](T1.[X_TaskRelation.TaskRelationID], T1.[X_TaskRelation.OriginalTaskID], T1.[X_TaskRelation.RelatedTaskID], T1.[X_TaskRelation.RelationTypeID], T1.[X_TaskRelation.Related], T1.[X_TaskRelation.Sequence], T1.[X_TaskRelation.Version], T1.[X_TaskRelation.VersionAntecedentID], T1.[X_TaskRelation.VersionCertainty], T1.[X_TaskRelation.VersionWorkflowInstanceID], T1.[X_TaskRelation.VersionUpdatedBy], T1.[X_TaskRelation.VersionDeletedBy], T1.[X_TaskRelation.VersionOwnerContactID], T1.[X_TaskRelation.VersionOwnerCompanyID], T1.[X_TaskRelation.VersionUpdated])
    FROM (
        SELECT 
            T.TaskRelationID AS [X_TaskRelation.TaskRelationID], 
            T.OriginalTaskID AS [X_TaskRelation.OriginalTaskID], 
            T.RelatedTaskID AS [X_TaskRelation.RelatedTaskID], 
            T.RelationTypeID AS [X_TaskRelation.RelationTypeID], 
            T.Related AS [X_TaskRelation.Related], 
            T.Sequence AS [X_TaskRelation.Sequence], 
            T.Version AS [X_TaskRelation.Version], 
            T.VersionAntecedentID AS [X_TaskRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_TaskRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_TaskRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_TaskRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_TaskRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_TaskRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_TaskRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_TaskRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.TaskRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Tenement.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView238()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Tenement
        [NKD.Module.BusinessObjects.Store.X_Tenement](T1.[X_Tenement.TenementID], T1.[X_Tenement.TenementName], T1.[X_Tenement.TenementNumber], T1.[X_Tenement.TenementDevelopmentPhase], T1.[X_Tenement.CountryID], T1.[X_Tenement.TenementBoundaryProvinceID], T1.[X_Tenement.OwnerCompanyID], T1.[X_Tenement.ApprovedByContactID], T1.[X_Tenement.ValidFrom], T1.[X_Tenement.Expiry], T1.[X_Tenement.Version], T1.[X_Tenement.VersionAntecedentID], T1.[X_Tenement.VersionCertainty], T1.[X_Tenement.VersionWorkflowInstanceID], T1.[X_Tenement.VersionUpdatedBy], T1.[X_Tenement.VersionDeletedBy], T1.[X_Tenement.VersionOwnerContactID], T1.[X_Tenement.VersionOwnerCompanyID], T1.[X_Tenement.VersionUpdated])
    FROM (
        SELECT 
            T.TenementID AS [X_Tenement.TenementID], 
            T.TenementName AS [X_Tenement.TenementName], 
            T.TenementNumber AS [X_Tenement.TenementNumber], 
            T.TenementDevelopmentPhase AS [X_Tenement.TenementDevelopmentPhase], 
            T.CountryID AS [X_Tenement.CountryID], 
            T.TenementBoundaryProvinceID AS [X_Tenement.TenementBoundaryProvinceID], 
            T.OwnerCompanyID AS [X_Tenement.OwnerCompanyID], 
            T.ApprovedByContactID AS [X_Tenement.ApprovedByContactID], 
            T.ValidFrom AS [X_Tenement.ValidFrom], 
            T.Expiry AS [X_Tenement.Expiry], 
            T.Version AS [X_Tenement.Version], 
            T.VersionAntecedentID AS [X_Tenement.VersionAntecedentID], 
            T.VersionCertainty AS [X_Tenement.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Tenement.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Tenement.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Tenement.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Tenement.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Tenement.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Tenement.VersionUpdated], 
            True AS _from0
        FROM NKDC.Tenements AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_TenementCommodity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView239()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_TenementCommodity
        [NKD.Module.BusinessObjects.Store.X_TenementCommodity](T1.[X_TenementCommodity.TenementCommodityID], T1.[X_TenementCommodity.TenementID], T1.[X_TenementCommodity.CommodityID], T1.[X_TenementCommodity.Version], T1.[X_TenementCommodity.VersionAntecedentID], T1.[X_TenementCommodity.VersionCertainty], T1.[X_TenementCommodity.VersionWorkflowInstanceID], T1.[X_TenementCommodity.VersionUpdatedBy], T1.[X_TenementCommodity.VersionDeletedBy], T1.[X_TenementCommodity.VersionOwnerContactID], T1.[X_TenementCommodity.VersionOwnerCompanyID], T1.[X_TenementCommodity.VersionUpdated])
    FROM (
        SELECT 
            T.TenementCommodityID AS [X_TenementCommodity.TenementCommodityID], 
            T.TenementID AS [X_TenementCommodity.TenementID], 
            T.CommodityID AS [X_TenementCommodity.CommodityID], 
            T.Version AS [X_TenementCommodity.Version], 
            T.VersionAntecedentID AS [X_TenementCommodity.VersionAntecedentID], 
            T.VersionCertainty AS [X_TenementCommodity.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_TenementCommodity.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_TenementCommodity.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_TenementCommodity.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_TenementCommodity.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_TenementCommodity.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_TenementCommodity.VersionUpdated], 
            True AS _from0
        FROM NKDC.TenementCommodities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_TenementProvince.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView240()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_TenementProvince
        [NKD.Module.BusinessObjects.Store.X_TenementProvince](T1.[X_TenementProvince.TenementProvinceID], T1.[X_TenementProvince.TenementID], T1.[X_TenementProvince.ProvinceID], T1.[X_TenementProvince.Version], T1.[X_TenementProvince.VersionAntecedentID], T1.[X_TenementProvince.VersionCertainty], T1.[X_TenementProvince.VersionWorkflowInstanceID], T1.[X_TenementProvince.VersionUpdatedBy], T1.[X_TenementProvince.VersionDeletedBy], T1.[X_TenementProvince.VersionOwnerContactID], T1.[X_TenementProvince.VersionOwnerCompanyID], T1.[X_TenementProvince.VersionUpdated])
    FROM (
        SELECT 
            T.TenementProvinceID AS [X_TenementProvince.TenementProvinceID], 
            T.TenementID AS [X_TenementProvince.TenementID], 
            T.ProvinceID AS [X_TenementProvince.ProvinceID], 
            T.Version AS [X_TenementProvince.Version], 
            T.VersionAntecedentID AS [X_TenementProvince.VersionAntecedentID], 
            T.VersionCertainty AS [X_TenementProvince.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_TenementProvince.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_TenementProvince.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_TenementProvince.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_TenementProvince.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_TenementProvince.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_TenementProvince.VersionUpdated], 
            True AS _from0
        FROM NKDC.TenementProvinces AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_TenementRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView241()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_TenementRelation
        [NKD.Module.BusinessObjects.Store.X_TenementRelation](T1.[X_TenementRelation.TenementRelationID], T1.[X_TenementRelation.TenementID], T1.[X_TenementRelation.ParentTenementID], T1.[X_TenementRelation.Version], T1.[X_TenementRelation.VersionAntecedentID], T1.[X_TenementRelation.VersionCertainty], T1.[X_TenementRelation.VersionWorkflowInstanceID], T1.[X_TenementRelation.VersionUpdatedBy], T1.[X_TenementRelation.VersionDeletedBy], T1.[X_TenementRelation.VersionOwnerContactID], T1.[X_TenementRelation.VersionOwnerCompanyID], T1.[X_TenementRelation.VersionUpdated])
    FROM (
        SELECT 
            T.TenementRelationID AS [X_TenementRelation.TenementRelationID], 
            T.TenementID AS [X_TenementRelation.TenementID], 
            T.ParentTenementID AS [X_TenementRelation.ParentTenementID], 
            T.Version AS [X_TenementRelation.Version], 
            T.VersionAntecedentID AS [X_TenementRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_TenementRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_TenementRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_TenementRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_TenementRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_TenementRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_TenementRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_TenementRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.TenementRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_UsageAudit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView242()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_UsageAudit
        [NKD.Module.BusinessObjects.Store.X_UsageAudit](T1.[X_UsageAudit.UsageAuditID], T1.[X_UsageAudit.UsageID], T1.[X_UsageAudit.UsageAuditTypeID], T1.[X_UsageAudit.EntitySystemType], T1.[X_UsageAudit.EntityID], T1.[X_UsageAudit.Action], T1.[X_UsageAudit.Audited], T1.[X_UsageAudit.ContactID], T1.[X_UsageAudit.Version], T1.[X_UsageAudit.VersionAntecedentID], T1.[X_UsageAudit.VersionCertainty], T1.[X_UsageAudit.VersionWorkflowInstanceID], T1.[X_UsageAudit.VersionUpdatedBy], T1.[X_UsageAudit.VersionDeletedBy], T1.[X_UsageAudit.VersionOwnerContactID], T1.[X_UsageAudit.VersionOwnerCompanyID], T1.[X_UsageAudit.VersionUpdated])
    FROM (
        SELECT 
            T.UsageAuditID AS [X_UsageAudit.UsageAuditID], 
            T.UsageID AS [X_UsageAudit.UsageID], 
            T.UsageAuditTypeID AS [X_UsageAudit.UsageAuditTypeID], 
            T.EntitySystemType AS [X_UsageAudit.EntitySystemType], 
            T.EntityID AS [X_UsageAudit.EntityID], 
            T.Action AS [X_UsageAudit.Action], 
            T.Audited AS [X_UsageAudit.Audited], 
            T.ContactID AS [X_UsageAudit.ContactID], 
            T.Version AS [X_UsageAudit.Version], 
            T.VersionAntecedentID AS [X_UsageAudit.VersionAntecedentID], 
            T.VersionCertainty AS [X_UsageAudit.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_UsageAudit.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_UsageAudit.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_UsageAudit.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_UsageAudit.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_UsageAudit.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_UsageAudit.VersionUpdated], 
            True AS _from0
        FROM NKDC.UsageAuditViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_WaterFlow.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView243()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_WaterFlow
        [NKD.Module.BusinessObjects.Store.X_WaterFlow](T1.[X_WaterFlow.WaterFlowID], T1.[X_WaterFlow.HeaderID], T1.[X_WaterFlow.TestDepth], T1.[X_WaterFlow.TestDate], T1.[X_WaterFlow.SampleTypeID], T1.[X_WaterFlow.SampleNumber], T1.[X_WaterFlow.FlowTestTypeID], T1.[X_WaterFlow.FlowHeight], T1.[X_WaterFlow.FlowRate], T1.[X_WaterFlow.Ph], T1.[X_WaterFlow.TotalDissolvedSolids], T1.[X_WaterFlow.ElectricalConductivity], T1.[X_WaterFlow.Temperature], T1.[X_WaterFlow.Pressure], T1.[X_WaterFlow.Comment], T1.[X_WaterFlow.Version], T1.[X_WaterFlow.VersionAntecedentID], T1.[X_WaterFlow.VersionCertainty], T1.[X_WaterFlow.VersionWorkflowInstanceID], T1.[X_WaterFlow.VersionUpdatedBy], T1.[X_WaterFlow.VersionDeletedBy], T1.[X_WaterFlow.VersionOwnerContactID], T1.[X_WaterFlow.VersionOwnerCompanyID], T1.[X_WaterFlow.VersionUpdated])
    FROM (
        SELECT 
            T.WaterFlowID AS [X_WaterFlow.WaterFlowID], 
            T.HeaderID AS [X_WaterFlow.HeaderID], 
            T.TestDepth AS [X_WaterFlow.TestDepth], 
            T.TestDate AS [X_WaterFlow.TestDate], 
            T.SampleTypeID AS [X_WaterFlow.SampleTypeID], 
            T.SampleNumber AS [X_WaterFlow.SampleNumber], 
            T.FlowTestTypeID AS [X_WaterFlow.FlowTestTypeID], 
            T.FlowHeight AS [X_WaterFlow.FlowHeight], 
            T.FlowRate AS [X_WaterFlow.FlowRate], 
            T.Ph AS [X_WaterFlow.Ph], 
            T.TotalDissolvedSolids AS [X_WaterFlow.TotalDissolvedSolids], 
            T.ElectricalConductivity AS [X_WaterFlow.ElectricalConductivity], 
            T.Temperature AS [X_WaterFlow.Temperature], 
            T.Pressure AS [X_WaterFlow.Pressure], 
            T.Comment AS [X_WaterFlow.Comment], 
            T.Version AS [X_WaterFlow.Version], 
            T.VersionAntecedentID AS [X_WaterFlow.VersionAntecedentID], 
            T.VersionCertainty AS [X_WaterFlow.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_WaterFlow.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_WaterFlow.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_WaterFlow.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_WaterFlow.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_WaterFlow.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_WaterFlow.VersionUpdated], 
            True AS _from0
        FROM NKDC.WaterFlows AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LithologyAdjective.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView244()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LithologyAdjective
        [NKD.Module.BusinessObjects.Store.X_LithologyAdjective](T1.[X_LithologyAdjective.LithologyAdjectiveID], T1.[X_LithologyAdjective.LithologyID], T1.[X_LithologyAdjective.AdjectiveID], T1.[X_LithologyAdjective.Sequence], T1.[X_LithologyAdjective.Version], T1.[X_LithologyAdjective.VersionAntecedentID], T1.[X_LithologyAdjective.VersionCertainty], T1.[X_LithologyAdjective.VersionWorkflowInstanceID], T1.[X_LithologyAdjective.VersionUpdatedBy], T1.[X_LithologyAdjective.VersionDeletedBy], T1.[X_LithologyAdjective.VersionOwnerContactID], T1.[X_LithologyAdjective.VersionOwnerCompanyID], T1.[X_LithologyAdjective.VersionUpdated])
    FROM (
        SELECT 
            T.LithologyAdjectiveID AS [X_LithologyAdjective.LithologyAdjectiveID], 
            T.LithologyID AS [X_LithologyAdjective.LithologyID], 
            T.AdjectiveID AS [X_LithologyAdjective.AdjectiveID], 
            T.Sequence AS [X_LithologyAdjective.Sequence], 
            T.Version AS [X_LithologyAdjective.Version], 
            T.VersionAntecedentID AS [X_LithologyAdjective.VersionAntecedentID], 
            T.VersionCertainty AS [X_LithologyAdjective.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LithologyAdjective.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LithologyAdjective.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LithologyAdjective.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LithologyAdjective.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LithologyAdjective.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LithologyAdjective.VersionUpdated], 
            True AS _from0
        FROM NKDC.LithologyAdjectives AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LithologySedimentaryFeature.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView245()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LithologySedimentaryFeature
        [NKD.Module.BusinessObjects.Store.X_LithologySedimentaryFeature](T1.[X_LithologySedimentaryFeature.LithologySedimentaryFeatureID], T1.[X_LithologySedimentaryFeature.LithologyID], T1.[X_LithologySedimentaryFeature.SedimentaryFeatureID], T1.[X_LithologySedimentaryFeature.Sequence], T1.[X_LithologySedimentaryFeature.Version], T1.[X_LithologySedimentaryFeature.VersionAntecedentID], T1.[X_LithologySedimentaryFeature.VersionCertainty], T1.[X_LithologySedimentaryFeature.VersionWorkflowInstanceID], T1.[X_LithologySedimentaryFeature.VersionUpdatedBy], T1.[X_LithologySedimentaryFeature.VersionDeletedBy], T1.[X_LithologySedimentaryFeature.VersionOwnerContactID], T1.[X_LithologySedimentaryFeature.VersionOwnerCompanyID], T1.[X_LithologySedimentaryFeature.VersionUpdated])
    FROM (
        SELECT 
            T.LithologySedimentaryFeatureID AS [X_LithologySedimentaryFeature.LithologySedimentaryFeatureID], 
            T.LithologyID AS [X_LithologySedimentaryFeature.LithologyID], 
            T.SedimentaryFeatureID AS [X_LithologySedimentaryFeature.SedimentaryFeatureID], 
            T.Sequence AS [X_LithologySedimentaryFeature.Sequence], 
            T.Version AS [X_LithologySedimentaryFeature.Version], 
            T.VersionAntecedentID AS [X_LithologySedimentaryFeature.VersionAntecedentID], 
            T.VersionCertainty AS [X_LithologySedimentaryFeature.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LithologySedimentaryFeature.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LithologySedimentaryFeature.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LithologySedimentaryFeature.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LithologySedimentaryFeature.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LithologySedimentaryFeature.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LithologySedimentaryFeature.VersionUpdated], 
            True AS _from0
        FROM NKDC.LithologySedimentaryFeatures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_HeaderHolePurpose.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView246()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_HeaderHolePurpose
        [NKD.Module.BusinessObjects.Store.X_HeaderHolePurpose](T1.[X_HeaderHolePurpose.HeaderHolePurposeID], T1.[X_HeaderHolePurpose.HeaderID], T1.[X_HeaderHolePurpose.HolePurposeID], T1.[X_HeaderHolePurpose.Sequence], T1.[X_HeaderHolePurpose.Version], T1.[X_HeaderHolePurpose.VersionAntecedentID], T1.[X_HeaderHolePurpose.VersionCertainty], T1.[X_HeaderHolePurpose.VersionWorkflowInstanceID], T1.[X_HeaderHolePurpose.VersionUpdatedBy], T1.[X_HeaderHolePurpose.VersionDeletedBy], T1.[X_HeaderHolePurpose.VersionOwnerContactID], T1.[X_HeaderHolePurpose.VersionOwnerCompanyID], T1.[X_HeaderHolePurpose.VersionUpdated])
    FROM (
        SELECT 
            T.HeaderHolePurposeID AS [X_HeaderHolePurpose.HeaderHolePurposeID], 
            T.HeaderID AS [X_HeaderHolePurpose.HeaderID], 
            T.HolePurposeID AS [X_HeaderHolePurpose.HolePurposeID], 
            T.Sequence AS [X_HeaderHolePurpose.Sequence], 
            T.Version AS [X_HeaderHolePurpose.Version], 
            T.VersionAntecedentID AS [X_HeaderHolePurpose.VersionAntecedentID], 
            T.VersionCertainty AS [X_HeaderHolePurpose.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_HeaderHolePurpose.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_HeaderHolePurpose.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_HeaderHolePurpose.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_HeaderHolePurpose.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_HeaderHolePurpose.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_HeaderHolePurpose.VersionUpdated], 
            True AS _from0
        FROM NKDC.HeaderHolePurposes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LithologyRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView247()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LithologyRelation
        [NKD.Module.BusinessObjects.Store.X_LithologyRelation](T1.[X_LithologyRelation.LithologyRelationID], T1.[X_LithologyRelation.OriginalLithologyID], T1.[X_LithologyRelation.RelatedLithologyID], T1.[X_LithologyRelation.RelationTypeID], T1.[X_LithologyRelation.Related], T1.[X_LithologyRelation.Sequence], T1.[X_LithologyRelation.Version], T1.[X_LithologyRelation.VersionAntecedentID], T1.[X_LithologyRelation.VersionCertainty], T1.[X_LithologyRelation.VersionWorkflowInstanceID], T1.[X_LithologyRelation.VersionUpdatedBy], T1.[X_LithologyRelation.VersionDeletedBy], T1.[X_LithologyRelation.VersionOwnerContactID], T1.[X_LithologyRelation.VersionOwnerCompanyID], T1.[X_LithologyRelation.VersionUpdated])
    FROM (
        SELECT 
            T.LithologyRelationID AS [X_LithologyRelation.LithologyRelationID], 
            T.OriginalLithologyID AS [X_LithologyRelation.OriginalLithologyID], 
            T.RelatedLithologyID AS [X_LithologyRelation.RelatedLithologyID], 
            T.RelationTypeID AS [X_LithologyRelation.RelationTypeID], 
            T.Related AS [X_LithologyRelation.Related], 
            T.Sequence AS [X_LithologyRelation.Sequence], 
            T.Version AS [X_LithologyRelation.Version], 
            T.VersionAntecedentID AS [X_LithologyRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_LithologyRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LithologyRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LithologyRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LithologyRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LithologyRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LithologyRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LithologyRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.LithologyRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_FileDataWorkType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView248()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_FileDataWorkType
        [NKD.Module.BusinessObjects.Store.X_FileDataWorkType](T1.[X_FileDataWorkType.FileDataWorkTypeID], T1.[X_FileDataWorkType.FileDataID], T1.[X_FileDataWorkType.WorkTypeID], T1.[X_FileDataWorkType.ProcessName], T1.[X_FileDataWorkType.Sequence], T1.[X_FileDataWorkType.Context], T1.[X_FileDataWorkType.Version], T1.[X_FileDataWorkType.VersionAntecedentID], T1.[X_FileDataWorkType.VersionCertainty], T1.[X_FileDataWorkType.VersionWorkflowInstanceID], T1.[X_FileDataWorkType.VersionUpdatedBy], T1.[X_FileDataWorkType.VersionDeletedBy], T1.[X_FileDataWorkType.VersionOwnerContactID], T1.[X_FileDataWorkType.VersionOwnerCompanyID], T1.[X_FileDataWorkType.VersionUpdated])
    FROM (
        SELECT 
            T.FileDataWorkTypeID AS [X_FileDataWorkType.FileDataWorkTypeID], 
            T.FileDataID AS [X_FileDataWorkType.FileDataID], 
            T.WorkTypeID AS [X_FileDataWorkType.WorkTypeID], 
            T.ProcessName AS [X_FileDataWorkType.ProcessName], 
            T.Sequence AS [X_FileDataWorkType.Sequence], 
            T.Context AS [X_FileDataWorkType.Context], 
            T.Version AS [X_FileDataWorkType.Version], 
            T.VersionAntecedentID AS [X_FileDataWorkType.VersionAntecedentID], 
            T.VersionCertainty AS [X_FileDataWorkType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_FileDataWorkType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_FileDataWorkType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_FileDataWorkType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_FileDataWorkType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_FileDataWorkType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_FileDataWorkType.VersionUpdated], 
            True AS _from0
        FROM NKDC.FileDataWorkTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryWorkflowType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView249()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryWorkflowType
        [NKD.Module.BusinessObjects.Store.E_DictionaryWorkflowType](T1.[E_DictionaryWorkflowType.WorkflowTypeID], T1.[E_DictionaryWorkflowType.StandardWorkflowTypeName], T1.[E_DictionaryWorkflowType.CustomWorkflowTypeName], T1.[E_DictionaryWorkflowType.Description], T1.[E_DictionaryWorkflowType.Version], T1.[E_DictionaryWorkflowType.VersionAntecedentID], T1.[E_DictionaryWorkflowType.VersionCertainty], T1.[E_DictionaryWorkflowType.VersionWorkflowInstanceID], T1.[E_DictionaryWorkflowType.VersionUpdatedBy], T1.[E_DictionaryWorkflowType.VersionDeletedBy], T1.[E_DictionaryWorkflowType.VersionOwnerContactID], T1.[E_DictionaryWorkflowType.VersionOwnerCompanyID], T1.[E_DictionaryWorkflowType.VersionUpdated])
    FROM (
        SELECT 
            T.WorkflowTypeID AS [E_DictionaryWorkflowType.WorkflowTypeID], 
            T.StandardWorkflowTypeName AS [E_DictionaryWorkflowType.StandardWorkflowTypeName], 
            T.CustomWorkflowTypeName AS [E_DictionaryWorkflowType.CustomWorkflowTypeName], 
            T.Description AS [E_DictionaryWorkflowType.Description], 
            T.Version AS [E_DictionaryWorkflowType.Version], 
            T.VersionAntecedentID AS [E_DictionaryWorkflowType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryWorkflowType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryWorkflowType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryWorkflowType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryWorkflowType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryWorkflowType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryWorkflowType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryWorkflowType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryWorkflowTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Workflow.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView250()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Workflow
        [NKD.Module.BusinessObjects.Store.E_Workflow](T1.[E_Workflow.WorkflowID], T1.[E_Workflow.WorkflowName], T1.[E_Workflow.WorkflowTypeID], T1.[E_Workflow.ApplicationID], T1.[E_Workflow.XAML], T1.[E_Workflow.DLL], T1.[E_Workflow.FullName], T1.[E_Workflow.Version], T1.[E_Workflow.VersionAntecedentID], T1.[E_Workflow.VersionCertainty], T1.[E_Workflow.VersionWorkflowInstanceID], T1.[E_Workflow.VersionUpdatedBy], T1.[E_Workflow.VersionDeletedBy], T1.[E_Workflow.VersionOwnerContactID], T1.[E_Workflow.VersionOwnerCompanyID], T1.[E_Workflow.VersionUpdated])
    FROM (
        SELECT 
            T.WorkflowID AS [E_Workflow.WorkflowID], 
            T.WorkflowName AS [E_Workflow.WorkflowName], 
            T.WorkflowTypeID AS [E_Workflow.WorkflowTypeID], 
            T.ApplicationID AS [E_Workflow.ApplicationID], 
            T.XAML AS [E_Workflow.XAML], 
            T.DLL AS [E_Workflow.DLL], 
            T.FullName AS [E_Workflow.FullName], 
            T.Version AS [E_Workflow.Version], 
            T.VersionAntecedentID AS [E_Workflow.VersionAntecedentID], 
            T.VersionCertainty AS [E_Workflow.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Workflow.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Workflow.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Workflow.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Workflow.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Workflow.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Workflow.VersionUpdated], 
            True AS _from0
        FROM NKDC.Workflows AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsample.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView251()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupSubsample
        [NKD.Module.BusinessObjects.Store.X_AssayGroupSubsample](T1.[X_AssayGroupSubsample.AssayGroupSubsampleID], T1.[X_AssayGroupSubsample.AssayGroupID], T1.[X_AssayGroupSubsample.AssayGroupWorkflowProcedureID], T1.[X_AssayGroupSubsample.Sequence], T1.[X_AssayGroupSubsample.LabSubsampleName], T1.[X_AssayGroupSubsample.SampleAntecedentID], T1.[X_AssayGroupSubsample.FromDepth], T1.[X_AssayGroupSubsample.ToDepth], T1.[X_AssayGroupSubsample.AgitationMethodID], T1.[X_AssayGroupSubsample.DurationProcedureSeconds], T1.[X_AssayGroupSubsample.DurationTotalSeconds], T1.[X_AssayGroupSubsample.RackBlock], T1.[X_AssayGroupSubsample.RackPosition], T1.[X_AssayGroupSubsample.SubsampledBy], T1.[X_AssayGroupSubsample.Subsampled], T1.[X_AssayGroupSubsample.Comment], T1.[X_AssayGroupSubsample.Version], T1.[X_AssayGroupSubsample.VersionAntecedentID], T1.[X_AssayGroupSubsample.VersionCertainty], T1.[X_AssayGroupSubsample.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsample.VersionUpdatedBy], T1.[X_AssayGroupSubsample.VersionDeletedBy], T1.[X_AssayGroupSubsample.VersionOwnerContactID], T1.[X_AssayGroupSubsample.VersionOwnerCompanyID], T1.[X_AssayGroupSubsample.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupSubsampleID AS [X_AssayGroupSubsample.AssayGroupSubsampleID], 
            T.AssayGroupID AS [X_AssayGroupSubsample.AssayGroupID], 
            T.AssayGroupWorkflowProcedureID AS [X_AssayGroupSubsample.AssayGroupWorkflowProcedureID], 
            T.Sequence AS [X_AssayGroupSubsample.Sequence], 
            T.LabSubsampleName AS [X_AssayGroupSubsample.LabSubsampleName], 
            T.SampleAntecedentID AS [X_AssayGroupSubsample.SampleAntecedentID], 
            T.FromDepth AS [X_AssayGroupSubsample.FromDepth], 
            T.ToDepth AS [X_AssayGroupSubsample.ToDepth], 
            T.AgitationMethodID AS [X_AssayGroupSubsample.AgitationMethodID], 
            T.DurationProcedureSeconds AS [X_AssayGroupSubsample.DurationProcedureSeconds], 
            T.DurationTotalSeconds AS [X_AssayGroupSubsample.DurationTotalSeconds], 
            T.RackBlock AS [X_AssayGroupSubsample.RackBlock], 
            T.RackPosition AS [X_AssayGroupSubsample.RackPosition], 
            T.SubsampledBy AS [X_AssayGroupSubsample.SubsampledBy], 
            T.Subsampled AS [X_AssayGroupSubsample.Subsampled], 
            T.Comment AS [X_AssayGroupSubsample.Comment], 
            T.Version AS [X_AssayGroupSubsample.Version], 
            T.VersionAntecedentID AS [X_AssayGroupSubsample.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupSubsample.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsample.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupSubsample.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupSubsample.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupSubsample.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupSubsample.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupSubsample.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupSubsamples AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleChemical.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView252()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupSubsampleChemical
        [NKD.Module.BusinessObjects.Store.X_AssayGroupSubsampleChemical](T1.[X_AssayGroupSubsampleChemical.AssayGroupSubsampleChemicalID], T1.[X_AssayGroupSubsampleChemical.AssayGroupSubsampleID], T1.[X_AssayGroupSubsampleChemical.ChemicalID], T1.[X_AssayGroupSubsampleChemical.Moles], T1.[X_AssayGroupSubsampleChemical.Version], T1.[X_AssayGroupSubsampleChemical.VersionAntecedentID], T1.[X_AssayGroupSubsampleChemical.VersionCertainty], T1.[X_AssayGroupSubsampleChemical.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsampleChemical.VersionUpdatedBy], T1.[X_AssayGroupSubsampleChemical.VersionDeletedBy], T1.[X_AssayGroupSubsampleChemical.VersionOwnerContactID], T1.[X_AssayGroupSubsampleChemical.VersionOwnerCompanyID], T1.[X_AssayGroupSubsampleChemical.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupSubsampleChemicalID AS [X_AssayGroupSubsampleChemical.AssayGroupSubsampleChemicalID], 
            T.AssayGroupSubsampleID AS [X_AssayGroupSubsampleChemical.AssayGroupSubsampleID], 
            T.ChemicalID AS [X_AssayGroupSubsampleChemical.ChemicalID], 
            T.Moles AS [X_AssayGroupSubsampleChemical.Moles], 
            T.Version AS [X_AssayGroupSubsampleChemical.Version], 
            T.VersionAntecedentID AS [X_AssayGroupSubsampleChemical.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupSubsampleChemical.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsampleChemical.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupSubsampleChemical.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupSubsampleChemical.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupSubsampleChemical.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupSubsampleChemical.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupSubsampleChemical.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupSubsampleChemicals AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleEquipment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView253()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupSubsampleEquipment
        [NKD.Module.BusinessObjects.Store.X_AssayGroupSubsampleEquipment](T1.[X_AssayGroupSubsampleEquipment.AssayGroupSubsampleEquipmentID], T1.[X_AssayGroupSubsampleEquipment.AssayGroupSubsampleID], T1.[X_AssayGroupSubsampleEquipment.AssetID], T1.[X_AssayGroupSubsampleEquipment.Version], T1.[X_AssayGroupSubsampleEquipment.VersionAntecedentID], T1.[X_AssayGroupSubsampleEquipment.VersionCertainty], T1.[X_AssayGroupSubsampleEquipment.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsampleEquipment.VersionUpdatedBy], T1.[X_AssayGroupSubsampleEquipment.VersionDeletedBy], T1.[X_AssayGroupSubsampleEquipment.VersionOwnerContactID], T1.[X_AssayGroupSubsampleEquipment.VersionOwnerCompanyID], T1.[X_AssayGroupSubsampleEquipment.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupSubsampleEquipmentID AS [X_AssayGroupSubsampleEquipment.AssayGroupSubsampleEquipmentID], 
            T.AssayGroupSubsampleID AS [X_AssayGroupSubsampleEquipment.AssayGroupSubsampleID], 
            T.AssetID AS [X_AssayGroupSubsampleEquipment.AssetID], 
            T.Version AS [X_AssayGroupSubsampleEquipment.Version], 
            T.VersionAntecedentID AS [X_AssayGroupSubsampleEquipment.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupSubsampleEquipment.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsampleEquipment.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupSubsampleEquipment.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupSubsampleEquipment.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupSubsampleEquipment.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupSubsampleEquipment.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupSubsampleEquipment.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupSubsampleEquipments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsamplePrecondition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView254()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupSubsamplePrecondition
        [NKD.Module.BusinessObjects.Store.X_AssayGroupSubsamplePrecondition](T1.[X_AssayGroupSubsamplePrecondition.AssayGroupSubsamplePreconditionID], T1.[X_AssayGroupSubsamplePrecondition.AssayGroupSubsampleID], T1.[X_AssayGroupSubsamplePrecondition.AssayPreconditionTypeID], T1.[X_AssayGroupSubsamplePrecondition.PreconditionName], T1.[X_AssayGroupSubsamplePrecondition.PreconditionParameterID], T1.[X_AssayGroupSubsamplePrecondition.Precondition], T1.[X_AssayGroupSubsamplePrecondition.PreconditionMinimum], T1.[X_AssayGroupSubsamplePrecondition.PreconditionMaximum], T1.[X_AssayGroupSubsamplePrecondition.Version], T1.[X_AssayGroupSubsamplePrecondition.VersionAntecedentID], T1.[X_AssayGroupSubsamplePrecondition.VersionCertainty], T1.[X_AssayGroupSubsamplePrecondition.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsamplePrecondition.VersionUpdatedBy], T1.[X_AssayGroupSubsamplePrecondition.VersionDeletedBy], T1.[X_AssayGroupSubsamplePrecondition.VersionOwnerContactID], T1.[X_AssayGroupSubsamplePrecondition.VersionOwnerCompanyID], T1.[X_AssayGroupSubsamplePrecondition.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupSubsamplePreconditionID AS [X_AssayGroupSubsamplePrecondition.AssayGroupSubsamplePreconditionID], 
            T.AssayGroupSubsampleID AS [X_AssayGroupSubsamplePrecondition.AssayGroupSubsampleID], 
            T.AssayPreconditionTypeID AS [X_AssayGroupSubsamplePrecondition.AssayPreconditionTypeID], 
            T.PreconditionName AS [X_AssayGroupSubsamplePrecondition.PreconditionName], 
            T.PreconditionParameterID AS [X_AssayGroupSubsamplePrecondition.PreconditionParameterID], 
            T.Precondition AS [X_AssayGroupSubsamplePrecondition.Precondition], 
            T.PreconditionMinimum AS [X_AssayGroupSubsamplePrecondition.PreconditionMinimum], 
            T.PreconditionMaximum AS [X_AssayGroupSubsamplePrecondition.PreconditionMaximum], 
            T.Version AS [X_AssayGroupSubsamplePrecondition.Version], 
            T.VersionAntecedentID AS [X_AssayGroupSubsamplePrecondition.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupSubsamplePrecondition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsamplePrecondition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupSubsamplePrecondition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupSubsamplePrecondition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupSubsamplePrecondition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupSubsamplePrecondition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupSubsamplePrecondition.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupSubsamplePreconditions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView255()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupSubsampleRelation
        [NKD.Module.BusinessObjects.Store.X_AssayGroupSubsampleRelation](T1.[X_AssayGroupSubsampleRelation.AssayGroupSubsampleRelationID], T1.[X_AssayGroupSubsampleRelation.SourceSubsampleID], T1.[X_AssayGroupSubsampleRelation.DestinationSubsampleID], T1.[X_AssayGroupSubsampleRelation.Sequence], T1.[X_AssayGroupSubsampleRelation.Version], T1.[X_AssayGroupSubsampleRelation.VersionAntecedentID], T1.[X_AssayGroupSubsampleRelation.VersionCertainty], T1.[X_AssayGroupSubsampleRelation.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsampleRelation.VersionUpdatedBy], T1.[X_AssayGroupSubsampleRelation.VersionDeletedBy], T1.[X_AssayGroupSubsampleRelation.VersionOwnerContactID], T1.[X_AssayGroupSubsampleRelation.VersionOwnerCompanyID], T1.[X_AssayGroupSubsampleRelation.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupSubsampleRelationID AS [X_AssayGroupSubsampleRelation.AssayGroupSubsampleRelationID], 
            T.SourceSubsampleID AS [X_AssayGroupSubsampleRelation.SourceSubsampleID], 
            T.DestinationSubsampleID AS [X_AssayGroupSubsampleRelation.DestinationSubsampleID], 
            T.Sequence AS [X_AssayGroupSubsampleRelation.Sequence], 
            T.Version AS [X_AssayGroupSubsampleRelation.Version], 
            T.VersionAntecedentID AS [X_AssayGroupSubsampleRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupSubsampleRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsampleRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupSubsampleRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupSubsampleRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupSubsampleRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupSubsampleRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupSubsampleRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupSubsampleRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestEquipment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView256()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupTestEquipment
        [NKD.Module.BusinessObjects.Store.X_AssayGroupTestEquipment](T1.[X_AssayGroupTestEquipment.AssayGroupTestEquipmentID], T1.[X_AssayGroupTestEquipment.AssayGroupTestID], T1.[X_AssayGroupTestEquipment.AssetID], T1.[X_AssayGroupTestEquipment.Version], T1.[X_AssayGroupTestEquipment.VersionAntecedentID], T1.[X_AssayGroupTestEquipment.VersionCertainty], T1.[X_AssayGroupTestEquipment.VersionWorkflowInstanceID], T1.[X_AssayGroupTestEquipment.VersionUpdatedBy], T1.[X_AssayGroupTestEquipment.VersionDeletedBy], T1.[X_AssayGroupTestEquipment.VersionOwnerContactID], T1.[X_AssayGroupTestEquipment.VersionOwnerCompanyID], T1.[X_AssayGroupTestEquipment.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupTestEquipmentID AS [X_AssayGroupTestEquipment.AssayGroupTestEquipmentID], 
            T.AssayGroupTestID AS [X_AssayGroupTestEquipment.AssayGroupTestID], 
            T.AssetID AS [X_AssayGroupTestEquipment.AssetID], 
            T.Version AS [X_AssayGroupTestEquipment.Version], 
            T.VersionAntecedentID AS [X_AssayGroupTestEquipment.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupTestEquipment.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupTestEquipment.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupTestEquipment.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupTestEquipment.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupTestEquipment.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupTestEquipment.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupTestEquipment.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupTestEquipments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflow.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView257()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupWorkflow
        [NKD.Module.BusinessObjects.Store.X_AssayGroupWorkflow](T1.[X_AssayGroupWorkflow.AssayGroupWorkflowID], T1.[X_AssayGroupWorkflow.AssayGroupID], T1.[X_AssayGroupWorkflow.WorkflowName], T1.[X_AssayGroupWorkflow.WorkflowID], T1.[X_AssayGroupWorkflow.Version], T1.[X_AssayGroupWorkflow.VersionAntecedentID], T1.[X_AssayGroupWorkflow.VersionCertainty], T1.[X_AssayGroupWorkflow.VersionWorkflowInstanceID], T1.[X_AssayGroupWorkflow.VersionUpdatedBy], T1.[X_AssayGroupWorkflow.VersionDeletedBy], T1.[X_AssayGroupWorkflow.VersionOwnerContactID], T1.[X_AssayGroupWorkflow.VersionOwnerCompanyID], T1.[X_AssayGroupWorkflow.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupWorkflowID AS [X_AssayGroupWorkflow.AssayGroupWorkflowID], 
            T.AssayGroupID AS [X_AssayGroupWorkflow.AssayGroupID], 
            T.WorkflowName AS [X_AssayGroupWorkflow.WorkflowName], 
            T.WorkflowID AS [X_AssayGroupWorkflow.WorkflowID], 
            T.Version AS [X_AssayGroupWorkflow.Version], 
            T.VersionAntecedentID AS [X_AssayGroupWorkflow.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupWorkflow.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupWorkflow.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupWorkflow.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupWorkflow.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupWorkflow.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupWorkflow.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupWorkflow.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupWorkflows AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflowProcedure.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView258()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayGroupWorkflowProcedure
        [NKD.Module.BusinessObjects.Store.X_AssayGroupWorkflowProcedure](T1.[X_AssayGroupWorkflowProcedure.AssayGroupWorkflowProcedureID], T1.[X_AssayGroupWorkflowProcedure.AssayGroupWorkflowID], T1.[X_AssayGroupWorkflowProcedure.WorkflowStateName], T1.[X_AssayGroupWorkflowProcedure.AssayProcedureProtocolID], T1.[X_AssayGroupWorkflowProcedure.Sequence], T1.[X_AssayGroupWorkflowProcedure.Version], T1.[X_AssayGroupWorkflowProcedure.VersionAntecedentID], T1.[X_AssayGroupWorkflowProcedure.VersionCertainty], T1.[X_AssayGroupWorkflowProcedure.VersionWorkflowInstanceID], T1.[X_AssayGroupWorkflowProcedure.VersionUpdatedBy], T1.[X_AssayGroupWorkflowProcedure.VersionDeletedBy], T1.[X_AssayGroupWorkflowProcedure.VersionOwnerContactID], T1.[X_AssayGroupWorkflowProcedure.VersionOwnerCompanyID], T1.[X_AssayGroupWorkflowProcedure.VersionUpdated])
    FROM (
        SELECT 
            T.AssayGroupWorkflowProcedureID AS [X_AssayGroupWorkflowProcedure.AssayGroupWorkflowProcedureID], 
            T.AssayGroupWorkflowID AS [X_AssayGroupWorkflowProcedure.AssayGroupWorkflowID], 
            T.WorkflowStateName AS [X_AssayGroupWorkflowProcedure.WorkflowStateName], 
            T.AssayProcedureProtocolID AS [X_AssayGroupWorkflowProcedure.AssayProcedureProtocolID], 
            T.Sequence AS [X_AssayGroupWorkflowProcedure.Sequence], 
            T.Version AS [X_AssayGroupWorkflowProcedure.Version], 
            T.VersionAntecedentID AS [X_AssayGroupWorkflowProcedure.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayGroupWorkflowProcedure.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayGroupWorkflowProcedure.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayGroupWorkflowProcedure.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayGroupWorkflowProcedure.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayGroupWorkflowProcedure.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayGroupWorkflowProcedure.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayGroupWorkflowProcedure.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayGroupWorkflowProcedures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedure.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView259()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayProcedure
        [NKD.Module.BusinessObjects.Store.X_AssayProcedure](T1.[X_AssayProcedure.AssayProcedureID], T1.[X_AssayProcedure.AssayProcedureTypeID], T1.[X_AssayProcedure.AssayProcedureName], T1.[X_AssayProcedure.Version], T1.[X_AssayProcedure.VersionAntecedentID], T1.[X_AssayProcedure.VersionCertainty], T1.[X_AssayProcedure.VersionWorkflowInstanceID], T1.[X_AssayProcedure.VersionUpdatedBy], T1.[X_AssayProcedure.VersionDeletedBy], T1.[X_AssayProcedure.VersionOwnerContactID], T1.[X_AssayProcedure.VersionOwnerCompanyID], T1.[X_AssayProcedure.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureID AS [X_AssayProcedure.AssayProcedureID], 
            T.AssayProcedureTypeID AS [X_AssayProcedure.AssayProcedureTypeID], 
            T.AssayProcedureName AS [X_AssayProcedure.AssayProcedureName], 
            T.Version AS [X_AssayProcedure.Version], 
            T.VersionAntecedentID AS [X_AssayProcedure.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayProcedure.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayProcedure.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayProcedure.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayProcedure.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayProcedure.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayProcedure.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayProcedure.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayProcedures AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocol.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView260()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayProcedureProtocol
        [NKD.Module.BusinessObjects.Store.X_AssayProcedureProtocol](T1.[X_AssayProcedureProtocol.AssayProcedureProtocolID], T1.[X_AssayProcedureProtocol.AssayProcedureProtocolName], T1.[X_AssayProcedureProtocol.AssayProcedureID], T1.[X_AssayProcedureProtocol.AssayProcedureComplianceID], T1.[X_AssayProcedureProtocol.AssayProcedureMethodTypeID], T1.[X_AssayProcedureProtocol.AssayProcedureTechniqueID], T1.[X_AssayProcedureProtocol.Version], T1.[X_AssayProcedureProtocol.VersionAntecedentID], T1.[X_AssayProcedureProtocol.VersionCertainty], T1.[X_AssayProcedureProtocol.VersionWorkflowInstanceID], T1.[X_AssayProcedureProtocol.VersionUpdatedBy], T1.[X_AssayProcedureProtocol.VersionDeletedBy], T1.[X_AssayProcedureProtocol.VersionOwnerContactID], T1.[X_AssayProcedureProtocol.VersionOwnerCompanyID], T1.[X_AssayProcedureProtocol.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureProtocolID AS [X_AssayProcedureProtocol.AssayProcedureProtocolID], 
            T.AssayProcedureProtocolName AS [X_AssayProcedureProtocol.AssayProcedureProtocolName], 
            T.AssayProcedureID AS [X_AssayProcedureProtocol.AssayProcedureID], 
            T.AssayProcedureComplianceID AS [X_AssayProcedureProtocol.AssayProcedureComplianceID], 
            T.AssayProcedureMethodTypeID AS [X_AssayProcedureProtocol.AssayProcedureMethodTypeID], 
            T.AssayProcedureTechniqueID AS [X_AssayProcedureProtocol.AssayProcedureTechniqueID], 
            T.Version AS [X_AssayProcedureProtocol.Version], 
            T.VersionAntecedentID AS [X_AssayProcedureProtocol.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayProcedureProtocol.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayProcedureProtocol.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayProcedureProtocol.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayProcedureProtocol.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayProcedureProtocol.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayProcedureProtocol.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayProcedureProtocol.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayProcedureProtocols AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolEquipment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView261()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayProcedureProtocolEquipment
        [NKD.Module.BusinessObjects.Store.X_AssayProcedureProtocolEquipment](T1.[X_AssayProcedureProtocolEquipment.AssayProcedureProtocolEquipmentID], T1.[X_AssayProcedureProtocolEquipment.AssayProcedureProtocolID], T1.[X_AssayProcedureProtocolEquipment.ModelID], T1.[X_AssayProcedureProtocolEquipment.Version], T1.[X_AssayProcedureProtocolEquipment.VersionAntecedentID], T1.[X_AssayProcedureProtocolEquipment.VersionCertainty], T1.[X_AssayProcedureProtocolEquipment.VersionWorkflowInstanceID], T1.[X_AssayProcedureProtocolEquipment.VersionUpdatedBy], T1.[X_AssayProcedureProtocolEquipment.VersionDeletedBy], T1.[X_AssayProcedureProtocolEquipment.VersionOwnerContactID], T1.[X_AssayProcedureProtocolEquipment.VersionOwnerCompanyID], T1.[X_AssayProcedureProtocolEquipment.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureProtocolEquipmentID AS [X_AssayProcedureProtocolEquipment.AssayProcedureProtocolEquipmentID], 
            T.AssayProcedureProtocolID AS [X_AssayProcedureProtocolEquipment.AssayProcedureProtocolID], 
            T.ModelID AS [X_AssayProcedureProtocolEquipment.ModelID], 
            T.Version AS [X_AssayProcedureProtocolEquipment.Version], 
            T.VersionAntecedentID AS [X_AssayProcedureProtocolEquipment.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayProcedureProtocolEquipment.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayProcedureProtocolEquipment.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayProcedureProtocolEquipment.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayProcedureProtocolEquipment.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayProcedureProtocolEquipment.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayProcedureProtocolEquipment.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayProcedureProtocolEquipment.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayProcedureProtocolEquipments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAgitationMethod.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView262()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAgitationMethod
        [NKD.Module.BusinessObjects.Store.X_DictionaryAgitationMethod](T1.[X_DictionaryAgitationMethod.AgitationMethodID], T1.[X_DictionaryAgitationMethod.StandardAgitationMethodName], T1.[X_DictionaryAgitationMethod.CoalAgitationMethodName], T1.[X_DictionaryAgitationMethod.GoldAgitationMethodName], T1.[X_DictionaryAgitationMethod.CustomAgitationMethodName], T1.[X_DictionaryAgitationMethod.UnitID], T1.[X_DictionaryAgitationMethod.AgitatedUnits], T1.[X_DictionaryAgitationMethod.Description], T1.[X_DictionaryAgitationMethod.FullDescription], T1.[X_DictionaryAgitationMethod.Thumbnail], T1.[X_DictionaryAgitationMethod.OriginalFileDataID], T1.[X_DictionaryAgitationMethod.Version], T1.[X_DictionaryAgitationMethod.VersionAntecedentID], T1.[X_DictionaryAgitationMethod.VersionCertainty], T1.[X_DictionaryAgitationMethod.VersionWorkflowInstanceID], T1.[X_DictionaryAgitationMethod.VersionUpdatedBy], T1.[X_DictionaryAgitationMethod.VersionDeletedBy], T1.[X_DictionaryAgitationMethod.VersionOwnerContactID], T1.[X_DictionaryAgitationMethod.VersionOwnerCompanyID], T1.[X_DictionaryAgitationMethod.VersionUpdated])
    FROM (
        SELECT 
            T.AgitationMethodID AS [X_DictionaryAgitationMethod.AgitationMethodID], 
            T.StandardAgitationMethodName AS [X_DictionaryAgitationMethod.StandardAgitationMethodName], 
            T.CoalAgitationMethodName AS [X_DictionaryAgitationMethod.CoalAgitationMethodName], 
            T.GoldAgitationMethodName AS [X_DictionaryAgitationMethod.GoldAgitationMethodName], 
            T.CustomAgitationMethodName AS [X_DictionaryAgitationMethod.CustomAgitationMethodName], 
            T.UnitID AS [X_DictionaryAgitationMethod.UnitID], 
            T.AgitatedUnits AS [X_DictionaryAgitationMethod.AgitatedUnits], 
            T.Description AS [X_DictionaryAgitationMethod.Description], 
            T.FullDescription AS [X_DictionaryAgitationMethod.FullDescription], 
            T.Thumbnail AS [X_DictionaryAgitationMethod.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAgitationMethod.OriginalFileDataID], 
            T.Version AS [X_DictionaryAgitationMethod.Version], 
            T.VersionAntecedentID AS [X_DictionaryAgitationMethod.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAgitationMethod.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAgitationMethod.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAgitationMethod.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAgitationMethod.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAgitationMethod.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAgitationMethod.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAgitationMethod.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAgitationMethods AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureMethod.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView263()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayProcedureMethod
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayProcedureMethod](T1.[X_DictionaryAssayProcedureMethod.AssayProcedureMethodID], T1.[X_DictionaryAssayProcedureMethod.StandardAssayProcedureMethodName], T1.[X_DictionaryAssayProcedureMethod.CoalAssayProcedureMethodName], T1.[X_DictionaryAssayProcedureMethod.GoldAssayProcedureMethodName], T1.[X_DictionaryAssayProcedureMethod.CustomAssayProcedureMethodName], T1.[X_DictionaryAssayProcedureMethod.Description], T1.[X_DictionaryAssayProcedureMethod.FullDescription], T1.[X_DictionaryAssayProcedureMethod.Thumbnail], T1.[X_DictionaryAssayProcedureMethod.OriginalFileDataID], T1.[X_DictionaryAssayProcedureMethod.Version], T1.[X_DictionaryAssayProcedureMethod.VersionAntecedentID], T1.[X_DictionaryAssayProcedureMethod.VersionCertainty], T1.[X_DictionaryAssayProcedureMethod.VersionWorkflowInstanceID], T1.[X_DictionaryAssayProcedureMethod.VersionUpdatedBy], T1.[X_DictionaryAssayProcedureMethod.VersionDeletedBy], T1.[X_DictionaryAssayProcedureMethod.VersionOwnerContactID], T1.[X_DictionaryAssayProcedureMethod.VersionOwnerCompanyID], T1.[X_DictionaryAssayProcedureMethod.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureMethodID AS [X_DictionaryAssayProcedureMethod.AssayProcedureMethodID], 
            T.StandardAssayProcedureMethodName AS [X_DictionaryAssayProcedureMethod.StandardAssayProcedureMethodName], 
            T.CoalAssayProcedureMethodName AS [X_DictionaryAssayProcedureMethod.CoalAssayProcedureMethodName], 
            T.GoldAssayProcedureMethodName AS [X_DictionaryAssayProcedureMethod.GoldAssayProcedureMethodName], 
            T.CustomAssayProcedureMethodName AS [X_DictionaryAssayProcedureMethod.CustomAssayProcedureMethodName], 
            T.Description AS [X_DictionaryAssayProcedureMethod.Description], 
            T.FullDescription AS [X_DictionaryAssayProcedureMethod.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayProcedureMethod.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayProcedureMethod.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayProcedureMethod.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayProcedureMethod.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayProcedureMethod.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayProcedureMethod.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayProcedureMethod.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayProcedureMethod.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayProcedureMethod.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayProcedureMethod.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayProcedureMethod.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayProcedureMethods AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureTechnique.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView264()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayProcedureTechnique
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayProcedureTechnique](T1.[X_DictionaryAssayProcedureTechnique.AssayProcedureTechniqueID], T1.[X_DictionaryAssayProcedureTechnique.StandardAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedureTechnique.CoalAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedureTechnique.GoldAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedureTechnique.CustomAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedureTechnique.Description], T1.[X_DictionaryAssayProcedureTechnique.FullDescription], T1.[X_DictionaryAssayProcedureTechnique.Thumbnail], T1.[X_DictionaryAssayProcedureTechnique.OriginalFileDataID], T1.[X_DictionaryAssayProcedureTechnique.Version], T1.[X_DictionaryAssayProcedureTechnique.VersionAntecedentID], T1.[X_DictionaryAssayProcedureTechnique.VersionCertainty], T1.[X_DictionaryAssayProcedureTechnique.VersionWorkflowInstanceID], T1.[X_DictionaryAssayProcedureTechnique.VersionUpdatedBy], T1.[X_DictionaryAssayProcedureTechnique.VersionDeletedBy], T1.[X_DictionaryAssayProcedureTechnique.VersionOwnerContactID], T1.[X_DictionaryAssayProcedureTechnique.VersionOwnerCompanyID], T1.[X_DictionaryAssayProcedureTechnique.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureTechniqueID AS [X_DictionaryAssayProcedureTechnique.AssayProcedureTechniqueID], 
            T.StandardAssayProcedureTechniqueName AS [X_DictionaryAssayProcedureTechnique.StandardAssayProcedureTechniqueName], 
            T.CoalAssayProcedureTechniqueName AS [X_DictionaryAssayProcedureTechnique.CoalAssayProcedureTechniqueName], 
            T.GoldAssayProcedureTechniqueName AS [X_DictionaryAssayProcedureTechnique.GoldAssayProcedureTechniqueName], 
            T.CustomAssayProcedureTechniqueName AS [X_DictionaryAssayProcedureTechnique.CustomAssayProcedureTechniqueName], 
            T.Description AS [X_DictionaryAssayProcedureTechnique.Description], 
            T.FullDescription AS [X_DictionaryAssayProcedureTechnique.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayProcedureTechnique.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayProcedureTechnique.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayProcedureTechnique.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayProcedureTechnique.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayProcedureTechnique.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayProcedureTechnique.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayProcedureTechnique.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayProcedureTechnique.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayProcedureTechnique.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayProcedureTechnique.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayProcedureTechnique.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayProcedureTechniques AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView265()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayProcedureType
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayProcedureType](T1.[X_DictionaryAssayProcedureType.AssayProcedureTypeID], T1.[X_DictionaryAssayProcedureType.StandardAssayProcedureTypeName], T1.[X_DictionaryAssayProcedureType.CoalAssayProcedureTypeName], T1.[X_DictionaryAssayProcedureType.GoldAssayProcedureTypeName], T1.[X_DictionaryAssayProcedureType.CustomAssayProcedureTypeName], T1.[X_DictionaryAssayProcedureType.Description], T1.[X_DictionaryAssayProcedureType.FullDescription], T1.[X_DictionaryAssayProcedureType.Thumbnail], T1.[X_DictionaryAssayProcedureType.OriginalFileDataID], T1.[X_DictionaryAssayProcedureType.Version], T1.[X_DictionaryAssayProcedureType.VersionAntecedentID], T1.[X_DictionaryAssayProcedureType.VersionCertainty], T1.[X_DictionaryAssayProcedureType.VersionWorkflowInstanceID], T1.[X_DictionaryAssayProcedureType.VersionUpdatedBy], T1.[X_DictionaryAssayProcedureType.VersionDeletedBy], T1.[X_DictionaryAssayProcedureType.VersionOwnerContactID], T1.[X_DictionaryAssayProcedureType.VersionOwnerCompanyID], T1.[X_DictionaryAssayProcedureType.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureTypeID AS [X_DictionaryAssayProcedureType.AssayProcedureTypeID], 
            T.StandardAssayProcedureTypeName AS [X_DictionaryAssayProcedureType.StandardAssayProcedureTypeName], 
            T.CoalAssayProcedureTypeName AS [X_DictionaryAssayProcedureType.CoalAssayProcedureTypeName], 
            T.GoldAssayProcedureTypeName AS [X_DictionaryAssayProcedureType.GoldAssayProcedureTypeName], 
            T.CustomAssayProcedureTypeName AS [X_DictionaryAssayProcedureType.CustomAssayProcedureTypeName], 
            T.Description AS [X_DictionaryAssayProcedureType.Description], 
            T.FullDescription AS [X_DictionaryAssayProcedureType.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayProcedureType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayProcedureType.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayProcedureType.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayProcedureType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayProcedureType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayProcedureType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayProcedureType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayProcedureType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayProcedureType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayProcedureType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayProcedureType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayProcedureTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTechnique.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView266()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayTechnique
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayTechnique](T1.[X_DictionaryAssayTechnique.AssayTechniqueID], T1.[X_DictionaryAssayTechnique.StandardAssayTechniqueName], T1.[X_DictionaryAssayTechnique.CoalAssayTechniqueName], T1.[X_DictionaryAssayTechnique.GoldAssayTechniqueName], T1.[X_DictionaryAssayTechnique.CustomAssayTechniqueName], T1.[X_DictionaryAssayTechnique.Description], T1.[X_DictionaryAssayTechnique.FullDescription], T1.[X_DictionaryAssayTechnique.Thumbnail], T1.[X_DictionaryAssayTechnique.OriginalFileDataID], T1.[X_DictionaryAssayTechnique.Version], T1.[X_DictionaryAssayTechnique.VersionAntecedentID], T1.[X_DictionaryAssayTechnique.VersionCertainty], T1.[X_DictionaryAssayTechnique.VersionWorkflowInstanceID], T1.[X_DictionaryAssayTechnique.VersionUpdatedBy], T1.[X_DictionaryAssayTechnique.VersionDeletedBy], T1.[X_DictionaryAssayTechnique.VersionOwnerContactID], T1.[X_DictionaryAssayTechnique.VersionOwnerCompanyID], T1.[X_DictionaryAssayTechnique.VersionUpdated])
    FROM (
        SELECT 
            T.AssayTechniqueID AS [X_DictionaryAssayTechnique.AssayTechniqueID], 
            T.StandardAssayTechniqueName AS [X_DictionaryAssayTechnique.StandardAssayTechniqueName], 
            T.CoalAssayTechniqueName AS [X_DictionaryAssayTechnique.CoalAssayTechniqueName], 
            T.GoldAssayTechniqueName AS [X_DictionaryAssayTechnique.GoldAssayTechniqueName], 
            T.CustomAssayTechniqueName AS [X_DictionaryAssayTechnique.CustomAssayTechniqueName], 
            T.Description AS [X_DictionaryAssayTechnique.Description], 
            T.FullDescription AS [X_DictionaryAssayTechnique.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayTechnique.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayTechnique.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayTechnique.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayTechnique.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayTechnique.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayTechnique.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayTechnique.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayTechnique.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayTechnique.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayTechnique.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayTechnique.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayTechniques AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryChemical.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView267()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryChemical
        [NKD.Module.BusinessObjects.Store.X_DictionaryChemical](T1.[X_DictionaryChemical.ChemicalID], T1.[X_DictionaryChemical.StandardChemicalName], T1.[X_DictionaryChemical.CoalChemicalName], T1.[X_DictionaryChemical.GoldChemicalName], T1.[X_DictionaryChemical.CustomChemicalName], T1.[X_DictionaryChemical.Description], T1.[X_DictionaryChemical.FullDescription], T1.[X_DictionaryChemical.Thumbnail], T1.[X_DictionaryChemical.OriginalFileDataID], T1.[X_DictionaryChemical.Version], T1.[X_DictionaryChemical.VersionAntecedentID], T1.[X_DictionaryChemical.VersionCertainty], T1.[X_DictionaryChemical.VersionWorkflowInstanceID], T1.[X_DictionaryChemical.VersionUpdatedBy], T1.[X_DictionaryChemical.VersionDeletedBy], T1.[X_DictionaryChemical.VersionOwnerContactID], T1.[X_DictionaryChemical.VersionOwnerCompanyID], T1.[X_DictionaryChemical.VersionUpdated])
    FROM (
        SELECT 
            T.ChemicalID AS [X_DictionaryChemical.ChemicalID], 
            T.StandardChemicalName AS [X_DictionaryChemical.StandardChemicalName], 
            T.CoalChemicalName AS [X_DictionaryChemical.CoalChemicalName], 
            T.GoldChemicalName AS [X_DictionaryChemical.GoldChemicalName], 
            T.CustomChemicalName AS [X_DictionaryChemical.CustomChemicalName], 
            T.Description AS [X_DictionaryChemical.Description], 
            T.FullDescription AS [X_DictionaryChemical.FullDescription], 
            T.Thumbnail AS [X_DictionaryChemical.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryChemical.OriginalFileDataID], 
            T.Version AS [X_DictionaryChemical.Version], 
            T.VersionAntecedentID AS [X_DictionaryChemical.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryChemical.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryChemical.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryChemical.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryChemical.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryChemical.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryChemical.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryChemical.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryChemicals AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolPrecondition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView268()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayProcedureProtocolPrecondition
        [NKD.Module.BusinessObjects.Store.X_AssayProcedureProtocolPrecondition](T1.[X_AssayProcedureProtocolPrecondition.AssayProcedureProtocolPreconditionID], T1.[X_AssayProcedureProtocolPrecondition.AssayProcedureProtocolID], T1.[X_AssayProcedureProtocolPrecondition.AssayPreconditionTypeID], T1.[X_AssayProcedureProtocolPrecondition.PreconditionName], T1.[X_AssayProcedureProtocolPrecondition.UnitID], T1.[X_AssayProcedureProtocolPrecondition.Sequence], T1.[X_AssayProcedureProtocolPrecondition.Version], T1.[X_AssayProcedureProtocolPrecondition.VersionAntecedentID], T1.[X_AssayProcedureProtocolPrecondition.VersionCertainty], T1.[X_AssayProcedureProtocolPrecondition.VersionWorkflowInstanceID], T1.[X_AssayProcedureProtocolPrecondition.VersionUpdatedBy], T1.[X_AssayProcedureProtocolPrecondition.VersionDeletedBy], T1.[X_AssayProcedureProtocolPrecondition.VersionOwnerContactID], T1.[X_AssayProcedureProtocolPrecondition.VersionOwnerCompanyID], T1.[X_AssayProcedureProtocolPrecondition.VersionUpdated])
    FROM (
        SELECT 
            T.AssayProcedureProtocolPreconditionID AS [X_AssayProcedureProtocolPrecondition.AssayProcedureProtocolPreconditionID], 
            T.AssayProcedureProtocolID AS [X_AssayProcedureProtocolPrecondition.AssayProcedureProtocolID], 
            T.AssayPreconditionTypeID AS [X_AssayProcedureProtocolPrecondition.AssayPreconditionTypeID], 
            T.PreconditionName AS [X_AssayProcedureProtocolPrecondition.PreconditionName], 
            T.UnitID AS [X_AssayProcedureProtocolPrecondition.UnitID], 
            T.Sequence AS [X_AssayProcedureProtocolPrecondition.Sequence], 
            T.Version AS [X_AssayProcedureProtocolPrecondition.Version], 
            T.VersionAntecedentID AS [X_AssayProcedureProtocolPrecondition.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayProcedureProtocolPrecondition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayProcedureProtocolPrecondition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayProcedureProtocolPrecondition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayProcedureProtocolPrecondition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayProcedureProtocolPrecondition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayProcedureProtocolPrecondition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayProcedureProtocolPrecondition.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayProcedureProtocolPreconditions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_AssayWorkflowProcedureProtocol.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView269()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_AssayWorkflowProcedureProtocol
        [NKD.Module.BusinessObjects.Store.X_AssayWorkflowProcedureProtocol](T1.[X_AssayWorkflowProcedureProtocol.AssayWorkflowProcedureProtocolID], T1.[X_AssayWorkflowProcedureProtocol.WorkflowID], T1.[X_AssayWorkflowProcedureProtocol.WorkflowStateName], T1.[X_AssayWorkflowProcedureProtocol.AssayProcedureProtocolID], T1.[X_AssayWorkflowProcedureProtocol.Sequence], T1.[X_AssayWorkflowProcedureProtocol.Version], T1.[X_AssayWorkflowProcedureProtocol.VersionAntecedentID], T1.[X_AssayWorkflowProcedureProtocol.VersionCertainty], T1.[X_AssayWorkflowProcedureProtocol.VersionWorkflowInstanceID], T1.[X_AssayWorkflowProcedureProtocol.VersionUpdatedBy], T1.[X_AssayWorkflowProcedureProtocol.VersionDeletedBy], T1.[X_AssayWorkflowProcedureProtocol.VersionOwnerContactID], T1.[X_AssayWorkflowProcedureProtocol.VersionOwnerCompanyID], T1.[X_AssayWorkflowProcedureProtocol.VersionUpdated])
    FROM (
        SELECT 
            T.AssayWorkflowProcedureProtocolID AS [X_AssayWorkflowProcedureProtocol.AssayWorkflowProcedureProtocolID], 
            T.WorkflowID AS [X_AssayWorkflowProcedureProtocol.WorkflowID], 
            T.WorkflowStateName AS [X_AssayWorkflowProcedureProtocol.WorkflowStateName], 
            T.AssayProcedureProtocolID AS [X_AssayWorkflowProcedureProtocol.AssayProcedureProtocolID], 
            T.Sequence AS [X_AssayWorkflowProcedureProtocol.Sequence], 
            T.Version AS [X_AssayWorkflowProcedureProtocol.Version], 
            T.VersionAntecedentID AS [X_AssayWorkflowProcedureProtocol.VersionAntecedentID], 
            T.VersionCertainty AS [X_AssayWorkflowProcedureProtocol.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_AssayWorkflowProcedureProtocol.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_AssayWorkflowProcedureProtocol.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_AssayWorkflowProcedureProtocol.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_AssayWorkflowProcedureProtocol.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_AssayWorkflowProcedureProtocol.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_AssayWorkflowProcedureProtocol.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssayWorkflowProcedureProtocols AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayPreconditionType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView270()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAssayPreconditionType
        [NKD.Module.BusinessObjects.Store.X_DictionaryAssayPreconditionType](T1.[X_DictionaryAssayPreconditionType.AssayPreconditionTypeID], T1.[X_DictionaryAssayPreconditionType.StandardAssayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionType.CoalAssayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionType.GoldAssayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionType.CustomAssayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionType.Description], T1.[X_DictionaryAssayPreconditionType.FullDescription], T1.[X_DictionaryAssayPreconditionType.Thumbnail], T1.[X_DictionaryAssayPreconditionType.OriginalFileDataID], T1.[X_DictionaryAssayPreconditionType.Version], T1.[X_DictionaryAssayPreconditionType.VersionAntecedentID], T1.[X_DictionaryAssayPreconditionType.VersionCertainty], T1.[X_DictionaryAssayPreconditionType.VersionWorkflowInstanceID], T1.[X_DictionaryAssayPreconditionType.VersionUpdatedBy], T1.[X_DictionaryAssayPreconditionType.VersionDeletedBy], T1.[X_DictionaryAssayPreconditionType.VersionOwnerContactID], T1.[X_DictionaryAssayPreconditionType.VersionOwnerCompanyID], T1.[X_DictionaryAssayPreconditionType.VersionUpdated])
    FROM (
        SELECT 
            T.AssayPreconditionTypeID AS [X_DictionaryAssayPreconditionType.AssayPreconditionTypeID], 
            T.StandardAssayPreconditionTypeName AS [X_DictionaryAssayPreconditionType.StandardAssayPreconditionTypeName], 
            T.CoalAssayPreconditionTypeName AS [X_DictionaryAssayPreconditionType.CoalAssayPreconditionTypeName], 
            T.GoldAssayPreconditionTypeName AS [X_DictionaryAssayPreconditionType.GoldAssayPreconditionTypeName], 
            T.CustomAssayPreconditionTypeName AS [X_DictionaryAssayPreconditionType.CustomAssayPreconditionTypeName], 
            T.Description AS [X_DictionaryAssayPreconditionType.Description], 
            T.FullDescription AS [X_DictionaryAssayPreconditionType.FullDescription], 
            T.Thumbnail AS [X_DictionaryAssayPreconditionType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAssayPreconditionType.OriginalFileDataID], 
            T.Version AS [X_DictionaryAssayPreconditionType.Version], 
            T.VersionAntecedentID AS [X_DictionaryAssayPreconditionType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAssayPreconditionType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAssayPreconditionType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAssayPreconditionType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAssayPreconditionType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAssayPreconditionType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAssayPreconditionType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAssayPreconditionType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssayPreconditionTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProvider.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView271()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationPaymentProvider
        [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProvider](T1.[E_ApplicationPaymentProvider.ApplicationPaymentProviderID], T1.[E_ApplicationPaymentProvider.ApplicationID], T1.[E_ApplicationPaymentProvider.ApplicationPaymentProviderName], T1.[E_ApplicationPaymentProvider.CompanyID], T1.[E_ApplicationPaymentProvider.Environment], T1.[E_ApplicationPaymentProvider.MerchantID], T1.[E_ApplicationPaymentProvider.ClientKeyPrivate], T1.[E_ApplicationPaymentProvider.ClientKeyPublic], T1.[E_ApplicationPaymentProvider.ServerKeyPrivate], T1.[E_ApplicationPaymentProvider.ServerKeyPublic], T1.[E_ApplicationPaymentProvider.ReturnURL], T1.[E_ApplicationPaymentProvider.ResponsibleContactID], T1.[E_ApplicationPaymentProvider.Version], T1.[E_ApplicationPaymentProvider.VersionAntecedentID], T1.[E_ApplicationPaymentProvider.VersionCertainty], T1.[E_ApplicationPaymentProvider.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProvider.VersionUpdatedBy], T1.[E_ApplicationPaymentProvider.VersionDeletedBy], T1.[E_ApplicationPaymentProvider.VersionOwnerContactID], T1.[E_ApplicationPaymentProvider.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProvider.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderID AS [E_ApplicationPaymentProvider.ApplicationPaymentProviderID], 
            T.ApplicationID AS [E_ApplicationPaymentProvider.ApplicationID], 
            T.ApplicationPaymentProviderName AS [E_ApplicationPaymentProvider.ApplicationPaymentProviderName], 
            T.CompanyID AS [E_ApplicationPaymentProvider.CompanyID], 
            T.Environment AS [E_ApplicationPaymentProvider.Environment], 
            T.MerchantID AS [E_ApplicationPaymentProvider.MerchantID], 
            T.ClientKeyPrivate AS [E_ApplicationPaymentProvider.ClientKeyPrivate], 
            T.ClientKeyPublic AS [E_ApplicationPaymentProvider.ClientKeyPublic], 
            T.ServerKeyPrivate AS [E_ApplicationPaymentProvider.ServerKeyPrivate], 
            T.ServerKeyPublic AS [E_ApplicationPaymentProvider.ServerKeyPublic], 
            T.ReturnURL AS [E_ApplicationPaymentProvider.ReturnURL], 
            T.ResponsibleContactID AS [E_ApplicationPaymentProvider.ResponsibleContactID], 
            T.Version AS [E_ApplicationPaymentProvider.Version], 
            T.VersionAntecedentID AS [E_ApplicationPaymentProvider.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationPaymentProvider.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProvider.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationPaymentProvider.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationPaymentProvider.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationPaymentProvider.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProvider.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationPaymentProvider.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationPaymentProviders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderCurrency.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView272()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationPaymentProviderCurrency
        [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderCurrency](T1.[E_ApplicationPaymentProviderCurrency.ApplicationPaymentProviderCurrencyID], T1.[E_ApplicationPaymentProviderCurrency.ApplicationPaymentProviderID], T1.[E_ApplicationPaymentProviderCurrency.CurrencyID], T1.[E_ApplicationPaymentProviderCurrency.PaymentProviderCurrencyCode], T1.[E_ApplicationPaymentProviderCurrency.IsMultiplierAccepted], T1.[E_ApplicationPaymentProviderCurrency.Version], T1.[E_ApplicationPaymentProviderCurrency.VersionAntecedentID], T1.[E_ApplicationPaymentProviderCurrency.VersionCertainty], T1.[E_ApplicationPaymentProviderCurrency.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProviderCurrency.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderCurrency.VersionDeletedBy], T1.[E_ApplicationPaymentProviderCurrency.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderCurrency.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderCurrency.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderCurrencyID AS [E_ApplicationPaymentProviderCurrency.ApplicationPaymentProviderCurrencyID], 
            T.ApplicationPaymentProviderID AS [E_ApplicationPaymentProviderCurrency.ApplicationPaymentProviderID], 
            T.CurrencyID AS [E_ApplicationPaymentProviderCurrency.CurrencyID], 
            T.PaymentProviderCurrencyCode AS [E_ApplicationPaymentProviderCurrency.PaymentProviderCurrencyCode], 
            T.IsMultiplierAccepted AS [E_ApplicationPaymentProviderCurrency.IsMultiplierAccepted], 
            T.Version AS [E_ApplicationPaymentProviderCurrency.Version], 
            T.VersionAntecedentID AS [E_ApplicationPaymentProviderCurrency.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationPaymentProviderCurrency.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProviderCurrency.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderCurrency.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationPaymentProviderCurrency.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationPaymentProviderCurrency.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProviderCurrency.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationPaymentProviderCurrency.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationPaymentProviderCurrencies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProduct.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView273()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationPaymentProviderProduct
        [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderProduct](T1.[E_ApplicationPaymentProviderProduct.ApplicationPaymentProviderProductID], T1.[E_ApplicationPaymentProviderProduct.ApplicationPaymentProviderID], T1.[E_ApplicationPaymentProviderProduct.PaymentProviderProductName], T1.[E_ApplicationPaymentProviderProduct.ProductUnitID], T1.[E_ApplicationPaymentProviderProduct.PaymentProviderUnitName], T1.[E_ApplicationPaymentProviderProduct.IsRecurring], T1.[E_ApplicationPaymentProviderProduct.UnitDefault], T1.[E_ApplicationPaymentProviderProduct.UnitMaximum], T1.[E_ApplicationPaymentProviderProduct.UnitMinimum], T1.[E_ApplicationPaymentProviderProduct.Version], T1.[E_ApplicationPaymentProviderProduct.VersionAntecedentID], T1.[E_ApplicationPaymentProviderProduct.VersionCertainty], T1.[E_ApplicationPaymentProviderProduct.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProviderProduct.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderProduct.VersionDeletedBy], T1.[E_ApplicationPaymentProviderProduct.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderProduct.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderProduct.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderProductID AS [E_ApplicationPaymentProviderProduct.ApplicationPaymentProviderProductID], 
            T.ApplicationPaymentProviderID AS [E_ApplicationPaymentProviderProduct.ApplicationPaymentProviderID], 
            T.PaymentProviderProductName AS [E_ApplicationPaymentProviderProduct.PaymentProviderProductName], 
            T.ProductUnitID AS [E_ApplicationPaymentProviderProduct.ProductUnitID], 
            T.PaymentProviderUnitName AS [E_ApplicationPaymentProviderProduct.PaymentProviderUnitName], 
            T.IsRecurring AS [E_ApplicationPaymentProviderProduct.IsRecurring], 
            T.UnitDefault AS [E_ApplicationPaymentProviderProduct.UnitDefault], 
            T.UnitMaximum AS [E_ApplicationPaymentProviderProduct.UnitMaximum], 
            T.UnitMinimum AS [E_ApplicationPaymentProviderProduct.UnitMinimum], 
            T.Version AS [E_ApplicationPaymentProviderProduct.Version], 
            T.VersionAntecedentID AS [E_ApplicationPaymentProviderProduct.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationPaymentProviderProduct.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProviderProduct.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderProduct.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationPaymentProviderProduct.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationPaymentProviderProduct.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProviderProduct.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationPaymentProviderProduct.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationPaymentProviderProducts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView274()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationPaymentProviderProductModel
        [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderProductModel](T1.[E_ApplicationPaymentProviderProductModel.ApplicationPaymentProviderProductModelID], T1.[E_ApplicationPaymentProviderProductModel.ApplicationPaymentProviderProductID], T1.[E_ApplicationPaymentProviderProductModel.ModelID], T1.[E_ApplicationPaymentProviderProductModel.SupplierModelID], T1.[E_ApplicationPaymentProviderProductModel.UnitDefault], T1.[E_ApplicationPaymentProviderProductModel.UnitMaximum], T1.[E_ApplicationPaymentProviderProductModel.UnitMinimum], T1.[E_ApplicationPaymentProviderProductModel.Version], T1.[E_ApplicationPaymentProviderProductModel.VersionAntecedentID], T1.[E_ApplicationPaymentProviderProductModel.VersionCertainty], T1.[E_ApplicationPaymentProviderProductModel.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProviderProductModel.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderProductModel.VersionDeletedBy], T1.[E_ApplicationPaymentProviderProductModel.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderProductModel.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderProductModel.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderProductModelID AS [E_ApplicationPaymentProviderProductModel.ApplicationPaymentProviderProductModelID], 
            T.ApplicationPaymentProviderProductID AS [E_ApplicationPaymentProviderProductModel.ApplicationPaymentProviderProductID], 
            T.ModelID AS [E_ApplicationPaymentProviderProductModel.ModelID], 
            T.SupplierModelID AS [E_ApplicationPaymentProviderProductModel.SupplierModelID], 
            T.UnitDefault AS [E_ApplicationPaymentProviderProductModel.UnitDefault], 
            T.UnitMaximum AS [E_ApplicationPaymentProviderProductModel.UnitMaximum], 
            T.UnitMinimum AS [E_ApplicationPaymentProviderProductModel.UnitMinimum], 
            T.Version AS [E_ApplicationPaymentProviderProductModel.Version], 
            T.VersionAntecedentID AS [E_ApplicationPaymentProviderProductModel.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationPaymentProviderProductModel.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProviderProductModel.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderProductModel.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationPaymentProviderProductModel.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationPaymentProviderProductModel.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProviderProductModel.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationPaymentProviderProductModel.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationPaymentProviderProductModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView275()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationPaymentProviderProductPart
        [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderProductPart](T1.[E_ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProductPartID], T1.[E_ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProductID], T1.[E_ApplicationPaymentProviderProductPart.PartID], T1.[E_ApplicationPaymentProviderProductPart.UnitDefault], T1.[E_ApplicationPaymentProviderProductPart.UnitMaximum], T1.[E_ApplicationPaymentProviderProductPart.UnitMinimum], T1.[E_ApplicationPaymentProviderProductPart.Version], T1.[E_ApplicationPaymentProviderProductPart.VersionAntecedentID], T1.[E_ApplicationPaymentProviderProductPart.VersionCertainty], T1.[E_ApplicationPaymentProviderProductPart.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProviderProductPart.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderProductPart.VersionDeletedBy], T1.[E_ApplicationPaymentProviderProductPart.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderProductPart.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderProductPart.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderProductPartID AS [E_ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProductPartID], 
            T.ApplicationPaymentProviderProductID AS [E_ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProductID], 
            T.PartID AS [E_ApplicationPaymentProviderProductPart.PartID], 
            T.UnitDefault AS [E_ApplicationPaymentProviderProductPart.UnitDefault], 
            T.UnitMaximum AS [E_ApplicationPaymentProviderProductPart.UnitMaximum], 
            T.UnitMinimum AS [E_ApplicationPaymentProviderProductPart.UnitMinimum], 
            T.Version AS [E_ApplicationPaymentProviderProductPart.Version], 
            T.VersionAntecedentID AS [E_ApplicationPaymentProviderProductPart.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationPaymentProviderProductPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProviderProductPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderProductPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationPaymentProviderProductPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationPaymentProviderProductPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProviderProductPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationPaymentProviderProductPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationPaymentProviderProductParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationRoute.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView276()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationRoute
        [NKD.Module.BusinessObjects.Store.E_ApplicationRoute](T1.[E_ApplicationRoute.ApplicationRouteID], T1.[E_ApplicationRoute.ApplicationID], T1.[E_ApplicationRoute.RouteTypeID], T1.[E_ApplicationRoute.Sequence], T1.[E_ApplicationRoute.RouteName], T1.[E_ApplicationRoute.RouteURL], T1.[E_ApplicationRoute.RouteMask], T1.[E_ApplicationRoute.RedirectURL], T1.[E_ApplicationRoute.IsExternal], T1.[E_ApplicationRoute.IsCapturingStatistic], T1.[E_ApplicationRoute.Version], T1.[E_ApplicationRoute.VersionAntecedentID], T1.[E_ApplicationRoute.VersionCertainty], T1.[E_ApplicationRoute.VersionWorkflowInstanceID], T1.[E_ApplicationRoute.VersionUpdatedBy], T1.[E_ApplicationRoute.VersionDeletedBy], T1.[E_ApplicationRoute.VersionOwnerContactID], T1.[E_ApplicationRoute.VersionOwnerCompanyID], T1.[E_ApplicationRoute.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationRouteID AS [E_ApplicationRoute.ApplicationRouteID], 
            T.ApplicationID AS [E_ApplicationRoute.ApplicationID], 
            T.RouteTypeID AS [E_ApplicationRoute.RouteTypeID], 
            T.Sequence AS [E_ApplicationRoute.Sequence], 
            T.RouteName AS [E_ApplicationRoute.RouteName], 
            T.RouteURL AS [E_ApplicationRoute.RouteURL], 
            T.RouteMask AS [E_ApplicationRoute.RouteMask], 
            T.RedirectURL AS [E_ApplicationRoute.RedirectURL], 
            T.IsExternal AS [E_ApplicationRoute.IsExternal], 
            T.IsCapturingStatistic AS [E_ApplicationRoute.IsCapturingStatistic], 
            T.Version AS [E_ApplicationRoute.Version], 
            T.VersionAntecedentID AS [E_ApplicationRoute.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationRoute.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationRoute.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationRoute.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationRoute.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationRoute.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationRoute.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationRoute.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationRoutes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView277()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationRouteData
        [NKD.Module.BusinessObjects.Store.E_ApplicationRouteData](T1.[E_ApplicationRouteData.ApplicationRouteDataID], T1.[E_ApplicationRouteData.ApplicationRouteID], T1.[E_ApplicationRouteData.TableType], T1.[E_ApplicationRouteData.ReferenceID], T1.[E_ApplicationRouteData.ReferenceName], T1.[E_ApplicationRouteData.Ticks], T1.[E_ApplicationRouteData.ValidFrom], T1.[E_ApplicationRouteData.ValidUntil], T1.[E_ApplicationRouteData.Comment], T1.[E_ApplicationRouteData.Version], T1.[E_ApplicationRouteData.VersionAntecedentID], T1.[E_ApplicationRouteData.VersionCertainty], T1.[E_ApplicationRouteData.VersionWorkflowInstanceID], T1.[E_ApplicationRouteData.VersionUpdatedBy], T1.[E_ApplicationRouteData.VersionDeletedBy], T1.[E_ApplicationRouteData.VersionOwnerContactID], T1.[E_ApplicationRouteData.VersionOwnerCompanyID], T1.[E_ApplicationRouteData.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationRouteDataID AS [E_ApplicationRouteData.ApplicationRouteDataID], 
            T.ApplicationRouteID AS [E_ApplicationRouteData.ApplicationRouteID], 
            T.TableType AS [E_ApplicationRouteData.TableType], 
            T.ReferenceID AS [E_ApplicationRouteData.ReferenceID], 
            T.ReferenceName AS [E_ApplicationRouteData.ReferenceName], 
            T.Ticks AS [E_ApplicationRouteData.Ticks], 
            T.ValidFrom AS [E_ApplicationRouteData.ValidFrom], 
            T.ValidUntil AS [E_ApplicationRouteData.ValidUntil], 
            T.Comment AS [E_ApplicationRouteData.Comment], 
            T.Version AS [E_ApplicationRouteData.Version], 
            T.VersionAntecedentID AS [E_ApplicationRouteData.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationRouteData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationRouteData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationRouteData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationRouteData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationRouteData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationRouteData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationRouteData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationRouteDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteParameter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView278()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationRouteParameter
        [NKD.Module.BusinessObjects.Store.E_ApplicationRouteParameter](T1.[E_ApplicationRouteParameter.ApplicationRouteParameterID], T1.[E_ApplicationRouteParameter.ApplicationRouteID], T1.[E_ApplicationRouteParameter.RouteParameterName], T1.[E_ApplicationRouteParameter.RouteParameterValue], T1.[E_ApplicationRouteParameter.Version], T1.[E_ApplicationRouteParameter.VersionAntecedentID], T1.[E_ApplicationRouteParameter.VersionCertainty], T1.[E_ApplicationRouteParameter.VersionWorkflowInstanceID], T1.[E_ApplicationRouteParameter.VersionUpdatedBy], T1.[E_ApplicationRouteParameter.VersionDeletedBy], T1.[E_ApplicationRouteParameter.VersionOwnerContactID], T1.[E_ApplicationRouteParameter.VersionOwnerCompanyID], T1.[E_ApplicationRouteParameter.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationRouteParameterID AS [E_ApplicationRouteParameter.ApplicationRouteParameterID], 
            T.ApplicationRouteID AS [E_ApplicationRouteParameter.ApplicationRouteID], 
            T.RouteParameterName AS [E_ApplicationRouteParameter.RouteParameterName], 
            T.RouteParameterValue AS [E_ApplicationRouteParameter.RouteParameterValue], 
            T.Version AS [E_ApplicationRouteParameter.Version], 
            T.VersionAntecedentID AS [E_ApplicationRouteParameter.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationRouteParameter.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationRouteParameter.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationRouteParameter.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationRouteParameter.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationRouteParameter.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationRouteParameter.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationRouteParameter.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationRouteParameters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_AssetData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView279()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_AssetData
        [NKD.Module.BusinessObjects.Store.E_AssetData](T1.[E_AssetData.AssetDataID], T1.[E_AssetData.AssetID], T1.[E_AssetData.TableType], T1.[E_AssetData.ReferenceID], T1.[E_AssetData.ReferenceName], T1.[E_AssetData.AvailabilityID], T1.[E_AssetData.IsFixed], T1.[E_AssetData.CoverageProvinceID], T1.[E_AssetData.CurrentLocationID], T1.[E_AssetData.TickUnitID], T1.[E_AssetData.Ticks], T1.[E_AssetData.TicksOffset], T1.[E_AssetData.TicksResolution], T1.[E_AssetData.ValidFrom], T1.[E_AssetData.ValidUntil], T1.[E_AssetData.Culture], T1.[E_AssetData.Weight], T1.[E_AssetData.Comment], T1.[E_AssetData.Version], T1.[E_AssetData.VersionAntecedentID], T1.[E_AssetData.VersionCertainty], T1.[E_AssetData.VersionWorkflowInstanceID], T1.[E_AssetData.VersionUpdatedBy], T1.[E_AssetData.VersionDeletedBy], T1.[E_AssetData.VersionOwnerContactID], T1.[E_AssetData.VersionOwnerCompanyID], T1.[E_AssetData.VersionUpdated])
    FROM (
        SELECT 
            T.AssetDataID AS [E_AssetData.AssetDataID], 
            T.AssetID AS [E_AssetData.AssetID], 
            T.TableType AS [E_AssetData.TableType], 
            T.ReferenceID AS [E_AssetData.ReferenceID], 
            T.ReferenceName AS [E_AssetData.ReferenceName], 
            T.AvailabilityID AS [E_AssetData.AvailabilityID], 
            T.IsFixed AS [E_AssetData.IsFixed], 
            T.CoverageProvinceID AS [E_AssetData.CoverageProvinceID], 
            T.CurrentLocationID AS [E_AssetData.CurrentLocationID], 
            T.TickUnitID AS [E_AssetData.TickUnitID], 
            T.Ticks AS [E_AssetData.Ticks], 
            T.TicksOffset AS [E_AssetData.TicksOffset], 
            T.TicksResolution AS [E_AssetData.TicksResolution], 
            T.ValidFrom AS [E_AssetData.ValidFrom], 
            T.ValidUntil AS [E_AssetData.ValidUntil], 
            T.Culture AS [E_AssetData.Culture], 
            T.Weight AS [E_AssetData.Weight], 
            T.Comment AS [E_AssetData.Comment], 
            T.Version AS [E_AssetData.Version], 
            T.VersionAntecedentID AS [E_AssetData.VersionAntecedentID], 
            T.VersionCertainty AS [E_AssetData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_AssetData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_AssetData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_AssetData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_AssetData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_AssetData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_AssetData.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssetDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_AssetProduction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView280()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_AssetProduction
        [NKD.Module.BusinessObjects.Store.E_AssetProduction](T1.[E_AssetProduction.AssetProductionID], T1.[E_AssetProduction.AssetID], T1.[E_AssetProduction.ProductionParameterID], T1.[E_AssetProduction.ProRataUnits], T1.[E_AssetProduction.ProRataCost], T1.[E_AssetProduction.EstimatedProRataValue], T1.[E_AssetProduction.ProRataUnitMinimum], T1.[E_AssetProduction.ProRataUnitMaximum], T1.[E_AssetProduction.ProRataUnitOptimum], T1.[E_AssetProduction.AssetProductionGroupID], T1.[E_AssetProduction.Weight], T1.[E_AssetProduction.Variance], T1.[E_AssetProduction.Correction], T1.[E_AssetProduction.Comment], T1.[E_AssetProduction.Version], T1.[E_AssetProduction.VersionAntecedentID], T1.[E_AssetProduction.VersionCertainty], T1.[E_AssetProduction.VersionWorkflowInstanceID], T1.[E_AssetProduction.VersionUpdatedBy], T1.[E_AssetProduction.VersionDeletedBy], T1.[E_AssetProduction.VersionOwnerContactID], T1.[E_AssetProduction.VersionOwnerCompanyID], T1.[E_AssetProduction.VersionUpdated])
    FROM (
        SELECT 
            T.AssetProductionID AS [E_AssetProduction.AssetProductionID], 
            T.AssetID AS [E_AssetProduction.AssetID], 
            T.ProductionParameterID AS [E_AssetProduction.ProductionParameterID], 
            T.ProRataUnits AS [E_AssetProduction.ProRataUnits], 
            T.ProRataCost AS [E_AssetProduction.ProRataCost], 
            T.EstimatedProRataValue AS [E_AssetProduction.EstimatedProRataValue], 
            T.ProRataUnitMinimum AS [E_AssetProduction.ProRataUnitMinimum], 
            T.ProRataUnitMaximum AS [E_AssetProduction.ProRataUnitMaximum], 
            T.ProRataUnitOptimum AS [E_AssetProduction.ProRataUnitOptimum], 
            T.AssetProductionGroupID AS [E_AssetProduction.AssetProductionGroupID], 
            T.Weight AS [E_AssetProduction.Weight], 
            T.Variance AS [E_AssetProduction.Variance], 
            T.Correction AS [E_AssetProduction.Correction], 
            T.Comment AS [E_AssetProduction.Comment], 
            T.Version AS [E_AssetProduction.Version], 
            T.VersionAntecedentID AS [E_AssetProduction.VersionAntecedentID], 
            T.VersionCertainty AS [E_AssetProduction.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_AssetProduction.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_AssetProduction.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_AssetProduction.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_AssetProduction.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_AssetProduction.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_AssetProduction.VersionUpdated], 
            True AS _from0
        FROM NKDC.AssetProductions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ContactCreditCard.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView281()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ContactCreditCard
        [NKD.Module.BusinessObjects.Store.E_ContactCreditCard](T1.[E_ContactCreditCard.ContactCreditCardID], T1.[E_ContactCreditCard.ContactID], T1.[E_ContactCreditCard.ApplicationPaymentProviderContactID], T1.[E_ContactCreditCard.ApplicationPaymentProviderToken], T1.[E_ContactCreditCard.CreditCardName], T1.[E_ContactCreditCard.Sequence], T1.[E_ContactCreditCard.CreditCardType], T1.[E_ContactCreditCard.CreditCard], T1.[E_ContactCreditCard.CreditCardMasked], T1.[E_ContactCreditCard.Expiry], T1.[E_ContactCreditCard.Valid], T1.[E_ContactCreditCard.CVV], T1.[E_ContactCreditCard.DefaultCurrencyID], T1.[E_ContactCreditCard.Version], T1.[E_ContactCreditCard.VersionAntecedentID], T1.[E_ContactCreditCard.VersionCertainty], T1.[E_ContactCreditCard.VersionWorkflowInstanceID], T1.[E_ContactCreditCard.VersionUpdatedBy], T1.[E_ContactCreditCard.VersionDeletedBy], T1.[E_ContactCreditCard.VersionOwnerContactID], T1.[E_ContactCreditCard.VersionOwnerCompanyID], T1.[E_ContactCreditCard.VersionUpdated])
    FROM (
        SELECT 
            T.ContactCreditCardID AS [E_ContactCreditCard.ContactCreditCardID], 
            T.ContactID AS [E_ContactCreditCard.ContactID], 
            T.ApplicationPaymentProviderContactID AS [E_ContactCreditCard.ApplicationPaymentProviderContactID], 
            T.ApplicationPaymentProviderToken AS [E_ContactCreditCard.ApplicationPaymentProviderToken], 
            T.CreditCardName AS [E_ContactCreditCard.CreditCardName], 
            T.Sequence AS [E_ContactCreditCard.Sequence], 
            T.CreditCardType AS [E_ContactCreditCard.CreditCardType], 
            T.CreditCard AS [E_ContactCreditCard.CreditCard], 
            T.CreditCardMasked AS [E_ContactCreditCard.CreditCardMasked], 
            T.Expiry AS [E_ContactCreditCard.Expiry], 
            T.Valid AS [E_ContactCreditCard.Valid], 
            T.CVV AS [E_ContactCreditCard.CVV], 
            T.DefaultCurrencyID AS [E_ContactCreditCard.DefaultCurrencyID], 
            T.Version AS [E_ContactCreditCard.Version], 
            T.VersionAntecedentID AS [E_ContactCreditCard.VersionAntecedentID], 
            T.VersionCertainty AS [E_ContactCreditCard.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ContactCreditCard.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ContactCreditCard.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ContactCreditCard.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ContactCreditCard.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ContactCreditCard.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ContactCreditCard.VersionUpdated], 
            True AS _from0
        FROM NKDC.ContactCreditCards AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryAccountType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView282()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryAccountType
        [NKD.Module.BusinessObjects.Store.E_DictionaryAccountType](T1.[E_DictionaryAccountType.AccountTypeID], T1.[E_DictionaryAccountType.StandardAccountTypeName], T1.[E_DictionaryAccountType.CustomAccountTypeName], T1.[E_DictionaryAccountType.Description], T1.[E_DictionaryAccountType.FullDescription], T1.[E_DictionaryAccountType.Thumbnail], T1.[E_DictionaryAccountType.OriginalFileDataID], T1.[E_DictionaryAccountType.Version], T1.[E_DictionaryAccountType.VersionAntecedentID], T1.[E_DictionaryAccountType.VersionCertainty], T1.[E_DictionaryAccountType.VersionWorkflowInstanceID], T1.[E_DictionaryAccountType.VersionUpdatedBy], T1.[E_DictionaryAccountType.VersionDeletedBy], T1.[E_DictionaryAccountType.VersionOwnerContactID], T1.[E_DictionaryAccountType.VersionOwnerCompanyID], T1.[E_DictionaryAccountType.VersionUpdated])
    FROM (
        SELECT 
            T.AccountTypeID AS [E_DictionaryAccountType.AccountTypeID], 
            T.StandardAccountTypeName AS [E_DictionaryAccountType.StandardAccountTypeName], 
            T.CustomAccountTypeName AS [E_DictionaryAccountType.CustomAccountTypeName], 
            T.Description AS [E_DictionaryAccountType.Description], 
            T.FullDescription AS [E_DictionaryAccountType.FullDescription], 
            T.Thumbnail AS [E_DictionaryAccountType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryAccountType.OriginalFileDataID], 
            T.Version AS [E_DictionaryAccountType.Version], 
            T.VersionAntecedentID AS [E_DictionaryAccountType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryAccountType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryAccountType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryAccountType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryAccountType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryAccountType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryAccountType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryAccountType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAccountTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryOrderStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView283()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryOrderStatus
        [NKD.Module.BusinessObjects.Store.E_DictionaryOrderStatus](T1.[E_DictionaryOrderStatus.OrderStatusID], T1.[E_DictionaryOrderStatus.StandardOrderStatusName], T1.[E_DictionaryOrderStatus.CustomOrderStatusName], T1.[E_DictionaryOrderStatus.Description], T1.[E_DictionaryOrderStatus.FullDescription], T1.[E_DictionaryOrderStatus.Thumbnail], T1.[E_DictionaryOrderStatus.OriginalFileDataID], T1.[E_DictionaryOrderStatus.Version], T1.[E_DictionaryOrderStatus.VersionAntecedentID], T1.[E_DictionaryOrderStatus.VersionCertainty], T1.[E_DictionaryOrderStatus.VersionWorkflowInstanceID], T1.[E_DictionaryOrderStatus.VersionUpdatedBy], T1.[E_DictionaryOrderStatus.VersionDeletedBy], T1.[E_DictionaryOrderStatus.VersionOwnerContactID], T1.[E_DictionaryOrderStatus.VersionOwnerCompanyID], T1.[E_DictionaryOrderStatus.VersionUpdated])
    FROM (
        SELECT 
            T.OrderStatusID AS [E_DictionaryOrderStatus.OrderStatusID], 
            T.StandardOrderStatusName AS [E_DictionaryOrderStatus.StandardOrderStatusName], 
            T.CustomOrderStatusName AS [E_DictionaryOrderStatus.CustomOrderStatusName], 
            T.Description AS [E_DictionaryOrderStatus.Description], 
            T.FullDescription AS [E_DictionaryOrderStatus.FullDescription], 
            T.Thumbnail AS [E_DictionaryOrderStatus.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryOrderStatus.OriginalFileDataID], 
            T.Version AS [E_DictionaryOrderStatus.Version], 
            T.VersionAntecedentID AS [E_DictionaryOrderStatus.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryOrderStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryOrderStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryOrderStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryOrderStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryOrderStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryOrderStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryOrderStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryOrderStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryRouteType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView284()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryRouteType
        [NKD.Module.BusinessObjects.Store.E_DictionaryRouteType](T1.[E_DictionaryRouteType.RouteTypeID], T1.[E_DictionaryRouteType.StandardRouteTypeName], T1.[E_DictionaryRouteType.CustomRouteTypeName], T1.[E_DictionaryRouteType.Description], T1.[E_DictionaryRouteType.FullDescription], T1.[E_DictionaryRouteType.Thumbnail], T1.[E_DictionaryRouteType.OriginalFileDataID], T1.[E_DictionaryRouteType.Version], T1.[E_DictionaryRouteType.VersionAntecedentID], T1.[E_DictionaryRouteType.VersionCertainty], T1.[E_DictionaryRouteType.VersionWorkflowInstanceID], T1.[E_DictionaryRouteType.VersionUpdatedBy], T1.[E_DictionaryRouteType.VersionDeletedBy], T1.[E_DictionaryRouteType.VersionOwnerContactID], T1.[E_DictionaryRouteType.VersionOwnerCompanyID], T1.[E_DictionaryRouteType.VersionUpdated])
    FROM (
        SELECT 
            T.RouteTypeID AS [E_DictionaryRouteType.RouteTypeID], 
            T.StandardRouteTypeName AS [E_DictionaryRouteType.StandardRouteTypeName], 
            T.CustomRouteTypeName AS [E_DictionaryRouteType.CustomRouteTypeName], 
            T.Description AS [E_DictionaryRouteType.Description], 
            T.FullDescription AS [E_DictionaryRouteType.FullDescription], 
            T.Thumbnail AS [E_DictionaryRouteType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryRouteType.OriginalFileDataID], 
            T.Version AS [E_DictionaryRouteType.Version], 
            T.VersionAntecedentID AS [E_DictionaryRouteType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryRouteType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryRouteType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryRouteType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryRouteType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryRouteType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryRouteType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryRouteType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryRouteTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Download.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView285()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Download
        [NKD.Module.BusinessObjects.Store.E_Download](T1.[E_Download.DownloadID], T1.[E_Download.FileDataID], T1.[E_Download.FileAllocated], T1.[E_Download.FileChecksum], T1.[E_Download.FilterCompanyID], T1.[E_Download.FilterContactID], T1.[E_Download.FilterServerID], T1.[E_Download.FilterApplicationID], T1.[E_Download.FilterClientIP], T1.[E_Download.LicenseID], T1.[E_Download.LicenseAssetID], T1.[E_Download.RemainingDownloads], T1.[E_Download.ValidFrom], T1.[E_Download.ValidUntil], T1.[E_Download.Version], T1.[E_Download.VersionAntecedentID], T1.[E_Download.VersionCertainty], T1.[E_Download.VersionWorkflowInstanceID], T1.[E_Download.VersionUpdatedBy], T1.[E_Download.VersionDeletedBy], T1.[E_Download.VersionOwnerContactID], T1.[E_Download.VersionOwnerCompanyID], T1.[E_Download.VersionUpdated])
    FROM (
        SELECT 
            T.DownloadID AS [E_Download.DownloadID], 
            T.FileDataID AS [E_Download.FileDataID], 
            T.FileAllocated AS [E_Download.FileAllocated], 
            T.FileChecksum AS [E_Download.FileChecksum], 
            T.FilterCompanyID AS [E_Download.FilterCompanyID], 
            T.FilterContactID AS [E_Download.FilterContactID], 
            T.FilterServerID AS [E_Download.FilterServerID], 
            T.FilterApplicationID AS [E_Download.FilterApplicationID], 
            T.FilterClientIP AS [E_Download.FilterClientIP], 
            T.LicenseID AS [E_Download.LicenseID], 
            T.LicenseAssetID AS [E_Download.LicenseAssetID], 
            T.RemainingDownloads AS [E_Download.RemainingDownloads], 
            T.ValidFrom AS [E_Download.ValidFrom], 
            T.ValidUntil AS [E_Download.ValidUntil], 
            T.Version AS [E_Download.Version], 
            T.VersionAntecedentID AS [E_Download.VersionAntecedentID], 
            T.VersionCertainty AS [E_Download.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Download.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Download.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Download.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Download.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Download.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Download.VersionUpdated], 
            True AS _from0
        FROM NKDC.Downloads AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Problem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView286()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Problem
        [NKD.Module.BusinessObjects.Store.E_Problem](T1.[E_Problem.ProblemID], T1.[E_Problem.ProblemName], T1.[E_Problem.OptimiseForParameterID], T1.[E_Problem.ProduceForParameterID], T1.[E_Problem.OptimumMin], T1.[E_Problem.OptimumMax], T1.[E_Problem.ProductionMin], T1.[E_Problem.ProductionMax], T1.[E_Problem.Complexity], T1.[E_Problem.IterationsMax], T1.[E_Problem.SolutionETA], T1.[E_Problem.LiveUpdateClient], T1.[E_Problem.LiveUpdateServer], T1.[E_Problem.UniversalPriority], T1.[E_Problem.LastThreadID], T1.[E_Problem.LastServerID], T1.[E_Problem.IsThreadAlive], T1.[E_Problem.ProblemCompleted], T1.[E_Problem.ProblemTerminated], T1.[E_Problem.ExecutedFromLocationID], T1.[E_Problem.DefaultTickUnitID], T1.[E_Problem.DefaultTicks], T1.[E_Problem.DefaultTicksOffset], T1.[E_Problem.DefaultTicksResolution], T1.[E_Problem.DefaultCulture], T1.[E_Problem.Version], T1.[E_Problem.VersionAntecedentID], T1.[E_Problem.VersionCertainty], T1.[E_Problem.VersionWorkflowInstanceID], T1.[E_Problem.VersionUpdatedBy], T1.[E_Problem.VersionDeletedBy], T1.[E_Problem.VersionOwnerContactID], T1.[E_Problem.VersionOwnerCompanyID], T1.[E_Problem.VersionUpdated])
    FROM (
        SELECT 
            T.ProblemID AS [E_Problem.ProblemID], 
            T.ProblemName AS [E_Problem.ProblemName], 
            T.OptimiseForParameterID AS [E_Problem.OptimiseForParameterID], 
            T.ProduceForParameterID AS [E_Problem.ProduceForParameterID], 
            T.OptimumMin AS [E_Problem.OptimumMin], 
            T.OptimumMax AS [E_Problem.OptimumMax], 
            T.ProductionMin AS [E_Problem.ProductionMin], 
            T.ProductionMax AS [E_Problem.ProductionMax], 
            T.Complexity AS [E_Problem.Complexity], 
            T.IterationsMax AS [E_Problem.IterationsMax], 
            T.SolutionETA AS [E_Problem.SolutionETA], 
            T.LiveUpdateClient AS [E_Problem.LiveUpdateClient], 
            T.LiveUpdateServer AS [E_Problem.LiveUpdateServer], 
            T.UniversalPriority AS [E_Problem.UniversalPriority], 
            T.LastThreadID AS [E_Problem.LastThreadID], 
            T.LastServerID AS [E_Problem.LastServerID], 
            T.IsThreadAlive AS [E_Problem.IsThreadAlive], 
            T.ProblemCompleted AS [E_Problem.ProblemCompleted], 
            T.ProblemTerminated AS [E_Problem.ProblemTerminated], 
            T.ExecutedFromLocationID AS [E_Problem.ExecutedFromLocationID], 
            T.DefaultTickUnitID AS [E_Problem.DefaultTickUnitID], 
            T.DefaultTicks AS [E_Problem.DefaultTicks], 
            T.DefaultTicksOffset AS [E_Problem.DefaultTicksOffset], 
            T.DefaultTicksResolution AS [E_Problem.DefaultTicksResolution], 
            T.DefaultCulture AS [E_Problem.DefaultCulture], 
            T.Version AS [E_Problem.Version], 
            T.VersionAntecedentID AS [E_Problem.VersionAntecedentID], 
            T.VersionCertainty AS [E_Problem.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Problem.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Problem.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Problem.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Problem.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Problem.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Problem.VersionUpdated], 
            True AS _from0
        FROM NKDC.Problems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProblemAssetData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView287()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProblemAssetData
        [NKD.Module.BusinessObjects.Store.E_ProblemAssetData](T1.[E_ProblemAssetData.ProblemAssetDataID], T1.[E_ProblemAssetData.ProblemID], T1.[E_ProblemAssetData.AssetDataID], T1.[E_ProblemAssetData.Version], T1.[E_ProblemAssetData.VersionAntecedentID], T1.[E_ProblemAssetData.VersionCertainty], T1.[E_ProblemAssetData.VersionWorkflowInstanceID], T1.[E_ProblemAssetData.VersionUpdatedBy], T1.[E_ProblemAssetData.VersionDeletedBy], T1.[E_ProblemAssetData.VersionOwnerContactID], T1.[E_ProblemAssetData.VersionOwnerCompanyID], T1.[E_ProblemAssetData.VersionUpdated])
    FROM (
        SELECT 
            T.ProblemAssetDataID AS [E_ProblemAssetData.ProblemAssetDataID], 
            T.ProblemID AS [E_ProblemAssetData.ProblemID], 
            T.AssetDataID AS [E_ProblemAssetData.AssetDataID], 
            T.Version AS [E_ProblemAssetData.Version], 
            T.VersionAntecedentID AS [E_ProblemAssetData.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProblemAssetData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProblemAssetData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProblemAssetData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProblemAssetData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProblemAssetData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProblemAssetData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProblemAssetData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProblemAssetDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirement.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView288()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProblemRequirement
        [NKD.Module.BusinessObjects.Store.E_ProblemRequirement](T1.[E_ProblemRequirement.ProblemRequirementID], T1.[E_ProblemRequirement.ProblemID], T1.[E_ProblemRequirement.ProblemRequirementName], T1.[E_ProblemRequirement.Complexity], T1.[E_ProblemRequirement.IterationsMax], T1.[E_ProblemRequirement.Version], T1.[E_ProblemRequirement.VersionAntecedentID], T1.[E_ProblemRequirement.VersionCertainty], T1.[E_ProblemRequirement.VersionWorkflowInstanceID], T1.[E_ProblemRequirement.VersionUpdatedBy], T1.[E_ProblemRequirement.VersionDeletedBy], T1.[E_ProblemRequirement.VersionOwnerContactID], T1.[E_ProblemRequirement.VersionOwnerCompanyID], T1.[E_ProblemRequirement.VersionUpdated])
    FROM (
        SELECT 
            T.ProblemRequirementID AS [E_ProblemRequirement.ProblemRequirementID], 
            T.ProblemID AS [E_ProblemRequirement.ProblemID], 
            T.ProblemRequirementName AS [E_ProblemRequirement.ProblemRequirementName], 
            T.Complexity AS [E_ProblemRequirement.Complexity], 
            T.IterationsMax AS [E_ProblemRequirement.IterationsMax], 
            T.Version AS [E_ProblemRequirement.Version], 
            T.VersionAntecedentID AS [E_ProblemRequirement.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProblemRequirement.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProblemRequirement.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProblemRequirement.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProblemRequirement.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProblemRequirement.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProblemRequirement.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProblemRequirement.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProblemRequirements AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirementAssetData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView289()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProblemRequirementAssetData
        [NKD.Module.BusinessObjects.Store.E_ProblemRequirementAssetData](T1.[E_ProblemRequirementAssetData.ProblemRequirementAssetDataID], T1.[E_ProblemRequirementAssetData.ProblemRequirementID], T1.[E_ProblemRequirementAssetData.AssetDataID], T1.[E_ProblemRequirementAssetData.SuggestedAvailabilityID], T1.[E_ProblemRequirementAssetData.SuggestedProvinceID], T1.[E_ProblemRequirementAssetData.SuggestedLocationID], T1.[E_ProblemRequirementAssetData.TickUnitID], T1.[E_ProblemRequirementAssetData.Ticks], T1.[E_ProblemRequirementAssetData.TicksOffset], T1.[E_ProblemRequirementAssetData.TicksResolution], T1.[E_ProblemRequirementAssetData.ValidFrom], T1.[E_ProblemRequirementAssetData.ValidUntil], T1.[E_ProblemRequirementAssetData.Culture], T1.[E_ProblemRequirementAssetData.Weight], T1.[E_ProblemRequirementAssetData.Version], T1.[E_ProblemRequirementAssetData.VersionAntecedentID], T1.[E_ProblemRequirementAssetData.VersionCertainty], T1.[E_ProblemRequirementAssetData.VersionWorkflowInstanceID], T1.[E_ProblemRequirementAssetData.VersionUpdatedBy], T1.[E_ProblemRequirementAssetData.VersionDeletedBy], T1.[E_ProblemRequirementAssetData.VersionOwnerContactID], T1.[E_ProblemRequirementAssetData.VersionOwnerCompanyID], T1.[E_ProblemRequirementAssetData.VersionUpdated])
    FROM (
        SELECT 
            T.ProblemRequirementAssetDataID AS [E_ProblemRequirementAssetData.ProblemRequirementAssetDataID], 
            T.ProblemRequirementID AS [E_ProblemRequirementAssetData.ProblemRequirementID], 
            T.AssetDataID AS [E_ProblemRequirementAssetData.AssetDataID], 
            T.SuggestedAvailabilityID AS [E_ProblemRequirementAssetData.SuggestedAvailabilityID], 
            T.SuggestedProvinceID AS [E_ProblemRequirementAssetData.SuggestedProvinceID], 
            T.SuggestedLocationID AS [E_ProblemRequirementAssetData.SuggestedLocationID], 
            T.TickUnitID AS [E_ProblemRequirementAssetData.TickUnitID], 
            T.Ticks AS [E_ProblemRequirementAssetData.Ticks], 
            T.TicksOffset AS [E_ProblemRequirementAssetData.TicksOffset], 
            T.TicksResolution AS [E_ProblemRequirementAssetData.TicksResolution], 
            T.ValidFrom AS [E_ProblemRequirementAssetData.ValidFrom], 
            T.ValidUntil AS [E_ProblemRequirementAssetData.ValidUntil], 
            T.Culture AS [E_ProblemRequirementAssetData.Culture], 
            T.Weight AS [E_ProblemRequirementAssetData.Weight], 
            T.Version AS [E_ProblemRequirementAssetData.Version], 
            T.VersionAntecedentID AS [E_ProblemRequirementAssetData.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProblemRequirementAssetData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProblemRequirementAssetData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProblemRequirementAssetData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProblemRequirementAssetData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProblemRequirementAssetData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProblemRequirementAssetData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProblemRequirementAssetData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProblemRequirementAssetDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProblemSolution.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView290()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProblemSolution
        [NKD.Module.BusinessObjects.Store.E_ProblemSolution](T1.[E_ProblemSolution.ProblemSolutionID], T1.[E_ProblemSolution.ProblemID], T1.[E_ProblemSolution.CostOptimum], T1.[E_ProblemSolution.Confidence], T1.[E_ProblemSolution.Iterations], T1.[E_ProblemSolution.Version], T1.[E_ProblemSolution.VersionAntecedentID], T1.[E_ProblemSolution.VersionCertainty], T1.[E_ProblemSolution.VersionWorkflowInstanceID], T1.[E_ProblemSolution.VersionUpdatedBy], T1.[E_ProblemSolution.VersionDeletedBy], T1.[E_ProblemSolution.VersionOwnerContactID], T1.[E_ProblemSolution.VersionOwnerCompanyID], T1.[E_ProblemSolution.VersionUpdated])
    FROM (
        SELECT 
            T.ProblemSolutionID AS [E_ProblemSolution.ProblemSolutionID], 
            T.ProblemID AS [E_ProblemSolution.ProblemID], 
            T.CostOptimum AS [E_ProblemSolution.CostOptimum], 
            T.Confidence AS [E_ProblemSolution.Confidence], 
            T.Iterations AS [E_ProblemSolution.Iterations], 
            T.Version AS [E_ProblemSolution.Version], 
            T.VersionAntecedentID AS [E_ProblemSolution.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProblemSolution.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProblemSolution.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProblemSolution.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProblemSolution.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProblemSolution.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProblemSolution.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProblemSolution.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProblemSolutions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProblemSolutionAssetDataAllocation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView291()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProblemSolutionAssetDataAllocation
        [NKD.Module.BusinessObjects.Store.E_ProblemSolutionAssetDataAllocation](T1.[E_ProblemSolutionAssetDataAllocation.ProblemSolutionAssetDataAllocationID], T1.[E_ProblemSolutionAssetDataAllocation.ProblemSolutionID], T1.[E_ProblemSolutionAssetDataAllocation.AssetDataID], T1.[E_ProblemSolutionAssetDataAllocation.Weight], T1.[E_ProblemSolutionAssetDataAllocation.WindowCost], T1.[E_ProblemSolutionAssetDataAllocation.WindowValue], T1.[E_ProblemSolutionAssetDataAllocation.WindowMetric], T1.[E_ProblemSolutionAssetDataAllocation.AllocationID], T1.[E_ProblemSolutionAssetDataAllocation.Version], T1.[E_ProblemSolutionAssetDataAllocation.VersionAntecedentID], T1.[E_ProblemSolutionAssetDataAllocation.VersionCertainty], T1.[E_ProblemSolutionAssetDataAllocation.VersionWorkflowInstanceID], T1.[E_ProblemSolutionAssetDataAllocation.VersionUpdatedBy], T1.[E_ProblemSolutionAssetDataAllocation.VersionDeletedBy], T1.[E_ProblemSolutionAssetDataAllocation.VersionOwnerContactID], T1.[E_ProblemSolutionAssetDataAllocation.VersionOwnerCompanyID], T1.[E_ProblemSolutionAssetDataAllocation.VersionUpdated])
    FROM (
        SELECT 
            T.ProblemSolutionAssetDataAllocationID AS [E_ProblemSolutionAssetDataAllocation.ProblemSolutionAssetDataAllocationID], 
            T.ProblemSolutionID AS [E_ProblemSolutionAssetDataAllocation.ProblemSolutionID], 
            T.AssetDataID AS [E_ProblemSolutionAssetDataAllocation.AssetDataID], 
            T.Weight AS [E_ProblemSolutionAssetDataAllocation.Weight], 
            T.WindowCost AS [E_ProblemSolutionAssetDataAllocation.WindowCost], 
            T.WindowValue AS [E_ProblemSolutionAssetDataAllocation.WindowValue], 
            T.WindowMetric AS [E_ProblemSolutionAssetDataAllocation.WindowMetric], 
            T.AllocationID AS [E_ProblemSolutionAssetDataAllocation.AllocationID], 
            T.Version AS [E_ProblemSolutionAssetDataAllocation.Version], 
            T.VersionAntecedentID AS [E_ProblemSolutionAssetDataAllocation.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProblemSolutionAssetDataAllocation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProblemSolutionAssetDataAllocation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProblemSolutionAssetDataAllocation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProblemSolutionAssetDataAllocation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProblemSolutionAssetDataAllocation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProblemSolutionAssetDataAllocation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProblemSolutionAssetDataAllocation.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProblemSolutionAssetDataAllocations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_SupplierModelContract.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView292()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_SupplierModelContract
        [NKD.Module.BusinessObjects.Store.E_SupplierModelContract](T1.[E_SupplierModelContract.SupplierModelContractID], T1.[E_SupplierModelContract.SupplierModelID], T1.[E_SupplierModelContract.ContractID], T1.[E_SupplierModelContract.RequiredFrom], T1.[E_SupplierModelContract.IsIntendedForDistributor], T1.[E_SupplierModelContract.IsIntendedForEndUser], T1.[E_SupplierModelContract.IsIntendedForSupplier], T1.[E_SupplierModelContract.Version], T1.[E_SupplierModelContract.VersionAntecedentID], T1.[E_SupplierModelContract.VersionCertainty], T1.[E_SupplierModelContract.VersionWorkflowInstanceID], T1.[E_SupplierModelContract.VersionUpdatedBy], T1.[E_SupplierModelContract.VersionDeletedBy], T1.[E_SupplierModelContract.VersionOwnerContactID], T1.[E_SupplierModelContract.VersionOwnerCompanyID], T1.[E_SupplierModelContract.VersionUpdated])
    FROM (
        SELECT 
            T.SupplierModelContractID AS [E_SupplierModelContract.SupplierModelContractID], 
            T.SupplierModelID AS [E_SupplierModelContract.SupplierModelID], 
            T.ContractID AS [E_SupplierModelContract.ContractID], 
            T.RequiredFrom AS [E_SupplierModelContract.RequiredFrom], 
            T.IsIntendedForDistributor AS [E_SupplierModelContract.IsIntendedForDistributor], 
            T.IsIntendedForEndUser AS [E_SupplierModelContract.IsIntendedForEndUser], 
            T.IsIntendedForSupplier AS [E_SupplierModelContract.IsIntendedForSupplier], 
            T.Version AS [E_SupplierModelContract.Version], 
            T.VersionAntecedentID AS [E_SupplierModelContract.VersionAntecedentID], 
            T.VersionCertainty AS [E_SupplierModelContract.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_SupplierModelContract.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_SupplierModelContract.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_SupplierModelContract.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_SupplierModelContract.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_SupplierModelContract.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_SupplierModelContract.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplierModelContracts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_SupplierPartContract.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView293()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_SupplierPartContract
        [NKD.Module.BusinessObjects.Store.E_SupplierPartContract](T1.[E_SupplierPartContract.SupplierPartContractID], T1.[E_SupplierPartContract.SupplierPartID], T1.[E_SupplierPartContract.ContractID], T1.[E_SupplierPartContract.RequiredFrom], T1.[E_SupplierPartContract.IsIntendedForDistributor], T1.[E_SupplierPartContract.IsIntendedForEndUser], T1.[E_SupplierPartContract.IsIntendedForSupplier], T1.[E_SupplierPartContract.Version], T1.[E_SupplierPartContract.VersionAntecedentID], T1.[E_SupplierPartContract.VersionCertainty], T1.[E_SupplierPartContract.VersionWorkflowInstanceID], T1.[E_SupplierPartContract.VersionUpdatedBy], T1.[E_SupplierPartContract.VersionDeletedBy], T1.[E_SupplierPartContract.VersionOwnerContactID], T1.[E_SupplierPartContract.VersionOwnerCompanyID], T1.[E_SupplierPartContract.VersionUpdated])
    FROM (
        SELECT 
            T.SupplierPartContractID AS [E_SupplierPartContract.SupplierPartContractID], 
            T.SupplierPartID AS [E_SupplierPartContract.SupplierPartID], 
            T.ContractID AS [E_SupplierPartContract.ContractID], 
            T.RequiredFrom AS [E_SupplierPartContract.RequiredFrom], 
            T.IsIntendedForDistributor AS [E_SupplierPartContract.IsIntendedForDistributor], 
            T.IsIntendedForEndUser AS [E_SupplierPartContract.IsIntendedForEndUser], 
            T.IsIntendedForSupplier AS [E_SupplierPartContract.IsIntendedForSupplier], 
            T.Version AS [E_SupplierPartContract.Version], 
            T.VersionAntecedentID AS [E_SupplierPartContract.VersionAntecedentID], 
            T.VersionCertainty AS [E_SupplierPartContract.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_SupplierPartContract.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_SupplierPartContract.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_SupplierPartContract.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_SupplierPartContract.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_SupplierPartContract.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_SupplierPartContract.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplierPartContracts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_SupplyContractCondition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView294()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_SupplyContractCondition
        [NKD.Module.BusinessObjects.Store.E_SupplyContractCondition](T1.[E_SupplyContractCondition.SupplyContractConditionID], T1.[E_SupplyContractCondition.SupplyID], T1.[E_SupplyContractCondition.ContractID], T1.[E_SupplyContractCondition.ContractConditionID], T1.[E_SupplyContractCondition.AgreedForCompanyID], T1.[E_SupplyContractCondition.AgreedByContactID], T1.[E_SupplyContractCondition.Agreed], T1.[E_SupplyContractCondition.Version], T1.[E_SupplyContractCondition.VersionAntecedentID], T1.[E_SupplyContractCondition.VersionCertainty], T1.[E_SupplyContractCondition.VersionWorkflowInstanceID], T1.[E_SupplyContractCondition.VersionUpdatedBy], T1.[E_SupplyContractCondition.VersionDeletedBy], T1.[E_SupplyContractCondition.VersionOwnerContactID], T1.[E_SupplyContractCondition.VersionOwnerCompanyID], T1.[E_SupplyContractCondition.VersionUpdated])
    FROM (
        SELECT 
            T.SupplyContractConditionID AS [E_SupplyContractCondition.SupplyContractConditionID], 
            T.SupplyID AS [E_SupplyContractCondition.SupplyID], 
            T.ContractID AS [E_SupplyContractCondition.ContractID], 
            T.ContractConditionID AS [E_SupplyContractCondition.ContractConditionID], 
            T.AgreedForCompanyID AS [E_SupplyContractCondition.AgreedForCompanyID], 
            T.AgreedByContactID AS [E_SupplyContractCondition.AgreedByContactID], 
            T.Agreed AS [E_SupplyContractCondition.Agreed], 
            T.Version AS [E_SupplyContractCondition.Version], 
            T.VersionAntecedentID AS [E_SupplyContractCondition.VersionAntecedentID], 
            T.VersionCertainty AS [E_SupplyContractCondition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_SupplyContractCondition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_SupplyContractCondition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_SupplyContractCondition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_SupplyContractCondition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_SupplyContractCondition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_SupplyContractCondition.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplyContractConditions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Communication.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView295()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Communication
        [NKD.Module.BusinessObjects.Store.X_Communication](T1.[X_Communication.CommunicationID], T1.[X_Communication.CommunicationName], T1.[X_Communication.CommunicationMobile], T1.[X_Communication.CommunicationEmail], T1.[X_Communication.CommunicationContactID], T1.[X_Communication.CommunicationCompanyID], T1.[X_Communication.StatusWorkTypeID], T1.[X_Communication.RegardingWorkTypeID], T1.[X_Communication.RegardingTableType], T1.[X_Communication.RegardingReferenceID], T1.[X_Communication.RegardingCompanyID], T1.[X_Communication.RegardingContactID], T1.[X_Communication.RegardingFileDataID], T1.[X_Communication.RegardingProjectID], T1.[X_Communication.RegardingExperienceID], T1.[X_Communication.RegardingDescription], T1.[X_Communication.OpenedBy], T1.[X_Communication.AssignedBy], T1.[X_Communication.MaintainedBy], T1.[X_Communication.ClosedBy], T1.[X_Communication.EstimatedClosure], T1.[X_Communication.EstimatedDurationHours], T1.[X_Communication.EstimatedRevenue], T1.[X_Communication.EstimatedCost], T1.[X_Communication.Probability], T1.[X_Communication.Comment], T1.[X_Communication.Version], T1.[X_Communication.VersionAntecedentID], T1.[X_Communication.VersionCertainty], T1.[X_Communication.VersionWorkflowInstanceID], T1.[X_Communication.VersionUpdatedBy], T1.[X_Communication.VersionDeletedBy], T1.[X_Communication.VersionOwnerContactID], T1.[X_Communication.VersionOwnerCompanyID], T1.[X_Communication.VersionUpdated])
    FROM (
        SELECT 
            T.CommunicationID AS [X_Communication.CommunicationID], 
            T.CommunicationName AS [X_Communication.CommunicationName], 
            T.CommunicationMobile AS [X_Communication.CommunicationMobile], 
            T.CommunicationEmail AS [X_Communication.CommunicationEmail], 
            T.CommunicationContactID AS [X_Communication.CommunicationContactID], 
            T.CommunicationCompanyID AS [X_Communication.CommunicationCompanyID], 
            T.StatusWorkTypeID AS [X_Communication.StatusWorkTypeID], 
            T.RegardingWorkTypeID AS [X_Communication.RegardingWorkTypeID], 
            T.RegardingTableType AS [X_Communication.RegardingTableType], 
            T.RegardingReferenceID AS [X_Communication.RegardingReferenceID], 
            T.RegardingCompanyID AS [X_Communication.RegardingCompanyID], 
            T.RegardingContactID AS [X_Communication.RegardingContactID], 
            T.RegardingFileDataID AS [X_Communication.RegardingFileDataID], 
            T.RegardingProjectID AS [X_Communication.RegardingProjectID], 
            T.RegardingExperienceID AS [X_Communication.RegardingExperienceID], 
            T.RegardingDescription AS [X_Communication.RegardingDescription], 
            T.OpenedBy AS [X_Communication.OpenedBy], 
            T.AssignedBy AS [X_Communication.AssignedBy], 
            T.MaintainedBy AS [X_Communication.MaintainedBy], 
            T.ClosedBy AS [X_Communication.ClosedBy], 
            T.EstimatedClosure AS [X_Communication.EstimatedClosure], 
            T.EstimatedDurationHours AS [X_Communication.EstimatedDurationHours], 
            T.EstimatedRevenue AS [X_Communication.EstimatedRevenue], 
            T.EstimatedCost AS [X_Communication.EstimatedCost], 
            T.Probability AS [X_Communication.Probability], 
            T.Comment AS [X_Communication.Comment], 
            T.Version AS [X_Communication.Version], 
            T.VersionAntecedentID AS [X_Communication.VersionAntecedentID], 
            T.VersionCertainty AS [X_Communication.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Communication.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Communication.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Communication.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Communication.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Communication.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Communication.VersionUpdated], 
            True AS _from0
        FROM NKDC.Communications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryAddressType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView296()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryAddressType
        [NKD.Module.BusinessObjects.Store.E_DictionaryAddressType](T1.[E_DictionaryAddressType.AddressTypeID], T1.[E_DictionaryAddressType.StandardAddressTypeName], T1.[E_DictionaryAddressType.CustomAddressTypeName], T1.[E_DictionaryAddressType.Description], T1.[E_DictionaryAddressType.FullDescription], T1.[E_DictionaryAddressType.Thumbnail], T1.[E_DictionaryAddressType.OriginalFileDataID], T1.[E_DictionaryAddressType.Version], T1.[E_DictionaryAddressType.VersionAntecedentID], T1.[E_DictionaryAddressType.VersionCertainty], T1.[E_DictionaryAddressType.VersionWorkflowInstanceID], T1.[E_DictionaryAddressType.VersionUpdatedBy], T1.[E_DictionaryAddressType.VersionDeletedBy], T1.[E_DictionaryAddressType.VersionOwnerContactID], T1.[E_DictionaryAddressType.VersionOwnerCompanyID], T1.[E_DictionaryAddressType.VersionUpdated])
    FROM (
        SELECT 
            T.AddressTypeID AS [E_DictionaryAddressType.AddressTypeID], 
            T.StandardAddressTypeName AS [E_DictionaryAddressType.StandardAddressTypeName], 
            T.CustomAddressTypeName AS [E_DictionaryAddressType.CustomAddressTypeName], 
            T.Description AS [E_DictionaryAddressType.Description], 
            T.FullDescription AS [E_DictionaryAddressType.FullDescription], 
            T.Thumbnail AS [E_DictionaryAddressType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryAddressType.OriginalFileDataID], 
            T.Version AS [E_DictionaryAddressType.Version], 
            T.VersionAntecedentID AS [E_DictionaryAddressType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryAddressType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryAddressType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryAddressType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryAddressType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryAddressType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryAddressType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryAddressType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAddressTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderContact.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView297()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ApplicationPaymentProviderContact
        [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderContact](T1.[E_ApplicationPaymentProviderContact.ApplicationPaymentProviderContactID], T1.[E_ApplicationPaymentProviderContact.ApplicationPaymentProviderID], T1.[E_ApplicationPaymentProviderContact.ContactID], T1.[E_ApplicationPaymentProviderContact.CustomerReference], T1.[E_ApplicationPaymentProviderContact.UserDataType], T1.[E_ApplicationPaymentProviderContact.SystemDataType], T1.[E_ApplicationPaymentProviderContact.Version], T1.[E_ApplicationPaymentProviderContact.VersionAntecedentID], T1.[E_ApplicationPaymentProviderContact.VersionCertainty], T1.[E_ApplicationPaymentProviderContact.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProviderContact.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderContact.VersionDeletedBy], T1.[E_ApplicationPaymentProviderContact.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderContact.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderContact.VersionUpdated])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderContactID AS [E_ApplicationPaymentProviderContact.ApplicationPaymentProviderContactID], 
            T.ApplicationPaymentProviderID AS [E_ApplicationPaymentProviderContact.ApplicationPaymentProviderID], 
            T.ContactID AS [E_ApplicationPaymentProviderContact.ContactID], 
            T.CustomerReference AS [E_ApplicationPaymentProviderContact.CustomerReference], 
            T.UserDataType AS [E_ApplicationPaymentProviderContact.UserDataType], 
            T.SystemDataType AS [E_ApplicationPaymentProviderContact.SystemDataType], 
            T.Version AS [E_ApplicationPaymentProviderContact.Version], 
            T.VersionAntecedentID AS [E_ApplicationPaymentProviderContact.VersionAntecedentID], 
            T.VersionCertainty AS [E_ApplicationPaymentProviderContact.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProviderContact.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderContact.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ApplicationPaymentProviderContact.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ApplicationPaymentProviderContact.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProviderContact.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ApplicationPaymentProviderContact.VersionUpdated], 
            True AS _from0
        FROM NKDC.ApplicationPaymentProviderContacts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_PaymentInvoice.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView298()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_PaymentInvoice
        [NKD.Module.BusinessObjects.Store.E_PaymentInvoice](T1.[E_PaymentInvoice.PaymentInvoiceID], T1.[E_PaymentInvoice.PaymentID], T1.[E_PaymentInvoice.InvoiceID], T1.[E_PaymentInvoice.IsFinalPaymentInvoice], T1.[E_PaymentInvoice.Version], T1.[E_PaymentInvoice.VersionAntecedentID], T1.[E_PaymentInvoice.VersionCertainty], T1.[E_PaymentInvoice.VersionWorkflowInstanceID], T1.[E_PaymentInvoice.VersionUpdatedBy], T1.[E_PaymentInvoice.VersionDeletedBy], T1.[E_PaymentInvoice.VersionOwnerContactID], T1.[E_PaymentInvoice.VersionOwnerCompanyID], T1.[E_PaymentInvoice.VersionUpdated])
    FROM (
        SELECT 
            T.PaymentInvoiceID AS [E_PaymentInvoice.PaymentInvoiceID], 
            T.PaymentID AS [E_PaymentInvoice.PaymentID], 
            T.InvoiceID AS [E_PaymentInvoice.InvoiceID], 
            T.IsFinalPaymentInvoice AS [E_PaymentInvoice.IsFinalPaymentInvoice], 
            T.Version AS [E_PaymentInvoice.Version], 
            T.VersionAntecedentID AS [E_PaymentInvoice.VersionAntecedentID], 
            T.VersionCertainty AS [E_PaymentInvoice.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_PaymentInvoice.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_PaymentInvoice.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_PaymentInvoice.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_PaymentInvoice.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_PaymentInvoice.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_PaymentInvoice.VersionUpdated], 
            True AS _from0
        FROM NKDC.PaymentInvoices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_TwoStepAuthenticationData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView299()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_TwoStepAuthenticationData
        [NKD.Module.BusinessObjects.Store.E_TwoStepAuthenticationData](T1.[E_TwoStepAuthenticationData.TwoStepAuthenticationDataID], T1.[E_TwoStepAuthenticationData.Sequence], T1.[E_TwoStepAuthenticationData.TableType], T1.[E_TwoStepAuthenticationData.ReferenceID], T1.[E_TwoStepAuthenticationData.ReferenceName], T1.[E_TwoStepAuthenticationData.ContactID], T1.[E_TwoStepAuthenticationData.Mobile], T1.[E_TwoStepAuthenticationData.VerificationCode], T1.[E_TwoStepAuthenticationData.Sent], T1.[E_TwoStepAuthenticationData.ServerReceipt], T1.[E_TwoStepAuthenticationData.IsServerValid], T1.[E_TwoStepAuthenticationData.AcceptRepliesUntil], T1.[E_TwoStepAuthenticationData.Verified], T1.[E_TwoStepAuthenticationData.VerifiedURLHost], T1.[E_TwoStepAuthenticationData.VerifiedURLQueryString], T1.[E_TwoStepAuthenticationData.RequestedByIP], T1.[E_TwoStepAuthenticationData.ContactReceipt], T1.[E_TwoStepAuthenticationData.ContactAccepted], T1.[E_TwoStepAuthenticationData.Version], T1.[E_TwoStepAuthenticationData.VersionAntecedentID], T1.[E_TwoStepAuthenticationData.VersionCertainty], T1.[E_TwoStepAuthenticationData.VersionWorkflowInstanceID], T1.[E_TwoStepAuthenticationData.VersionUpdatedBy], T1.[E_TwoStepAuthenticationData.VersionDeletedBy], T1.[E_TwoStepAuthenticationData.VersionOwnerContactID], T1.[E_TwoStepAuthenticationData.VersionOwnerCompanyID], T1.[E_TwoStepAuthenticationData.VersionUpdated])
    FROM (
        SELECT 
            T.TwoStepAuthenticationDataID AS [E_TwoStepAuthenticationData.TwoStepAuthenticationDataID], 
            T.Sequence AS [E_TwoStepAuthenticationData.Sequence], 
            T.TableType AS [E_TwoStepAuthenticationData.TableType], 
            T.ReferenceID AS [E_TwoStepAuthenticationData.ReferenceID], 
            T.ReferenceName AS [E_TwoStepAuthenticationData.ReferenceName], 
            T.ContactID AS [E_TwoStepAuthenticationData.ContactID], 
            T.Mobile AS [E_TwoStepAuthenticationData.Mobile], 
            T.VerificationCode AS [E_TwoStepAuthenticationData.VerificationCode], 
            T.Sent AS [E_TwoStepAuthenticationData.Sent], 
            T.ServerReceipt AS [E_TwoStepAuthenticationData.ServerReceipt], 
            T.IsServerValid AS [E_TwoStepAuthenticationData.IsServerValid], 
            T.AcceptRepliesUntil AS [E_TwoStepAuthenticationData.AcceptRepliesUntil], 
            T.Verified AS [E_TwoStepAuthenticationData.Verified], 
            T.VerifiedURLHost AS [E_TwoStepAuthenticationData.VerifiedURLHost], 
            T.VerifiedURLQueryString AS [E_TwoStepAuthenticationData.VerifiedURLQueryString], 
            T.RequestedByIP AS [E_TwoStepAuthenticationData.RequestedByIP], 
            T.ContactReceipt AS [E_TwoStepAuthenticationData.ContactReceipt], 
            T.ContactAccepted AS [E_TwoStepAuthenticationData.ContactAccepted], 
            T.Version AS [E_TwoStepAuthenticationData.Version], 
            T.VersionAntecedentID AS [E_TwoStepAuthenticationData.VersionAntecedentID], 
            T.VersionCertainty AS [E_TwoStepAuthenticationData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_TwoStepAuthenticationData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_TwoStepAuthenticationData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_TwoStepAuthenticationData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_TwoStepAuthenticationData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_TwoStepAuthenticationData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_TwoStepAuthenticationData.VersionUpdated], 
            True AS _from0
        FROM NKDC.TwoStepAuthenticationDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Affiliate.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView300()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Affiliate
        [NKD.Module.BusinessObjects.Store.E_Affiliate](T1.[E_Affiliate.AffiliateID], T1.[E_Affiliate.ParentContactID], T1.[E_Affiliate.AffiliateContactID], T1.[E_Affiliate.AffiliateTypeID], T1.[E_Affiliate.InitialIP], T1.[E_Affiliate.Version], T1.[E_Affiliate.VersionAntecedentID], T1.[E_Affiliate.VersionCertainty], T1.[E_Affiliate.VersionWorkflowInstanceID], T1.[E_Affiliate.VersionUpdatedBy], T1.[E_Affiliate.VersionDeletedBy], T1.[E_Affiliate.VersionOwnerContactID], T1.[E_Affiliate.VersionOwnerCompanyID], T1.[E_Affiliate.VersionUpdated])
    FROM (
        SELECT 
            T.AffiliateID AS [E_Affiliate.AffiliateID], 
            T.ParentContactID AS [E_Affiliate.ParentContactID], 
            T.AffiliateContactID AS [E_Affiliate.AffiliateContactID], 
            T.AffiliateTypeID AS [E_Affiliate.AffiliateTypeID], 
            T.InitialIP AS [E_Affiliate.InitialIP], 
            T.Version AS [E_Affiliate.Version], 
            T.VersionAntecedentID AS [E_Affiliate.VersionAntecedentID], 
            T.VersionCertainty AS [E_Affiliate.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Affiliate.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Affiliate.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Affiliate.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Affiliate.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Affiliate.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Affiliate.VersionUpdated], 
            True AS _from0
        FROM NKDC.Affiliates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryAffiliateType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView301()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryAffiliateType
        [NKD.Module.BusinessObjects.Store.E_DictionaryAffiliateType](T1.[E_DictionaryAffiliateType.AffiliateTypeID], T1.[E_DictionaryAffiliateType.StandardAffiliateTypeName], T1.[E_DictionaryAffiliateType.CustomAffiliateTypeName], T1.[E_DictionaryAffiliateType.Rate], T1.[E_DictionaryAffiliateType.Description], T1.[E_DictionaryAffiliateType.FullDescription], T1.[E_DictionaryAffiliateType.Thumbnail], T1.[E_DictionaryAffiliateType.OriginalFileDataID], T1.[E_DictionaryAffiliateType.Version], T1.[E_DictionaryAffiliateType.VersionAntecedentID], T1.[E_DictionaryAffiliateType.VersionCertainty], T1.[E_DictionaryAffiliateType.VersionWorkflowInstanceID], T1.[E_DictionaryAffiliateType.VersionUpdatedBy], T1.[E_DictionaryAffiliateType.VersionDeletedBy], T1.[E_DictionaryAffiliateType.VersionOwnerContactID], T1.[E_DictionaryAffiliateType.VersionOwnerCompanyID], T1.[E_DictionaryAffiliateType.VersionUpdated])
    FROM (
        SELECT 
            T.AffiliateTypeID AS [E_DictionaryAffiliateType.AffiliateTypeID], 
            T.StandardAffiliateTypeName AS [E_DictionaryAffiliateType.StandardAffiliateTypeName], 
            T.CustomAffiliateTypeName AS [E_DictionaryAffiliateType.CustomAffiliateTypeName], 
            T.Rate AS [E_DictionaryAffiliateType.Rate], 
            T.Description AS [E_DictionaryAffiliateType.Description], 
            T.FullDescription AS [E_DictionaryAffiliateType.FullDescription], 
            T.Thumbnail AS [E_DictionaryAffiliateType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryAffiliateType.OriginalFileDataID], 
            T.Version AS [E_DictionaryAffiliateType.Version], 
            T.VersionAntecedentID AS [E_DictionaryAffiliateType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryAffiliateType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryAffiliateType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryAffiliateType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryAffiliateType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryAffiliateType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryAffiliateType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryAffiliateType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAffiliateTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_CommunicationEmail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView302()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_CommunicationEmail
        [NKD.Module.BusinessObjects.Store.E_CommunicationEmail](T1.[E_CommunicationEmail.CommunicationEmailID], T1.[E_CommunicationEmail.CommunicationID], T1.[E_CommunicationEmail.CommunicationEmail], T1.[E_CommunicationEmail.ContactID], T1.[E_CommunicationEmail.Version], T1.[E_CommunicationEmail.VersionAntecedentID], T1.[E_CommunicationEmail.VersionCertainty], T1.[E_CommunicationEmail.VersionWorkflowInstanceID], T1.[E_CommunicationEmail.VersionUpdatedBy], T1.[E_CommunicationEmail.VersionDeletedBy], T1.[E_CommunicationEmail.VersionOwnerContactID], T1.[E_CommunicationEmail.VersionOwnerCompanyID], T1.[E_CommunicationEmail.VersionUpdated])
    FROM (
        SELECT 
            T.CommunicationEmailID AS [E_CommunicationEmail.CommunicationEmailID], 
            T.CommunicationID AS [E_CommunicationEmail.CommunicationID], 
            T.CommunicationEmail AS [E_CommunicationEmail.CommunicationEmail], 
            T.ContactID AS [E_CommunicationEmail.ContactID], 
            T.Version AS [E_CommunicationEmail.Version], 
            T.VersionAntecedentID AS [E_CommunicationEmail.VersionAntecedentID], 
            T.VersionCertainty AS [E_CommunicationEmail.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_CommunicationEmail.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_CommunicationEmail.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_CommunicationEmail.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_CommunicationEmail.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_CommunicationEmail.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_CommunicationEmail.VersionUpdated], 
            True AS _from0
        FROM NKDC.CommunicationEmails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_CommunicationRegardingData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView303()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_CommunicationRegardingData
        [NKD.Module.BusinessObjects.Store.E_CommunicationRegardingData](T1.[E_CommunicationRegardingData.CommunicationRegardingDataID], T1.[E_CommunicationRegardingData.CommunicationID], T1.[E_CommunicationRegardingData.TableType], T1.[E_CommunicationRegardingData.ReferenceID], T1.[E_CommunicationRegardingData.ReferenceName], T1.[E_CommunicationRegardingData.Version], T1.[E_CommunicationRegardingData.VersionAntecedentID], T1.[E_CommunicationRegardingData.VersionCertainty], T1.[E_CommunicationRegardingData.VersionWorkflowInstanceID], T1.[E_CommunicationRegardingData.VersionUpdatedBy], T1.[E_CommunicationRegardingData.VersionDeletedBy], T1.[E_CommunicationRegardingData.VersionOwnerContactID], T1.[E_CommunicationRegardingData.VersionOwnerCompanyID], T1.[E_CommunicationRegardingData.VersionUpdated])
    FROM (
        SELECT 
            T.CommunicationRegardingDataID AS [E_CommunicationRegardingData.CommunicationRegardingDataID], 
            T.CommunicationID AS [E_CommunicationRegardingData.CommunicationID], 
            T.TableType AS [E_CommunicationRegardingData.TableType], 
            T.ReferenceID AS [E_CommunicationRegardingData.ReferenceID], 
            T.ReferenceName AS [E_CommunicationRegardingData.ReferenceName], 
            T.Version AS [E_CommunicationRegardingData.Version], 
            T.VersionAntecedentID AS [E_CommunicationRegardingData.VersionAntecedentID], 
            T.VersionCertainty AS [E_CommunicationRegardingData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_CommunicationRegardingData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_CommunicationRegardingData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_CommunicationRegardingData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_CommunicationRegardingData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_CommunicationRegardingData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_CommunicationRegardingData.VersionUpdated], 
            True AS _from0
        FROM NKDC.CommunicationRegardingDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryAssetStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView304()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Q_DictionaryAssetStatus
        [NKD.Module.BusinessObjects.Store.Q_DictionaryAssetStatus](T1.[Q_DictionaryAssetStatus.AssetStatusID], T1.[Q_DictionaryAssetStatus.StandardAssetStatusName], T1.[Q_DictionaryAssetStatus.CustomAssetStatusName], T1.[Q_DictionaryAssetStatus.Description], T1.[Q_DictionaryAssetStatus.Version], T1.[Q_DictionaryAssetStatus.VersionAntecedentID], T1.[Q_DictionaryAssetStatus.VersionCertainty], T1.[Q_DictionaryAssetStatus.VersionWorkflowInstanceID], T1.[Q_DictionaryAssetStatus.VersionUpdatedBy], T1.[Q_DictionaryAssetStatus.VersionDeletedBy], T1.[Q_DictionaryAssetStatus.VersionOwnerContactID], T1.[Q_DictionaryAssetStatus.VersionOwnerCompanyID], T1.[Q_DictionaryAssetStatus.VersionUpdated])
    FROM (
        SELECT 
            T.AssetStatusID AS [Q_DictionaryAssetStatus.AssetStatusID], 
            T.StandardAssetStatusName AS [Q_DictionaryAssetStatus.StandardAssetStatusName], 
            T.CustomAssetStatusName AS [Q_DictionaryAssetStatus.CustomAssetStatusName], 
            T.Description AS [Q_DictionaryAssetStatus.Description], 
            T.Version AS [Q_DictionaryAssetStatus.Version], 
            T.VersionAntecedentID AS [Q_DictionaryAssetStatus.VersionAntecedentID], 
            T.VersionCertainty AS [Q_DictionaryAssetStatus.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_DictionaryAssetStatus.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_DictionaryAssetStatus.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_DictionaryAssetStatus.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_DictionaryAssetStatus.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_DictionaryAssetStatus.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_DictionaryAssetStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAssetStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.T_DictionaryUsageAuditType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView305()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing T_DictionaryUsageAuditType
        [NKD.Module.BusinessObjects.Store.T_DictionaryUsageAuditType](T1.[T_DictionaryUsageAuditType.UsageAuditTypeID], T1.[T_DictionaryUsageAuditType.UsageAuditTypeName], T1.[T_DictionaryUsageAuditType.Description], T1.[T_DictionaryUsageAuditType.FullDescription], T1.[T_DictionaryUsageAuditType.Thumbnail], T1.[T_DictionaryUsageAuditType.OriginalFileDataID], T1.[T_DictionaryUsageAuditType.Version], T1.[T_DictionaryUsageAuditType.VersionAntecedentID], T1.[T_DictionaryUsageAuditType.VersionCertainty], T1.[T_DictionaryUsageAuditType.VersionWorkflowInstanceID], T1.[T_DictionaryUsageAuditType.VersionUpdatedBy], T1.[T_DictionaryUsageAuditType.VersionDeletedBy], T1.[T_DictionaryUsageAuditType.VersionOwnerContactID], T1.[T_DictionaryUsageAuditType.VersionOwnerCompanyID], T1.[T_DictionaryUsageAuditType.VersionUpdated])
    FROM (
        SELECT 
            T.UsageAuditTypeID AS [T_DictionaryUsageAuditType.UsageAuditTypeID], 
            T.UsageAuditTypeName AS [T_DictionaryUsageAuditType.UsageAuditTypeName], 
            T.Description AS [T_DictionaryUsageAuditType.Description], 
            T.FullDescription AS [T_DictionaryUsageAuditType.FullDescription], 
            T.Thumbnail AS [T_DictionaryUsageAuditType.Thumbnail], 
            T.OriginalFileDataID AS [T_DictionaryUsageAuditType.OriginalFileDataID], 
            T.Version AS [T_DictionaryUsageAuditType.Version], 
            T.VersionAntecedentID AS [T_DictionaryUsageAuditType.VersionAntecedentID], 
            T.VersionCertainty AS [T_DictionaryUsageAuditType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [T_DictionaryUsageAuditType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [T_DictionaryUsageAuditType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [T_DictionaryUsageAuditType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [T_DictionaryUsageAuditType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [T_DictionaryUsageAuditType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [T_DictionaryUsageAuditType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryUsageAuditTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView306()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphData
        [NKD.Module.BusinessObjects.Store.E_GraphData](T1.[E_GraphData.GraphDataID], T1.[E_GraphData.GraphName], T1.[E_GraphData.WorkflowTypeID], T1.[E_GraphData.TableType], T1.[E_GraphData.ReferenceID], T1.[E_GraphData.GraphData], T1.[E_GraphData.ReferenceName], T1.[E_GraphData.Comment], T1.[E_GraphData.CreatedBy], T1.[E_GraphData.Created], T1.[E_GraphData.Version], T1.[E_GraphData.VersionAntecedentID], T1.[E_GraphData.VersionCertainty], T1.[E_GraphData.VersionWorkflowInstanceID], T1.[E_GraphData.VersionUpdatedBy], T1.[E_GraphData.VersionDeletedBy], T1.[E_GraphData.VersionOwnerContactID], T1.[E_GraphData.VersionOwnerCompanyID], T1.[E_GraphData.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataID AS [E_GraphData.GraphDataID], 
            T.GraphName AS [E_GraphData.GraphName], 
            T.WorkflowTypeID AS [E_GraphData.WorkflowTypeID], 
            T.TableType AS [E_GraphData.TableType], 
            T.ReferenceID AS [E_GraphData.ReferenceID], 
            T.GraphContent AS [E_GraphData.GraphData], 
            T.ReferenceName AS [E_GraphData.ReferenceName], 
            T.Comment AS [E_GraphData.Comment], 
            T.CreatedBy AS [E_GraphData.CreatedBy], 
            T.Created AS [E_GraphData.Created], 
            T.Version AS [E_GraphData.Version], 
            T.VersionAntecedentID AS [E_GraphData.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphData.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView307()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphDataRelation
        [NKD.Module.BusinessObjects.Store.E_GraphDataRelation](T1.[E_GraphDataRelation.GraphDataRelationID], T1.[E_GraphDataRelation.GraphDataGroupID], T1.[E_GraphDataRelation.FromGraphDataID], T1.[E_GraphDataRelation.ToGraphDataID], T1.[E_GraphDataRelation.Weight], T1.[E_GraphDataRelation.RelationTypeID], T1.[E_GraphDataRelation.Related], T1.[E_GraphDataRelation.Sequence], T1.[E_GraphDataRelation.Version], T1.[E_GraphDataRelation.VersionAntecedentID], T1.[E_GraphDataRelation.VersionCertainty], T1.[E_GraphDataRelation.VersionWorkflowInstanceID], T1.[E_GraphDataRelation.VersionUpdatedBy], T1.[E_GraphDataRelation.VersionDeletedBy], T1.[E_GraphDataRelation.VersionOwnerContactID], T1.[E_GraphDataRelation.VersionOwnerCompanyID], T1.[E_GraphDataRelation.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataRelationID AS [E_GraphDataRelation.GraphDataRelationID], 
            T.GraphDataGroupID AS [E_GraphDataRelation.GraphDataGroupID], 
            T.FromGraphDataID AS [E_GraphDataRelation.FromGraphDataID], 
            T.ToGraphDataID AS [E_GraphDataRelation.ToGraphDataID], 
            T.Weight AS [E_GraphDataRelation.Weight], 
            T.RelationTypeID AS [E_GraphDataRelation.RelationTypeID], 
            T.Related AS [E_GraphDataRelation.Related], 
            T.Sequence AS [E_GraphDataRelation.Sequence], 
            T.Version AS [E_GraphDataRelation.Version], 
            T.VersionAntecedentID AS [E_GraphDataRelation.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphDataRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphDataRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphDataRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphDataRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphDataRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphDataRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphDataRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphDataRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryLinestringType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView308()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryLinestringType
        [NKD.Module.BusinessObjects.Store.E_DictionaryLinestringType](T1.[E_DictionaryLinestringType.LinestringTypeID], T1.[E_DictionaryLinestringType.StandardLinestringTypeName], T1.[E_DictionaryLinestringType.CustomLinestringTypeName], T1.[E_DictionaryLinestringType.Description], T1.[E_DictionaryLinestringType.FullDescription], T1.[E_DictionaryLinestringType.Thumbnail], T1.[E_DictionaryLinestringType.OriginalFileDataID], T1.[E_DictionaryLinestringType.Version], T1.[E_DictionaryLinestringType.VersionAntecedentID], T1.[E_DictionaryLinestringType.VersionCertainty], T1.[E_DictionaryLinestringType.VersionWorkflowInstanceID], T1.[E_DictionaryLinestringType.VersionUpdatedBy], T1.[E_DictionaryLinestringType.VersionDeletedBy], T1.[E_DictionaryLinestringType.VersionOwnerContactID], T1.[E_DictionaryLinestringType.VersionOwnerCompanyID], T1.[E_DictionaryLinestringType.VersionUpdated])
    FROM (
        SELECT 
            T.LinestringTypeID AS [E_DictionaryLinestringType.LinestringTypeID], 
            T.StandardLinestringTypeName AS [E_DictionaryLinestringType.StandardLinestringTypeName], 
            T.CustomLinestringTypeName AS [E_DictionaryLinestringType.CustomLinestringTypeName], 
            T.Description AS [E_DictionaryLinestringType.Description], 
            T.FullDescription AS [E_DictionaryLinestringType.FullDescription], 
            T.Thumbnail AS [E_DictionaryLinestringType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryLinestringType.OriginalFileDataID], 
            T.Version AS [E_DictionaryLinestringType.Version], 
            T.VersionAntecedentID AS [E_DictionaryLinestringType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryLinestringType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryLinestringType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryLinestringType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryLinestringType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryLinestringType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryLinestringType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryLinestringType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryLinestringTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryProjectType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView309()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryProjectType
        [NKD.Module.BusinessObjects.Store.E_DictionaryProjectType](T1.[E_DictionaryProjectType.ProjectTypeID], T1.[E_DictionaryProjectType.ProjectTypeName], T1.[E_DictionaryProjectType.ProjectTypeDescription], T1.[E_DictionaryProjectType.FullDescription], T1.[E_DictionaryProjectType.Thumbnail], T1.[E_DictionaryProjectType.OriginalFileDataID], T1.[E_DictionaryProjectType.Version], T1.[E_DictionaryProjectType.VersionAntecedentID], T1.[E_DictionaryProjectType.VersionCertainty], T1.[E_DictionaryProjectType.VersionProjectflowInstanceID], T1.[E_DictionaryProjectType.VersionUpdatedBy], T1.[E_DictionaryProjectType.VersionDeletedBy], T1.[E_DictionaryProjectType.VersionOwnerContactID], T1.[E_DictionaryProjectType.VersionOwnerCompanyID], T1.[E_DictionaryProjectType.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectTypeID AS [E_DictionaryProjectType.ProjectTypeID], 
            T.ProjectTypeName AS [E_DictionaryProjectType.ProjectTypeName], 
            T.ProjectTypeDescription AS [E_DictionaryProjectType.ProjectTypeDescription], 
            T.FullDescription AS [E_DictionaryProjectType.FullDescription], 
            T.Thumbnail AS [E_DictionaryProjectType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryProjectType.OriginalFileDataID], 
            T.Version AS [E_DictionaryProjectType.Version], 
            T.VersionAntecedentID AS [E_DictionaryProjectType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryProjectType.VersionCertainty], 
            T.VersionProjectflowInstanceID AS [E_DictionaryProjectType.VersionProjectflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryProjectType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryProjectType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryProjectType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryProjectType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryProjectType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryProjectTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Linestring.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView310()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Linestring
        [NKD.Module.BusinessObjects.Store.E_Linestring](T1.[E_Linestring.LinestringID], T1.[E_Linestring.LinestringTypeID], T1.[E_Linestring.DefaultLinestringName], T1.[E_Linestring.LinestringCode], T1.[E_Linestring.LinestringGeography], T1.[E_Linestring.DefaultCulture], T1.[E_Linestring.OwnerCompanyID], T1.[E_Linestring.ResponsibleContactID], T1.[E_Linestring.Comment], T1.[E_Linestring.Version], T1.[E_Linestring.VersionAntecedentID], T1.[E_Linestring.VersionCertainty], T1.[E_Linestring.VersionWorkflowInstanceID], T1.[E_Linestring.VersionUpdatedBy], T1.[E_Linestring.VersionDeletedBy], T1.[E_Linestring.VersionOwnerContactID], T1.[E_Linestring.VersionOwnerCompanyID], T1.[E_Linestring.VersionUpdated])
    FROM (
        SELECT 
            T.LinestringID AS [E_Linestring.LinestringID], 
            T.LinestringTypeID AS [E_Linestring.LinestringTypeID], 
            T.DefaultLinestringName AS [E_Linestring.DefaultLinestringName], 
            T.LinestringCode AS [E_Linestring.LinestringCode], 
            T.LinestringGeography AS [E_Linestring.LinestringGeography], 
            T.DefaultCulture AS [E_Linestring.DefaultCulture], 
            T.OwnerCompanyID AS [E_Linestring.OwnerCompanyID], 
            T.ResponsibleContactID AS [E_Linestring.ResponsibleContactID], 
            T.Comment AS [E_Linestring.Comment], 
            T.Version AS [E_Linestring.Version], 
            T.VersionAntecedentID AS [E_Linestring.VersionAntecedentID], 
            T.VersionCertainty AS [E_Linestring.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Linestring.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Linestring.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Linestring.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Linestring.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Linestring.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Linestring.VersionUpdated], 
            True AS _from0
        FROM NKDC.Linestrings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProjectOffer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView311()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProjectOffer
        [NKD.Module.BusinessObjects.Store.E_ProjectOffer](T1.[E_ProjectOffer.ProjectOfferID], T1.[E_ProjectOffer.ProjectID], T1.[E_ProjectOffer.OfferDescription], T1.[E_ProjectOffer.OfferContactID], T1.[E_ProjectOffer.Offered], T1.[E_ProjectOffer.OriginalAmount], T1.[E_ProjectOffer.Amount], T1.[E_ProjectOffer.AmountPaid], T1.[E_ProjectOffer.Expires], T1.[E_ProjectOffer.Expired], T1.[E_ProjectOffer.Realises], T1.[E_ProjectOffer.Realised], T1.[E_ProjectOffer.Approved], T1.[E_ProjectOffer.ApprovedBy], T1.[E_ProjectOffer.Version], T1.[E_ProjectOffer.VersionAntecedentID], T1.[E_ProjectOffer.VersionCertainty], T1.[E_ProjectOffer.VersionWorkflowInstanceID], T1.[E_ProjectOffer.VersionUpdatedBy], T1.[E_ProjectOffer.VersionDeletedBy], T1.[E_ProjectOffer.VersionOwnerContactID], T1.[E_ProjectOffer.VersionOwnerCompanyID], T1.[E_ProjectOffer.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectOfferID AS [E_ProjectOffer.ProjectOfferID], 
            T.ProjectID AS [E_ProjectOffer.ProjectID], 
            T.OfferDescription AS [E_ProjectOffer.OfferDescription], 
            T.OfferContactID AS [E_ProjectOffer.OfferContactID], 
            T.Offered AS [E_ProjectOffer.Offered], 
            T.OriginalAmount AS [E_ProjectOffer.OriginalAmount], 
            T.Amount AS [E_ProjectOffer.Amount], 
            T.AmountPaid AS [E_ProjectOffer.AmountPaid], 
            T.Expires AS [E_ProjectOffer.Expires], 
            T.Expired AS [E_ProjectOffer.Expired], 
            T.Realises AS [E_ProjectOffer.Realises], 
            T.Realised AS [E_ProjectOffer.Realised], 
            T.Approved AS [E_ProjectOffer.Approved], 
            T.ApprovedBy AS [E_ProjectOffer.ApprovedBy], 
            T.Version AS [E_ProjectOffer.Version], 
            T.VersionAntecedentID AS [E_ProjectOffer.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProjectOffer.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProjectOffer.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProjectOffer.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProjectOffer.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProjectOffer.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProjectOffer.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProjectOffer.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectOffers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProjectPledge.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView312()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProjectPledge
        [NKD.Module.BusinessObjects.Store.E_ProjectPledge](T1.[E_ProjectPledge.ProjectPledgeID], T1.[E_ProjectPledge.ProjectID], T1.[E_ProjectPledge.ParentProjectPledgeID], T1.[E_ProjectPledge.PledgeContactID], T1.[E_ProjectPledge.Pledged], T1.[E_ProjectPledge.OriginalAmount], T1.[E_ProjectPledge.CurrencyID], T1.[E_ProjectPledge.DepositAmount], T1.[E_ProjectPledge.DepositPaid], T1.[E_ProjectPledge.AcceptedProjectOfferID], T1.[E_ProjectPledge.AcceptedProjectOffer], T1.[E_ProjectPledge.QuorumOverseenBy], T1.[E_ProjectPledge.QuorumNegotiated], T1.[E_ProjectPledge.Amount], T1.[E_ProjectPledge.AmountPaid], T1.[E_ProjectPledge.Expires], T1.[E_ProjectPledge.Expired], T1.[E_ProjectPledge.Realises], T1.[E_ProjectPledge.Realised], T1.[E_ProjectPledge.Approved], T1.[E_ProjectPledge.ApprovedBy], T1.[E_ProjectPledge.Version], T1.[E_ProjectPledge.VersionAntecedentID], T1.[E_ProjectPledge.VersionCertainty], T1.[E_ProjectPledge.VersionWorkflowInstanceID], T1.[E_ProjectPledge.VersionUpdatedBy], T1.[E_ProjectPledge.VersionDeletedBy], T1.[E_ProjectPledge.VersionOwnerContactID], T1.[E_ProjectPledge.VersionOwnerCompanyID], T1.[E_ProjectPledge.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPledgeID AS [E_ProjectPledge.ProjectPledgeID], 
            T.ProjectID AS [E_ProjectPledge.ProjectID], 
            T.ParentProjectPledgeID AS [E_ProjectPledge.ParentProjectPledgeID], 
            T.PledgeContactID AS [E_ProjectPledge.PledgeContactID], 
            T.Pledged AS [E_ProjectPledge.Pledged], 
            T.OriginalAmount AS [E_ProjectPledge.OriginalAmount], 
            T.CurrencyID AS [E_ProjectPledge.CurrencyID], 
            T.DepositAmount AS [E_ProjectPledge.DepositAmount], 
            T.DepositPaid AS [E_ProjectPledge.DepositPaid], 
            T.AcceptedProjectOfferID AS [E_ProjectPledge.AcceptedProjectOfferID], 
            T.AcceptedProjectOffer AS [E_ProjectPledge.AcceptedProjectOffer], 
            T.QuorumOverseenBy AS [E_ProjectPledge.QuorumOverseenBy], 
            T.QuorumNegotiated AS [E_ProjectPledge.QuorumNegotiated], 
            T.Amount AS [E_ProjectPledge.Amount], 
            T.AmountPaid AS [E_ProjectPledge.AmountPaid], 
            T.Expires AS [E_ProjectPledge.Expires], 
            T.Expired AS [E_ProjectPledge.Expired], 
            T.Realises AS [E_ProjectPledge.Realises], 
            T.Realised AS [E_ProjectPledge.Realised], 
            T.Approved AS [E_ProjectPledge.Approved], 
            T.ApprovedBy AS [E_ProjectPledge.ApprovedBy], 
            T.Version AS [E_ProjectPledge.Version], 
            T.VersionAntecedentID AS [E_ProjectPledge.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProjectPledge.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProjectPledge.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProjectPledge.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProjectPledge.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProjectPledge.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProjectPledge.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProjectPledge.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPledges AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProjectPledgeAddendum.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView313()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProjectPledgeAddendum
        [NKD.Module.BusinessObjects.Store.E_ProjectPledgeAddendum](T1.[E_ProjectPledgeAddendum.ProjectPledgeAddendumID], T1.[E_ProjectPledgeAddendum.ProjectPledgeID], T1.[E_ProjectPledgeAddendum.Addendum], T1.[E_ProjectPledgeAddendum.Reviewed], T1.[E_ProjectPledgeAddendum.ReviewedBy], T1.[E_ProjectPledgeAddendum.Approved], T1.[E_ProjectPledgeAddendum.ApprovedBy], T1.[E_ProjectPledgeAddendum.Version], T1.[E_ProjectPledgeAddendum.VersionAntecedentID], T1.[E_ProjectPledgeAddendum.VersionCertainty], T1.[E_ProjectPledgeAddendum.VersionWorkflowInstanceID], T1.[E_ProjectPledgeAddendum.VersionUpdatedBy], T1.[E_ProjectPledgeAddendum.VersionDeletedBy], T1.[E_ProjectPledgeAddendum.VersionOwnerContactID], T1.[E_ProjectPledgeAddendum.VersionOwnerCompanyID], T1.[E_ProjectPledgeAddendum.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPledgeAddendumID AS [E_ProjectPledgeAddendum.ProjectPledgeAddendumID], 
            T.ProjectPledgeID AS [E_ProjectPledgeAddendum.ProjectPledgeID], 
            T.Addendum AS [E_ProjectPledgeAddendum.Addendum], 
            T.Reviewed AS [E_ProjectPledgeAddendum.Reviewed], 
            T.ReviewedBy AS [E_ProjectPledgeAddendum.ReviewedBy], 
            T.Approved AS [E_ProjectPledgeAddendum.Approved], 
            T.ApprovedBy AS [E_ProjectPledgeAddendum.ApprovedBy], 
            T.Version AS [E_ProjectPledgeAddendum.Version], 
            T.VersionAntecedentID AS [E_ProjectPledgeAddendum.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProjectPledgeAddendum.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProjectPledgeAddendum.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProjectPledgeAddendum.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProjectPledgeAddendum.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProjectPledgeAddendum.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProjectPledgeAddendum.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProjectPledgeAddendum.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPledgeAddendums AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DataData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView314()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DataData
        [NKD.Module.BusinessObjects.Store.E_DataData](T1.[E_DataData.DataDataID], T1.[E_DataData.ParentTableType], T1.[E_DataData.ParentReferenceID], T1.[E_DataData.ChildTableType], T1.[E_DataData.ChildReferenceID], T1.[E_DataData.IsCircular], T1.[E_DataData.CreatedBy], T1.[E_DataData.Created], T1.[E_DataData.Version], T1.[E_DataData.VersionAntecedentID], T1.[E_DataData.VersionCertainty], T1.[E_DataData.VersionWorkflowInstanceID], T1.[E_DataData.VersionUpdatedBy], T1.[E_DataData.VersionDeletedBy], T1.[E_DataData.VersionOwnerContactID], T1.[E_DataData.VersionOwnerCompanyID], T1.[E_DataData.VersionUpdated])
    FROM (
        SELECT 
            T.DataDataID AS [E_DataData.DataDataID], 
            T.ParentTableType AS [E_DataData.ParentTableType], 
            T.ParentReferenceID AS [E_DataData.ParentReferenceID], 
            T.ChildTableType AS [E_DataData.ChildTableType], 
            T.ChildReferenceID AS [E_DataData.ChildReferenceID], 
            T.IsCircular AS [E_DataData.IsCircular], 
            T.CreatedBy AS [E_DataData.CreatedBy], 
            T.Created AS [E_DataData.Created], 
            T.Version AS [E_DataData.Version], 
            T.VersionAntecedentID AS [E_DataData.VersionAntecedentID], 
            T.VersionCertainty AS [E_DataData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DataData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DataData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DataData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DataData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DataData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DataData.VersionUpdated], 
            True AS _from0
        FROM NKDC.DataDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataFileData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView315()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphDataFileData
        [NKD.Module.BusinessObjects.Store.E_GraphDataFileData](T1.[E_GraphDataFileData.GraphDataFileDataID], T1.[E_GraphDataFileData.GraphDataID], T1.[E_GraphDataFileData.FileDataID], T1.[E_GraphDataFileData.Version], T1.[E_GraphDataFileData.VersionAntecedentID], T1.[E_GraphDataFileData.VersionCertainty], T1.[E_GraphDataFileData.VersionWorkflowInstanceID], T1.[E_GraphDataFileData.VersionUpdatedBy], T1.[E_GraphDataFileData.VersionDeletedBy], T1.[E_GraphDataFileData.VersionOwnerContactID], T1.[E_GraphDataFileData.VersionOwnerCompanyID], T1.[E_GraphDataFileData.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataFileDataID AS [E_GraphDataFileData.GraphDataFileDataID], 
            T.GraphDataID AS [E_GraphDataFileData.GraphDataID], 
            T.FileDataID AS [E_GraphDataFileData.FileDataID], 
            T.Version AS [E_GraphDataFileData.Version], 
            T.VersionAntecedentID AS [E_GraphDataFileData.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphDataFileData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphDataFileData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphDataFileData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphDataFileData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphDataFileData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphDataFileData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphDataFileData.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphDataFileDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataLocation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView316()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphDataLocation
        [NKD.Module.BusinessObjects.Store.E_GraphDataLocation](T1.[E_GraphDataLocation.GraphDataLocationID], T1.[E_GraphDataLocation.GraphDataID], T1.[E_GraphDataLocation.LocationID], T1.[E_GraphDataLocation.Version], T1.[E_GraphDataLocation.VersionAntecedentID], T1.[E_GraphDataLocation.VersionCertainty], T1.[E_GraphDataLocation.VersionWorkflowInstanceID], T1.[E_GraphDataLocation.VersionUpdatedBy], T1.[E_GraphDataLocation.VersionDeletedBy], T1.[E_GraphDataLocation.VersionOwnerContactID], T1.[E_GraphDataLocation.VersionOwnerCompanyID], T1.[E_GraphDataLocation.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataLocationID AS [E_GraphDataLocation.GraphDataLocationID], 
            T.GraphDataID AS [E_GraphDataLocation.GraphDataID], 
            T.LocationID AS [E_GraphDataLocation.LocationID], 
            T.Version AS [E_GraphDataLocation.Version], 
            T.VersionAntecedentID AS [E_GraphDataLocation.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphDataLocation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphDataLocation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphDataLocation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphDataLocation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphDataLocation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphDataLocation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphDataLocation.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphDataLocations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataGroup.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView317()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphDataGroup
        [NKD.Module.BusinessObjects.Store.E_GraphDataGroup](T1.[E_GraphDataGroup.GraphDataGroupID], T1.[E_GraphDataGroup.GraphDataGroupName], T1.[E_GraphDataGroup.StartGraphDataID], T1.[E_GraphDataGroup.StandardGraphDataGroupName], T1.[E_GraphDataGroup.CurrencyID], T1.[E_GraphDataGroup.PricePerUnit], T1.[E_GraphDataGroup.PriceUnitID], T1.[E_GraphDataGroup.Comment], T1.[E_GraphDataGroup.CreatedBy], T1.[E_GraphDataGroup.Created], T1.[E_GraphDataGroup.Description], T1.[E_GraphDataGroup.Thumbnail], T1.[E_GraphDataGroup.OriginalFileDataID], T1.[E_GraphDataGroup.Version], T1.[E_GraphDataGroup.VersionAntecedentID], T1.[E_GraphDataGroup.VersionCertainty], T1.[E_GraphDataGroup.VersionWorkflowInstanceID], T1.[E_GraphDataGroup.VersionUpdatedBy], T1.[E_GraphDataGroup.VersionDeletedBy], T1.[E_GraphDataGroup.VersionOwnerContactID], T1.[E_GraphDataGroup.VersionOwnerCompanyID], T1.[E_GraphDataGroup.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataGroupID AS [E_GraphDataGroup.GraphDataGroupID], 
            T.GraphDataGroupName AS [E_GraphDataGroup.GraphDataGroupName], 
            T.StartGraphDataID AS [E_GraphDataGroup.StartGraphDataID], 
            T.StandardGraphDataGroupName AS [E_GraphDataGroup.StandardGraphDataGroupName], 
            T.CurrencyID AS [E_GraphDataGroup.CurrencyID], 
            T.PricePerUnit AS [E_GraphDataGroup.PricePerUnit], 
            T.PriceUnitID AS [E_GraphDataGroup.PriceUnitID], 
            T.Comment AS [E_GraphDataGroup.Comment], 
            T.CreatedBy AS [E_GraphDataGroup.CreatedBy], 
            T.Created AS [E_GraphDataGroup.Created], 
            T.Description AS [E_GraphDataGroup.Description], 
            T.Thumbnail AS [E_GraphDataGroup.Thumbnail], 
            T.OriginalFileDataID AS [E_GraphDataGroup.OriginalFileDataID], 
            T.Version AS [E_GraphDataGroup.Version], 
            T.VersionAntecedentID AS [E_GraphDataGroup.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphDataGroup.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphDataGroup.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphDataGroup.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphDataGroup.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphDataGroup.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphDataGroup.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphDataGroup.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphDataGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlterationJointType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView318()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryAlterationJointType
        [NKD.Module.BusinessObjects.Store.X_DictionaryAlterationJointType](T1.[X_DictionaryAlterationJointType.AlterationJointTypeID], T1.[X_DictionaryAlterationJointType.StandardAlterationJointTypeName], T1.[X_DictionaryAlterationJointType.CoalAlterationJointTypeName], T1.[X_DictionaryAlterationJointType.GoldAlterationJointTypeName], T1.[X_DictionaryAlterationJointType.CustomAlterationJointTypeName], T1.[X_DictionaryAlterationJointType.Description], T1.[X_DictionaryAlterationJointType.FullDescription], T1.[X_DictionaryAlterationJointType.Thumbnail], T1.[X_DictionaryAlterationJointType.OriginalFileDataID], T1.[X_DictionaryAlterationJointType.Version], T1.[X_DictionaryAlterationJointType.VersionAntecedentID], T1.[X_DictionaryAlterationJointType.VersionCertainty], T1.[X_DictionaryAlterationJointType.VersionWorkflowInstanceID], T1.[X_DictionaryAlterationJointType.VersionUpdatedBy], T1.[X_DictionaryAlterationJointType.VersionDeletedBy], T1.[X_DictionaryAlterationJointType.VersionOwnerContactID], T1.[X_DictionaryAlterationJointType.VersionOwnerCompanyID], T1.[X_DictionaryAlterationJointType.VersionUpdated])
    FROM (
        SELECT 
            T.AlterationJointTypeID AS [X_DictionaryAlterationJointType.AlterationJointTypeID], 
            T.StandardAlterationJointTypeName AS [X_DictionaryAlterationJointType.StandardAlterationJointTypeName], 
            T.CoalAlterationJointTypeName AS [X_DictionaryAlterationJointType.CoalAlterationJointTypeName], 
            T.GoldAlterationJointTypeName AS [X_DictionaryAlterationJointType.GoldAlterationJointTypeName], 
            T.CustomAlterationJointTypeName AS [X_DictionaryAlterationJointType.CustomAlterationJointTypeName], 
            T.Description AS [X_DictionaryAlterationJointType.Description], 
            T.FullDescription AS [X_DictionaryAlterationJointType.FullDescription], 
            T.Thumbnail AS [X_DictionaryAlterationJointType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryAlterationJointType.OriginalFileDataID], 
            T.Version AS [X_DictionaryAlterationJointType.Version], 
            T.VersionAntecedentID AS [X_DictionaryAlterationJointType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryAlterationJointType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryAlterationJointType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryAlterationJointType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryAlterationJointType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryAlterationJointType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryAlterationJointType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryAlterationJointType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryAlterationJointTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedDevelopment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView319()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryBedDevelopment
        [NKD.Module.BusinessObjects.Store.X_DictionaryBedDevelopment](T1.[X_DictionaryBedDevelopment.BedDevelopmentID], T1.[X_DictionaryBedDevelopment.StandardBedDevelopmentName], T1.[X_DictionaryBedDevelopment.CoalBedDevelopmentName], T1.[X_DictionaryBedDevelopment.GoldBedDevelopmentName], T1.[X_DictionaryBedDevelopment.CustomBedDevelopmentName], T1.[X_DictionaryBedDevelopment.Description], T1.[X_DictionaryBedDevelopment.FullDescription], T1.[X_DictionaryBedDevelopment.Thumbnail], T1.[X_DictionaryBedDevelopment.OriginalFileDataID], T1.[X_DictionaryBedDevelopment.Version], T1.[X_DictionaryBedDevelopment.VersionAntecedentID], T1.[X_DictionaryBedDevelopment.VersionCertainty], T1.[X_DictionaryBedDevelopment.VersionWorkflowInstanceID], T1.[X_DictionaryBedDevelopment.VersionUpdatedBy], T1.[X_DictionaryBedDevelopment.VersionDeletedBy], T1.[X_DictionaryBedDevelopment.VersionOwnerContactID], T1.[X_DictionaryBedDevelopment.VersionOwnerCompanyID], T1.[X_DictionaryBedDevelopment.VersionUpdated])
    FROM (
        SELECT 
            T.BedDevelopmentID AS [X_DictionaryBedDevelopment.BedDevelopmentID], 
            T.StandardBedDevelopmentName AS [X_DictionaryBedDevelopment.StandardBedDevelopmentName], 
            T.CoalBedDevelopmentName AS [X_DictionaryBedDevelopment.CoalBedDevelopmentName], 
            T.GoldBedDevelopmentName AS [X_DictionaryBedDevelopment.GoldBedDevelopmentName], 
            T.CustomBedDevelopmentName AS [X_DictionaryBedDevelopment.CustomBedDevelopmentName], 
            T.Description AS [X_DictionaryBedDevelopment.Description], 
            T.FullDescription AS [X_DictionaryBedDevelopment.FullDescription], 
            T.Thumbnail AS [X_DictionaryBedDevelopment.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryBedDevelopment.OriginalFileDataID], 
            T.Version AS [X_DictionaryBedDevelopment.Version], 
            T.VersionAntecedentID AS [X_DictionaryBedDevelopment.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryBedDevelopment.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryBedDevelopment.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryBedDevelopment.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryBedDevelopment.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryBedDevelopment.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryBedDevelopment.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryBedDevelopment.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryBedDevelopments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFriabilityType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView320()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryFriabilityType
        [NKD.Module.BusinessObjects.Store.X_DictionaryFriabilityType](T1.[X_DictionaryFriabilityType.FriabilityTypeID], T1.[X_DictionaryFriabilityType.StandardFriabilityTypeName], T1.[X_DictionaryFriabilityType.CoalFriabilityTypeName], T1.[X_DictionaryFriabilityType.GoldFriabilityTypeName], T1.[X_DictionaryFriabilityType.CustomFriabilityTypeName], T1.[X_DictionaryFriabilityType.Description], T1.[X_DictionaryFriabilityType.FullDescription], T1.[X_DictionaryFriabilityType.Thumbnail], T1.[X_DictionaryFriabilityType.OriginalFileDataID], T1.[X_DictionaryFriabilityType.Version], T1.[X_DictionaryFriabilityType.VersionAntecedentID], T1.[X_DictionaryFriabilityType.VersionCertainty], T1.[X_DictionaryFriabilityType.VersionWorkflowInstanceID], T1.[X_DictionaryFriabilityType.VersionUpdatedBy], T1.[X_DictionaryFriabilityType.VersionDeletedBy], T1.[X_DictionaryFriabilityType.VersionOwnerContactID], T1.[X_DictionaryFriabilityType.VersionOwnerCompanyID], T1.[X_DictionaryFriabilityType.VersionUpdated])
    FROM (
        SELECT 
            T.FriabilityTypeID AS [X_DictionaryFriabilityType.FriabilityTypeID], 
            T.StandardFriabilityTypeName AS [X_DictionaryFriabilityType.StandardFriabilityTypeName], 
            T.CoalFriabilityTypeName AS [X_DictionaryFriabilityType.CoalFriabilityTypeName], 
            T.GoldFriabilityTypeName AS [X_DictionaryFriabilityType.GoldFriabilityTypeName], 
            T.CustomFriabilityTypeName AS [X_DictionaryFriabilityType.CustomFriabilityTypeName], 
            T.Description AS [X_DictionaryFriabilityType.Description], 
            T.FullDescription AS [X_DictionaryFriabilityType.FullDescription], 
            T.Thumbnail AS [X_DictionaryFriabilityType.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryFriabilityType.OriginalFileDataID], 
            T.Version AS [X_DictionaryFriabilityType.Version], 
            T.VersionAntecedentID AS [X_DictionaryFriabilityType.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryFriabilityType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryFriabilityType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryFriabilityType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryFriabilityType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryFriabilityType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryFriabilityType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryFriabilityType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryFriabilityTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryStructureSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView321()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_DictionaryStructureSet
        [NKD.Module.BusinessObjects.Store.X_DictionaryStructureSet](T1.[X_DictionaryStructureSet.StructureSetID], T1.[X_DictionaryStructureSet.StandardStructureSetName], T1.[X_DictionaryStructureSet.CoalStructureSetName], T1.[X_DictionaryStructureSet.GoldStructureSetName], T1.[X_DictionaryStructureSet.CustomStructureSetName], T1.[X_DictionaryStructureSet.Description], T1.[X_DictionaryStructureSet.FullDescription], T1.[X_DictionaryStructureSet.Thumbnail], T1.[X_DictionaryStructureSet.OriginalFileDataID], T1.[X_DictionaryStructureSet.Version], T1.[X_DictionaryStructureSet.VersionAntecedentID], T1.[X_DictionaryStructureSet.VersionCertainty], T1.[X_DictionaryStructureSet.VersionWorkflowInstanceID], T1.[X_DictionaryStructureSet.VersionUpdatedBy], T1.[X_DictionaryStructureSet.VersionDeletedBy], T1.[X_DictionaryStructureSet.VersionOwnerContactID], T1.[X_DictionaryStructureSet.VersionOwnerCompanyID], T1.[X_DictionaryStructureSet.VersionUpdated])
    FROM (
        SELECT 
            T.StructureSetID AS [X_DictionaryStructureSet.StructureSetID], 
            T.StandardStructureSetName AS [X_DictionaryStructureSet.StandardStructureSetName], 
            T.CoalStructureSetName AS [X_DictionaryStructureSet.CoalStructureSetName], 
            T.GoldStructureSetName AS [X_DictionaryStructureSet.GoldStructureSetName], 
            T.CustomStructureSetName AS [X_DictionaryStructureSet.CustomStructureSetName], 
            T.Description AS [X_DictionaryStructureSet.Description], 
            T.FullDescription AS [X_DictionaryStructureSet.FullDescription], 
            T.Thumbnail AS [X_DictionaryStructureSet.Thumbnail], 
            T.OriginalFileDataID AS [X_DictionaryStructureSet.OriginalFileDataID], 
            T.Version AS [X_DictionaryStructureSet.Version], 
            T.VersionAntecedentID AS [X_DictionaryStructureSet.VersionAntecedentID], 
            T.VersionCertainty AS [X_DictionaryStructureSet.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_DictionaryStructureSet.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_DictionaryStructureSet.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_DictionaryStructureSet.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_DictionaryStructureSet.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_DictionaryStructureSet.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_DictionaryStructureSet.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryStructureSets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Form.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView322()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Form
        [NKD.Module.BusinessObjects.Store.E_Form](T1.[E_Form.FormID], T1.[E_Form.FormName], T1.[E_Form.FormStructure], T1.[E_Form.FormStructureChecksum], T1.[E_Form.FormActions], T1.[E_Form.FormType], T1.[E_Form.TemplateMulti], T1.[E_Form.TemplateSingle], T1.[E_Form.Version], T1.[E_Form.VersionAntecedentID], T1.[E_Form.VersionCertainty], T1.[E_Form.VersionWorkflowInstanceID], T1.[E_Form.VersionUpdatedBy], T1.[E_Form.VersionDeletedBy], T1.[E_Form.VersionOwnerContactID], T1.[E_Form.VersionOwnerCompanyID], T1.[E_Form.VersionUpdated])
    FROM (
        SELECT 
            T.FormID AS [E_Form.FormID], 
            T.FormName AS [E_Form.FormName], 
            T.FormStructure AS [E_Form.FormStructure], 
            T.FormStructureChecksum AS [E_Form.FormStructureChecksum], 
            T.FormActions AS [E_Form.FormActions], 
            T.FormType AS [E_Form.FormType], 
            T.TemplateMulti AS [E_Form.TemplateMulti], 
            T.TemplateSingle AS [E_Form.TemplateSingle], 
            T.Version AS [E_Form.Version], 
            T.VersionAntecedentID AS [E_Form.VersionAntecedentID], 
            T.VersionCertainty AS [E_Form.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Form.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Form.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Form.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Form.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Form.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Form.VersionUpdated], 
            True AS _from0
        FROM NKDC.Forms AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_FormData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView323()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_FormData
        [NKD.Module.BusinessObjects.Store.E_FormData](T1.[E_FormData.FormDataID], T1.[E_FormData.FormID], T1.[E_FormData.TableType], T1.[E_FormData.ReferenceID], T1.[E_FormData.FormOrigin], T1.[E_FormData.FormDestination], T1.[E_FormData.FormContent], T1.[E_FormData.Version], T1.[E_FormData.VersionAntecedentID], T1.[E_FormData.VersionCertainty], T1.[E_FormData.VersionWorkflowInstanceID], T1.[E_FormData.VersionUpdatedBy], T1.[E_FormData.VersionDeletedBy], T1.[E_FormData.VersionOwnerContactID], T1.[E_FormData.VersionOwnerCompanyID], T1.[E_FormData.VersionUpdated])
    FROM (
        SELECT 
            T.FormDataID AS [E_FormData.FormDataID], 
            T.FormID AS [E_FormData.FormID], 
            T.TableType AS [E_FormData.TableType], 
            T.ReferenceID AS [E_FormData.ReferenceID], 
            T.FormOrigin AS [E_FormData.FormOrigin], 
            T.FormDestination AS [E_FormData.FormDestination], 
            T.FormContent AS [E_FormData.FormContent], 
            T.Version AS [E_FormData.Version], 
            T.VersionAntecedentID AS [E_FormData.VersionAntecedentID], 
            T.VersionCertainty AS [E_FormData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_FormData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_FormData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_FormData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_FormData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_FormData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_FormData.VersionUpdated], 
            True AS _from0
        FROM NKDC.FormDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView324()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphDataHistory
        [NKD.Module.BusinessObjects.Store.E_GraphDataHistory](T1.[E_GraphDataHistory.GraphDataHistoryID], T1.[E_GraphDataHistory.Session], T1.[E_GraphDataHistory.GraphDataID], T1.[E_GraphDataHistory.Opened], T1.[E_GraphDataHistory.ContactID], T1.[E_GraphDataHistory.Version], T1.[E_GraphDataHistory.VersionAntecedentID], T1.[E_GraphDataHistory.VersionCertainty], T1.[E_GraphDataHistory.VersionWorkflowInstanceID], T1.[E_GraphDataHistory.VersionUpdatedBy], T1.[E_GraphDataHistory.VersionDeletedBy], T1.[E_GraphDataHistory.VersionOwnerContactID], T1.[E_GraphDataHistory.VersionOwnerCompanyID], T1.[E_GraphDataHistory.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataHistoryID AS [E_GraphDataHistory.GraphDataHistoryID], 
            T.Session AS [E_GraphDataHistory.Session], 
            T.GraphDataID AS [E_GraphDataHistory.GraphDataID], 
            T.Opened AS [E_GraphDataHistory.Opened], 
            T.ContactID AS [E_GraphDataHistory.ContactID], 
            T.Version AS [E_GraphDataHistory.Version], 
            T.VersionAntecedentID AS [E_GraphDataHistory.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphDataHistory.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphDataHistory.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphDataHistory.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphDataHistory.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphDataHistory.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphDataHistory.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphDataHistory.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphDataHistories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Condition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView325()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Condition
        [NKD.Module.BusinessObjects.Store.E_Condition](T1.[E_Condition.ConditionID], T1.[E_Condition.OverrideProjectDataWithJsonCustomVars], T1.[E_Condition.JSON], T1.[E_Condition.Condition], T1.[E_Condition.Version], T1.[E_Condition.VersionAntecedentID], T1.[E_Condition.VersionCertainty], T1.[E_Condition.VersionWorkflowInstanceID], T1.[E_Condition.VersionUpdatedBy], T1.[E_Condition.VersionDeletedBy], T1.[E_Condition.VersionOwnerContactID], T1.[E_Condition.VersionOwnerCompanyID], T1.[E_Condition.VersionUpdated])
    FROM (
        SELECT 
            T.ConditionID AS [E_Condition.ConditionID], 
            T.OverrideProjectDataWithJsonCustomVars AS [E_Condition.OverrideProjectDataWithJsonCustomVars], 
            T.JSON AS [E_Condition.JSON], 
            T.Condition AS [E_Condition.Condition], 
            T.Version AS [E_Condition.Version], 
            T.VersionAntecedentID AS [E_Condition.VersionAntecedentID], 
            T.VersionCertainty AS [E_Condition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Condition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Condition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Condition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Condition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Condition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Condition.VersionUpdated], 
            True AS _from0
        FROM NKDC.Precondition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryTriggerType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView326()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryTriggerType
        [NKD.Module.BusinessObjects.Store.E_DictionaryTriggerType](T1.[E_DictionaryTriggerType.TriggerTypeID], T1.[E_DictionaryTriggerType.StandardTriggerTypeName], T1.[E_DictionaryTriggerType.CustomTriggerTypeName], T1.[E_DictionaryTriggerType.Description], T1.[E_DictionaryTriggerType.FullDescription], T1.[E_DictionaryTriggerType.Thumbnail], T1.[E_DictionaryTriggerType.OriginalFileDataID], T1.[E_DictionaryTriggerType.Version], T1.[E_DictionaryTriggerType.VersionAntecedentID], T1.[E_DictionaryTriggerType.VersionCertainty], T1.[E_DictionaryTriggerType.VersionWorkflowInstanceID], T1.[E_DictionaryTriggerType.VersionUpdatedBy], T1.[E_DictionaryTriggerType.VersionDeletedBy], T1.[E_DictionaryTriggerType.VersionOwnerContactID], T1.[E_DictionaryTriggerType.VersionOwnerCompanyID], T1.[E_DictionaryTriggerType.VersionUpdated])
    FROM (
        SELECT 
            T.TriggerTypeID AS [E_DictionaryTriggerType.TriggerTypeID], 
            T.StandardTriggerTypeName AS [E_DictionaryTriggerType.StandardTriggerTypeName], 
            T.CustomTriggerTypeName AS [E_DictionaryTriggerType.CustomTriggerTypeName], 
            T.Description AS [E_DictionaryTriggerType.Description], 
            T.FullDescription AS [E_DictionaryTriggerType.FullDescription], 
            T.Thumbnail AS [E_DictionaryTriggerType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryTriggerType.OriginalFileDataID], 
            T.Version AS [E_DictionaryTriggerType.Version], 
            T.VersionAntecedentID AS [E_DictionaryTriggerType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryTriggerType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryTriggerType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryTriggerType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryTriggerType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryTriggerType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryTriggerType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryTriggerType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryTriggerType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelationCondition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView327()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_GraphDataRelationCondition
        [NKD.Module.BusinessObjects.Store.E_GraphDataRelationCondition](T1.[E_GraphDataRelationCondition.GraphDataRelationConditionID], T1.[E_GraphDataRelationCondition.GraphDataRelationID], T1.[E_GraphDataRelationCondition.ConditionID], T1.[E_GraphDataRelationCondition.Grouping], T1.[E_GraphDataRelationCondition.Sequence], T1.[E_GraphDataRelationCondition.JoinedBy], T1.[E_GraphDataRelationCondition.Version], T1.[E_GraphDataRelationCondition.VersionAntecedentID], T1.[E_GraphDataRelationCondition.VersionCertainty], T1.[E_GraphDataRelationCondition.VersionWorkflowInstanceID], T1.[E_GraphDataRelationCondition.VersionUpdatedBy], T1.[E_GraphDataRelationCondition.VersionDeletedBy], T1.[E_GraphDataRelationCondition.VersionOwnerContactID], T1.[E_GraphDataRelationCondition.VersionOwnerCompanyID], T1.[E_GraphDataRelationCondition.VersionUpdated])
    FROM (
        SELECT 
            T.GraphDataRelationConditionID AS [E_GraphDataRelationCondition.GraphDataRelationConditionID], 
            T.GraphDataRelationID AS [E_GraphDataRelationCondition.GraphDataRelationID], 
            T.ConditionID AS [E_GraphDataRelationCondition.ConditionID], 
            T.Grouping AS [E_GraphDataRelationCondition.Grouping], 
            T.Sequence AS [E_GraphDataRelationCondition.Sequence], 
            T.JoinedBy AS [E_GraphDataRelationCondition.JoinedBy], 
            T.Version AS [E_GraphDataRelationCondition.Version], 
            T.VersionAntecedentID AS [E_GraphDataRelationCondition.VersionAntecedentID], 
            T.VersionCertainty AS [E_GraphDataRelationCondition.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_GraphDataRelationCondition.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_GraphDataRelationCondition.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_GraphDataRelationCondition.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_GraphDataRelationCondition.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_GraphDataRelationCondition.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_GraphDataRelationCondition.VersionUpdated], 
            True AS _from0
        FROM NKDC.GraphDataRelationConditions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProjectData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView328()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProjectData
        [NKD.Module.BusinessObjects.Store.E_ProjectData](T1.[E_ProjectData.ProjectDataID], T1.[E_ProjectData.ProjectDataTemplateID], T1.[E_ProjectData.ProjectID], T1.[E_ProjectData.ProjectPlanTaskResponseID], T1.[E_ProjectData.Value], T1.[E_ProjectData.NumericValue], T1.[E_ProjectData.TextValue], T1.[E_ProjectData.Version], T1.[E_ProjectData.VersionAntecedentID], T1.[E_ProjectData.VersionCertainty], T1.[E_ProjectData.VersionWorkflowInstanceID], T1.[E_ProjectData.VersionUpdatedBy], T1.[E_ProjectData.VersionDeletedBy], T1.[E_ProjectData.VersionOwnerContactID], T1.[E_ProjectData.VersionOwnerCompanyID], T1.[E_ProjectData.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectDataID AS [E_ProjectData.ProjectDataID], 
            T.ProjectDataTemplateID AS [E_ProjectData.ProjectDataTemplateID], 
            T.ProjectID AS [E_ProjectData.ProjectID], 
            T.ProjectPlanTaskResponseID AS [E_ProjectData.ProjectPlanTaskResponseID], 
            T.[Value] AS [E_ProjectData.Value], 
            T.NumericValue AS [E_ProjectData.NumericValue], 
            T.TextValue AS [E_ProjectData.TextValue], 
            T.Version AS [E_ProjectData.Version], 
            T.VersionAntecedentID AS [E_ProjectData.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProjectData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProjectData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProjectData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProjectData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProjectData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProjectData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProjectData.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProjectDataTemplate.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView329()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProjectDataTemplate
        [NKD.Module.BusinessObjects.Store.E_ProjectDataTemplate](T1.[E_ProjectDataTemplate.ProjectDataTemplateID], T1.[E_ProjectDataTemplate.CommonName], T1.[E_ProjectDataTemplate.UniqueID], T1.[E_ProjectDataTemplate.UniqueIDSystemDataType], T1.[E_ProjectDataTemplate.TemplateStructure], T1.[E_ProjectDataTemplate.TemplateStructureChecksum], T1.[E_ProjectDataTemplate.TemplateActions], T1.[E_ProjectDataTemplate.TemplateType], T1.[E_ProjectDataTemplate.TemplateMulti], T1.[E_ProjectDataTemplate.TemplateSingle], T1.[E_ProjectDataTemplate.FormID], T1.[E_ProjectDataTemplate.TableType], T1.[E_ProjectDataTemplate.ReferenceID], T1.[E_ProjectDataTemplate.UserDataType], T1.[E_ProjectDataTemplate.SystemDataType], T1.[E_ProjectDataTemplate.IsReadOnly], T1.[E_ProjectDataTemplate.IsVisible], T1.[E_ProjectDataTemplate.Version], T1.[E_ProjectDataTemplate.VersionAntecedentID], T1.[E_ProjectDataTemplate.VersionCertainty], T1.[E_ProjectDataTemplate.VersionWorkflowInstanceID], T1.[E_ProjectDataTemplate.VersionUpdatedBy], T1.[E_ProjectDataTemplate.VersionDeletedBy], T1.[E_ProjectDataTemplate.VersionOwnerContactID], T1.[E_ProjectDataTemplate.VersionOwnerCompanyID], T1.[E_ProjectDataTemplate.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectDataTemplateID AS [E_ProjectDataTemplate.ProjectDataTemplateID], 
            T.CommonName AS [E_ProjectDataTemplate.CommonName], 
            T.UniqueID AS [E_ProjectDataTemplate.UniqueID], 
            T.UniqueIDSystemDataType AS [E_ProjectDataTemplate.UniqueIDSystemDataType], 
            T.TemplateStructure AS [E_ProjectDataTemplate.TemplateStructure], 
            T.TemplateStructureChecksum AS [E_ProjectDataTemplate.TemplateStructureChecksum], 
            T.TemplateActions AS [E_ProjectDataTemplate.TemplateActions], 
            T.TemplateType AS [E_ProjectDataTemplate.TemplateType], 
            T.TemplateMulti AS [E_ProjectDataTemplate.TemplateMulti], 
            T.TemplateSingle AS [E_ProjectDataTemplate.TemplateSingle], 
            T.FormID AS [E_ProjectDataTemplate.FormID], 
            T.TableType AS [E_ProjectDataTemplate.TableType], 
            T.ReferenceID AS [E_ProjectDataTemplate.ReferenceID], 
            T.UserDataType AS [E_ProjectDataTemplate.UserDataType], 
            T.SystemDataType AS [E_ProjectDataTemplate.SystemDataType], 
            T.IsReadOnly AS [E_ProjectDataTemplate.IsReadOnly], 
            T.IsVisible AS [E_ProjectDataTemplate.IsVisible], 
            T.Version AS [E_ProjectDataTemplate.Version], 
            T.VersionAntecedentID AS [E_ProjectDataTemplate.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProjectDataTemplate.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProjectDataTemplate.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProjectDataTemplate.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProjectDataTemplate.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProjectDataTemplate.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProjectDataTemplate.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProjectDataTemplate.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectDataTemplates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_ProjectPlanTaskResponseEvent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView330()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_ProjectPlanTaskResponseEvent
        [NKD.Module.BusinessObjects.Store.E_ProjectPlanTaskResponseEvent](T1.[E_ProjectPlanTaskResponseEvent.ProjectPlanTaskResponseEventID], T1.[E_ProjectPlanTaskResponseEvent.ProjectPlanTaskResponseID], T1.[E_ProjectPlanTaskResponseEvent.ProjectID], T1.[E_ProjectPlanTaskResponseEvent.TaskID], T1.[E_ProjectPlanTaskResponseEvent.TriggerGraphID], T1.[E_ProjectPlanTaskResponseEvent.OriginTriggerID], T1.[E_ProjectPlanTaskResponseEvent.DestinationTriggerID], T1.[E_ProjectPlanTaskResponseEvent.JsonCustomVars], T1.[E_ProjectPlanTaskResponseEvent.RunNext], T1.[E_ProjectPlanTaskResponseEvent.RunsLeft], T1.[E_ProjectPlanTaskResponseEvent.Executed], T1.[E_ProjectPlanTaskResponseEvent.Failed], T1.[E_ProjectPlanTaskResponseEvent.Reason], T1.[E_ProjectPlanTaskResponseEvent.Version], T1.[E_ProjectPlanTaskResponseEvent.VersionAntecedentID], T1.[E_ProjectPlanTaskResponseEvent.VersionCertainty], T1.[E_ProjectPlanTaskResponseEvent.VersionWorkflowInstanceID], T1.[E_ProjectPlanTaskResponseEvent.VersionUpdatedBy], T1.[E_ProjectPlanTaskResponseEvent.VersionDeletedBy], T1.[E_ProjectPlanTaskResponseEvent.VersionOwnerContactID], T1.[E_ProjectPlanTaskResponseEvent.VersionOwnerCompanyID], T1.[E_ProjectPlanTaskResponseEvent.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectPlanTaskResponseEventID AS [E_ProjectPlanTaskResponseEvent.ProjectPlanTaskResponseEventID], 
            T.ProjectPlanTaskResponseID AS [E_ProjectPlanTaskResponseEvent.ProjectPlanTaskResponseID], 
            T.ProjectID AS [E_ProjectPlanTaskResponseEvent.ProjectID], 
            T.TaskID AS [E_ProjectPlanTaskResponseEvent.TaskID], 
            T.TriggerGraphID AS [E_ProjectPlanTaskResponseEvent.TriggerGraphID], 
            T.OriginTriggerID AS [E_ProjectPlanTaskResponseEvent.OriginTriggerID], 
            T.DestinationTriggerID AS [E_ProjectPlanTaskResponseEvent.DestinationTriggerID], 
            T.JsonCustomVars AS [E_ProjectPlanTaskResponseEvent.JsonCustomVars], 
            T.RunNext AS [E_ProjectPlanTaskResponseEvent.RunNext], 
            T.RunsLeft AS [E_ProjectPlanTaskResponseEvent.RunsLeft], 
            T.Executed AS [E_ProjectPlanTaskResponseEvent.Executed], 
            T.Failed AS [E_ProjectPlanTaskResponseEvent.Failed], 
            T.Reason AS [E_ProjectPlanTaskResponseEvent.Reason], 
            T.Version AS [E_ProjectPlanTaskResponseEvent.Version], 
            T.VersionAntecedentID AS [E_ProjectPlanTaskResponseEvent.VersionAntecedentID], 
            T.VersionCertainty AS [E_ProjectPlanTaskResponseEvent.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_ProjectPlanTaskResponseEvent.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_ProjectPlanTaskResponseEvent.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_ProjectPlanTaskResponseEvent.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_ProjectPlanTaskResponseEvent.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_ProjectPlanTaskResponseEvent.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_ProjectPlanTaskResponseEvent.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectPlanTaskResponseEvents AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Trigger.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView331()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Trigger
        [NKD.Module.BusinessObjects.Store.E_Trigger](T1.[E_Trigger.TriggerID], T1.[E_Trigger.CommonName], T1.[E_Trigger.TriggerTypeID], T1.[E_Trigger.JsonMethod], T1.[E_Trigger.JsonProxyApplicationID], T1.[E_Trigger.JsonProxyContactID], T1.[E_Trigger.JsonProxyCompanyID], T1.[E_Trigger.JsonAuthorizedBy], T1.[E_Trigger.JsonUsername], T1.[E_Trigger.JsonPassword], T1.[E_Trigger.JsonPasswordType], T1.[E_Trigger.JSON], T1.[E_Trigger.SystemMethod], T1.[E_Trigger.ConditionID], T1.[E_Trigger.ExternalURL], T1.[E_Trigger.ExternalRequestMethod], T1.[E_Trigger.ExternalFormType], T1.[E_Trigger.PassThrough], T1.[E_Trigger.DelaySeconds], T1.[E_Trigger.DelayDays], T1.[E_Trigger.DelayWeeks], T1.[E_Trigger.DelayMonths], T1.[E_Trigger.DelayYears], T1.[E_Trigger.DelayUntil], T1.[E_Trigger.RepeatAfterSeconds], T1.[E_Trigger.RepeatAfterMonths], T1.[E_Trigger.RepeatWeekOfMonth], T1.[E_Trigger.RepeatDayOfWeeks], T1.[E_Trigger.Repeats], T1.[E_Trigger.Version], T1.[E_Trigger.VersionAntecedentID], T1.[E_Trigger.VersionCertainty], T1.[E_Trigger.VersionWorkflowInstanceID], T1.[E_Trigger.VersionUpdatedBy], T1.[E_Trigger.VersionDeletedBy], T1.[E_Trigger.VersionOwnerContactID], T1.[E_Trigger.VersionOwnerCompanyID], T1.[E_Trigger.VersionUpdated])
    FROM (
        SELECT 
            T.TriggerID AS [E_Trigger.TriggerID], 
            T.CommonName AS [E_Trigger.CommonName], 
            T.TriggerTypeID AS [E_Trigger.TriggerTypeID], 
            T.JsonMethod AS [E_Trigger.JsonMethod], 
            T.JsonProxyApplicationID AS [E_Trigger.JsonProxyApplicationID], 
            T.JsonProxyContactID AS [E_Trigger.JsonProxyContactID], 
            T.JsonProxyCompanyID AS [E_Trigger.JsonProxyCompanyID], 
            T.JsonAuthorizedBy AS [E_Trigger.JsonAuthorizedBy], 
            T.JsonUsername AS [E_Trigger.JsonUsername], 
            T.JsonPassword AS [E_Trigger.JsonPassword], 
            T.JsonPasswordType AS [E_Trigger.JsonPasswordType], 
            T.JSON AS [E_Trigger.JSON], 
            T.SystemMethod AS [E_Trigger.SystemMethod], 
            T.ConditionID AS [E_Trigger.ConditionID], 
            T.ExternalURL AS [E_Trigger.ExternalURL], 
            T.ExternalRequestMethod AS [E_Trigger.ExternalRequestMethod], 
            T.ExternalFormType AS [E_Trigger.ExternalFormType], 
            T.PassThrough AS [E_Trigger.PassThrough], 
            T.DelaySeconds AS [E_Trigger.DelaySeconds], 
            T.DelayDays AS [E_Trigger.DelayDays], 
            T.DelayWeeks AS [E_Trigger.DelayWeeks], 
            T.DelayMonths AS [E_Trigger.DelayMonths], 
            T.DelayYears AS [E_Trigger.DelayYears], 
            T.DelayUntil AS [E_Trigger.DelayUntil], 
            T.RepeatAfterSeconds AS [E_Trigger.RepeatAfterSeconds], 
            T.RepeatAfterMonths AS [E_Trigger.RepeatAfterMonths], 
            T.RepeatWeekOfMonth AS [E_Trigger.RepeatWeekOfMonth], 
            T.RepeatDayOfWeeks AS [E_Trigger.RepeatDayOfWeeks], 
            T.Repeats AS [E_Trigger.Repeats], 
            T.Version AS [E_Trigger.Version], 
            T.VersionAntecedentID AS [E_Trigger.VersionAntecedentID], 
            T.VersionCertainty AS [E_Trigger.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Trigger.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Trigger.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Trigger.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Trigger.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Trigger.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Trigger.VersionUpdated], 
            True AS _from0
        FROM NKDC.Triggers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryRunStateType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView332()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_DictionaryRunStateType
        [NKD.Module.BusinessObjects.Store.E_DictionaryRunStateType](T1.[E_DictionaryRunStateType.RunStateTypeID], T1.[E_DictionaryRunStateType.StandardRunStateTypeName], T1.[E_DictionaryRunStateType.CustomRunStateTypeName], T1.[E_DictionaryRunStateType.Description], T1.[E_DictionaryRunStateType.FullDescription], T1.[E_DictionaryRunStateType.Thumbnail], T1.[E_DictionaryRunStateType.OriginalFileDataID], T1.[E_DictionaryRunStateType.Version], T1.[E_DictionaryRunStateType.VersionAntecedentID], T1.[E_DictionaryRunStateType.VersionCertainty], T1.[E_DictionaryRunStateType.VersionWorkflowInstanceID], T1.[E_DictionaryRunStateType.VersionUpdatedBy], T1.[E_DictionaryRunStateType.VersionDeletedBy], T1.[E_DictionaryRunStateType.VersionOwnerContactID], T1.[E_DictionaryRunStateType.VersionOwnerCompanyID], T1.[E_DictionaryRunStateType.VersionUpdated])
    FROM (
        SELECT 
            T.RunStateTypeID AS [E_DictionaryRunStateType.RunStateTypeID], 
            T.StandardRunStateTypeName AS [E_DictionaryRunStateType.StandardRunStateTypeName], 
            T.CustomRunStateTypeName AS [E_DictionaryRunStateType.CustomRunStateTypeName], 
            T.Description AS [E_DictionaryRunStateType.Description], 
            T.FullDescription AS [E_DictionaryRunStateType.FullDescription], 
            T.Thumbnail AS [E_DictionaryRunStateType.Thumbnail], 
            T.OriginalFileDataID AS [E_DictionaryRunStateType.OriginalFileDataID], 
            T.Version AS [E_DictionaryRunStateType.Version], 
            T.VersionAntecedentID AS [E_DictionaryRunStateType.VersionAntecedentID], 
            T.VersionCertainty AS [E_DictionaryRunStateType.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_DictionaryRunStateType.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_DictionaryRunStateType.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_DictionaryRunStateType.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_DictionaryRunStateType.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_DictionaryRunStateType.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_DictionaryRunStateType.VersionUpdated], 
            True AS _from0
        FROM NKDC.DictionaryRunStateTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstance.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView333()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_WorkflowInstance
        [NKD.Module.BusinessObjects.Store.E_WorkflowInstance](T1.[E_WorkflowInstance.WorkflowInstanceID], T1.[E_WorkflowInstance.WorkflowID], T1.[E_WorkflowInstance.RunStateTypeID], T1.[E_WorkflowInstance.TableType], T1.[E_WorkflowInstance.ReferenceID], T1.[E_WorkflowInstance.ExecutionStatus], T1.[E_WorkflowInstance.ExecutionTimeoutSeconds], T1.[E_WorkflowInstance.Began], T1.[E_WorkflowInstance.CanResume], T1.[E_WorkflowInstance.Resumed], T1.[E_WorkflowInstance.ResumeTriggers], T1.[E_WorkflowInstance.ResumeAttempts], T1.[E_WorkflowInstance.Pending], T1.[E_WorkflowInstance.Idle], T1.[E_WorkflowInstance.IdleTimeoutSeconds], T1.[E_WorkflowInstance.CanCancel], T1.[E_WorkflowInstance.Cancelled], T1.[E_WorkflowInstance.Completed], T1.[E_WorkflowInstance.Version], T1.[E_WorkflowInstance.VersionAntecedentID], T1.[E_WorkflowInstance.VersionCertainty], T1.[E_WorkflowInstance.VersionWorkflowInstanceID], T1.[E_WorkflowInstance.VersionUpdatedBy], T1.[E_WorkflowInstance.VersionDeletedBy], T1.[E_WorkflowInstance.VersionOwnerContactID], T1.[E_WorkflowInstance.VersionOwnerCompanyID], T1.[E_WorkflowInstance.VersionUpdated])
    FROM (
        SELECT 
            T.WorkflowInstanceID AS [E_WorkflowInstance.WorkflowInstanceID], 
            T.WorkflowID AS [E_WorkflowInstance.WorkflowID], 
            T.RunStateTypeID AS [E_WorkflowInstance.RunStateTypeID], 
            T.TableType AS [E_WorkflowInstance.TableType], 
            T.ReferenceID AS [E_WorkflowInstance.ReferenceID], 
            T.ExecutionStatus AS [E_WorkflowInstance.ExecutionStatus], 
            T.ExecutionTimeoutSeconds AS [E_WorkflowInstance.ExecutionTimeoutSeconds], 
            T.Began AS [E_WorkflowInstance.Began], 
            T.CanResume AS [E_WorkflowInstance.CanResume], 
            T.Resumed AS [E_WorkflowInstance.Resumed], 
            T.ResumeTriggers AS [E_WorkflowInstance.ResumeTriggers], 
            T.ResumeAttempts AS [E_WorkflowInstance.ResumeAttempts], 
            T.Pending AS [E_WorkflowInstance.Pending], 
            T.Idle AS [E_WorkflowInstance.Idle], 
            T.IdleTimeoutSeconds AS [E_WorkflowInstance.IdleTimeoutSeconds], 
            T.CanCancel AS [E_WorkflowInstance.CanCancel], 
            T.Cancelled AS [E_WorkflowInstance.Cancelled], 
            T.Completed AS [E_WorkflowInstance.Completed], 
            T.Version AS [E_WorkflowInstance.Version], 
            T.VersionAntecedentID AS [E_WorkflowInstance.VersionAntecedentID], 
            T.VersionCertainty AS [E_WorkflowInstance.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_WorkflowInstance.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_WorkflowInstance.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_WorkflowInstance.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_WorkflowInstance.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_WorkflowInstance.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_WorkflowInstance.VersionUpdated], 
            True AS _from0
        FROM NKDC.WorkflowInstances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstanceData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView334()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_WorkflowInstanceData
        [NKD.Module.BusinessObjects.Store.E_WorkflowInstanceData](T1.[E_WorkflowInstanceData.WorkflowInstanceDataID], T1.[E_WorkflowInstanceData.WorkflowInstanceID], T1.[E_WorkflowInstanceData.Name], T1.[E_WorkflowInstanceData.TableType], T1.[E_WorkflowInstanceData.Value], T1.[E_WorkflowInstanceData.ValueID], T1.[E_WorkflowInstanceData.NumericValue], T1.[E_WorkflowInstanceData.SystemDataType], T1.[E_WorkflowInstanceData.Version], T1.[E_WorkflowInstanceData.VersionAntecedentID], T1.[E_WorkflowInstanceData.VersionCertainty], T1.[E_WorkflowInstanceData.VersionWorkflowInstanceID], T1.[E_WorkflowInstanceData.VersionUpdatedBy], T1.[E_WorkflowInstanceData.VersionDeletedBy], T1.[E_WorkflowInstanceData.VersionOwnerContactID], T1.[E_WorkflowInstanceData.VersionOwnerCompanyID], T1.[E_WorkflowInstanceData.VersionUpdated])
    FROM (
        SELECT 
            T.WorkflowInstanceDataID AS [E_WorkflowInstanceData.WorkflowInstanceDataID], 
            T.WorkflowInstanceID AS [E_WorkflowInstanceData.WorkflowInstanceID], 
            T.Name AS [E_WorkflowInstanceData.Name], 
            T.TableType AS [E_WorkflowInstanceData.TableType], 
            T.[Value] AS [E_WorkflowInstanceData.Value], 
            T.ValueID AS [E_WorkflowInstanceData.ValueID], 
            T.NumericValue AS [E_WorkflowInstanceData.NumericValue], 
            T.SystemDataType AS [E_WorkflowInstanceData.SystemDataType], 
            T.Version AS [E_WorkflowInstanceData.Version], 
            T.VersionAntecedentID AS [E_WorkflowInstanceData.VersionAntecedentID], 
            T.VersionCertainty AS [E_WorkflowInstanceData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_WorkflowInstanceData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_WorkflowInstanceData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_WorkflowInstanceData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_WorkflowInstanceData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_WorkflowInstanceData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_WorkflowInstanceData.VersionUpdated], 
            True AS _from0
        FROM NKDC.WorkflowInstanceDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_TriggerGraph.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView335()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_TriggerGraph
        [NKD.Module.BusinessObjects.Store.E_TriggerGraph](T1.[E_TriggerGraph.TriggerGraphID], T1.[E_TriggerGraph.TriggerID], T1.[E_TriggerGraph.GraphDataID], T1.[E_TriggerGraph.GraphDataGroupID], T1.[E_TriggerGraph.MergeProjectData], T1.[E_TriggerGraph.OnEnter], T1.[E_TriggerGraph.OnDataUpdate], T1.[E_TriggerGraph.OnExit], T1.[E_TriggerGraph.OnIdle], T1.[E_TriggerGraph.Version], T1.[E_TriggerGraph.VersionAntecedentID], T1.[E_TriggerGraph.VersionCertainty], T1.[E_TriggerGraph.VersionWorkflowInstanceID], T1.[E_TriggerGraph.VersionUpdatedBy], T1.[E_TriggerGraph.VersionDeletedBy], T1.[E_TriggerGraph.VersionOwnerContactID], T1.[E_TriggerGraph.VersionOwnerCompanyID], T1.[E_TriggerGraph.VersionUpdated])
    FROM (
        SELECT 
            T.TriggerGraphID AS [E_TriggerGraph.TriggerGraphID], 
            T.TriggerID AS [E_TriggerGraph.TriggerID], 
            T.GraphDataID AS [E_TriggerGraph.GraphDataID], 
            T.GraphDataGroupID AS [E_TriggerGraph.GraphDataGroupID], 
            T.MergeProjectData AS [E_TriggerGraph.MergeProjectData], 
            T.OnEnter AS [E_TriggerGraph.OnEnter], 
            T.OnDataUpdate AS [E_TriggerGraph.OnDataUpdate], 
            T.OnExit AS [E_TriggerGraph.OnExit], 
            T.OnIdle AS [E_TriggerGraph.OnIdle], 
            T.Version AS [E_TriggerGraph.Version], 
            T.VersionAntecedentID AS [E_TriggerGraph.VersionAntecedentID], 
            T.VersionCertainty AS [E_TriggerGraph.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_TriggerGraph.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_TriggerGraph.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_TriggerGraph.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_TriggerGraph.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_TriggerGraph.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_TriggerGraph.VersionUpdated], 
            True AS _from0
        FROM NKDC.TriggerGraphs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_SupplierDiscount.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView336()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_SupplierDiscount
        [NKD.Module.BusinessObjects.Store.E_SupplierDiscount](T1.[E_SupplierDiscount.SupplierDiscountID], T1.[E_SupplierDiscount.SupplierID], T1.[E_SupplierDiscount.ModelID], T1.[E_SupplierDiscount.PartID], T1.[E_SupplierDiscount.ConsumerContactID], T1.[E_SupplierDiscount.ConsumerCompanyID], T1.[E_SupplierDiscount.OrderQuantityMinimum], T1.[E_SupplierDiscount.DiscountPercent], T1.[E_SupplierDiscount.Version], T1.[E_SupplierDiscount.VersionAntecedentID], T1.[E_SupplierDiscount.VersionCertainty], T1.[E_SupplierDiscount.VersionWorkflowInstanceID], T1.[E_SupplierDiscount.VersionUpdatedBy], T1.[E_SupplierDiscount.VersionDeletedBy], T1.[E_SupplierDiscount.VersionOwnerContactID], T1.[E_SupplierDiscount.VersionOwnerCompanyID], T1.[E_SupplierDiscount.VersionUpdated])
    FROM (
        SELECT 
            T.SupplierDiscountID AS [E_SupplierDiscount.SupplierDiscountID], 
            T.SupplierID AS [E_SupplierDiscount.SupplierID], 
            T.ModelID AS [E_SupplierDiscount.ModelID], 
            T.PartID AS [E_SupplierDiscount.PartID], 
            T.ConsumerContactID AS [E_SupplierDiscount.ConsumerContactID], 
            T.ConsumerCompanyID AS [E_SupplierDiscount.ConsumerCompanyID], 
            T.OrderQuantityMinimum AS [E_SupplierDiscount.OrderQuantityMinimum], 
            T.DiscountPercent AS [E_SupplierDiscount.DiscountPercent], 
            T.Version AS [E_SupplierDiscount.Version], 
            T.VersionAntecedentID AS [E_SupplierDiscount.VersionAntecedentID], 
            T.VersionCertainty AS [E_SupplierDiscount.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_SupplierDiscount.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_SupplierDiscount.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_SupplierDiscount.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_SupplierDiscount.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_SupplierDiscount.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_SupplierDiscount.VersionUpdated], 
            True AS _from0
        FROM NKDC.SupplierDiscounts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_Notification.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView337()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_Notification
        [NKD.Module.BusinessObjects.Store.E_Notification](T1.[E_Notification.NotificationID], T1.[E_Notification.ContactID], T1.[E_Notification.ReminderMinutes], T1.[E_Notification.BlackoutOutOfHours], T1.[E_Notification.Timezone], T1.[E_Notification.Version], T1.[E_Notification.VersionAntecedentID], T1.[E_Notification.VersionCertainty], T1.[E_Notification.VersionWorkflowInstanceID], T1.[E_Notification.VersionUpdatedBy], T1.[E_Notification.VersionDeletedBy], T1.[E_Notification.VersionOwnerContactID], T1.[E_Notification.VersionOwnerCompanyID], T1.[E_Notification.VersionUpdated])
    FROM (
        SELECT 
            T.NotificationID AS [E_Notification.NotificationID], 
            T.ContactID AS [E_Notification.ContactID], 
            T.ReminderMinutes AS [E_Notification.ReminderMinutes], 
            T.BlackoutOutOfHours AS [E_Notification.BlackoutOutOfHours], 
            T.Timezone AS [E_Notification.Timezone], 
            T.Version AS [E_Notification.Version], 
            T.VersionAntecedentID AS [E_Notification.VersionAntecedentID], 
            T.VersionCertainty AS [E_Notification.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_Notification.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_Notification.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_Notification.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_Notification.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_Notification.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_Notification.VersionUpdated], 
            True AS _from0
        FROM NKDC.Notifications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_NotificationData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView338()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_NotificationData
        [NKD.Module.BusinessObjects.Store.E_NotificationData](T1.[E_NotificationData.NotificationDataID], T1.[E_NotificationData.NotificationID], T1.[E_NotificationData.NotificationType], T1.[E_NotificationData.TableType], T1.[E_NotificationData.ReferenceID], T1.[E_NotificationData.JSON], T1.[E_NotificationData.RetriesLeft], T1.[E_NotificationData.Sent], T1.[E_NotificationData.Version], T1.[E_NotificationData.VersionAntecedentID], T1.[E_NotificationData.VersionCertainty], T1.[E_NotificationData.VersionWorkflowInstanceID], T1.[E_NotificationData.VersionUpdatedBy], T1.[E_NotificationData.VersionDeletedBy], T1.[E_NotificationData.VersionOwnerContactID], T1.[E_NotificationData.VersionOwnerCompanyID], T1.[E_NotificationData.VersionUpdated])
    FROM (
        SELECT 
            T.NotificationDataID AS [E_NotificationData.NotificationDataID], 
            T.NotificationID AS [E_NotificationData.NotificationID], 
            T.NotificationType AS [E_NotificationData.NotificationType], 
            T.TableType AS [E_NotificationData.TableType], 
            T.ReferenceID AS [E_NotificationData.ReferenceID], 
            T.JSON AS [E_NotificationData.JSON], 
            T.RetriesLeft AS [E_NotificationData.RetriesLeft], 
            T.Sent AS [E_NotificationData.Sent], 
            T.Version AS [E_NotificationData.Version], 
            T.VersionAntecedentID AS [E_NotificationData.VersionAntecedentID], 
            T.VersionCertainty AS [E_NotificationData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_NotificationData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_NotificationData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_NotificationData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_NotificationData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_NotificationData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_NotificationData.VersionUpdated], 
            True AS _from0
        FROM NKDC.NotificationDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_NotificationDevice.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView339()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_NotificationDevice
        [NKD.Module.BusinessObjects.Store.E_NotificationDevice](T1.[E_NotificationDevice.NotificationDeviceID], T1.[E_NotificationDevice.NotificationID], T1.[E_NotificationDevice.DeviceType], T1.[E_NotificationDevice.DeviceToken], T1.[E_NotificationDevice.LastRegistered], T1.[E_NotificationDevice.Version], T1.[E_NotificationDevice.VersionAntecedentID], T1.[E_NotificationDevice.VersionCertainty], T1.[E_NotificationDevice.VersionWorkflowInstanceID], T1.[E_NotificationDevice.VersionUpdatedBy], T1.[E_NotificationDevice.VersionDeletedBy], T1.[E_NotificationDevice.VersionOwnerContactID], T1.[E_NotificationDevice.VersionOwnerCompanyID], T1.[E_NotificationDevice.VersionUpdated])
    FROM (
        SELECT 
            T.NotificationDeviceID AS [E_NotificationDevice.NotificationDeviceID], 
            T.NotificationID AS [E_NotificationDevice.NotificationID], 
            T.DeviceType AS [E_NotificationDevice.DeviceType], 
            T.DeviceToken AS [E_NotificationDevice.DeviceToken], 
            T.LastRegistered AS [E_NotificationDevice.LastRegistered], 
            T.Version AS [E_NotificationDevice.Version], 
            T.VersionAntecedentID AS [E_NotificationDevice.VersionAntecedentID], 
            T.VersionCertainty AS [E_NotificationDevice.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_NotificationDevice.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_NotificationDevice.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_NotificationDevice.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_NotificationDevice.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_NotificationDevice.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_NotificationDevice.VersionUpdated], 
            True AS _from0
        FROM NKDC.NotificationDevices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_UsersInRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView340()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_UsersInRoles
        [NKD.Module.BusinessObjects.Store.aspnet_UsersInRoles](T1.[aspnet_UsersInRoles.UserId], T1.[aspnet_UsersInRoles.RoleId])
    FROM (
        SELECT 
            Key(T.aspnet_Users).UserId AS [aspnet_UsersInRoles.UserId], 
            Key(T.aspnet_Roles).RoleId AS [aspnet_UsersInRoles.RoleId], 
            True AS _from0
        FROM NKDC.aspnet_UsersInRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Applications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView341()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Applications
        [NKD.Module.BusinessObjects.Applications](T1.Applications_ApplicationName, T1.Applications_LoweredApplicationName, T1.Applications_ApplicationId, T1.Applications_Description)
    FROM (
        SELECT 
            T.ApplicationName AS Applications_ApplicationName, 
            T.LoweredApplicationName AS Applications_LoweredApplicationName, 
            T.ApplicationId AS Applications_ApplicationId, 
            T.Description AS Applications_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Applications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Memberships.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView342()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Memberships
        [NKD.Module.BusinessObjects.Membership](T1.Membership_ApplicationId, T1.Membership_UserId, T1.Membership_Password, T1.Membership_PasswordFormat, T1.Membership_PasswordSalt, T1.Membership_MobilePIN, T1.Membership_Email, T1.Membership_LoweredEmail, T1.Membership_PasswordQuestion, T1.Membership_PasswordAnswer, T1.Membership_IsApproved, T1.Membership_IsLockedOut, T1.Membership_CreateDate, T1.Membership_LastLoginDate, T1.Membership_LastPasswordChangedDate, T1.Membership_LastLockoutDate, T1.Membership_FailedPasswordAttemptCount, T1.Membership_FailedPasswordAttemptWindowStart, T1.Membership_FailedPasswordAnswerAttemptCount, T1.Membership_FailedPasswordAnswerAttemptWindowStart, T1.Membership_Comment)
    FROM (
        SELECT 
            T.ApplicationId AS Membership_ApplicationId, 
            T.UserId AS Membership_UserId, 
            T.Password AS Membership_Password, 
            T.PasswordFormat AS Membership_PasswordFormat, 
            T.PasswordSalt AS Membership_PasswordSalt, 
            T.MobilePIN AS Membership_MobilePIN, 
            T.Email AS Membership_Email, 
            T.LoweredEmail AS Membership_LoweredEmail, 
            T.PasswordQuestion AS Membership_PasswordQuestion, 
            T.PasswordAnswer AS Membership_PasswordAnswer, 
            T.IsApproved AS Membership_IsApproved, 
            T.IsLockedOut AS Membership_IsLockedOut, 
            T.CreateDate AS Membership_CreateDate, 
            T.LastLoginDate AS Membership_LastLoginDate, 
            T.LastPasswordChangedDate AS Membership_LastPasswordChangedDate, 
            T.LastLockoutDate AS Membership_LastLockoutDate, 
            T.FailedPasswordAttemptCount AS Membership_FailedPasswordAttemptCount, 
            T.FailedPasswordAttemptWindowStart AS Membership_FailedPasswordAttemptWindowStart, 
            T.FailedPasswordAnswerAttemptCount AS Membership_FailedPasswordAnswerAttemptCount, 
            T.FailedPasswordAnswerAttemptWindowStart AS Membership_FailedPasswordAnswerAttemptWindowStart, 
            T.Comment AS Membership_Comment, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Membership AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Paths.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView343()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Paths
        [NKD.Module.BusinessObjects.Paths](T1.Paths_ApplicationId, T1.Paths_PathId, T1.Paths_Path, T1.Paths_LoweredPath)
    FROM (
        SELECT 
            T.ApplicationId AS Paths_ApplicationId, 
            T.PathId AS Paths_PathId, 
            T.Path AS Paths_Path, 
            T.LoweredPath AS Paths_LoweredPath, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Paths AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PersonalizationAllUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView344()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonalizationAllUsers
        [NKD.Module.BusinessObjects.PersonalizationAllUsers](T1.PersonalizationAllUsers_PathId, T1.PersonalizationAllUsers_PageSettings, T1.PersonalizationAllUsers_LastUpdatedDate)
    FROM (
        SELECT 
            T.PathId AS PersonalizationAllUsers_PathId, 
            T.PageSettings AS PersonalizationAllUsers_PageSettings, 
            T.LastUpdatedDate AS PersonalizationAllUsers_LastUpdatedDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationAllUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PersonalizationPerUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView345()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonalizationPerUsers
        [NKD.Module.BusinessObjects.PersonalizationPerUser](T1.PersonalizationPerUser_Id, T1.PersonalizationPerUser_PathId, T1.PersonalizationPerUser_UserId, T1.PersonalizationPerUser_PageSettings, T1.PersonalizationPerUser_LastUpdatedDate)
    FROM (
        SELECT 
            T.Id AS PersonalizationPerUser_Id, 
            T.PathId AS PersonalizationPerUser_PathId, 
            T.UserId AS PersonalizationPerUser_UserId, 
            T.PageSettings AS PersonalizationPerUser_PageSettings, 
            T.LastUpdatedDate AS PersonalizationPerUser_LastUpdatedDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationPerUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Profiles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView346()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Profiles
        [NKD.Module.BusinessObjects.Profile](T1.Profile_UserId, T1.Profile_PropertyNames, T1.Profile_PropertyValuesString, T1.Profile_PropertyValuesBinary, T1.Profile_LastUpdatedDate)
    FROM (
        SELECT 
            T.UserId AS Profile_UserId, 
            T.PropertyNames AS Profile_PropertyNames, 
            T.PropertyValuesString AS Profile_PropertyValuesString, 
            T.PropertyValuesBinary AS Profile_PropertyValuesBinary, 
            T.LastUpdatedDate AS Profile_LastUpdatedDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Profile AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView347()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [NKD.Module.BusinessObjects.Roles](T1.Roles_ApplicationId, T1.Roles_RoleId, T1.Roles_RoleName, T1.Roles_LoweredRoleName, T1.Roles_Description)
    FROM (
        SELECT 
            T.ApplicationId AS Roles_ApplicationId, 
            T.RoleId AS Roles_RoleId, 
            T.RoleName AS Roles_RoleName, 
            T.LoweredRoleName AS Roles_LoweredRoleName, 
            T.Description AS Roles_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView348()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [NKD.Module.BusinessObjects.Users](T1.Users_ApplicationId, T1.Users_UserId, T1.Users_UserName, T1.Users_LoweredUserName, T1.Users_MobileAlias, T1.Users_IsAnonymous, T1.Users_LastActivityDate)
    FROM (
        SELECT 
            T.ApplicationId AS Users_ApplicationId, 
            T.UserId AS Users_UserId, 
            T.UserName AS Users_UserName, 
            T.LoweredUserName AS Users_LoweredUserName, 
            T.MobileAlias AS Users_MobileAlias, 
            T.IsAnonymous AS Users_IsAnonymous, 
            T.LastActivityDate AS Users_LastActivityDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Credits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView349()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Credits
        [NKD.Module.BusinessObjects.Credit](T1.Credit_CreditID, T1.Credit_SupplyID, T1.Credit_InvoiceID, T1.Credit_InvoiceLineID, T1.Credit_IsCreditNote, T1.Credit_IsRefund, T1.Credit_OriginalCredit, T1.Credit_CurrencyID, T1.Credit_CreditAmount, T1.Credit_Version, T1.Credit_VersionAntecedentID, T1.Credit_VersionCertainty, T1.Credit_VersionWorkflowInstanceID, T1.Credit_VersionUpdatedBy, T1.Credit_VersionDeletedBy, T1.Credit_VersionOwnerContactID, T1.Credit_VersionOwnerCompanyID, T1.Credit_VersionUpdated)
    FROM (
        SELECT 
            T.CreditID AS Credit_CreditID, 
            T.SupplyID AS Credit_SupplyID, 
            T.InvoiceID AS Credit_InvoiceID, 
            T.InvoiceLineID AS Credit_InvoiceLineID, 
            T.IsCreditNote AS Credit_IsCreditNote, 
            T.IsRefund AS Credit_IsRefund, 
            T.OriginalCredit AS Credit_OriginalCredit, 
            T.CurrencyID AS Credit_CurrencyID, 
            T.CreditAmount AS Credit_CreditAmount, 
            T.Version AS Credit_Version, 
            T.VersionAntecedentID AS Credit_VersionAntecedentID, 
            T.VersionCertainty AS Credit_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Credit_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Credit_VersionUpdatedBy, 
            T.VersionDeletedBy AS Credit_VersionDeletedBy, 
            T.VersionOwnerContactID AS Credit_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Credit_VersionOwnerCompanyID, 
            T.VersionUpdated AS Credit_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Credit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Currencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView350()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Currencies
        [NKD.Module.BusinessObjects.Currency](T1.Currency_CurrencyID, T1.Currency_CountryID, T1.Currency_EquivalentMultiplier, T1.Currency_BuyMultiplier, T1.Currency_SellMultiplier, T1.Currency_Version, T1.Currency_VersionAntecedentID, T1.Currency_VersionCertainty, T1.Currency_VersionWorkflowInstanceID, T1.Currency_VersionUpdatedBy, T1.Currency_VersionDeletedBy, T1.Currency_VersionOwnerContactID, T1.Currency_VersionOwnerCompanyID, T1.Currency_VersionUpdated, T1.Currency_PrefixCharacters, T1.Currency_PostfixCharacters)
    FROM (
        SELECT 
            T.CurrencyID AS Currency_CurrencyID, 
            T.CountryID AS Currency_CountryID, 
            T.EquivalentMultiplier AS Currency_EquivalentMultiplier, 
            T.BuyMultiplier AS Currency_BuyMultiplier, 
            T.SellMultiplier AS Currency_SellMultiplier, 
            T.Version AS Currency_Version, 
            T.VersionAntecedentID AS Currency_VersionAntecedentID, 
            T.VersionCertainty AS Currency_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Currency_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Currency_VersionUpdatedBy, 
            T.VersionDeletedBy AS Currency_VersionDeletedBy, 
            T.VersionOwnerContactID AS Currency_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Currency_VersionOwnerCompanyID, 
            T.VersionUpdated AS Currency_VersionUpdated, 
            T.PrefixCharacters AS Currency_PrefixCharacters, 
            T.PostfixCharacters AS Currency_PostfixCharacters, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Currency AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryTaxes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView351()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryTaxes
        [NKD.Module.BusinessObjects.DictionaryTax](T1.DictionaryTax_TaxID, T1.DictionaryTax_TaxName, T1.DictionaryTax_TaxRate, T1.DictionaryTax_TaxRateUnitID, T1.DictionaryTax_CountryID, T1.DictionaryTax_CountryStateID, T1.DictionaryTax_ProvinceID, T1.DictionaryTax_ApplicableFrom, T1.DictionaryTax_ApplicableUntil, T1.DictionaryTax_BracketMinimum, T1.DictionaryTax_BracketMaximum, T1.DictionaryTax_Version, T1.DictionaryTax_VersionAntecedentID, T1.DictionaryTax_VersionCertainty, T1.DictionaryTax_VersionWorkflowInstanceID, T1.DictionaryTax_VersionUpdatedBy, T1.DictionaryTax_VersionDeletedBy, T1.DictionaryTax_VersionOwnerContactID, T1.DictionaryTax_VersionOwnerCompanyID, T1.DictionaryTax_VersionUpdated)
    FROM (
        SELECT 
            T.TaxID AS DictionaryTax_TaxID, 
            T.TaxName AS DictionaryTax_TaxName, 
            T.TaxRate AS DictionaryTax_TaxRate, 
            T.TaxRateUnitID AS DictionaryTax_TaxRateUnitID, 
            T.CountryID AS DictionaryTax_CountryID, 
            T.CountryStateID AS DictionaryTax_CountryStateID, 
            T.ProvinceID AS DictionaryTax_ProvinceID, 
            T.ApplicableFrom AS DictionaryTax_ApplicableFrom, 
            T.ApplicableUntil AS DictionaryTax_ApplicableUntil, 
            T.BracketMinimum AS DictionaryTax_BracketMinimum, 
            T.BracketMaximum AS DictionaryTax_BracketMaximum, 
            T.Version AS DictionaryTax_Version, 
            T.VersionAntecedentID AS DictionaryTax_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryTax_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryTax_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryTax_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryTax_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryTax_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryTax_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryTax_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryTax AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Invoices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView352()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Invoices
        [NKD.Module.BusinessObjects.Invoice](T1.Invoice_InvoiceID, T1.Invoice_Sequence, T1.Invoice_SupplierCompanyID, T1.Invoice_SupplierAccountID, T1.Invoice_SupplierReferenceNumber, T1.Invoice_CustomerCompanyID, T1.Invoice_CustomerAccountID, T1.Invoice_CustomerReferenceNumber, T1.Invoice_FreightTax, T1.Invoice_FreightAmount, T1.Invoice_DiscountIncludesFreight, T1.Invoice_DiscountAllFreight, T1.Invoice_DiscountAmount, T1.Invoice_TaxAmount, T1.Invoice_OriginalTotal, T1.Invoice_CurrencyID, T1.Invoice_Total, T1.Invoice_Dated, T1.Invoice_Communicated, T1.Invoice_Version, T1.Invoice_VersionAntecedentID, T1.Invoice_VersionCertainty, T1.Invoice_VersionWorkflowInstanceID, T1.Invoice_VersionUpdatedBy, T1.Invoice_VersionDeletedBy, T1.Invoice_VersionOwnerContactID, T1.Invoice_VersionOwnerCompanyID, T1.Invoice_VersionUpdated, T1.Invoice_SupplierContactID, T1.Invoice_CustomerContactID, T1.Invoice_SupplyID, T1.Invoice_SupplierAddressID, T1.Invoice_CustomerAddressID)
    FROM (
        SELECT 
            T.InvoiceID AS Invoice_InvoiceID, 
            T.Sequence AS Invoice_Sequence, 
            T.SupplierCompanyID AS Invoice_SupplierCompanyID, 
            T.SupplierAccountID AS Invoice_SupplierAccountID, 
            T.SupplierReferenceNumber AS Invoice_SupplierReferenceNumber, 
            T.CustomerCompanyID AS Invoice_CustomerCompanyID, 
            T.CustomerAccountID AS Invoice_CustomerAccountID, 
            T.CustomerReferenceNumber AS Invoice_CustomerReferenceNumber, 
            T.FreightTax AS Invoice_FreightTax, 
            T.FreightAmount AS Invoice_FreightAmount, 
            T.DiscountIncludesFreight AS Invoice_DiscountIncludesFreight, 
            T.DiscountAllFreight AS Invoice_DiscountAllFreight, 
            T.DiscountAmount AS Invoice_DiscountAmount, 
            T.TaxAmount AS Invoice_TaxAmount, 
            T.OriginalTotal AS Invoice_OriginalTotal, 
            T.CurrencyID AS Invoice_CurrencyID, 
            T.Total AS Invoice_Total, 
            T.Dated AS Invoice_Dated, 
            T.Communicated AS Invoice_Communicated, 
            T.Version AS Invoice_Version, 
            T.VersionAntecedentID AS Invoice_VersionAntecedentID, 
            T.VersionCertainty AS Invoice_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Invoice_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Invoice_VersionUpdatedBy, 
            T.VersionDeletedBy AS Invoice_VersionDeletedBy, 
            T.VersionOwnerContactID AS Invoice_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Invoice_VersionOwnerCompanyID, 
            T.VersionUpdated AS Invoice_VersionUpdated, 
            T.SupplierContactID AS Invoice_SupplierContactID, 
            T.CustomerContactID AS Invoice_CustomerContactID, 
            T.SupplyID AS Invoice_SupplyID, 
            T.SupplierAddressID AS Invoice_SupplierAddressID, 
            T.CustomerAddressID AS Invoice_CustomerAddressID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Invoice AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.InvoiceLines.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView353()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvoiceLines
        [NKD.Module.BusinessObjects.InvoiceLine](T1.InvoiceLine_InvoiceLineID, T1.InvoiceLine_InvoiceID, T1.InvoiceLine_SupplyItemID, T1.InvoiceLine_ReferenceType, T1.InvoiceLine_ReferenceID, T1.InvoiceLine_Description, T1.InvoiceLine_Quantity, T1.InvoiceLine_TaxID, T1.InvoiceLine_Tax, T1.InvoiceLine_OriginalSubtotal, T1.InvoiceLine_CurrencyID, T1.InvoiceLine_Subtotal, T1.InvoiceLine_Version, T1.InvoiceLine_VersionAntecedentID, T1.InvoiceLine_VersionCertainty, T1.InvoiceLine_VersionWorkflowInstanceID, T1.InvoiceLine_VersionUpdatedBy, T1.InvoiceLine_VersionDeletedBy, T1.InvoiceLine_VersionOwnerContactID, T1.InvoiceLine_VersionOwnerCompanyID, T1.InvoiceLine_VersionUpdated, T1.InvoiceLine_DiscountAmount, T1.InvoiceLine_Sequence)
    FROM (
        SELECT 
            T.InvoiceLineID AS InvoiceLine_InvoiceLineID, 
            T.InvoiceID AS InvoiceLine_InvoiceID, 
            T.SupplyItemID AS InvoiceLine_SupplyItemID, 
            T.ReferenceType AS InvoiceLine_ReferenceType, 
            T.ReferenceID AS InvoiceLine_ReferenceID, 
            T.Description AS InvoiceLine_Description, 
            T.Quantity AS InvoiceLine_Quantity, 
            T.TaxID AS InvoiceLine_TaxID, 
            T.Tax AS InvoiceLine_Tax, 
            T.OriginalSubtotal AS InvoiceLine_OriginalSubtotal, 
            T.CurrencyID AS InvoiceLine_CurrencyID, 
            T.Subtotal AS InvoiceLine_Subtotal, 
            T.Version AS InvoiceLine_Version, 
            T.VersionAntecedentID AS InvoiceLine_VersionAntecedentID, 
            T.VersionCertainty AS InvoiceLine_VersionCertainty, 
            T.VersionWorkflowInstanceID AS InvoiceLine_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS InvoiceLine_VersionUpdatedBy, 
            T.VersionDeletedBy AS InvoiceLine_VersionDeletedBy, 
            T.VersionOwnerContactID AS InvoiceLine_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS InvoiceLine_VersionOwnerCompanyID, 
            T.VersionUpdated AS InvoiceLine_VersionUpdated, 
            T.DiscountAmount AS InvoiceLine_DiscountAmount, 
            T.Sequence AS InvoiceLine_Sequence, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_InvoiceLine AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Journals.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView354()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Journals
        [NKD.Module.BusinessObjects.Journal](T1.Journal_JournalID, T1.Journal_ReferenceType, T1.Journal_ReferenceID, T1.Journal_ReferenceDate, T1.Journal_AccountID, T1.Journal_OriginalAmount, T1.Journal_CurrencyID, T1.Journal_Amount, T1.Journal_Version, T1.Journal_VersionAntecedentID, T1.Journal_VersionCertainty, T1.Journal_VersionWorkflowInstanceID, T1.Journal_VersionUpdatedBy, T1.Journal_VersionDeletedBy, T1.Journal_VersionOwnerContactID, T1.Journal_VersionOwnerCompanyID, T1.Journal_VersionUpdated)
    FROM (
        SELECT 
            T.JournalID AS Journal_JournalID, 
            T.ReferenceType AS Journal_ReferenceType, 
            T.ReferenceID AS Journal_ReferenceID, 
            T.ReferenceDate AS Journal_ReferenceDate, 
            T.AccountID AS Journal_AccountID, 
            T.OriginalAmount AS Journal_OriginalAmount, 
            T.CurrencyID AS Journal_CurrencyID, 
            T.Amount AS Journal_Amount, 
            T.Version AS Journal_Version, 
            T.VersionAntecedentID AS Journal_VersionAntecedentID, 
            T.VersionCertainty AS Journal_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Journal_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Journal_VersionUpdatedBy, 
            T.VersionDeletedBy AS Journal_VersionDeletedBy, 
            T.VersionOwnerContactID AS Journal_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Journal_VersionOwnerCompanyID, 
            T.VersionUpdated AS Journal_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Journal AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Payments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView355()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Payments
        [NKD.Module.BusinessObjects.Payment](T1.Payment_PaymentID, T1.Payment_SupplierAccountID, T1.Payment_CustomerAccountID, T1.Payment_OriginalAmount, T1.Payment_CurrencyID, T1.Payment_Amount, T1.Payment_Paid, T1.Payment_Version, T1.Payment_VersionAntecedentID, T1.Payment_VersionCertainty, T1.Payment_VersionWorkflowInstanceID, T1.Payment_VersionUpdatedBy, T1.Payment_VersionDeletedBy, T1.Payment_VersionOwnerContactID, T1.Payment_VersionOwnerCompanyID, T1.Payment_VersionUpdated, T1.Payment_SupplierContactID, T1.Payment_CustomerContactID, T1.Payment_InternalReferenceTableType, T1.Payment_InternalReferenceID, T1.Payment_InternalReferenceName, T1.Payment_ExternalProviderType, T1.Payment_ExternalReferenceName)
    FROM (
        SELECT 
            T.PaymentID AS Payment_PaymentID, 
            T.SupplierAccountID AS Payment_SupplierAccountID, 
            T.CustomerAccountID AS Payment_CustomerAccountID, 
            T.OriginalAmount AS Payment_OriginalAmount, 
            T.CurrencyID AS Payment_CurrencyID, 
            T.Amount AS Payment_Amount, 
            T.Paid AS Payment_Paid, 
            T.Version AS Payment_Version, 
            T.VersionAntecedentID AS Payment_VersionAntecedentID, 
            T.VersionCertainty AS Payment_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Payment_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Payment_VersionUpdatedBy, 
            T.VersionDeletedBy AS Payment_VersionDeletedBy, 
            T.VersionOwnerContactID AS Payment_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Payment_VersionOwnerCompanyID, 
            T.VersionUpdated AS Payment_VersionUpdated, 
            T.SupplierContactID AS Payment_SupplierContactID, 
            T.CustomerContactID AS Payment_CustomerContactID, 
            T.InternalReferenceTableType AS Payment_InternalReferenceTableType, 
            T.InternalReferenceID AS Payment_InternalReferenceID, 
            T.InternalReferenceName AS Payment_InternalReferenceName, 
            T.ExternalProviderType AS Payment_ExternalProviderType, 
            T.ExternalReferenceName AS Payment_ExternalReferenceName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Payment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PurchaseOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView356()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PurchaseOrders
        [NKD.Module.BusinessObjects.PurchaseOrder](T1.PurchaseOrder_PurchaseOrderID, T1.PurchaseOrder_PurchaseName, T1.PurchaseOrder_ReferenceCode, T1.PurchaseOrder_ReferenceSystem, T1.PurchaseOrder_OriginalSubtotal, T1.PurchaseOrder_CurrencyID, T1.PurchaseOrder_Subtotal, T1.PurchaseOrder_Ordered, T1.PurchaseOrder_ProjectID, T1.PurchaseOrder_CustomerCompanyID, T1.PurchaseOrder_CustomerContactID, T1.PurchaseOrder_CustomerAccountID, T1.PurchaseOrder_SupplierCompanyID, T1.PurchaseOrder_SupplierContactID, T1.PurchaseOrder_SupplierAccountID, T1.PurchaseOrder_Version, T1.PurchaseOrder_VersionAntecedentID, T1.PurchaseOrder_VersionCertainty, T1.PurchaseOrder_VersionWorkflowInstanceID, T1.PurchaseOrder_VersionUpdatedBy, T1.PurchaseOrder_VersionDeletedBy, T1.PurchaseOrder_VersionOwnerContactID, T1.PurchaseOrder_VersionOwnerCompanyID, T1.PurchaseOrder_VersionUpdated, T1.PurchaseOrder_Sequence, T1.PurchaseOrder_OrderStatusID, T1.PurchaseOrder_ParentPurchaseOrderID)
    FROM (
        SELECT 
            T.PurchaseOrderID AS PurchaseOrder_PurchaseOrderID, 
            T.PurchaseName AS PurchaseOrder_PurchaseName, 
            T.ReferenceCode AS PurchaseOrder_ReferenceCode, 
            T.ReferenceSystem AS PurchaseOrder_ReferenceSystem, 
            T.OriginalSubtotal AS PurchaseOrder_OriginalSubtotal, 
            T.CurrencyID AS PurchaseOrder_CurrencyID, 
            T.Subtotal AS PurchaseOrder_Subtotal, 
            T.Ordered AS PurchaseOrder_Ordered, 
            T.ProjectID AS PurchaseOrder_ProjectID, 
            T.CustomerCompanyID AS PurchaseOrder_CustomerCompanyID, 
            T.CustomerContactID AS PurchaseOrder_CustomerContactID, 
            T.CustomerAccountID AS PurchaseOrder_CustomerAccountID, 
            T.SupplierCompanyID AS PurchaseOrder_SupplierCompanyID, 
            T.SupplierContactID AS PurchaseOrder_SupplierContactID, 
            T.SupplierAccountID AS PurchaseOrder_SupplierAccountID, 
            T.Version AS PurchaseOrder_Version, 
            T.VersionAntecedentID AS PurchaseOrder_VersionAntecedentID, 
            T.VersionCertainty AS PurchaseOrder_VersionCertainty, 
            T.VersionWorkflowInstanceID AS PurchaseOrder_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS PurchaseOrder_VersionUpdatedBy, 
            T.VersionDeletedBy AS PurchaseOrder_VersionDeletedBy, 
            T.VersionOwnerContactID AS PurchaseOrder_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS PurchaseOrder_VersionOwnerCompanyID, 
            T.VersionUpdated AS PurchaseOrder_VersionUpdated, 
            T.Sequence AS PurchaseOrder_Sequence, 
            T.OrderStatusID AS PurchaseOrder_OrderStatusID, 
            T.ParentPurchaseOrderID AS PurchaseOrder_ParentPurchaseOrderID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_PurchaseOrder AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Supplies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView357()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Supplies
        [NKD.Module.BusinessObjects.Supply](T1.Supply_SupplyID, T1.Supply_ParentSupplyID, T1.Supply_ProjectID, T1.Supply_Sequence, T1.Supply_CustomerPurchaseOrderID, T1.Supply_CustomerApprovedBy, T1.Supply_SupplierPurchaseOrderID, T1.Supply_SupplierApprovedBy, T1.Supply_IsDraft, T1.Supply_IsUnapproved, T1.Supply_IsDenied, T1.Supply_IsSupplied, T1.Supply_IsReorderSent, T1.Supply_IsPaid, T1.Supply_IsFinalised, T1.Supply_CurrentProjectDeliverableID, T1.Supply_FinalProjectDeliverableID, T1.Supply_DateOrdered, T1.Supply_PurchasingNotes, T1.Supply_Version, T1.Supply_VersionAntecedentID, T1.Supply_VersionCertainty, T1.Supply_VersionWorkflowInstanceID, T1.Supply_VersionUpdatedBy, T1.Supply_VersionDeletedBy, T1.Supply_VersionOwnerContactID, T1.Supply_VersionOwnerCompanyID, T1.Supply_VersionUpdated)
    FROM (
        SELECT 
            T.SupplyID AS Supply_SupplyID, 
            T.ParentSupplyID AS Supply_ParentSupplyID, 
            T.ProjectID AS Supply_ProjectID, 
            T.Sequence AS Supply_Sequence, 
            T.CustomerPurchaseOrderID AS Supply_CustomerPurchaseOrderID, 
            T.CustomerApprovedBy AS Supply_CustomerApprovedBy, 
            T.SupplierPurchaseOrderID AS Supply_SupplierPurchaseOrderID, 
            T.SupplierApprovedBy AS Supply_SupplierApprovedBy, 
            T.IsDraft AS Supply_IsDraft, 
            T.IsUnapproved AS Supply_IsUnapproved, 
            T.IsDenied AS Supply_IsDenied, 
            T.IsSupplied AS Supply_IsSupplied, 
            T.IsReorderSent AS Supply_IsReorderSent, 
            T.IsPaid AS Supply_IsPaid, 
            T.IsFinalised AS Supply_IsFinalised, 
            T.CurrentProjectDeliverableID AS Supply_CurrentProjectDeliverableID, 
            T.FinalProjectDeliverableID AS Supply_FinalProjectDeliverableID, 
            T.DateOrdered AS Supply_DateOrdered, 
            T.PurchasingNotes AS Supply_PurchasingNotes, 
            T.Version AS Supply_Version, 
            T.VersionAntecedentID AS Supply_VersionAntecedentID, 
            T.VersionCertainty AS Supply_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Supply_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Supply_VersionUpdatedBy, 
            T.VersionDeletedBy AS Supply_VersionDeletedBy, 
            T.VersionOwnerContactID AS Supply_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Supply_VersionOwnerCompanyID, 
            T.VersionUpdated AS Supply_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Supply AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplyItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView358()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplyItems
        [NKD.Module.BusinessObjects.SupplyItem](T1.SupplyItem_SupplyItemID, T1.SupplyItem_SupplyID, T1.SupplyItem_ProjectPlanTaskModelID, T1.SupplyItem_ProjectPlanTaskPartID, T1.SupplyItem_ProjectPlanTaskResponseID, T1.SupplyItem_CustomerAccountID, T1.SupplyItem_ModelUnitID, T1.SupplyItem_LabourUnitID, T1.SupplyItem_PartUnitID, T1.SupplyItem_CostPerUnitModel, T1.SupplyItem_CostPerUnitLabour, T1.SupplyItem_CostPerUnitPart, T1.SupplyItem_QuantityModel, T1.SupplyItem_QuantityLabour, T1.SupplyItem_QuantityPart, T1.SupplyItem_CostModel, T1.SupplyItem_CostLabour, T1.SupplyItem_CostPart, T1.SupplyItem_SubtotalModel, T1.SupplyItem_SubtotalLabour, T1.SupplyItem_SubtotalPart, T1.SupplyItem_TaxModel, T1.SupplyItem_TaxLabour, T1.SupplyItem_TaxPart, T1.SupplyItem_Tax, T1.SupplyItem_OriginalSubtotal, T1.SupplyItem_CurrencyID, T1.SupplyItem_Subtotal, T1.SupplyItem_Notes, T1.SupplyItem_Version, T1.SupplyItem_VersionAntecedentID, T1.SupplyItem_VersionCertainty, T1.SupplyItem_VersionWorkflowInstanceID, T1.SupplyItem_VersionUpdatedBy, T1.SupplyItem_VersionDeletedBy, T1.SupplyItem_VersionOwnerContactID, T1.SupplyItem_VersionOwnerCompanyID, T1.SupplyItem_VersionUpdated, T1.SupplyItem_ModelID, T1.SupplyItem_PartID, T1.SupplyItem_SupplierModelID, T1.SupplyItem_SupplierPartID, T1.SupplyItem_WarehouseID, T1.SupplyItem_ApplicationPaymentProviderProductModelID, T1.SupplyItem_ApplicationPaymentProviderProductPartID, T1.SupplyItem_ApplicationPaymentProviderProductID, T1.SupplyItem_DiscountModel, T1.SupplyItem_DiscountLabour, T1.SupplyItem_DiscountPart, T1.SupplyItem_DiscountAmount)
    FROM (
        SELECT 
            T.SupplyItemID AS SupplyItem_SupplyItemID, 
            T.SupplyID AS SupplyItem_SupplyID, 
            T.ProjectPlanTaskModelID AS SupplyItem_ProjectPlanTaskModelID, 
            T.ProjectPlanTaskPartID AS SupplyItem_ProjectPlanTaskPartID, 
            T.ProjectPlanTaskResponseID AS SupplyItem_ProjectPlanTaskResponseID, 
            T.CustomerAccountID AS SupplyItem_CustomerAccountID, 
            T.ModelUnitID AS SupplyItem_ModelUnitID, 
            T.LabourUnitID AS SupplyItem_LabourUnitID, 
            T.PartUnitID AS SupplyItem_PartUnitID, 
            T.CostPerUnitModel AS SupplyItem_CostPerUnitModel, 
            T.CostPerUnitLabour AS SupplyItem_CostPerUnitLabour, 
            T.CostPerUnitPart AS SupplyItem_CostPerUnitPart, 
            T.QuantityModel AS SupplyItem_QuantityModel, 
            T.QuantityLabour AS SupplyItem_QuantityLabour, 
            T.QuantityPart AS SupplyItem_QuantityPart, 
            T.CostModel AS SupplyItem_CostModel, 
            T.CostLabour AS SupplyItem_CostLabour, 
            T.CostPart AS SupplyItem_CostPart, 
            T.SubtotalModel AS SupplyItem_SubtotalModel, 
            T.SubtotalLabour AS SupplyItem_SubtotalLabour, 
            T.SubtotalPart AS SupplyItem_SubtotalPart, 
            T.TaxModel AS SupplyItem_TaxModel, 
            T.TaxLabour AS SupplyItem_TaxLabour, 
            T.TaxPart AS SupplyItem_TaxPart, 
            T.Tax AS SupplyItem_Tax, 
            T.OriginalSubtotal AS SupplyItem_OriginalSubtotal, 
            T.CurrencyID AS SupplyItem_CurrencyID, 
            T.Subtotal AS SupplyItem_Subtotal, 
            T.Notes AS SupplyItem_Notes, 
            T.Version AS SupplyItem_Version, 
            T.VersionAntecedentID AS SupplyItem_VersionAntecedentID, 
            T.VersionCertainty AS SupplyItem_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplyItem_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplyItem_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplyItem_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplyItem_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplyItem_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplyItem_VersionUpdated, 
            T.ModelID AS SupplyItem_ModelID, 
            T.PartID AS SupplyItem_PartID, 
            T.SupplierModelID AS SupplyItem_SupplierModelID, 
            T.SupplierPartID AS SupplyItem_SupplierPartID, 
            T.WarehouseID AS SupplyItem_WarehouseID, 
            T.ApplicationPaymentProviderProductModelID AS SupplyItem_ApplicationPaymentProviderProductModelID, 
            T.ApplicationPaymentProviderProductPartID AS SupplyItem_ApplicationPaymentProviderProductPartID, 
            T.ApplicationPaymentProviderProductID AS SupplyItem_ApplicationPaymentProviderProductID, 
            T.DiscountModel AS SupplyItem_DiscountModel, 
            T.DiscountLabour AS SupplyItem_DiscountLabour, 
            T.DiscountPart AS SupplyItem_DiscountPart, 
            T.DiscountAmount AS SupplyItem_DiscountAmount, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplyItem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplyItemTaxes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView359()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplyItemTaxes
        [NKD.Module.BusinessObjects.SupplyItemTax](T1.SupplyItemTax_SupplyItemTaxID, T1.SupplyItemTax_SupplyItemID, T1.SupplyItemTax_TaxID, T1.SupplyItemTax_Tax, T1.SupplyItemTax_Version, T1.SupplyItemTax_VersionAntecedentID, T1.SupplyItemTax_VersionCertainty, T1.SupplyItemTax_VersionWorkflowInstanceID, T1.SupplyItemTax_VersionUpdatedBy, T1.SupplyItemTax_VersionDeletedBy, T1.SupplyItemTax_VersionOwnerContactID, T1.SupplyItemTax_VersionOwnerCompanyID, T1.SupplyItemTax_VersionUpdated)
    FROM (
        SELECT 
            T.SupplyItemTaxID AS SupplyItemTax_SupplyItemTaxID, 
            T.SupplyItemID AS SupplyItemTax_SupplyItemID, 
            T.TaxID AS SupplyItemTax_TaxID, 
            T.Tax AS SupplyItemTax_Tax, 
            T.Version AS SupplyItemTax_Version, 
            T.VersionAntecedentID AS SupplyItemTax_VersionAntecedentID, 
            T.VersionCertainty AS SupplyItemTax_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplyItemTax_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplyItemTax_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplyItemTax_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplyItemTax_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplyItemTax_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplyItemTax_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplyItemTax AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView360()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Accounts
        [NKD.Module.BusinessObjects.Account](T1.Account_AccountID, T1.Account_ParentAccountID, T1.Account_AcountCode, T1.Account_AccountName, T1.Account_PrimaryCompanyID, T1.Account_DefaultLocationID, T1.Account_Description, T1.Account_Version, T1.Account_VersionAntecedentID, T1.Account_VersionCertainty, T1.Account_VersionWorkflowInstanceID, T1.Account_VersionUpdatedBy, T1.Account_VersionDeletedBy, T1.Account_VersionOwnerContactID, T1.Account_VersionOwnerCompanyID, T1.Account_VersionUpdated, T1.Account_AccountTypeID)
    FROM (
        SELECT 
            T.AccountID AS Account_AccountID, 
            T.ParentAccountID AS Account_ParentAccountID, 
            T.AcountCode AS Account_AcountCode, 
            T.AccountName AS Account_AccountName, 
            T.PrimaryCompanyID AS Account_PrimaryCompanyID, 
            T.DefaultLocationID AS Account_DefaultLocationID, 
            T.Description AS Account_Description, 
            T.Version AS Account_Version, 
            T.VersionAntecedentID AS Account_VersionAntecedentID, 
            T.VersionCertainty AS Account_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Account_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Account_VersionUpdatedBy, 
            T.VersionDeletedBy AS Account_VersionDeletedBy, 
            T.VersionOwnerContactID AS Account_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Account_VersionOwnerCompanyID, 
            T.VersionUpdated AS Account_VersionUpdated, 
            T.AccountTypeID AS Account_AccountTypeID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_Account AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AccountDiscounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView361()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AccountDiscounts
        [NKD.Module.BusinessObjects.AccountDiscount](T1.AccountDiscount_SourceAccountID, T1.AccountDiscount_ClientCompanyID, T1.AccountDiscount_ProviderExperienceID, T1.AccountDiscount_DeviceTypeID, T1.AccountDiscount_LevelUnitID, T1.AccountDiscount_LevelQuantity, T1.AccountDiscount_Rate, T1.AccountDiscount_ValidFrom, T1.AccountDiscount_ValidUntil, T1.AccountDiscount_Version, T1.AccountDiscount_VersionAntecedentID, T1.AccountDiscount_VersionCertainty, T1.AccountDiscount_VersionWorkflowInstanceID, T1.AccountDiscount_VersionUpdatedBy, T1.AccountDiscount_VersionDeletedBy, T1.AccountDiscount_VersionOwnerContactID, T1.AccountDiscount_VersionOwnerCompanyID, T1.AccountDiscount_VersionUpdated, T1.AccountDiscount_AccountDiscountID)
    FROM (
        SELECT 
            T.SourceAccountID AS AccountDiscount_SourceAccountID, 
            T.ClientCompanyID AS AccountDiscount_ClientCompanyID, 
            T.ProviderExperienceID AS AccountDiscount_ProviderExperienceID, 
            T.DeviceTypeID AS AccountDiscount_DeviceTypeID, 
            T.LevelUnitID AS AccountDiscount_LevelUnitID, 
            T.LevelQuantity AS AccountDiscount_LevelQuantity, 
            T.Rate AS AccountDiscount_Rate, 
            T.ValidFrom AS AccountDiscount_ValidFrom, 
            T.ValidUntil AS AccountDiscount_ValidUntil, 
            T.Version AS AccountDiscount_Version, 
            T.VersionAntecedentID AS AccountDiscount_VersionAntecedentID, 
            T.VersionCertainty AS AccountDiscount_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AccountDiscount_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AccountDiscount_VersionUpdatedBy, 
            T.VersionDeletedBy AS AccountDiscount_VersionDeletedBy, 
            T.VersionOwnerContactID AS AccountDiscount_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AccountDiscount_VersionOwnerCompanyID, 
            T.VersionUpdated AS AccountDiscount_VersionUpdated, 
            T.AccountDiscountID AS AccountDiscount_AccountDiscountID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_AccountDiscount AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Assets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView362()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Assets
        [NKD.Module.BusinessObjects.Asset](T1.Asset_AssetID, T1.Asset_ParentAssetID, T1.Asset_AssetName, T1.Asset_Purchased, T1.Asset_PurchaseOrderID, T1.Asset_ExpenseNotToExceedLifeTimeCost, T1.Asset_OwnerAccountID, T1.Asset_BorrowerAccountID, T1.Asset_MaintenanceAccountID, T1.Asset_ModelID, T1.Asset_LocationID, T1.Asset_AssetStatusID, T1.Asset_ExperienceID, T1.Asset_Description, T1.Asset_Version, T1.Asset_VersionAntecedentID, T1.Asset_VersionCertainty, T1.Asset_VersionWorkflowInstanceID, T1.Asset_VersionUpdatedBy, T1.Asset_VersionDeletedBy, T1.Asset_VersionOwnerContactID, T1.Asset_VersionOwnerCompanyID, T1.Asset_VersionUpdated, T1.Asset_InitialCost, T1.Asset_ProRataCost, T1.Asset_ProRataUnitID, T1.Asset_CurrentCompanyID, T1.Asset_CurrentContactID)
    FROM (
        SELECT 
            T.AssetID AS Asset_AssetID, 
            T.ParentAssetID AS Asset_ParentAssetID, 
            T.AssetName AS Asset_AssetName, 
            T.Purchased AS Asset_Purchased, 
            T.PurchaseOrderID AS Asset_PurchaseOrderID, 
            T.ExpenseNotToExceedLifeTimeCost AS Asset_ExpenseNotToExceedLifeTimeCost, 
            T.OwnerAccountID AS Asset_OwnerAccountID, 
            T.BorrowerAccountID AS Asset_BorrowerAccountID, 
            T.MaintenanceAccountID AS Asset_MaintenanceAccountID, 
            T.ModelID AS Asset_ModelID, 
            T.LocationID AS Asset_LocationID, 
            T.AssetStatusID AS Asset_AssetStatusID, 
            T.ExperienceID AS Asset_ExperienceID, 
            T.Description AS Asset_Description, 
            T.Version AS Asset_Version, 
            T.VersionAntecedentID AS Asset_VersionAntecedentID, 
            T.VersionCertainty AS Asset_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Asset_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Asset_VersionUpdatedBy, 
            T.VersionDeletedBy AS Asset_VersionDeletedBy, 
            T.VersionOwnerContactID AS Asset_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Asset_VersionOwnerCompanyID, 
            T.VersionUpdated AS Asset_VersionUpdated, 
            T.InitialCost AS Asset_InitialCost, 
            T.ProRataCost AS Asset_ProRataCost, 
            T.ProRataUnitID AS Asset_ProRataUnitID, 
            T.CurrentCompanyID AS Asset_CurrentCompanyID, 
            T.CurrentContactID AS Asset_CurrentContactID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_Asset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssetAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView363()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlias
        [NKD.Module.BusinessObjects.AssetAlias](T1.AssetAlias_AssetAliasID, T1.AssetAlias_AssetID, T1.AssetAlias_AssetAliasName, T1.AssetAlias_FullDescription, T1.AssetAlias_Thumbnail, T1.AssetAlias_OriginalFileDataID, T1.AssetAlias_Version, T1.AssetAlias_VersionAntecedentID, T1.AssetAlias_VersionCertainty, T1.AssetAlias_VersionWorkflowInstanceID, T1.AssetAlias_VersionUpdatedBy, T1.AssetAlias_VersionDeletedBy, T1.AssetAlias_VersionOwnerContactID, T1.AssetAlias_VersionOwnerCompanyID, T1.AssetAlias_VersionUpdated)
    FROM (
        SELECT 
            T.AssetAliasID AS AssetAlias_AssetAliasID, 
            T.AssetID AS AssetAlias_AssetID, 
            T.AssetAliasName AS AssetAlias_AssetAliasName, 
            T.FullDescription AS AssetAlias_FullDescription, 
            T.Thumbnail AS AssetAlias_Thumbnail, 
            T.OriginalFileDataID AS AssetAlias_OriginalFileDataID, 
            T.Version AS AssetAlias_Version, 
            T.VersionAntecedentID AS AssetAlias_VersionAntecedentID, 
            T.VersionCertainty AS AssetAlias_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssetAlias_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssetAlias_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssetAlias_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssetAlias_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssetAlias_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssetAlias_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_AssetAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssetMaintenances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView364()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetMaintenances
        [NKD.Module.BusinessObjects.AssetMaintenance](T1.AssetMaintenance_AssetMaintenanceID, T1.AssetMaintenance_AssetID, T1.AssetMaintenance_ModelProcedureID, T1.AssetMaintenance_Version, T1.AssetMaintenance_VersionAntecedentID, T1.AssetMaintenance_VersionCertainty, T1.AssetMaintenance_VersionWorkflowInstanceID, T1.AssetMaintenance_VersionUpdatedBy, T1.AssetMaintenance_VersionDeletedBy, T1.AssetMaintenance_VersionOwnerContactID, T1.AssetMaintenance_VersionOwnerCompanyID, T1.AssetMaintenance_VersionUpdated, T1.AssetMaintenance_NextDueDateService, T1.AssetMaintenance_NextDueDateBilling)
    FROM (
        SELECT 
            T.AssetMaintenanceID AS AssetMaintenance_AssetMaintenanceID, 
            T.AssetID AS AssetMaintenance_AssetID, 
            T.ModelProcedureID AS AssetMaintenance_ModelProcedureID, 
            T.Version AS AssetMaintenance_Version, 
            T.VersionAntecedentID AS AssetMaintenance_VersionAntecedentID, 
            T.VersionCertainty AS AssetMaintenance_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssetMaintenance_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssetMaintenance_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssetMaintenance_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssetMaintenance_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssetMaintenance_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssetMaintenance_VersionUpdated, 
            T.NextDueDateService AS AssetMaintenance_NextDueDateService, 
            T.NextDueDateBilling AS AssetMaintenance_NextDueDateBilling, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_AssetMaintenance AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssetWarranties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView365()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetWarranties
        [NKD.Module.BusinessObjects.AssetWarranty](T1.AssetWarranty_AssetID, T1.AssetWarranty_ModelWarrantyID, T1.AssetWarranty_StartDate, T1.AssetWarranty_EndDate, T1.AssetWarranty_Frequency, T1.AssetWarranty_FrequencyUnitID, T1.AssetWarranty_WarrantyTypeID, T1.AssetWarranty_Version, T1.AssetWarranty_VersionAntecedentID, T1.AssetWarranty_VersionCertainty, T1.AssetWarranty_VersionWorkflowInstanceID, T1.AssetWarranty_VersionUpdatedBy, T1.AssetWarranty_VersionDeletedBy, T1.AssetWarranty_VersionOwnerContactID, T1.AssetWarranty_VersionOwnerCompanyID, T1.AssetWarranty_VersionUpdated, T1.AssetWarranty_AssetWarrantyID)
    FROM (
        SELECT 
            T.AssetID AS AssetWarranty_AssetID, 
            T.ModelWarrantyID AS AssetWarranty_ModelWarrantyID, 
            T.StartDate AS AssetWarranty_StartDate, 
            T.EndDate AS AssetWarranty_EndDate, 
            T.Frequency AS AssetWarranty_Frequency, 
            T.FrequencyUnitID AS AssetWarranty_FrequencyUnitID, 
            T.WarrantyTypeID AS AssetWarranty_WarrantyTypeID, 
            T.Version AS AssetWarranty_Version, 
            T.VersionAntecedentID AS AssetWarranty_VersionAntecedentID, 
            T.VersionCertainty AS AssetWarranty_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssetWarranty_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssetWarranty_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssetWarranty_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssetWarranty_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssetWarranty_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssetWarranty_VersionUpdated, 
            T.AssetWarrantyID AS AssetWarranty_AssetWarrantyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_AssetWarranty AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CompanyAccounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView366()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompanyAccounts
        [NKD.Module.BusinessObjects.CompanyAccount](T1.CompanyAccount_CompanyAccountID, T1.CompanyAccount_CompanyID, T1.CompanyAccount_AccountID, T1.CompanyAccount_Version, T1.CompanyAccount_VersionAntecedentID, T1.CompanyAccount_VersionCertainty, T1.CompanyAccount_VersionWorkflowInstanceID, T1.CompanyAccount_VersionUpdatedBy, T1.CompanyAccount_VersionDeletedBy, T1.CompanyAccount_VersionOwnerContactID, T1.CompanyAccount_VersionOwnerCompanyID, T1.CompanyAccount_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyAccountID AS CompanyAccount_CompanyAccountID, 
            T.CompanyID AS CompanyAccount_CompanyID, 
            T.AccountID AS CompanyAccount_AccountID, 
            T.Version AS CompanyAccount_Version, 
            T.VersionAntecedentID AS CompanyAccount_VersionAntecedentID, 
            T.VersionCertainty AS CompanyAccount_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyAccount_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyAccount_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyAccount_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyAccount_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyAccount_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyAccount_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_CompanyAccount AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContractAssets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView367()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContractAssets
        [NKD.Module.BusinessObjects.ContractAsset](T1.ContractAsset_ContractAssetID, T1.ContractAsset_ContractID, T1.ContractAsset_AssetID, T1.ContractAsset_OverrideCoverageStart, T1.ContractAsset_OverrideCoverageEnd, T1.ContractAsset_Version, T1.ContractAsset_VersionAntecedentID, T1.ContractAsset_VersionCertainty, T1.ContractAsset_VersionWorkflowInstanceID, T1.ContractAsset_VersionUpdatedBy, T1.ContractAsset_VersionDeletedBy, T1.ContractAsset_VersionOwnerContactID, T1.ContractAsset_VersionOwnerCompanyID, T1.ContractAsset_VersionUpdated)
    FROM (
        SELECT 
            T.ContractAssetID AS ContractAsset_ContractAssetID, 
            T.ContractID AS ContractAsset_ContractID, 
            T.AssetID AS ContractAsset_AssetID, 
            T.OverrideCoverageStart AS ContractAsset_OverrideCoverageStart, 
            T.OverrideCoverageEnd AS ContractAsset_OverrideCoverageEnd, 
            T.Version AS ContractAsset_Version, 
            T.VersionAntecedentID AS ContractAsset_VersionAntecedentID, 
            T.VersionCertainty AS ContractAsset_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContractAsset_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContractAsset_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContractAsset_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContractAsset_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContractAsset_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContractAsset_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ContractAsset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DeliveryAdvices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView368()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeliveryAdvices
        [NKD.Module.BusinessObjects.DeliveryAdvice](T1.DeliveryAdvice_DeliveryAdviceID, T1.DeliveryAdvice_DeliveryAdviceName, T1.DeliveryAdvice_Sequence, T1.DeliveryAdvice_ShippingCompanyID, T1.DeliveryAdvice_FreightCharge, T1.DeliveryAdvice_FreightTax, T1.DeliveryAdvice_ConsignmentNote, T1.DeliveryAdvice_AccessoriesSent, T1.DeliveryAdvice_DeliveryAdviceNotes, T1.DeliveryAdvice_IsEditable, T1.DeliveryAdvice_SourceCompanyAddressID, T1.DeliveryAdvice_DestinationCompanyAddressID, T1.DeliveryAdvice_DeliveryAdviceReasonID, T1.DeliveryAdvice_DeliveryAdviceReasonNote, T1.DeliveryAdvice_BillingAccountID, T1.DeliveryAdvice_ProjectDeliverableID, T1.DeliveryAdvice_ProjectID, T1.DeliveryAdvice_Version, T1.DeliveryAdvice_VersionAntecedentID, T1.DeliveryAdvice_VersionCertainty, T1.DeliveryAdvice_VersionWorkflowInstanceID, T1.DeliveryAdvice_VersionUpdatedBy, T1.DeliveryAdvice_VersionDeletedBy, T1.DeliveryAdvice_VersionOwnerContactID, T1.DeliveryAdvice_VersionOwnerCompanyID, T1.DeliveryAdvice_VersionUpdated)
    FROM (
        SELECT 
            T.DeliveryAdviceID AS DeliveryAdvice_DeliveryAdviceID, 
            T.DeliveryAdviceName AS DeliveryAdvice_DeliveryAdviceName, 
            T.Sequence AS DeliveryAdvice_Sequence, 
            T.ShippingCompanyID AS DeliveryAdvice_ShippingCompanyID, 
            T.FreightCharge AS DeliveryAdvice_FreightCharge, 
            T.FreightTax AS DeliveryAdvice_FreightTax, 
            T.ConsignmentNote AS DeliveryAdvice_ConsignmentNote, 
            T.AccessoriesSent AS DeliveryAdvice_AccessoriesSent, 
            T.DeliveryAdviceNotes AS DeliveryAdvice_DeliveryAdviceNotes, 
            T.IsEditable AS DeliveryAdvice_IsEditable, 
            T.SourceCompanyAddressID AS DeliveryAdvice_SourceCompanyAddressID, 
            T.DestinationCompanyAddressID AS DeliveryAdvice_DestinationCompanyAddressID, 
            T.DeliveryAdviceReasonID AS DeliveryAdvice_DeliveryAdviceReasonID, 
            T.DeliveryAdviceReasonNote AS DeliveryAdvice_DeliveryAdviceReasonNote, 
            T.BillingAccountID AS DeliveryAdvice_BillingAccountID, 
            T.ProjectDeliverableID AS DeliveryAdvice_ProjectDeliverableID, 
            T.ProjectID AS DeliveryAdvice_ProjectID, 
            T.Version AS DeliveryAdvice_Version, 
            T.VersionAntecedentID AS DeliveryAdvice_VersionAntecedentID, 
            T.VersionCertainty AS DeliveryAdvice_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DeliveryAdvice_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DeliveryAdvice_VersionUpdatedBy, 
            T.VersionDeletedBy AS DeliveryAdvice_VersionDeletedBy, 
            T.VersionOwnerContactID AS DeliveryAdvice_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DeliveryAdvice_VersionOwnerCompanyID, 
            T.VersionUpdated AS DeliveryAdvice_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdvice AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DeliveryAdviceItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView369()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeliveryAdviceItems
        [NKD.Module.BusinessObjects.DeliveryAdviceItem](T1.DeliveryAdviceItem_DeliveryAdviceItemID, T1.DeliveryAdviceItem_DeliveryAdviceID, T1.DeliveryAdviceItem_AssetID, T1.DeliveryAdviceItem_ItemDescription, T1.DeliveryAdviceItem_PartID, T1.DeliveryAdviceItem_QuantitySent, T1.DeliveryAdviceItem_QuantityReceived, T1.DeliveryAdviceItem_ReturnReferenceNumber, T1.DeliveryAdviceItem_ItemInstruction, T1.DeliveryAdviceItem_DecontaminationStatusID, T1.DeliveryAdviceItem_Version, T1.DeliveryAdviceItem_VersionAntecedentID, T1.DeliveryAdviceItem_VersionCertainty, T1.DeliveryAdviceItem_VersionWorkflowInstanceID, T1.DeliveryAdviceItem_VersionUpdatedBy, T1.DeliveryAdviceItem_VersionDeletedBy, T1.DeliveryAdviceItem_VersionOwnerContactID, T1.DeliveryAdviceItem_VersionOwnerCompanyID, T1.DeliveryAdviceItem_VersionUpdated)
    FROM (
        SELECT 
            T.DeliveryAdviceItemID AS DeliveryAdviceItem_DeliveryAdviceItemID, 
            T.DeliveryAdviceID AS DeliveryAdviceItem_DeliveryAdviceID, 
            T.AssetID AS DeliveryAdviceItem_AssetID, 
            T.ItemDescription AS DeliveryAdviceItem_ItemDescription, 
            T.PartID AS DeliveryAdviceItem_PartID, 
            T.QuantitySent AS DeliveryAdviceItem_QuantitySent, 
            T.QuantityReceived AS DeliveryAdviceItem_QuantityReceived, 
            T.ReturnReferenceNumber AS DeliveryAdviceItem_ReturnReferenceNumber, 
            T.ItemInstruction AS DeliveryAdviceItem_ItemInstruction, 
            T.DecontaminationStatusID AS DeliveryAdviceItem_DecontaminationStatusID, 
            T.Version AS DeliveryAdviceItem_Version, 
            T.VersionAntecedentID AS DeliveryAdviceItem_VersionAntecedentID, 
            T.VersionCertainty AS DeliveryAdviceItem_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DeliveryAdviceItem_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DeliveryAdviceItem_VersionUpdatedBy, 
            T.VersionDeletedBy AS DeliveryAdviceItem_VersionDeletedBy, 
            T.VersionOwnerContactID AS DeliveryAdviceItem_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DeliveryAdviceItem_VersionOwnerCompanyID, 
            T.VersionUpdated AS DeliveryAdviceItem_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdviceItem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDecontaminationStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView370()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDecontaminationStatus
        [NKD.Module.BusinessObjects.DictionaryDecontaminationStatus](T1.DictionaryDecontaminationStatus_DecontaminationStatusID, T1.DictionaryDecontaminationStatus_StandardDecontaminationStatusName, T1.DictionaryDecontaminationStatus_CustomDecontaminationStatusName, T1.DictionaryDecontaminationStatus_IsSafeForHandling, T1.DictionaryDecontaminationStatus_Description, T1.DictionaryDecontaminationStatus_Version, T1.DictionaryDecontaminationStatus_VersionAntecedentID, T1.DictionaryDecontaminationStatus_VersionCertainty, T1.DictionaryDecontaminationStatus_VersionWorkflowInstanceID, T1.DictionaryDecontaminationStatus_VersionUpdatedBy, T1.DictionaryDecontaminationStatus_VersionDeletedBy, T1.DictionaryDecontaminationStatus_VersionOwnerContactID, T1.DictionaryDecontaminationStatus_VersionOwnerCompanyID, T1.DictionaryDecontaminationStatus_VersionUpdated)
    FROM (
        SELECT 
            T.DecontaminationStatusID AS DictionaryDecontaminationStatus_DecontaminationStatusID, 
            T.StandardDecontaminationStatusName AS DictionaryDecontaminationStatus_StandardDecontaminationStatusName, 
            T.CustomDecontaminationStatusName AS DictionaryDecontaminationStatus_CustomDecontaminationStatusName, 
            T.IsSafeForHandling AS DictionaryDecontaminationStatus_IsSafeForHandling, 
            T.Description AS DictionaryDecontaminationStatus_Description, 
            T.Version AS DictionaryDecontaminationStatus_Version, 
            T.VersionAntecedentID AS DictionaryDecontaminationStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDecontaminationStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDecontaminationStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDecontaminationStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDecontaminationStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDecontaminationStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDecontaminationStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDecontaminationStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDecontaminationStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDeliveryAdviceReasons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView371()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDeliveryAdviceReasons
        [NKD.Module.BusinessObjects.DictionaryDeliveryAdviceReason](T1.DictionaryDeliveryAdviceReason_DeliveryAdviceReasonID, T1.DictionaryDeliveryAdviceReason_StandardDeliveryAdviceReasonName, T1.DictionaryDeliveryAdviceReason_CustomDeliveryAdviceReasonName, T1.DictionaryDeliveryAdviceReason_Description, T1.DictionaryDeliveryAdviceReason_Version, T1.DictionaryDeliveryAdviceReason_VersionAntecedentID, T1.DictionaryDeliveryAdviceReason_VersionCertainty, T1.DictionaryDeliveryAdviceReason_VersionWorkflowInstanceID, T1.DictionaryDeliveryAdviceReason_VersionUpdatedBy, T1.DictionaryDeliveryAdviceReason_VersionDeletedBy, T1.DictionaryDeliveryAdviceReason_VersionOwnerContactID, T1.DictionaryDeliveryAdviceReason_VersionOwnerCompanyID, T1.DictionaryDeliveryAdviceReason_VersionUpdated)
    FROM (
        SELECT 
            T.DeliveryAdviceReasonID AS DictionaryDeliveryAdviceReason_DeliveryAdviceReasonID, 
            T.StandardDeliveryAdviceReasonName AS DictionaryDeliveryAdviceReason_StandardDeliveryAdviceReasonName, 
            T.CustomDeliveryAdviceReasonName AS DictionaryDeliveryAdviceReason_CustomDeliveryAdviceReasonName, 
            T.Description AS DictionaryDeliveryAdviceReason_Description, 
            T.Version AS DictionaryDeliveryAdviceReason_Version, 
            T.VersionAntecedentID AS DictionaryDeliveryAdviceReason_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDeliveryAdviceReason_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDeliveryAdviceReason_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDeliveryAdviceReason_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDeliveryAdviceReason_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDeliveryAdviceReason_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDeliveryAdviceReason_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDeliveryAdviceReason_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeliveryAdviceReason AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDeviceTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView372()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDeviceTypes
        [NKD.Module.BusinessObjects.DictionaryDeviceType](T1.DictionaryDeviceType_DeviceTypeID, T1.DictionaryDeviceType_ParentDeviceTypeID, T1.DictionaryDeviceType_StandardDeviceTypeName, T1.DictionaryDeviceType_EcriDeviceTypeName, T1.DictionaryDeviceType_CustomDeviceTypeName, T1.DictionaryDeviceType_PrimaryWorkTypeID, T1.DictionaryDeviceType_IsAttributable, T1.DictionaryDeviceType_IsDevice, T1.DictionaryDeviceType_IsPart, T1.DictionaryDeviceType_Description, T1.DictionaryDeviceType_Version, T1.DictionaryDeviceType_VersionAntecedentID, T1.DictionaryDeviceType_VersionCertainty, T1.DictionaryDeviceType_VersionWorkflowInstanceID, T1.DictionaryDeviceType_VersionUpdatedBy, T1.DictionaryDeviceType_VersionDeletedBy, T1.DictionaryDeviceType_VersionOwnerContactID, T1.DictionaryDeviceType_VersionOwnerCompanyID, T1.DictionaryDeviceType_VersionUpdated)
    FROM (
        SELECT 
            T.DeviceTypeID AS DictionaryDeviceType_DeviceTypeID, 
            T.ParentDeviceTypeID AS DictionaryDeviceType_ParentDeviceTypeID, 
            T.StandardDeviceTypeName AS DictionaryDeviceType_StandardDeviceTypeName, 
            T.EcriDeviceTypeName AS DictionaryDeviceType_EcriDeviceTypeName, 
            T.CustomDeviceTypeName AS DictionaryDeviceType_CustomDeviceTypeName, 
            T.PrimaryWorkTypeID AS DictionaryDeviceType_PrimaryWorkTypeID, 
            T.IsAttributable AS DictionaryDeviceType_IsAttributable, 
            T.IsDevice AS DictionaryDeviceType_IsDevice, 
            T.IsPart AS DictionaryDeviceType_IsPart, 
            T.Description AS DictionaryDeviceType_Description, 
            T.Version AS DictionaryDeviceType_Version, 
            T.VersionAntecedentID AS DictionaryDeviceType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDeviceType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDeviceType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDeviceType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDeviceType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDeviceType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDeviceType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDeviceType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeviceType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryEventTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView373()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryEventTypes
        [NKD.Module.BusinessObjects.DictionaryEventType](T1.DictionaryEventType_EventTypeID, T1.DictionaryEventType_StandardEventTypeName, T1.DictionaryEventType_CustomEventTypeName, T1.DictionaryEventType_Description, T1.DictionaryEventType_Version, T1.DictionaryEventType_VersionAntecedentID, T1.DictionaryEventType_VersionCertainty, T1.DictionaryEventType_VersionWorkflowInstanceID, T1.DictionaryEventType_VersionUpdatedBy, T1.DictionaryEventType_VersionDeletedBy, T1.DictionaryEventType_VersionOwnerContactID, T1.DictionaryEventType_VersionOwnerCompanyID, T1.DictionaryEventType_VersionUpdated)
    FROM (
        SELECT 
            T.EventTypeID AS DictionaryEventType_EventTypeID, 
            T.StandardEventTypeName AS DictionaryEventType_StandardEventTypeName, 
            T.CustomEventTypeName AS DictionaryEventType_CustomEventTypeName, 
            T.Description AS DictionaryEventType_Description, 
            T.Version AS DictionaryEventType_Version, 
            T.VersionAntecedentID AS DictionaryEventType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryEventType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryEventType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryEventType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryEventType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryEventType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryEventType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryEventType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryEventType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView374()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryParts
        [NKD.Module.BusinessObjects.DictionaryPart](T1.DictionaryPart_PartID, T1.DictionaryPart_ParentPartID, T1.DictionaryPart_StandardPartName, T1.DictionaryPart_EcriPartName, T1.DictionaryPart_CustomPartName, T1.DictionaryPart_CompanyID, T1.DictionaryPart_OriginalManufacturerName, T1.DictionaryPart_PartStatusID, T1.DictionaryPart_DeviceTypeID, T1.DictionaryPart_ManufacturedFrom, T1.DictionaryPart_ManufacturedUntil, T1.DictionaryPart_SupportedUntil, T1.DictionaryPart_EstimatedLifetimeUnitID, T1.DictionaryPart_EstimatedLifetime, T1.DictionaryPart_Description, T1.DictionaryPart_FullDescription, T1.DictionaryPart_Thumbnail, T1.DictionaryPart_OriginalFileDataID, T1.DictionaryPart_Version, T1.DictionaryPart_VersionAntecedentID, T1.DictionaryPart_VersionCertainty, T1.DictionaryPart_VersionWorkflowInstanceID, T1.DictionaryPart_VersionUpdatedBy, T1.DictionaryPart_VersionDeletedBy, T1.DictionaryPart_VersionOwnerContactID, T1.DictionaryPart_VersionOwnerCompanyID, T1.DictionaryPart_VersionUpdated)
    FROM (
        SELECT 
            T.PartID AS DictionaryPart_PartID, 
            T.ParentPartID AS DictionaryPart_ParentPartID, 
            T.StandardPartName AS DictionaryPart_StandardPartName, 
            T.EcriPartName AS DictionaryPart_EcriPartName, 
            T.CustomPartName AS DictionaryPart_CustomPartName, 
            T.CompanyID AS DictionaryPart_CompanyID, 
            T.OriginalManufacturerName AS DictionaryPart_OriginalManufacturerName, 
            T.PartStatusID AS DictionaryPart_PartStatusID, 
            T.DeviceTypeID AS DictionaryPart_DeviceTypeID, 
            T.ManufacturedFrom AS DictionaryPart_ManufacturedFrom, 
            T.ManufacturedUntil AS DictionaryPart_ManufacturedUntil, 
            T.SupportedUntil AS DictionaryPart_SupportedUntil, 
            T.EstimatedLifetimeUnitID AS DictionaryPart_EstimatedLifetimeUnitID, 
            T.EstimatedLifetime AS DictionaryPart_EstimatedLifetime, 
            T.Description AS DictionaryPart_Description, 
            T.FullDescription AS DictionaryPart_FullDescription, 
            T.Thumbnail AS DictionaryPart_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPart_OriginalFileDataID, 
            T.Version AS DictionaryPart_Version, 
            T.VersionAntecedentID AS DictionaryPart_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPartCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView375()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPartCategories
        [NKD.Module.BusinessObjects.DictionaryPartCategory](T1.DictionaryPartCategory_PartCategoryID, T1.DictionaryPartCategory_PartID, T1.DictionaryPartCategory_CategoryDeviceTypeID, T1.DictionaryPartCategory_Version, T1.DictionaryPartCategory_VersionAntecedentID, T1.DictionaryPartCategory_VersionCertainty, T1.DictionaryPartCategory_VersionWorkflowInstanceID, T1.DictionaryPartCategory_VersionUpdatedBy, T1.DictionaryPartCategory_VersionDeletedBy, T1.DictionaryPartCategory_VersionOwnerContactID, T1.DictionaryPartCategory_VersionOwnerCompanyID, T1.DictionaryPartCategory_VersionUpdated)
    FROM (
        SELECT 
            T.PartCategoryID AS DictionaryPartCategory_PartCategoryID, 
            T.PartID AS DictionaryPartCategory_PartID, 
            T.CategoryDeviceTypeID AS DictionaryPartCategory_CategoryDeviceTypeID, 
            T.Version AS DictionaryPartCategory_Version, 
            T.VersionAntecedentID AS DictionaryPartCategory_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPartCategory_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPartCategory_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPartCategory_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPartCategory_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPartCategory_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPartCategory_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPartCategory_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPartKits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView376()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPartKits
        [NKD.Module.BusinessObjects.DictionaryPartKit](T1.DictionaryPartKit_PartKitID, T1.DictionaryPartKit_StandardPartKitName, T1.DictionaryPartKit_CustomPartKitName, T1.DictionaryPartKit_Description, T1.DictionaryPartKit_Version, T1.DictionaryPartKit_VersionAntecedentID, T1.DictionaryPartKit_VersionCertainty, T1.DictionaryPartKit_VersionWorkflowInstanceID, T1.DictionaryPartKit_VersionUpdatedBy, T1.DictionaryPartKit_VersionDeletedBy, T1.DictionaryPartKit_VersionOwnerContactID, T1.DictionaryPartKit_VersionOwnerCompanyID, T1.DictionaryPartKit_VersionUpdated)
    FROM (
        SELECT 
            T.PartKitID AS DictionaryPartKit_PartKitID, 
            T.StandardPartKitName AS DictionaryPartKit_StandardPartKitName, 
            T.CustomPartKitName AS DictionaryPartKit_CustomPartKitName, 
            T.Description AS DictionaryPartKit_Description, 
            T.Version AS DictionaryPartKit_Version, 
            T.VersionAntecedentID AS DictionaryPartKit_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPartKit_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPartKit_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPartKit_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPartKit_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPartKit_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPartKit_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPartKit_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPartKitItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView377()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPartKitItems
        [NKD.Module.BusinessObjects.DictionaryPartKitItem](T1.DictionaryPartKitItem_PartKitItemID, T1.DictionaryPartKitItem_PartKitID, T1.DictionaryPartKitItem_PartID, T1.DictionaryPartKitItem_UnitID, T1.DictionaryPartKitItem_Quantity, T1.DictionaryPartKitItem_Version, T1.DictionaryPartKitItem_VersionAntecedentID, T1.DictionaryPartKitItem_VersionCertainty, T1.DictionaryPartKitItem_VersionWorkflowInstanceID, T1.DictionaryPartKitItem_VersionUpdatedBy, T1.DictionaryPartKitItem_VersionDeletedBy, T1.DictionaryPartKitItem_VersionOwnerContactID, T1.DictionaryPartKitItem_VersionOwnerCompanyID, T1.DictionaryPartKitItem_VersionUpdated)
    FROM (
        SELECT 
            T.PartKitItemID AS DictionaryPartKitItem_PartKitItemID, 
            T.PartKitID AS DictionaryPartKitItem_PartKitID, 
            T.PartID AS DictionaryPartKitItem_PartID, 
            T.UnitID AS DictionaryPartKitItem_UnitID, 
            T.Quantity AS DictionaryPartKitItem_Quantity, 
            T.Version AS DictionaryPartKitItem_Version, 
            T.VersionAntecedentID AS DictionaryPartKitItem_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPartKitItem_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPartKitItem_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPartKitItem_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPartKitItem_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPartKitItem_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPartKitItem_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPartKitItem_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKitItem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryProcedures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView378()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryProcedures
        [NKD.Module.BusinessObjects.DictionaryProcedure](T1.DictionaryProcedure_ProcedureID, T1.DictionaryProcedure_StandardProcedureName, T1.DictionaryProcedure_CustomProcedureName, T1.DictionaryProcedure_Description, T1.DictionaryProcedure_TaskID, T1.DictionaryProcedure_ModelID, T1.DictionaryProcedure_PartID, T1.DictionaryProcedure_Sequence, T1.DictionaryProcedure_ValidFrom, T1.DictionaryProcedure_ValidUntil, T1.DictionaryProcedure_FileDataID, T1.DictionaryProcedure_CountryID, T1.DictionaryProcedure_CountryStateID, T1.DictionaryProcedure_Place, T1.DictionaryProcedure_LocationID, T1.DictionaryProcedure_ProvinceID, T1.DictionaryProcedure_Version, T1.DictionaryProcedure_VersionAntecedentID, T1.DictionaryProcedure_VersionCertainty, T1.DictionaryProcedure_VersionWorkflowInstanceID, T1.DictionaryProcedure_VersionUpdatedBy, T1.DictionaryProcedure_VersionDeletedBy, T1.DictionaryProcedure_VersionOwnerContactID, T1.DictionaryProcedure_VersionOwnerCompanyID, T1.DictionaryProcedure_VersionUpdated)
    FROM (
        SELECT 
            T.ProcedureID AS DictionaryProcedure_ProcedureID, 
            T.StandardProcedureName AS DictionaryProcedure_StandardProcedureName, 
            T.CustomProcedureName AS DictionaryProcedure_CustomProcedureName, 
            T.Description AS DictionaryProcedure_Description, 
            T.TaskID AS DictionaryProcedure_TaskID, 
            T.ModelID AS DictionaryProcedure_ModelID, 
            T.PartID AS DictionaryProcedure_PartID, 
            T.Sequence AS DictionaryProcedure_Sequence, 
            T.ValidFrom AS DictionaryProcedure_ValidFrom, 
            T.ValidUntil AS DictionaryProcedure_ValidUntil, 
            T.FileDataID AS DictionaryProcedure_FileDataID, 
            T.CountryID AS DictionaryProcedure_CountryID, 
            T.CountryStateID AS DictionaryProcedure_CountryStateID, 
            T.Place AS DictionaryProcedure_Place, 
            T.LocationID AS DictionaryProcedure_LocationID, 
            T.ProvinceID AS DictionaryProcedure_ProvinceID, 
            T.Version AS DictionaryProcedure_Version, 
            T.VersionAntecedentID AS DictionaryProcedure_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryProcedure_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryProcedure_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryProcedure_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryProcedure_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryProcedure_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryProcedure_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryProcedure_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryProcedure AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryWarrantyTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView379()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryWarrantyTypes
        [NKD.Module.BusinessObjects.DictionaryWarrantyType](T1.DictionaryWarrantyType_WarrantyTypeID, T1.DictionaryWarrantyType_StandardWarrantyTypeName, T1.DictionaryWarrantyType_CustomWarrantyTypeName, T1.DictionaryWarrantyType_Description, T1.DictionaryWarrantyType_Version, T1.DictionaryWarrantyType_VersionAntecedentID, T1.DictionaryWarrantyType_VersionCertainty, T1.DictionaryWarrantyType_VersionWorkflowInstanceID, T1.DictionaryWarrantyType_VersionUpdatedBy, T1.DictionaryWarrantyType_VersionDeletedBy, T1.DictionaryWarrantyType_VersionOwnerContactID, T1.DictionaryWarrantyType_VersionOwnerCompanyID, T1.DictionaryWarrantyType_VersionUpdated)
    FROM (
        SELECT 
            T.WarrantyTypeID AS DictionaryWarrantyType_WarrantyTypeID, 
            T.StandardWarrantyTypeName AS DictionaryWarrantyType_StandardWarrantyTypeName, 
            T.CustomWarrantyTypeName AS DictionaryWarrantyType_CustomWarrantyTypeName, 
            T.Description AS DictionaryWarrantyType_Description, 
            T.Version AS DictionaryWarrantyType_Version, 
            T.VersionAntecedentID AS DictionaryWarrantyType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryWarrantyType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryWarrantyType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryWarrantyType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryWarrantyType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryWarrantyType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryWarrantyType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryWarrantyType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryWarrantyType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView380()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelParts
        [NKD.Module.BusinessObjects.ModelPart](T1.ModelPart_ModelPartID, T1.ModelPart_ModelID, T1.ModelPart_PartID, T1.ModelPart_Version, T1.ModelPart_VersionAntecedentID, T1.ModelPart_VersionCertainty, T1.ModelPart_VersionWorkflowInstanceID, T1.ModelPart_VersionUpdatedBy, T1.ModelPart_VersionDeletedBy, T1.ModelPart_VersionOwnerContactID, T1.ModelPart_VersionOwnerCompanyID, T1.ModelPart_VersionUpdated)
    FROM (
        SELECT 
            T.ModelPartID AS ModelPart_ModelPartID, 
            T.ModelID AS ModelPart_ModelID, 
            T.PartID AS ModelPart_PartID, 
            T.Version AS ModelPart_Version, 
            T.VersionAntecedentID AS ModelPart_VersionAntecedentID, 
            T.VersionCertainty AS ModelPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelPartKits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView381()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelPartKits
        [NKD.Module.BusinessObjects.ModelPartKit](T1.ModelPartKit_ModelPartKitID, T1.ModelPartKit_ModelPartID, T1.ModelPartKit_PartKitID, T1.ModelPartKit_Version, T1.ModelPartKit_VersionAntecedentID, T1.ModelPartKit_VersionCertainty, T1.ModelPartKit_VersionWorkflowInstanceID, T1.ModelPartKit_VersionUpdatedBy, T1.ModelPartKit_VersionDeletedBy, T1.ModelPartKit_VersionOwnerContactID, T1.ModelPartKit_VersionOwnerCompanyID, T1.ModelPartKit_VersionUpdated)
    FROM (
        SELECT 
            T.ModelPartKitID AS ModelPartKit_ModelPartKitID, 
            T.ModelPartID AS ModelPartKit_ModelPartID, 
            T.PartKitID AS ModelPartKit_PartKitID, 
            T.Version AS ModelPartKit_Version, 
            T.VersionAntecedentID AS ModelPartKit_VersionAntecedentID, 
            T.VersionCertainty AS ModelPartKit_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelPartKit_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelPartKit_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelPartKit_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelPartKit_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelPartKit_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelPartKit_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelPartKit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelProcedures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView382()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelProcedures
        [NKD.Module.BusinessObjects.ModelProcedure](T1.ModelProcedure_ModelProcedureID, T1.ModelProcedure_ModelID, T1.ModelProcedure_ProcedureID, T1.ModelProcedure_Sequence, T1.ModelProcedure_Frequency, T1.ModelProcedure_FrequencyUnitID, T1.ModelProcedure_RiskFactor, T1.ModelProcedure_Version, T1.ModelProcedure_VersionAntecedentID, T1.ModelProcedure_VersionCertainty, T1.ModelProcedure_VersionWorkflowInstanceID, T1.ModelProcedure_VersionUpdatedBy, T1.ModelProcedure_VersionDeletedBy, T1.ModelProcedure_VersionOwnerContactID, T1.ModelProcedure_VersionOwnerCompanyID, T1.ModelProcedure_VersionUpdated)
    FROM (
        SELECT 
            T.ModelProcedureID AS ModelProcedure_ModelProcedureID, 
            T.ModelID AS ModelProcedure_ModelID, 
            T.ProcedureID AS ModelProcedure_ProcedureID, 
            T.Sequence AS ModelProcedure_Sequence, 
            T.Frequency AS ModelProcedure_Frequency, 
            T.FrequencyUnitID AS ModelProcedure_FrequencyUnitID, 
            T.RiskFactor AS ModelProcedure_RiskFactor, 
            T.Version AS ModelProcedure_Version, 
            T.VersionAntecedentID AS ModelProcedure_VersionAntecedentID, 
            T.VersionCertainty AS ModelProcedure_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelProcedure_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelProcedure_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelProcedure_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelProcedure_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelProcedure_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelProcedure_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedure AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelProcedureTasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView383()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelProcedureTasks
        [NKD.Module.BusinessObjects.ModelProcedureTask](T1.ModelProcedureTask_ModelProcedureTaskID, T1.ModelProcedureTask_ModelProcedureID, T1.ModelProcedureTask_TaskID, T1.ModelProcedureTask_Sequence, T1.ModelProcedureTask_FileDataID, T1.ModelProcedureTask_StatedRevisionNumber, T1.ModelProcedureTask_StatedRevisionPublishDate, T1.ModelProcedureTask_EstimatedDuration, T1.ModelProcedureTask_EstimatedDurationUnitID, T1.ModelProcedureTask_Version, T1.ModelProcedureTask_VersionAntecedentID, T1.ModelProcedureTask_VersionCertainty, T1.ModelProcedureTask_VersionWorkflowInstanceID, T1.ModelProcedureTask_VersionUpdatedBy, T1.ModelProcedureTask_VersionDeletedBy, T1.ModelProcedureTask_VersionOwnerContactID, T1.ModelProcedureTask_VersionOwnerCompanyID, T1.ModelProcedureTask_VersionUpdated)
    FROM (
        SELECT 
            T.ModelProcedureTaskID AS ModelProcedureTask_ModelProcedureTaskID, 
            T.ModelProcedureID AS ModelProcedureTask_ModelProcedureID, 
            T.TaskID AS ModelProcedureTask_TaskID, 
            T.Sequence AS ModelProcedureTask_Sequence, 
            T.FileDataID AS ModelProcedureTask_FileDataID, 
            T.StatedRevisionNumber AS ModelProcedureTask_StatedRevisionNumber, 
            T.StatedRevisionPublishDate AS ModelProcedureTask_StatedRevisionPublishDate, 
            T.EstimatedDuration AS ModelProcedureTask_EstimatedDuration, 
            T.EstimatedDurationUnitID AS ModelProcedureTask_EstimatedDurationUnitID, 
            T.Version AS ModelProcedureTask_Version, 
            T.VersionAntecedentID AS ModelProcedureTask_VersionAntecedentID, 
            T.VersionCertainty AS ModelProcedureTask_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelProcedureTask_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelProcedureTask_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelProcedureTask_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelProcedureTask_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelProcedureTask_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelProcedureTask_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTask AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelProcedureTaskParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView384()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelProcedureTaskParts
        [NKD.Module.BusinessObjects.ModelProcedureTaskPart](T1.ModelProcedureTaskPart_ModelProcedureTaskPartID, T1.ModelProcedureTaskPart_ModelProcedureTaskID, T1.ModelProcedureTaskPart_PartID, T1.ModelProcedureTaskPart_PartQuantity, T1.ModelProcedureTaskPart_Version, T1.ModelProcedureTaskPart_VersionAntecedentID, T1.ModelProcedureTaskPart_VersionCertainty, T1.ModelProcedureTaskPart_VersionWorkflowInstanceID, T1.ModelProcedureTaskPart_VersionUpdatedBy, T1.ModelProcedureTaskPart_VersionDeletedBy, T1.ModelProcedureTaskPart_VersionOwnerContactID, T1.ModelProcedureTaskPart_VersionOwnerCompanyID, T1.ModelProcedureTaskPart_VersionUpdated)
    FROM (
        SELECT 
            T.ModelProcedureTaskPartID AS ModelProcedureTaskPart_ModelProcedureTaskPartID, 
            T.ModelProcedureTaskID AS ModelProcedureTaskPart_ModelProcedureTaskID, 
            T.PartID AS ModelProcedureTaskPart_PartID, 
            T.PartQuantity AS ModelProcedureTaskPart_PartQuantity, 
            T.Version AS ModelProcedureTaskPart_Version, 
            T.VersionAntecedentID AS ModelProcedureTaskPart_VersionAntecedentID, 
            T.VersionCertainty AS ModelProcedureTaskPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelProcedureTaskPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelProcedureTaskPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelProcedureTaskPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelProcedureTaskPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelProcedureTaskPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelProcedureTaskPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTaskPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelScheduleCycles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView385()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelScheduleCycles
        [NKD.Module.BusinessObjects.ModelScheduleCycle](T1.ModelScheduleCycle_ModelScheduleCycleID, T1.ModelScheduleCycle_ModelID, T1.ModelScheduleCycle_ModelProcedureID, T1.ModelScheduleCycle_Sequence, T1.ModelScheduleCycle_ScheduleFrequencyUnitID, T1.ModelScheduleCycle_ScheduleFrequency, T1.ModelScheduleCycle_Version, T1.ModelScheduleCycle_VersionAntecedentID, T1.ModelScheduleCycle_VersionCertainty, T1.ModelScheduleCycle_VersionWorkflowInstanceID, T1.ModelScheduleCycle_VersionUpdatedBy, T1.ModelScheduleCycle_VersionDeletedBy, T1.ModelScheduleCycle_VersionOwnerContactID, T1.ModelScheduleCycle_VersionOwnerCompanyID, T1.ModelScheduleCycle_VersionUpdated)
    FROM (
        SELECT 
            T.ModelScheduleCycleID AS ModelScheduleCycle_ModelScheduleCycleID, 
            T.ModelID AS ModelScheduleCycle_ModelID, 
            T.ModelProcedureID AS ModelScheduleCycle_ModelProcedureID, 
            T.Sequence AS ModelScheduleCycle_Sequence, 
            T.ScheduleFrequencyUnitID AS ModelScheduleCycle_ScheduleFrequencyUnitID, 
            T.ScheduleFrequency AS ModelScheduleCycle_ScheduleFrequency, 
            T.Version AS ModelScheduleCycle_Version, 
            T.VersionAntecedentID AS ModelScheduleCycle_VersionAntecedentID, 
            T.VersionCertainty AS ModelScheduleCycle_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelScheduleCycle_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelScheduleCycle_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelScheduleCycle_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelScheduleCycle_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelScheduleCycle_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelScheduleCycle_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelScheduleCycle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelWarranties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView386()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelWarranties
        [NKD.Module.BusinessObjects.ModelWarranty](T1.ModelWarranty_ModelWarrantyID, T1.ModelWarranty_ModelID, T1.ModelWarranty_WarrantyTypeID, T1.ModelWarranty_WarrantyPeriodUnitID, T1.ModelWarranty_WarrantyPeriod, T1.ModelWarranty_WarrantyExpires, T1.ModelWarranty_WarrantyRenewal, T1.ModelWarranty_SupplierContractID, T1.ModelWarranty_Version, T1.ModelWarranty_VersionAntecedentID, T1.ModelWarranty_VersionCertainty, T1.ModelWarranty_VersionWorkflowInstanceID, T1.ModelWarranty_VersionUpdatedBy, T1.ModelWarranty_VersionDeletedBy, T1.ModelWarranty_VersionOwnerContactID, T1.ModelWarranty_VersionOwnerCompanyID, T1.ModelWarranty_VersionUpdated)
    FROM (
        SELECT 
            T.ModelWarrantyID AS ModelWarranty_ModelWarrantyID, 
            T.ModelID AS ModelWarranty_ModelID, 
            T.WarrantyTypeID AS ModelWarranty_WarrantyTypeID, 
            T.WarrantyPeriodUnitID AS ModelWarranty_WarrantyPeriodUnitID, 
            T.WarrantyPeriod AS ModelWarranty_WarrantyPeriod, 
            T.WarrantyExpires AS ModelWarranty_WarrantyExpires, 
            T.WarrantyRenewal AS ModelWarranty_WarrantyRenewal, 
            T.SupplierContractID AS ModelWarranty_SupplierContractID, 
            T.Version AS ModelWarranty_Version, 
            T.VersionAntecedentID AS ModelWarranty_VersionAntecedentID, 
            T.VersionCertainty AS ModelWarranty_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelWarranty_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelWarranty_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelWarranty_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelWarranty_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelWarranty_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelWarranty_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelWarranty AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView387()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskModels
        [NKD.Module.BusinessObjects.ProjectPlanTaskModel](T1.ProjectPlanTaskModel_ProjectPlanTaskModelID, T1.ProjectPlanTaskModel_ProjectPlanTaskID, T1.ProjectPlanTaskModel_ModelID, T1.ProjectPlanTaskModel_WarehouseModelID, T1.ProjectPlanTaskModel_SupplierModelID, T1.ProjectPlanTaskModel_QuantityUnitID, T1.ProjectPlanTaskModel_QuantityOrdered, T1.ProjectPlanTaskModel_QuantityDespatched, T1.ProjectPlanTaskModel_QuantityReceived, T1.ProjectPlanTaskModel_QuantityUsed, T1.ProjectPlanTaskModel_Used, T1.ProjectPlanTaskModel_Note, T1.ProjectPlanTaskModel_Version, T1.ProjectPlanTaskModel_VersionAntecedentID, T1.ProjectPlanTaskModel_VersionCertainty, T1.ProjectPlanTaskModel_VersionWorkflowInstanceID, T1.ProjectPlanTaskModel_VersionUpdatedBy, T1.ProjectPlanTaskModel_VersionDeletedBy, T1.ProjectPlanTaskModel_VersionOwnerContactID, T1.ProjectPlanTaskModel_VersionOwnerCompanyID, T1.ProjectPlanTaskModel_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPlanTaskModelID AS ProjectPlanTaskModel_ProjectPlanTaskModelID, 
            T.ProjectPlanTaskID AS ProjectPlanTaskModel_ProjectPlanTaskID, 
            T.ModelID AS ProjectPlanTaskModel_ModelID, 
            T.WarehouseModelID AS ProjectPlanTaskModel_WarehouseModelID, 
            T.SupplierModelID AS ProjectPlanTaskModel_SupplierModelID, 
            T.QuantityUnitID AS ProjectPlanTaskModel_QuantityUnitID, 
            T.QuantityOrdered AS ProjectPlanTaskModel_QuantityOrdered, 
            T.QuantityDespatched AS ProjectPlanTaskModel_QuantityDespatched, 
            T.QuantityReceived AS ProjectPlanTaskModel_QuantityReceived, 
            T.QuantityUsed AS ProjectPlanTaskModel_QuantityUsed, 
            T.Used AS ProjectPlanTaskModel_Used, 
            T.Note AS ProjectPlanTaskModel_Note, 
            T.Version AS ProjectPlanTaskModel_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskModel_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView388()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskParts
        [NKD.Module.BusinessObjects.ProjectPlanTaskPart](T1.ProjectPlanTaskPart_ProjectPlanTaskPartID, T1.ProjectPlanTaskPart_ProjectPlanTaskID, T1.ProjectPlanTaskPart_PartID, T1.ProjectPlanTaskPart_WarehousePartID, T1.ProjectPlanTaskPart_SupplierPartID, T1.ProjectPlanTaskPart_QuantityUnitID, T1.ProjectPlanTaskPart_QuantityOrdered, T1.ProjectPlanTaskPart_QuantityDespatched, T1.ProjectPlanTaskPart_QuantityReceived, T1.ProjectPlanTaskPart_QuantityUsed, T1.ProjectPlanTaskPart_Used, T1.ProjectPlanTaskPart_Note, T1.ProjectPlanTaskPart_Version, T1.ProjectPlanTaskPart_VersionAntecedentID, T1.ProjectPlanTaskPart_VersionCertainty, T1.ProjectPlanTaskPart_VersionWorkflowInstanceID, T1.ProjectPlanTaskPart_VersionUpdatedBy, T1.ProjectPlanTaskPart_VersionDeletedBy, T1.ProjectPlanTaskPart_VersionOwnerContactID, T1.ProjectPlanTaskPart_VersionOwnerCompanyID, T1.ProjectPlanTaskPart_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPlanTaskPartID AS ProjectPlanTaskPart_ProjectPlanTaskPartID, 
            T.ProjectPlanTaskID AS ProjectPlanTaskPart_ProjectPlanTaskID, 
            T.PartID AS ProjectPlanTaskPart_PartID, 
            T.WarehousePartID AS ProjectPlanTaskPart_WarehousePartID, 
            T.SupplierPartID AS ProjectPlanTaskPart_SupplierPartID, 
            T.QuantityUnitID AS ProjectPlanTaskPart_QuantityUnitID, 
            T.QuantityOrdered AS ProjectPlanTaskPart_QuantityOrdered, 
            T.QuantityDespatched AS ProjectPlanTaskPart_QuantityDespatched, 
            T.QuantityReceived AS ProjectPlanTaskPart_QuantityReceived, 
            T.QuantityUsed AS ProjectPlanTaskPart_QuantityUsed, 
            T.Used AS ProjectPlanTaskPart_Used, 
            T.Note AS ProjectPlanTaskPart_Note, 
            T.Version AS ProjectPlanTaskPart_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskPart_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Recalls.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView389()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Recalls
        [NKD.Module.BusinessObjects.Recall](T1.Recall_RecallID, T1.Recall_GlobalRecallCode, T1.Recall_GlobalRecallOrigin, T1.Recall_ProjectID, T1.Recall_Issued, T1.Recall_IssuedBy, T1.Recall_Received, T1.Recall_ReceivedBy, T1.Recall_Actioned, T1.Recall_ActionedBy, T1.Recall_ResponsibleContactID, T1.Recall_Description, T1.Recall_Version, T1.Recall_VersionAntecedentID, T1.Recall_VersionCertainty, T1.Recall_VersionWorkflowInstanceID, T1.Recall_VersionUpdatedBy, T1.Recall_VersionDeletedBy, T1.Recall_VersionOwnerContactID, T1.Recall_VersionOwnerCompanyID, T1.Recall_VersionUpdated)
    FROM (
        SELECT 
            T.RecallID AS Recall_RecallID, 
            T.GlobalRecallCode AS Recall_GlobalRecallCode, 
            T.GlobalRecallOrigin AS Recall_GlobalRecallOrigin, 
            T.ProjectID AS Recall_ProjectID, 
            T.Issued AS Recall_Issued, 
            T.IssuedBy AS Recall_IssuedBy, 
            T.Received AS Recall_Received, 
            T.ReceivedBy AS Recall_ReceivedBy, 
            T.Actioned AS Recall_Actioned, 
            T.ActionedBy AS Recall_ActionedBy, 
            T.ResponsibleContactID AS Recall_ResponsibleContactID, 
            T.Description AS Recall_Description, 
            T.Version AS Recall_Version, 
            T.VersionAntecedentID AS Recall_VersionAntecedentID, 
            T.VersionCertainty AS Recall_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Recall_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Recall_VersionUpdatedBy, 
            T.VersionDeletedBy AS Recall_VersionDeletedBy, 
            T.VersionOwnerContactID AS Recall_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Recall_VersionOwnerCompanyID, 
            T.VersionUpdated AS Recall_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_Recall AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.RecallModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView390()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RecallModels
        [NKD.Module.BusinessObjects.RecallModel](T1.RecallModel_RecallModelID, T1.RecallModel_RecallID, T1.RecallModel_ModelID, T1.RecallModel_Description, T1.RecallModel_Version, T1.RecallModel_VersionAntecedentID, T1.RecallModel_VersionCertainty, T1.RecallModel_VersionWorkflowInstanceID, T1.RecallModel_VersionUpdatedBy, T1.RecallModel_VersionDeletedBy, T1.RecallModel_VersionOwnerContactID, T1.RecallModel_VersionOwnerCompanyID, T1.RecallModel_VersionUpdated)
    FROM (
        SELECT 
            T.RecallModelID AS RecallModel_RecallModelID, 
            T.RecallID AS RecallModel_RecallID, 
            T.ModelID AS RecallModel_ModelID, 
            T.Description AS RecallModel_Description, 
            T.Version AS RecallModel_Version, 
            T.VersionAntecedentID AS RecallModel_VersionAntecedentID, 
            T.VersionCertainty AS RecallModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS RecallModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS RecallModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS RecallModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS RecallModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS RecallModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS RecallModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_RecallModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.RecallModelAssets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView391()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RecallModelAssets
        [NKD.Module.BusinessObjects.RecallModelAsset](T1.RecallModelAsset_RecallModelAssetID, T1.RecallModelAsset_RecallModelID, T1.RecallModelAsset_AssetID, T1.RecallModelAsset_ProjectPlanID, T1.RecallModelAsset_Version, T1.RecallModelAsset_VersionAntecedentID, T1.RecallModelAsset_VersionCertainty, T1.RecallModelAsset_VersionWorkflowInstanceID, T1.RecallModelAsset_VersionUpdatedBy, T1.RecallModelAsset_VersionDeletedBy, T1.RecallModelAsset_VersionOwnerContactID, T1.RecallModelAsset_VersionOwnerCompanyID, T1.RecallModelAsset_VersionUpdated)
    FROM (
        SELECT 
            T.RecallModelAssetID AS RecallModelAsset_RecallModelAssetID, 
            T.RecallModelID AS RecallModelAsset_RecallModelID, 
            T.AssetID AS RecallModelAsset_AssetID, 
            T.ProjectPlanID AS RecallModelAsset_ProjectPlanID, 
            T.Version AS RecallModelAsset_Version, 
            T.VersionAntecedentID AS RecallModelAsset_VersionAntecedentID, 
            T.VersionCertainty AS RecallModelAsset_VersionCertainty, 
            T.VersionWorkflowInstanceID AS RecallModelAsset_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS RecallModelAsset_VersionUpdatedBy, 
            T.VersionDeletedBy AS RecallModelAsset_VersionDeletedBy, 
            T.VersionOwnerContactID AS RecallModelAsset_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS RecallModelAsset_VersionOwnerCompanyID, 
            T.VersionUpdated AS RecallModelAsset_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_RecallModelAsset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplierModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView392()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplierModels
        [NKD.Module.BusinessObjects.SupplierModel](T1.SupplierModel_SupplierModelID, T1.SupplierModel_SupplierID, T1.SupplierModel_ModelID, T1.SupplierModel_SupplierContractID, T1.SupplierModel_IsOEM, T1.SupplierModel_OrderQuantityMinimum, T1.SupplierModel_PricePerUnit, T1.SupplierModel_PriceUnitID, T1.SupplierModel_SupplierModelNumber, T1.SupplierModel_SupplierModelDescription, T1.SupplierModel_SupplierFileDataID, T1.SupplierModel_LeadTimeUnitID, T1.SupplierModel_LeadTime, T1.SupplierModel_Version, T1.SupplierModel_VersionAntecedentID, T1.SupplierModel_VersionCertainty, T1.SupplierModel_VersionWorkflowInstanceID, T1.SupplierModel_VersionUpdatedBy, T1.SupplierModel_VersionDeletedBy, T1.SupplierModel_VersionOwnerContactID, T1.SupplierModel_VersionOwnerCompanyID, T1.SupplierModel_VersionUpdated, T1.SupplierModel_Sequence, T1.SupplierModel_CurrencyID)
    FROM (
        SELECT 
            T.SupplierModelID AS SupplierModel_SupplierModelID, 
            T.SupplierID AS SupplierModel_SupplierID, 
            T.ModelID AS SupplierModel_ModelID, 
            T.SupplierContractID AS SupplierModel_SupplierContractID, 
            T.IsOEM AS SupplierModel_IsOEM, 
            T.OrderQuantityMinimum AS SupplierModel_OrderQuantityMinimum, 
            T.PricePerUnit AS SupplierModel_PricePerUnit, 
            T.PriceUnitID AS SupplierModel_PriceUnitID, 
            T.SupplierModelNumber AS SupplierModel_SupplierModelNumber, 
            T.SupplierModelDescription AS SupplierModel_SupplierModelDescription, 
            T.SupplierFileDataID AS SupplierModel_SupplierFileDataID, 
            T.LeadTimeUnitID AS SupplierModel_LeadTimeUnitID, 
            T.LeadTime AS SupplierModel_LeadTime, 
            T.Version AS SupplierModel_Version, 
            T.VersionAntecedentID AS SupplierModel_VersionAntecedentID, 
            T.VersionCertainty AS SupplierModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplierModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplierModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplierModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplierModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplierModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplierModel_VersionUpdated, 
            T.Sequence AS SupplierModel_Sequence, 
            T.CurrencyID AS SupplierModel_CurrencyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_SupplierModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplierParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView393()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplierParts
        [NKD.Module.BusinessObjects.SupplierPart](T1.SupplierPart_SupplierPartID, T1.SupplierPart_SupplierID, T1.SupplierPart_PartID, T1.SupplierPart_SupplierContractID, T1.SupplierPart_IsOEM, T1.SupplierPart_OrderQuantityMinimum, T1.SupplierPart_PricePerUnit, T1.SupplierPart_PriceUnitID, T1.SupplierPart_SupplierPartNumber, T1.SupplierPart_SupplierPartDescription, T1.SupplierPart_SupplierFileDataID, T1.SupplierPart_LeadTimeUnitID, T1.SupplierPart_LeadTime, T1.SupplierPart_Version, T1.SupplierPart_VersionAntecedentID, T1.SupplierPart_VersionCertainty, T1.SupplierPart_VersionWorkflowInstanceID, T1.SupplierPart_VersionUpdatedBy, T1.SupplierPart_VersionDeletedBy, T1.SupplierPart_VersionOwnerContactID, T1.SupplierPart_VersionOwnerCompanyID, T1.SupplierPart_VersionUpdated, T1.SupplierPart_Sequence, T1.SupplierPart_CurrencyID)
    FROM (
        SELECT 
            T.SupplierPartID AS SupplierPart_SupplierPartID, 
            T.SupplierID AS SupplierPart_SupplierID, 
            T.PartID AS SupplierPart_PartID, 
            T.SupplierContractID AS SupplierPart_SupplierContractID, 
            T.IsOEM AS SupplierPart_IsOEM, 
            T.OrderQuantityMinimum AS SupplierPart_OrderQuantityMinimum, 
            T.PricePerUnit AS SupplierPart_PricePerUnit, 
            T.PriceUnitID AS SupplierPart_PriceUnitID, 
            T.SupplierPartNumber AS SupplierPart_SupplierPartNumber, 
            T.SupplierPartDescription AS SupplierPart_SupplierPartDescription, 
            T.SupplierFileDataID AS SupplierPart_SupplierFileDataID, 
            T.LeadTimeUnitID AS SupplierPart_LeadTimeUnitID, 
            T.LeadTime AS SupplierPart_LeadTime, 
            T.Version AS SupplierPart_Version, 
            T.VersionAntecedentID AS SupplierPart_VersionAntecedentID, 
            T.VersionCertainty AS SupplierPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplierPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplierPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplierPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplierPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplierPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplierPart_VersionUpdated, 
            T.Sequence AS SupplierPart_Sequence, 
            T.CurrencyID AS SupplierPart_CurrencyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_SupplierPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Warehouses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView394()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Warehouses
        [NKD.Module.BusinessObjects.Warehouse](T1.Warehouse_WarehouseID, T1.Warehouse_WarehouseName, T1.Warehouse_CompanyID, T1.Warehouse_PrimaryLocationID, T1.Warehouse_Description, T1.Warehouse_Version, T1.Warehouse_VersionAntecedentID, T1.Warehouse_VersionCertainty, T1.Warehouse_VersionWorkflowInstanceID, T1.Warehouse_VersionUpdatedBy, T1.Warehouse_VersionDeletedBy, T1.Warehouse_VersionOwnerContactID, T1.Warehouse_VersionOwnerCompanyID, T1.Warehouse_VersionUpdated)
    FROM (
        SELECT 
            T.WarehouseID AS Warehouse_WarehouseID, 
            T.WarehouseName AS Warehouse_WarehouseName, 
            T.CompanyID AS Warehouse_CompanyID, 
            T.PrimaryLocationID AS Warehouse_PrimaryLocationID, 
            T.Description AS Warehouse_Description, 
            T.Version AS Warehouse_Version, 
            T.VersionAntecedentID AS Warehouse_VersionAntecedentID, 
            T.VersionCertainty AS Warehouse_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Warehouse_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Warehouse_VersionUpdatedBy, 
            T.VersionDeletedBy AS Warehouse_VersionDeletedBy, 
            T.VersionOwnerContactID AS Warehouse_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Warehouse_VersionOwnerCompanyID, 
            T.VersionUpdated AS Warehouse_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_Warehouse AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WarehouseModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView395()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WarehouseModels
        [NKD.Module.BusinessObjects.WarehouseModel](T1.WarehouseModel_WarehouseModelID, T1.WarehouseModel_ModelID, T1.WarehouseModel_WarehouseID, T1.WarehouseModel_IssueCost, T1.WarehouseModel_QuantityOnOrder, T1.WarehouseModel_QuantityInStock, T1.WarehouseModel_QuantityOnHold, T1.WarehouseModel_QuantityReOrderLevel, T1.WarehouseModel_Version, T1.WarehouseModel_VersionAntecedentID, T1.WarehouseModel_VersionCertainty, T1.WarehouseModel_VersionWorkflowInstanceID, T1.WarehouseModel_VersionUpdatedBy, T1.WarehouseModel_VersionDeletedBy, T1.WarehouseModel_VersionOwnerContactID, T1.WarehouseModel_VersionOwnerCompanyID, T1.WarehouseModel_VersionUpdated)
    FROM (
        SELECT 
            T.WarehouseModelID AS WarehouseModel_WarehouseModelID, 
            T.ModelID AS WarehouseModel_ModelID, 
            T.WarehouseID AS WarehouseModel_WarehouseID, 
            T.IssueCost AS WarehouseModel_IssueCost, 
            T.QuantityOnOrder AS WarehouseModel_QuantityOnOrder, 
            T.QuantityInStock AS WarehouseModel_QuantityInStock, 
            T.QuantityOnHold AS WarehouseModel_QuantityOnHold, 
            T.QuantityReOrderLevel AS WarehouseModel_QuantityReOrderLevel, 
            T.Version AS WarehouseModel_Version, 
            T.VersionAntecedentID AS WarehouseModel_VersionAntecedentID, 
            T.VersionCertainty AS WarehouseModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WarehouseModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WarehouseModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS WarehouseModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS WarehouseModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WarehouseModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS WarehouseModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WarehouseModelSuppliers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView396()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WarehouseModelSuppliers
        [NKD.Module.BusinessObjects.WarehouseModelSupplier](T1.WarehouseModelSupplier_WarehouseModelSupplierID, T1.WarehouseModelSupplier_WarehouseModelID, T1.WarehouseModelSupplier_SupplierModelID, T1.WarehouseModelSupplier_QuantityUnitID, T1.WarehouseModelSupplier_QuantityOrdered, T1.WarehouseModelSupplier_Ordered, T1.WarehouseModelSupplier_Received, T1.WarehouseModelSupplier_Version, T1.WarehouseModelSupplier_VersionAntecedentID, T1.WarehouseModelSupplier_VersionCertainty, T1.WarehouseModelSupplier_VersionWorkflowInstanceID, T1.WarehouseModelSupplier_VersionUpdatedBy, T1.WarehouseModelSupplier_VersionDeletedBy, T1.WarehouseModelSupplier_VersionOwnerContactID, T1.WarehouseModelSupplier_VersionOwnerCompanyID, T1.WarehouseModelSupplier_VersionUpdated)
    FROM (
        SELECT 
            T.WarehouseModelSupplierID AS WarehouseModelSupplier_WarehouseModelSupplierID, 
            T.WarehouseModelID AS WarehouseModelSupplier_WarehouseModelID, 
            T.SupplierModelID AS WarehouseModelSupplier_SupplierModelID, 
            T.QuantityUnitID AS WarehouseModelSupplier_QuantityUnitID, 
            T.QuantityOrdered AS WarehouseModelSupplier_QuantityOrdered, 
            T.Ordered AS WarehouseModelSupplier_Ordered, 
            T.Received AS WarehouseModelSupplier_Received, 
            T.Version AS WarehouseModelSupplier_Version, 
            T.VersionAntecedentID AS WarehouseModelSupplier_VersionAntecedentID, 
            T.VersionCertainty AS WarehouseModelSupplier_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WarehouseModelSupplier_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WarehouseModelSupplier_VersionUpdatedBy, 
            T.VersionDeletedBy AS WarehouseModelSupplier_VersionDeletedBy, 
            T.VersionOwnerContactID AS WarehouseModelSupplier_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WarehouseModelSupplier_VersionOwnerCompanyID, 
            T.VersionUpdated AS WarehouseModelSupplier_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModelSupplier AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WarehouseParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView397()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WarehouseParts
        [NKD.Module.BusinessObjects.WarehousePart](T1.WarehousePart_WarehousePartID, T1.WarehousePart_PartID, T1.WarehousePart_WarehouseID, T1.WarehousePart_IssueCost, T1.WarehousePart_QuantityOnOrder, T1.WarehousePart_QuantityInStock, T1.WarehousePart_QuantityOnHold, T1.WarehousePart_QuantityReOrderLevel, T1.WarehousePart_Version, T1.WarehousePart_VersionAntecedentID, T1.WarehousePart_VersionCertainty, T1.WarehousePart_VersionWorkflowInstanceID, T1.WarehousePart_VersionUpdatedBy, T1.WarehousePart_VersionDeletedBy, T1.WarehousePart_VersionOwnerContactID, T1.WarehousePart_VersionOwnerCompanyID, T1.WarehousePart_VersionUpdated)
    FROM (
        SELECT 
            T.WarehousePartID AS WarehousePart_WarehousePartID, 
            T.PartID AS WarehousePart_PartID, 
            T.WarehouseID AS WarehousePart_WarehouseID, 
            T.IssueCost AS WarehousePart_IssueCost, 
            T.QuantityOnOrder AS WarehousePart_QuantityOnOrder, 
            T.QuantityInStock AS WarehousePart_QuantityInStock, 
            T.QuantityOnHold AS WarehousePart_QuantityOnHold, 
            T.QuantityReOrderLevel AS WarehousePart_QuantityReOrderLevel, 
            T.Version AS WarehousePart_Version, 
            T.VersionAntecedentID AS WarehousePart_VersionAntecedentID, 
            T.VersionCertainty AS WarehousePart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WarehousePart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WarehousePart_VersionUpdatedBy, 
            T.VersionDeletedBy AS WarehousePart_VersionDeletedBy, 
            T.VersionOwnerContactID AS WarehousePart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WarehousePart_VersionOwnerCompanyID, 
            T.VersionUpdated AS WarehousePart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_WarehousePart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WarehousePartSuppliers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView398()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WarehousePartSuppliers
        [NKD.Module.BusinessObjects.WarehousePartSupplier](T1.WarehousePartSupplier_WarehousePartSupplierID, T1.WarehousePartSupplier_WarehousePartID, T1.WarehousePartSupplier_SupplierPartID, T1.WarehousePartSupplier_QuantityUnitID, T1.WarehousePartSupplier_QuantityOrdered, T1.WarehousePartSupplier_Ordered, T1.WarehousePartSupplier_Received, T1.WarehousePartSupplier_Version, T1.WarehousePartSupplier_VersionAntecedentID, T1.WarehousePartSupplier_VersionCertainty, T1.WarehousePartSupplier_VersionWorkflowInstanceID, T1.WarehousePartSupplier_VersionUpdatedBy, T1.WarehousePartSupplier_VersionDeletedBy, T1.WarehousePartSupplier_VersionOwnerContactID, T1.WarehousePartSupplier_VersionOwnerCompanyID, T1.WarehousePartSupplier_VersionUpdated)
    FROM (
        SELECT 
            T.WarehousePartSupplierID AS WarehousePartSupplier_WarehousePartSupplierID, 
            T.WarehousePartID AS WarehousePartSupplier_WarehousePartID, 
            T.SupplierPartID AS WarehousePartSupplier_SupplierPartID, 
            T.QuantityUnitID AS WarehousePartSupplier_QuantityUnitID, 
            T.QuantityOrdered AS WarehousePartSupplier_QuantityOrdered, 
            T.Ordered AS WarehousePartSupplier_Ordered, 
            T.Received AS WarehousePartSupplier_Received, 
            T.Version AS WarehousePartSupplier_Version, 
            T.VersionAntecedentID AS WarehousePartSupplier_VersionAntecedentID, 
            T.VersionCertainty AS WarehousePartSupplier_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WarehousePartSupplier_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WarehousePartSupplier_VersionUpdatedBy, 
            T.VersionDeletedBy AS WarehousePartSupplier_VersionDeletedBy, 
            T.VersionOwnerContactID AS WarehousePartSupplier_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WarehousePartSupplier_VersionOwnerCompanyID, 
            T.VersionUpdated AS WarehousePartSupplier_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_WarehousePartSupplier AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WorkflowSchedules.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView399()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WorkflowSchedules
        [NKD.Module.BusinessObjects.WorkflowSchedule](T1.WorkflowSchedule_WorkflowScheduleID, T1.WorkflowSchedule_EventTypeID, T1.WorkflowSchedule_TableType, T1.WorkflowSchedule_ReferenceID, T1.WorkflowSchedule_WorkerID, T1.WorkflowSchedule_WorkflowInstanceID, T1.WorkflowSchedule_Version, T1.WorkflowSchedule_VersionAntecedentID, T1.WorkflowSchedule_VersionCertainty, T1.WorkflowSchedule_VersionWorkflowInstanceID, T1.WorkflowSchedule_VersionUpdatedBy, T1.WorkflowSchedule_VersionDeletedBy, T1.WorkflowSchedule_VersionOwnerContactID, T1.WorkflowSchedule_VersionOwnerCompanyID, T1.WorkflowSchedule_VersionUpdated)
    FROM (
        SELECT 
            T.WorkflowScheduleID AS WorkflowSchedule_WorkflowScheduleID, 
            T.EventTypeID AS WorkflowSchedule_EventTypeID, 
            T.TableType AS WorkflowSchedule_TableType, 
            T.ReferenceID AS WorkflowSchedule_ReferenceID, 
            T.WorkerID AS WorkflowSchedule_WorkerID, 
            T.WorkflowInstanceID AS WorkflowSchedule_WorkflowInstanceID, 
            T.Version AS WorkflowSchedule_Version, 
            T.VersionAntecedentID AS WorkflowSchedule_VersionAntecedentID, 
            T.VersionCertainty AS WorkflowSchedule_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WorkflowSchedule_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WorkflowSchedule_VersionUpdatedBy, 
            T.VersionDeletedBy AS WorkflowSchedule_VersionDeletedBy, 
            T.VersionOwnerContactID AS WorkflowSchedule_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WorkflowSchedule_VersionOwnerCompanyID, 
            T.VersionUpdated AS WorkflowSchedule_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_WorkflowSchedule AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Addresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView400()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Addresses
        [NKD.Module.BusinessObjects.Address](T1.Address_AddressID, T1.Address_AddressName, T1.Address_Street, T1.Address_City, T1.Address_State, T1.Address_Postcode, T1.Address_IsHQ, T1.Address_IsPostBox, T1.Address_Phone, T1.Address_Fax, T1.Address_Email, T1.Address_Mobile, T1.Address_LocationID, T1.Address_Version, T1.Address_VersionAntecedentID, T1.Address_VersionCertainty, T1.Address_VersionWorkflowInstanceID, T1.Address_VersionUpdatedBy, T1.Address_VersionDeletedBy, T1.Address_VersionOwnerContactID, T1.Address_VersionOwnerCompanyID, T1.Address_VersionUpdated, T1.Address_AddressTypeID, T1.Address_IsBusiness, T1.Address_IsHome, T1.Address_Sequence, T1.Address_Extended, T1.Address_Country)
    FROM (
        SELECT 
            T.AddressID AS Address_AddressID, 
            T.AddressName AS Address_AddressName, 
            T.Street AS Address_Street, 
            T.City AS Address_City, 
            T.State AS Address_State, 
            T.Postcode AS Address_Postcode, 
            T.IsHQ AS Address_IsHQ, 
            T.IsPostBox AS Address_IsPostBox, 
            T.Phone AS Address_Phone, 
            T.Fax AS Address_Fax, 
            T.Email AS Address_Email, 
            T.Mobile AS Address_Mobile, 
            T.LocationID AS Address_LocationID, 
            T.Version AS Address_Version, 
            T.VersionAntecedentID AS Address_VersionAntecedentID, 
            T.VersionCertainty AS Address_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Address_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Address_VersionUpdatedBy, 
            T.VersionDeletedBy AS Address_VersionDeletedBy, 
            T.VersionOwnerContactID AS Address_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Address_VersionOwnerCompanyID, 
            T.VersionUpdated AS Address_VersionUpdated, 
            T.AddressTypeID AS Address_AddressTypeID, 
            T.IsBusiness AS Address_IsBusiness, 
            T.IsHome AS Address_IsHome, 
            T.Sequence AS Address_Sequence, 
            T.Extended AS Address_Extended, 
            T.Country AS Address_Country, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Address AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView401()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroups
        [NKD.Module.BusinessObjects.AssayGroup](T1.AssayGroup_AssayGroupID, T1.AssayGroup_ProjectID, T1.AssayGroup_AssayGroupName, T1.AssayGroup_LabCompanyID, T1.AssayGroup_Submitted, T1.AssayGroup_SubmittedContactID, T1.AssayGroup_Received, T1.AssayGroup_ReceivedContactID, T1.AssayGroup_Entered, T1.AssayGroup_EnteredContactID, T1.AssayGroup_Comment, T1.AssayGroup_Version, T1.AssayGroup_VersionAntecedentID, T1.AssayGroup_VersionCertainty, T1.AssayGroup_VersionWorkflowInstanceID, T1.AssayGroup_VersionUpdatedBy, T1.AssayGroup_VersionDeletedBy, T1.AssayGroup_VersionOwnerContactID, T1.AssayGroup_VersionOwnerCompanyID, T1.AssayGroup_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupID AS AssayGroup_AssayGroupID, 
            T.ProjectID AS AssayGroup_ProjectID, 
            T.AssayGroupName AS AssayGroup_AssayGroupName, 
            T.LabCompanyID AS AssayGroup_LabCompanyID, 
            T.Submitted AS AssayGroup_Submitted, 
            T.SubmittedContactID AS AssayGroup_SubmittedContactID, 
            T.Received AS AssayGroup_Received, 
            T.ReceivedContactID AS AssayGroup_ReceivedContactID, 
            T.Entered AS AssayGroup_Entered, 
            T.EnteredContactID AS AssayGroup_EnteredContactID, 
            T.Comment AS AssayGroup_Comment, 
            T.Version AS AssayGroup_Version, 
            T.VersionAntecedentID AS AssayGroup_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroup_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroup_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroup_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroup_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroup_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroup_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroup_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroup AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupStandardTestResults.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView402()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupStandardTestResults
        [NKD.Module.BusinessObjects.AssayGroupStandardTestResult](T1.AssayGroupStandardTestResult_AssayGroupStandardTestResultID, T1.AssayGroupStandardTestResult_AssayGroupTestSampleID, T1.AssayGroupStandardTestResult_AssayGroupTestID, T1.AssayGroupStandardTestResult_AssayStandardID, T1.AssayGroupStandardTestResult_SampleCategoryID, T1.AssayGroupStandardTestResult_SampleStateID, T1.AssayGroupStandardTestResult_SampleTypeID, T1.AssayGroupStandardTestResult_LabResultText, T1.AssayGroupStandardTestResult_LabResult, T1.AssayGroupStandardTestResult_LabBatchNumber, T1.AssayGroupStandardTestResult_Sampled, T1.AssayGroupStandardTestResult_SampledBy, T1.AssayGroupStandardTestResult_Version, T1.AssayGroupStandardTestResult_VersionAntecedentID, T1.AssayGroupStandardTestResult_VersionCertainty, T1.AssayGroupStandardTestResult_VersionWorkflowInstanceID, T1.AssayGroupStandardTestResult_VersionUpdatedBy, T1.AssayGroupStandardTestResult_VersionDeletedBy, T1.AssayGroupStandardTestResult_VersionOwnerContactID, T1.AssayGroupStandardTestResult_VersionOwnerCompanyID, T1.AssayGroupStandardTestResult_VersionUpdated, T1.AssayGroupStandardTestResult_LabSampleName, T1.AssayGroupStandardTestResult_AddressID, T1.AssayGroupStandardTestResult_LabResultMinimum, T1.AssayGroupStandardTestResult_LabResultMaximum)
    FROM (
        SELECT 
            T.AssayGroupStandardTestResultID AS AssayGroupStandardTestResult_AssayGroupStandardTestResultID, 
            T.AssayGroupTestSampleID AS AssayGroupStandardTestResult_AssayGroupTestSampleID, 
            T.AssayGroupTestID AS AssayGroupStandardTestResult_AssayGroupTestID, 
            T.AssayStandardID AS AssayGroupStandardTestResult_AssayStandardID, 
            T.SampleCategoryID AS AssayGroupStandardTestResult_SampleCategoryID, 
            T.SampleStateID AS AssayGroupStandardTestResult_SampleStateID, 
            T.SampleTypeID AS AssayGroupStandardTestResult_SampleTypeID, 
            T.LabResultText AS AssayGroupStandardTestResult_LabResultText, 
            T.LabResult AS AssayGroupStandardTestResult_LabResult, 
            T.LabBatchNumber AS AssayGroupStandardTestResult_LabBatchNumber, 
            T.Sampled AS AssayGroupStandardTestResult_Sampled, 
            T.SampledBy AS AssayGroupStandardTestResult_SampledBy, 
            T.Version AS AssayGroupStandardTestResult_Version, 
            T.VersionAntecedentID AS AssayGroupStandardTestResult_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupStandardTestResult_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupStandardTestResult_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupStandardTestResult_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupStandardTestResult_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupStandardTestResult_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupStandardTestResult_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupStandardTestResult_VersionUpdated, 
            T.LabSampleName AS AssayGroupStandardTestResult_LabSampleName, 
            T.AddressID AS AssayGroupStandardTestResult_AddressID, 
            T.LabResultMinimum AS AssayGroupStandardTestResult_LabResultMinimum, 
            T.LabResultMaximum AS AssayGroupStandardTestResult_LabResultMaximum, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupStandardTestResult AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupTests.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView403()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupTests
        [NKD.Module.BusinessObjects.AssayGroupTest](T1.AssayGroupTest_AssayGroupTestID, T1.AssayGroupTest_AssayGroupID, T1.AssayGroupTest_AssayTypeName, T1.AssayGroupTest_AssayTestName, T1.AssayGroupTest_ParameterID, T1.AssayGroupTest_AssayTestPriority, T1.AssayGroupTest_AssayMethodID, T1.AssayGroupTest_AssayTypeID, T1.AssayGroupTest_Version, T1.AssayGroupTest_VersionAntecedentID, T1.AssayGroupTest_VersionCertainty, T1.AssayGroupTest_VersionWorkflowInstanceID, T1.AssayGroupTest_VersionUpdatedBy, T1.AssayGroupTest_VersionDeletedBy, T1.AssayGroupTest_VersionOwnerContactID, T1.AssayGroupTest_VersionOwnerCompanyID, T1.AssayGroupTest_VersionUpdated, T1.AssayGroupTest_AssayComplianceID, T1.AssayGroupTest_AssayTechniqueID)
    FROM (
        SELECT 
            T.AssayGroupTestID AS AssayGroupTest_AssayGroupTestID, 
            T.AssayGroupID AS AssayGroupTest_AssayGroupID, 
            T.AssayTypeName AS AssayGroupTest_AssayTypeName, 
            T.AssayTestName AS AssayGroupTest_AssayTestName, 
            T.ParameterID AS AssayGroupTest_ParameterID, 
            T.AssayTestPriority AS AssayGroupTest_AssayTestPriority, 
            T.AssayMethodID AS AssayGroupTest_AssayMethodID, 
            T.AssayTypeID AS AssayGroupTest_AssayTypeID, 
            T.Version AS AssayGroupTest_Version, 
            T.VersionAntecedentID AS AssayGroupTest_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupTest_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupTest_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupTest_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupTest_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupTest_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupTest_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupTest_VersionUpdated, 
            T.AssayComplianceID AS AssayGroupTest_AssayComplianceID, 
            T.AssayTechniqueID AS AssayGroupTest_AssayTechniqueID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTest AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupTestResults.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView404()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupTestResults
        [NKD.Module.BusinessObjects.AssayGroupTestResult](T1.AssayGroupTestResult_AssayGroupTestResultID, T1.AssayGroupTestResult_SampleID, T1.AssayGroupTestResult_AssayGroupTestID, T1.AssayGroupTestResult_LabResultText, T1.AssayGroupTestResult_LabResult, T1.AssayGroupTestResult_LabBatchNumber, T1.AssayGroupTestResult_Sampled, T1.AssayGroupTestResult_SampledBy, T1.AssayGroupTestResult_Version, T1.AssayGroupTestResult_VersionAntecedentID, T1.AssayGroupTestResult_VersionCertainty, T1.AssayGroupTestResult_VersionWorkflowInstanceID, T1.AssayGroupTestResult_VersionUpdatedBy, T1.AssayGroupTestResult_VersionDeletedBy, T1.AssayGroupTestResult_VersionOwnerContactID, T1.AssayGroupTestResult_VersionOwnerCompanyID, T1.AssayGroupTestResult_VersionUpdated, T1.AssayGroupTestResult_AssayGroupSubsampleID, T1.AssayGroupTestResult_LabSampleName, T1.AssayGroupTestResult_LabResultMinimum, T1.AssayGroupTestResult_LabResultMaximum)
    FROM (
        SELECT 
            T.AssayGroupTestResultID AS AssayGroupTestResult_AssayGroupTestResultID, 
            T.SampleID AS AssayGroupTestResult_SampleID, 
            T.AssayGroupTestID AS AssayGroupTestResult_AssayGroupTestID, 
            T.LabResultText AS AssayGroupTestResult_LabResultText, 
            T.LabResult AS AssayGroupTestResult_LabResult, 
            T.LabBatchNumber AS AssayGroupTestResult_LabBatchNumber, 
            T.Sampled AS AssayGroupTestResult_Sampled, 
            T.SampledBy AS AssayGroupTestResult_SampledBy, 
            T.Version AS AssayGroupTestResult_Version, 
            T.VersionAntecedentID AS AssayGroupTestResult_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupTestResult_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupTestResult_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupTestResult_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupTestResult_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupTestResult_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupTestResult_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupTestResult_VersionUpdated, 
            T.AssayGroupSubsampleID AS AssayGroupTestResult_AssayGroupSubsampleID, 
            T.LabSampleName AS AssayGroupTestResult_LabSampleName, 
            T.LabResultMinimum AS AssayGroupTestResult_LabResultMinimum, 
            T.LabResultMaximum AS AssayGroupTestResult_LabResultMaximum, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResult AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupTestResultComments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView405()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupTestResultComments
        [NKD.Module.BusinessObjects.AssayGroupTestResultComment](T1.AssayGroupTestResultComment_AssayGroupTestResultCommentID, T1.AssayGroupTestResultComment_AssayGroupTestResultID, T1.AssayGroupTestResultComment_Comment, T1.AssayGroupTestResultComment_Version, T1.AssayGroupTestResultComment_VersionAntecedentID, T1.AssayGroupTestResultComment_VersionCertainty, T1.AssayGroupTestResultComment_VersionWorkflowInstanceID, T1.AssayGroupTestResultComment_VersionUpdatedBy, T1.AssayGroupTestResultComment_VersionDeletedBy, T1.AssayGroupTestResultComment_VersionOwnerContactID, T1.AssayGroupTestResultComment_VersionOwnerCompanyID, T1.AssayGroupTestResultComment_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupTestResultCommentID AS AssayGroupTestResultComment_AssayGroupTestResultCommentID, 
            T.AssayGroupTestResultID AS AssayGroupTestResultComment_AssayGroupTestResultID, 
            T.Comment AS AssayGroupTestResultComment_Comment, 
            T.Version AS AssayGroupTestResultComment_Version, 
            T.VersionAntecedentID AS AssayGroupTestResultComment_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupTestResultComment_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupTestResultComment_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupTestResultComment_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupTestResultComment_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupTestResultComment_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupTestResultComment_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupTestResultComment_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultComment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupTestResultDuplicates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView406()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupTestResultDuplicates
        [NKD.Module.BusinessObjects.AssayGroupTestResultDuplicate](T1.AssayGroupTestResultDuplicate_AssayGroupTestResultDuplicateID, T1.AssayGroupTestResultDuplicate_AssayGroupTestResultID, T1.AssayGroupTestResultDuplicate_LabResultText, T1.AssayGroupTestResultDuplicate_LabResult, T1.AssayGroupTestResultDuplicate_LabBatchNumber, T1.AssayGroupTestResultDuplicate_Sampled, T1.AssayGroupTestResultDuplicate_SampledBy, T1.AssayGroupTestResultDuplicate_Version, T1.AssayGroupTestResultDuplicate_VersionAntecedentID, T1.AssayGroupTestResultDuplicate_VersionCertainty, T1.AssayGroupTestResultDuplicate_VersionWorkflowInstanceID, T1.AssayGroupTestResultDuplicate_VersionUpdatedBy, T1.AssayGroupTestResultDuplicate_VersionDeletedBy, T1.AssayGroupTestResultDuplicate_VersionOwnerContactID, T1.AssayGroupTestResultDuplicate_VersionOwnerCompanyID, T1.AssayGroupTestResultDuplicate_VersionUpdated, T1.AssayGroupTestResultDuplicate_LabSampleName, T1.AssayGroupTestResultDuplicate_LabResultMinimum, T1.AssayGroupTestResultDuplicate_LabResultMaximum)
    FROM (
        SELECT 
            T.AssayGroupTestResultDuplicateID AS AssayGroupTestResultDuplicate_AssayGroupTestResultDuplicateID, 
            T.AssayGroupTestResultID AS AssayGroupTestResultDuplicate_AssayGroupTestResultID, 
            T.LabResultText AS AssayGroupTestResultDuplicate_LabResultText, 
            T.LabResult AS AssayGroupTestResultDuplicate_LabResult, 
            T.LabBatchNumber AS AssayGroupTestResultDuplicate_LabBatchNumber, 
            T.Sampled AS AssayGroupTestResultDuplicate_Sampled, 
            T.SampledBy AS AssayGroupTestResultDuplicate_SampledBy, 
            T.Version AS AssayGroupTestResultDuplicate_Version, 
            T.VersionAntecedentID AS AssayGroupTestResultDuplicate_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupTestResultDuplicate_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupTestResultDuplicate_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupTestResultDuplicate_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupTestResultDuplicate_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupTestResultDuplicate_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupTestResultDuplicate_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupTestResultDuplicate_VersionUpdated, 
            T.LabSampleName AS AssayGroupTestResultDuplicate_LabSampleName, 
            T.LabResultMinimum AS AssayGroupTestResultDuplicate_LabResultMinimum, 
            T.LabResultMaximum AS AssayGroupTestResultDuplicate_LabResultMaximum, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultDuplicate AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.BlockModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView407()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BlockModels
        [NKD.Module.BusinessObjects.BlockModel](T1.BlockModel_BlockModelID, T1.BlockModel_ProjectID, T1.BlockModel_Alias, T1.BlockModel_OriginX, T1.BlockModel_OriginY, T1.BlockModel_OriginZ, T1.BlockModel_IsIJKCalculated, T1.BlockModel_OriginI, T1.BlockModel_OriginJ, T1.BlockModel_OriginK, T1.BlockModel_MaximumI, T1.BlockModel_MaximumJ, T1.BlockModel_MaximumK, T1.BlockModel_MinimumI, T1.BlockModel_MinimumJ, T1.BlockModel_MinimumK, T1.BlockModel_DimensionEasting, T1.BlockModel_DimensionNorthing, T1.BlockModel_DimensionElevation, T1.BlockModel_IsOriginNorthPositive, T1.BlockModel_IsOriginEastPositive, T1.BlockModel_IsOriginElevationUpwardsPositive, T1.BlockModel_CubeCentroid0OriginOffsetX, T1.BlockModel_CubeCentroid0OriginOffsetY, T1.BlockModel_CubeCentroid0OriginOffsetZ, T1.BlockModel_UnitIJK, T1.BlockModel_DefaultISize, T1.BlockModel_DefaultJSize, T1.BlockModel_DefaultKSize, T1.BlockModel_AuthorContactID, T1.BlockModel_ResponsibleContactID, T1.BlockModel_ApproverContactID, T1.BlockModel_ExternalReviewerContactID, T1.BlockModel_Version, T1.BlockModel_VersionAntecedentID, T1.BlockModel_VersionCertainty, T1.BlockModel_VersionWorkflowInstanceID, T1.BlockModel_VersionUpdatedBy, T1.BlockModel_VersionDeletedBy, T1.BlockModel_VersionOwnerContactID, T1.BlockModel_VersionOwnerCompanyID, T1.BlockModel_VersionUpdated)
    FROM (
        SELECT 
            T.BlockModelID AS BlockModel_BlockModelID, 
            T.ProjectID AS BlockModel_ProjectID, 
            T.Alias AS BlockModel_Alias, 
            T.OriginX AS BlockModel_OriginX, 
            T.OriginY AS BlockModel_OriginY, 
            T.OriginZ AS BlockModel_OriginZ, 
            T.IsIJKCalculated AS BlockModel_IsIJKCalculated, 
            T.OriginI AS BlockModel_OriginI, 
            T.OriginJ AS BlockModel_OriginJ, 
            T.OriginK AS BlockModel_OriginK, 
            T.MaximumI AS BlockModel_MaximumI, 
            T.MaximumJ AS BlockModel_MaximumJ, 
            T.MaximumK AS BlockModel_MaximumK, 
            T.MinimumI AS BlockModel_MinimumI, 
            T.MinimumJ AS BlockModel_MinimumJ, 
            T.MinimumK AS BlockModel_MinimumK, 
            T.DimensionEasting AS BlockModel_DimensionEasting, 
            T.DimensionNorthing AS BlockModel_DimensionNorthing, 
            T.DimensionElevation AS BlockModel_DimensionElevation, 
            T.IsOriginNorthPositive AS BlockModel_IsOriginNorthPositive, 
            T.IsOriginEastPositive AS BlockModel_IsOriginEastPositive, 
            T.IsOriginElevationUpwardsPositive AS BlockModel_IsOriginElevationUpwardsPositive, 
            T.CubeCentroid0OriginOffsetX AS BlockModel_CubeCentroid0OriginOffsetX, 
            T.CubeCentroid0OriginOffsetY AS BlockModel_CubeCentroid0OriginOffsetY, 
            T.CubeCentroid0OriginOffsetZ AS BlockModel_CubeCentroid0OriginOffsetZ, 
            T.UnitIJK AS BlockModel_UnitIJK, 
            T.DefaultISize AS BlockModel_DefaultISize, 
            T.DefaultJSize AS BlockModel_DefaultJSize, 
            T.DefaultKSize AS BlockModel_DefaultKSize, 
            T.AuthorContactID AS BlockModel_AuthorContactID, 
            T.ResponsibleContactID AS BlockModel_ResponsibleContactID, 
            T.ApproverContactID AS BlockModel_ApproverContactID, 
            T.ExternalReviewerContactID AS BlockModel_ExternalReviewerContactID, 
            T.Version AS BlockModel_Version, 
            T.VersionAntecedentID AS BlockModel_VersionAntecedentID, 
            T.VersionCertainty AS BlockModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS BlockModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS BlockModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS BlockModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS BlockModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS BlockModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS BlockModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_BlockModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.BlockModelBlocks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView408()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BlockModelBlocks
        [NKD.Module.BusinessObjects.BlockModelBlock](T1.BlockModelBlock_BlockModelBlockID, T1.BlockModelBlock_BlockModelID, T1.BlockModelBlock_Domain, T1.BlockModelBlock_I, T1.BlockModelBlock_J, T1.BlockModelBlock_K, T1.BlockModelBlock_CentroidX, T1.BlockModelBlock_CentroidY, T1.BlockModelBlock_CentroidZ, T1.BlockModelBlock_LengthX, T1.BlockModelBlock_LengthY, T1.BlockModelBlock_LengthZ, T1.BlockModelBlock_MinimumSamples, T1.BlockModelBlock_MaximumSamples, T1.BlockModelBlock_EstimationTechnique, T1.BlockModelBlock_KrigingEfficiency, T1.BlockModelBlock_KrigingError, T1.BlockModelBlock_KrigingVariance, T1.BlockModelBlock_SlopeOfRegression, T1.BlockModelBlock_Density, T1.BlockModelBlock_ResourceCategory, T1.BlockModelBlock_Numeric1, T1.BlockModelBlock_Numeric2, T1.BlockModelBlock_Numeric3, T1.BlockModelBlock_Numeric4, T1.BlockModelBlock_Numeric5, T1.BlockModelBlock_Numeric6, T1.BlockModelBlock_Numeric7, T1.BlockModelBlock_Numeric8, T1.BlockModelBlock_Numeric9, T1.BlockModelBlock_Numeric10, T1.BlockModelBlock_Numeric11, T1.BlockModelBlock_Numeric12, T1.BlockModelBlock_Numeric13, T1.BlockModelBlock_Numeric14, T1.BlockModelBlock_Numeric15, T1.BlockModelBlock_Numeric16, T1.BlockModelBlock_Numeric17, T1.BlockModelBlock_Numeric18, T1.BlockModelBlock_Numeric19, T1.BlockModelBlock_Numeric20, T1.BlockModelBlock_Numeric21, T1.BlockModelBlock_Numeric22, T1.BlockModelBlock_Numeric23, T1.BlockModelBlock_Numeric24, T1.BlockModelBlock_Numeric25, T1.BlockModelBlock_Numeric26, T1.BlockModelBlock_Numeric27, T1.BlockModelBlock_Numeric28, T1.BlockModelBlock_Numeric29, T1.BlockModelBlock_Numeric30, T1.BlockModelBlock_Numeric31, T1.BlockModelBlock_String1, T1.BlockModelBlock_String2, T1.BlockModelBlock_String3, T1.BlockModelBlock_String4, T1.BlockModelBlock_String5, T1.BlockModelBlock_String6, T1.BlockModelBlock_String7, T1.BlockModelBlock_String8, T1.BlockModelBlock_String9, T1.BlockModelBlock_String10, T1.BlockModelBlock_String11, T1.BlockModelBlock_Version, T1.BlockModelBlock_VersionAntecedentID, T1.BlockModelBlock_VersionCertainty, T1.BlockModelBlock_VersionWorkflowInstanceID, T1.BlockModelBlock_VersionUpdatedBy, T1.BlockModelBlock_VersionDeletedBy, T1.BlockModelBlock_VersionOwnerContactID, T1.BlockModelBlock_VersionOwnerCompanyID, T1.BlockModelBlock_VersionUpdated)
    FROM (
        SELECT 
            T.BlockModelBlockID AS BlockModelBlock_BlockModelBlockID, 
            T.BlockModelID AS BlockModelBlock_BlockModelID, 
            T.Domain AS BlockModelBlock_Domain, 
            T.I AS BlockModelBlock_I, 
            T.J AS BlockModelBlock_J, 
            T.K AS BlockModelBlock_K, 
            T.CentroidX AS BlockModelBlock_CentroidX, 
            T.CentroidY AS BlockModelBlock_CentroidY, 
            T.CentroidZ AS BlockModelBlock_CentroidZ, 
            T.LengthX AS BlockModelBlock_LengthX, 
            T.LengthY AS BlockModelBlock_LengthY, 
            T.LengthZ AS BlockModelBlock_LengthZ, 
            T.MinimumSamples AS BlockModelBlock_MinimumSamples, 
            T.MaximumSamples AS BlockModelBlock_MaximumSamples, 
            T.EstimationTechnique AS BlockModelBlock_EstimationTechnique, 
            T.KrigingEfficiency AS BlockModelBlock_KrigingEfficiency, 
            T.KrigingError AS BlockModelBlock_KrigingError, 
            T.KrigingVariance AS BlockModelBlock_KrigingVariance, 
            T.SlopeOfRegression AS BlockModelBlock_SlopeOfRegression, 
            T.Density AS BlockModelBlock_Density, 
            T.ResourceCategory AS BlockModelBlock_ResourceCategory, 
            T.Numeric1 AS BlockModelBlock_Numeric1, 
            T.Numeric2 AS BlockModelBlock_Numeric2, 
            T.Numeric3 AS BlockModelBlock_Numeric3, 
            T.Numeric4 AS BlockModelBlock_Numeric4, 
            T.Numeric5 AS BlockModelBlock_Numeric5, 
            T.Numeric6 AS BlockModelBlock_Numeric6, 
            T.Numeric7 AS BlockModelBlock_Numeric7, 
            T.Numeric8 AS BlockModelBlock_Numeric8, 
            T.Numeric9 AS BlockModelBlock_Numeric9, 
            T.Numeric10 AS BlockModelBlock_Numeric10, 
            T.Numeric11 AS BlockModelBlock_Numeric11, 
            T.Numeric12 AS BlockModelBlock_Numeric12, 
            T.Numeric13 AS BlockModelBlock_Numeric13, 
            T.Numeric14 AS BlockModelBlock_Numeric14, 
            T.Numeric15 AS BlockModelBlock_Numeric15, 
            T.Numeric16 AS BlockModelBlock_Numeric16, 
            T.Numeric17 AS BlockModelBlock_Numeric17, 
            T.Numeric18 AS BlockModelBlock_Numeric18, 
            T.Numeric19 AS BlockModelBlock_Numeric19, 
            T.Numeric20 AS BlockModelBlock_Numeric20, 
            T.Numeric21 AS BlockModelBlock_Numeric21, 
            T.Numeric22 AS BlockModelBlock_Numeric22, 
            T.Numeric23 AS BlockModelBlock_Numeric23, 
            T.Numeric24 AS BlockModelBlock_Numeric24, 
            T.Numeric25 AS BlockModelBlock_Numeric25, 
            T.Numeric26 AS BlockModelBlock_Numeric26, 
            T.Numeric27 AS BlockModelBlock_Numeric27, 
            T.Numeric28 AS BlockModelBlock_Numeric28, 
            T.Numeric29 AS BlockModelBlock_Numeric29, 
            T.Numeric30 AS BlockModelBlock_Numeric30, 
            T.Numeric31 AS BlockModelBlock_Numeric31, 
            T.String1 AS BlockModelBlock_String1, 
            T.String2 AS BlockModelBlock_String2, 
            T.String3 AS BlockModelBlock_String3, 
            T.String4 AS BlockModelBlock_String4, 
            T.String5 AS BlockModelBlock_String5, 
            T.String6 AS BlockModelBlock_String6, 
            T.String7 AS BlockModelBlock_String7, 
            T.String8 AS BlockModelBlock_String8, 
            T.String9 AS BlockModelBlock_String9, 
            T.String10 AS BlockModelBlock_String10, 
            T.String11 AS BlockModelBlock_String11, 
            T.Version AS BlockModelBlock_Version, 
            T.VersionAntecedentID AS BlockModelBlock_VersionAntecedentID, 
            T.VersionCertainty AS BlockModelBlock_VersionCertainty, 
            T.VersionWorkflowInstanceID AS BlockModelBlock_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS BlockModelBlock_VersionUpdatedBy, 
            T.VersionDeletedBy AS BlockModelBlock_VersionDeletedBy, 
            T.VersionOwnerContactID AS BlockModelBlock_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS BlockModelBlock_VersionOwnerCompanyID, 
            T.VersionUpdated AS BlockModelBlock_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlock AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.BlockModelBlockDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView409()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BlockModelBlockDatas
        [NKD.Module.BusinessObjects.BlockModelBlockData](T1.BlockModelBlockData_BlockModelBlockDataID, T1.BlockModelBlockData_BlockModelID, T1.BlockModelBlockData_BlockModelBlockID, T1.BlockModelBlockData_ParameterID, T1.BlockModelBlockData_BlockModelBlockDataText, T1.BlockModelBlockData_BlockModelBlockDataValue, T1.BlockModelBlockData_Version, T1.BlockModelBlockData_VersionAntecedentID, T1.BlockModelBlockData_VersionCertainty, T1.BlockModelBlockData_VersionWorkflowInstanceID, T1.BlockModelBlockData_VersionUpdatedBy, T1.BlockModelBlockData_VersionDeletedBy, T1.BlockModelBlockData_VersionOwnerContactID, T1.BlockModelBlockData_VersionOwnerCompanyID, T1.BlockModelBlockData_VersionUpdated)
    FROM (
        SELECT 
            T.BlockModelBlockDataID AS BlockModelBlockData_BlockModelBlockDataID, 
            T.BlockModelID AS BlockModelBlockData_BlockModelID, 
            T.BlockModelBlockID AS BlockModelBlockData_BlockModelBlockID, 
            T.ParameterID AS BlockModelBlockData_ParameterID, 
            T.BlockModelBlockDataText AS BlockModelBlockData_BlockModelBlockDataText, 
            T.BlockModelBlockDataValue AS BlockModelBlockData_BlockModelBlockDataValue, 
            T.Version AS BlockModelBlockData_Version, 
            T.VersionAntecedentID AS BlockModelBlockData_VersionAntecedentID, 
            T.VersionCertainty AS BlockModelBlockData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS BlockModelBlockData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS BlockModelBlockData_VersionUpdatedBy, 
            T.VersionDeletedBy AS BlockModelBlockData_VersionDeletedBy, 
            T.VersionOwnerContactID AS BlockModelBlockData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS BlockModelBlockData_VersionOwnerCompanyID, 
            T.VersionUpdated AS BlockModelBlockData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlockData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.BlockModelMetadatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView410()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BlockModelMetadatas
        [NKD.Module.BusinessObjects.BlockModelMetadata](T1.BlockModelMetadata_BlockModelMetadataID, T1.BlockModelMetadata_BlockModelID, T1.BlockModelMetadata_ParameterID, T1.BlockModelMetadata_IsColumnData, T1.BlockModelMetadata_BlockModelMetadataText, T1.BlockModelMetadata_BlockModelMetadataValue, T1.BlockModelMetadata_Version, T1.BlockModelMetadata_VersionAntecedentID, T1.BlockModelMetadata_VersionCertainty, T1.BlockModelMetadata_VersionWorkflowInstanceID, T1.BlockModelMetadata_VersionUpdatedBy, T1.BlockModelMetadata_VersionDeletedBy, T1.BlockModelMetadata_VersionOwnerContactID, T1.BlockModelMetadata_VersionOwnerCompanyID, T1.BlockModelMetadata_VersionUpdated)
    FROM (
        SELECT 
            T.BlockModelMetadataID AS BlockModelMetadata_BlockModelMetadataID, 
            T.BlockModelID AS BlockModelMetadata_BlockModelID, 
            T.ParameterID AS BlockModelMetadata_ParameterID, 
            T.IsColumnData AS BlockModelMetadata_IsColumnData, 
            T.BlockModelMetadataText AS BlockModelMetadata_BlockModelMetadataText, 
            T.BlockModelMetadataValue AS BlockModelMetadata_BlockModelMetadataValue, 
            T.Version AS BlockModelMetadata_Version, 
            T.VersionAntecedentID AS BlockModelMetadata_VersionAntecedentID, 
            T.VersionCertainty AS BlockModelMetadata_VersionCertainty, 
            T.VersionWorkflowInstanceID AS BlockModelMetadata_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS BlockModelMetadata_VersionUpdatedBy, 
            T.VersionDeletedBy AS BlockModelMetadata_VersionDeletedBy, 
            T.VersionOwnerContactID AS BlockModelMetadata_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS BlockModelMetadata_VersionOwnerCompanyID, 
            T.VersionUpdated AS BlockModelMetadata_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_BlockModelMetadata AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Casings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView411()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Casings
        [NKD.Module.BusinessObjects.Casing](T1.Casing_CasingID, T1.Casing_HeaderID, T1.Casing_FromDepth, T1.Casing_ToDepth, T1.Casing_CasingTypeID, T1.Casing_CasingSize, T1.Casing_CasingSizeUnit, T1.Casing_CasingInsideData, T1.Casing_CasingInsideDataUnit, T1.Casing_CasingOutsideData, T1.Casing_CasingOutsideDataUnit, T1.Casing_LengthRecovered, T1.Casing_Comment, T1.Casing_Version, T1.Casing_VersionAntecedentID, T1.Casing_VersionCertainty, T1.Casing_VersionWorkflowInstanceID, T1.Casing_VersionUpdatedBy, T1.Casing_VersionDeletedBy, T1.Casing_VersionOwnerContactID, T1.Casing_VersionOwnerCompanyID, T1.Casing_VersionUpdated)
    FROM (
        SELECT 
            T.CasingID AS Casing_CasingID, 
            T.HeaderID AS Casing_HeaderID, 
            T.FromDepth AS Casing_FromDepth, 
            T.ToDepth AS Casing_ToDepth, 
            T.CasingTypeID AS Casing_CasingTypeID, 
            T.CasingSize AS Casing_CasingSize, 
            T.CasingSizeUnit AS Casing_CasingSizeUnit, 
            T.CasingInsideData AS Casing_CasingInsideData, 
            T.CasingInsideDataUnit AS Casing_CasingInsideDataUnit, 
            T.CasingOutsideData AS Casing_CasingOutsideData, 
            T.CasingOutsideDataUnit AS Casing_CasingOutsideDataUnit, 
            T.LengthRecovered AS Casing_LengthRecovered, 
            T.Comment AS Casing_Comment, 
            T.Version AS Casing_Version, 
            T.VersionAntecedentID AS Casing_VersionAntecedentID, 
            T.VersionCertainty AS Casing_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Casing_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Casing_VersionUpdatedBy, 
            T.VersionDeletedBy AS Casing_VersionDeletedBy, 
            T.VersionOwnerContactID AS Casing_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Casing_VersionOwnerCompanyID, 
            T.VersionUpdated AS Casing_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Casing AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Cementings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView412()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cementings
        [NKD.Module.BusinessObjects.Cementing](T1.Cementing_CementingID, T1.Cementing_HeaderID, T1.Cementing_FromDepth, T1.Cementing_ToDepth, T1.Cementing_CementingDate, T1.Cementing_Volume, T1.Cementing_Comment, T1.Cementing_Version, T1.Cementing_VersionAntecedentID, T1.Cementing_VersionCertainty, T1.Cementing_VersionWorkflowInstanceID, T1.Cementing_VersionUpdatedBy, T1.Cementing_VersionDeletedBy, T1.Cementing_VersionOwnerContactID, T1.Cementing_VersionOwnerCompanyID, T1.Cementing_VersionUpdated)
    FROM (
        SELECT 
            T.CementingID AS Cementing_CementingID, 
            T.HeaderID AS Cementing_HeaderID, 
            T.FromDepth AS Cementing_FromDepth, 
            T.ToDepth AS Cementing_ToDepth, 
            T.CementingDate AS Cementing_CementingDate, 
            T.Volume AS Cementing_Volume, 
            T.Comment AS Cementing_Comment, 
            T.Version AS Cementing_Version, 
            T.VersionAntecedentID AS Cementing_VersionAntecedentID, 
            T.VersionCertainty AS Cementing_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Cementing_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Cementing_VersionUpdatedBy, 
            T.VersionDeletedBy AS Cementing_VersionDeletedBy, 
            T.VersionOwnerContactID AS Cementing_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Cementing_VersionOwnerCompanyID, 
            T.VersionUpdated AS Cementing_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Cementing AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Companies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView413()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Companies
        [NKD.Module.BusinessObjects.Company](T1.Company_CompanyID, T1.Company_CompanyName, T1.Company_CountryID, T1.Company_PrimaryContactID, T1.Company_Comment, T1.Company_Version, T1.Company_VersionAntecedentID, T1.Company_VersionCertainty, T1.Company_VersionWorkflowInstanceID, T1.Company_VersionUpdatedBy, T1.Company_VersionDeletedBy, T1.Company_VersionOwnerContactID, T1.Company_VersionOwnerCompanyID, T1.Company_VersionUpdated, T1.Company_Thumbnail, T1.Company_OriginalFileDataID)
    FROM (
        SELECT 
            T.CompanyID AS Company_CompanyID, 
            T.CompanyName AS Company_CompanyName, 
            T.CountryID AS Company_CountryID, 
            T.PrimaryContactID AS Company_PrimaryContactID, 
            T.Comment AS Company_Comment, 
            T.Version AS Company_Version, 
            T.VersionAntecedentID AS Company_VersionAntecedentID, 
            T.VersionCertainty AS Company_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Company_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Company_VersionUpdatedBy, 
            T.VersionDeletedBy AS Company_VersionDeletedBy, 
            T.VersionOwnerContactID AS Company_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Company_VersionOwnerCompanyID, 
            T.VersionUpdated AS Company_VersionUpdated, 
            T.Thumbnail AS Company_Thumbnail, 
            T.OriginalFileDataID AS Company_OriginalFileDataID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Company AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CompanyAddresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView414()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompanyAddresses
        [NKD.Module.BusinessObjects.CompanyAddress](T1.CompanyAddress_CompanyAddressID, T1.CompanyAddress_CompanyID, T1.CompanyAddress_AddressID, T1.CompanyAddress_Version, T1.CompanyAddress_VersionAntecedentID, T1.CompanyAddress_VersionCertainty, T1.CompanyAddress_VersionWorkflowInstanceID, T1.CompanyAddress_VersionUpdatedBy, T1.CompanyAddress_VersionDeletedBy, T1.CompanyAddress_VersionOwnerContactID, T1.CompanyAddress_VersionOwnerCompanyID, T1.CompanyAddress_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyAddressID AS CompanyAddress_CompanyAddressID, 
            T.CompanyID AS CompanyAddress_CompanyID, 
            T.AddressID AS CompanyAddress_AddressID, 
            T.Version AS CompanyAddress_Version, 
            T.VersionAntecedentID AS CompanyAddress_VersionAntecedentID, 
            T.VersionCertainty AS CompanyAddress_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyAddress_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyAddress_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyAddress_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyAddress_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyAddress_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyAddress_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_CompanyAddress AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CompanyRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView415()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompanyRelations
        [NKD.Module.BusinessObjects.CompanyRelation](T1.CompanyRelation_CompanyRelationID, T1.CompanyRelation_CompanyID, T1.CompanyRelation_ParentCompanyID, T1.CompanyRelation_IsChildVisible, T1.CompanyRelation_IsParentVisible, T1.CompanyRelation_Version, T1.CompanyRelation_VersionAntecedentID, T1.CompanyRelation_VersionCertainty, T1.CompanyRelation_VersionWorkflowInstanceID, T1.CompanyRelation_VersionUpdatedBy, T1.CompanyRelation_VersionDeletedBy, T1.CompanyRelation_VersionOwnerContactID, T1.CompanyRelation_VersionOwnerCompanyID, T1.CompanyRelation_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyRelationID AS CompanyRelation_CompanyRelationID, 
            T.CompanyID AS CompanyRelation_CompanyID, 
            T.ParentCompanyID AS CompanyRelation_ParentCompanyID, 
            T.IsChildVisible AS CompanyRelation_IsChildVisible, 
            T.IsParentVisible AS CompanyRelation_IsParentVisible, 
            T.Version AS CompanyRelation_Version, 
            T.VersionAntecedentID AS CompanyRelation_VersionAntecedentID, 
            T.VersionCertainty AS CompanyRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_CompanyRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Compliances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView416()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Compliances
        [NKD.Module.BusinessObjects.Compliance](T1.Compliance_ComplianceID, T1.Compliance_ComplianceName, T1.Compliance_ComplianceVersion, T1.Compliance_CountryID, T1.Compliance_ProvinceID, T1.Compliance_ValidFrom, T1.Compliance_Expiry, T1.Compliance_AuthorityCompanyID, T1.Compliance_MaintainedBy, T1.Compliance_Description, T1.Compliance_ComplianceForm, T1.Compliance_Version, T1.Compliance_VersionAntecedentID, T1.Compliance_VersionCertainty, T1.Compliance_VersionWorkflowInstanceID, T1.Compliance_VersionUpdatedBy, T1.Compliance_VersionDeletedBy, T1.Compliance_VersionOwnerContactID, T1.Compliance_VersionOwnerCompanyID, T1.Compliance_VersionUpdated)
    FROM (
        SELECT 
            T.ComplianceID AS Compliance_ComplianceID, 
            T.ComplianceName AS Compliance_ComplianceName, 
            T.ComplianceVersion AS Compliance_ComplianceVersion, 
            T.CountryID AS Compliance_CountryID, 
            T.ProvinceID AS Compliance_ProvinceID, 
            T.ValidFrom AS Compliance_ValidFrom, 
            T.Expiry AS Compliance_Expiry, 
            T.AuthorityCompanyID AS Compliance_AuthorityCompanyID, 
            T.MaintainedBy AS Compliance_MaintainedBy, 
            T.Description AS Compliance_Description, 
            T.ComplianceForm AS Compliance_ComplianceForm, 
            T.Version AS Compliance_Version, 
            T.VersionAntecedentID AS Compliance_VersionAntecedentID, 
            T.VersionCertainty AS Compliance_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Compliance_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Compliance_VersionUpdatedBy, 
            T.VersionDeletedBy AS Compliance_VersionDeletedBy, 
            T.VersionOwnerContactID AS Compliance_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Compliance_VersionOwnerCompanyID, 
            T.VersionUpdated AS Compliance_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Compliance AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ComplianceTasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView417()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ComplianceTasks
        [NKD.Module.BusinessObjects.ComplianceTask](T1.ComplianceTask_ComplianceTaskID, T1.ComplianceTask_ComplianceID, T1.ComplianceTask_TaskID, T1.ComplianceTask_ExecutePrior, T1.ComplianceTask_Version, T1.ComplianceTask_VersionAntecedentID, T1.ComplianceTask_VersionCertainty, T1.ComplianceTask_VersionWorkflowInstanceID, T1.ComplianceTask_VersionUpdatedBy, T1.ComplianceTask_VersionDeletedBy, T1.ComplianceTask_VersionOwnerContactID, T1.ComplianceTask_VersionOwnerCompanyID, T1.ComplianceTask_VersionUpdated, T1.ComplianceTask_Sequence)
    FROM (
        SELECT 
            T.ComplianceTaskID AS ComplianceTask_ComplianceTaskID, 
            T.ComplianceID AS ComplianceTask_ComplianceID, 
            T.TaskID AS ComplianceTask_TaskID, 
            T.ExecutePrior AS ComplianceTask_ExecutePrior, 
            T.Version AS ComplianceTask_Version, 
            T.VersionAntecedentID AS ComplianceTask_VersionAntecedentID, 
            T.VersionCertainty AS ComplianceTask_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ComplianceTask_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ComplianceTask_VersionUpdatedBy, 
            T.VersionDeletedBy AS ComplianceTask_VersionDeletedBy, 
            T.VersionOwnerContactID AS ComplianceTask_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ComplianceTask_VersionOwnerCompanyID, 
            T.VersionUpdated AS ComplianceTask_VersionUpdated, 
            T.Sequence AS ComplianceTask_Sequence, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ComplianceTask AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ComplianceWorkTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView418()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ComplianceWorkTypes
        [NKD.Module.BusinessObjects.ComplianceWorkType](T1.ComplianceWorkType_ComplianceWorkTypeID, T1.ComplianceWorkType_ComplianceID, T1.ComplianceWorkType_WorkTypeID, T1.ComplianceWorkType_Version, T1.ComplianceWorkType_VersionAntecedentID, T1.ComplianceWorkType_VersionCertainty, T1.ComplianceWorkType_VersionWorkflowInstanceID, T1.ComplianceWorkType_VersionUpdatedBy, T1.ComplianceWorkType_VersionDeletedBy, T1.ComplianceWorkType_VersionOwnerContactID, T1.ComplianceWorkType_VersionOwnerCompanyID, T1.ComplianceWorkType_VersionUpdated)
    FROM (
        SELECT 
            T.ComplianceWorkTypeID AS ComplianceWorkType_ComplianceWorkTypeID, 
            T.ComplianceID AS ComplianceWorkType_ComplianceID, 
            T.WorkTypeID AS ComplianceWorkType_WorkTypeID, 
            T.Version AS ComplianceWorkType_Version, 
            T.VersionAntecedentID AS ComplianceWorkType_VersionAntecedentID, 
            T.VersionCertainty AS ComplianceWorkType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ComplianceWorkType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ComplianceWorkType_VersionUpdatedBy, 
            T.VersionDeletedBy AS ComplianceWorkType_VersionDeletedBy, 
            T.VersionOwnerContactID AS ComplianceWorkType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ComplianceWorkType_VersionOwnerCompanyID, 
            T.VersionUpdated AS ComplianceWorkType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ComplianceWorkType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Contacts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView419()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Contacts
        [NKD.Module.BusinessObjects.Contact](T1.Contact_ContactID, T1.Contact_ContactName, T1.Contact_Title, T1.Contact_Surname, T1.Contact_Firstname, T1.Contact_Username, T1.Contact_Hash, T1.Contact_DefaultEmail, T1.Contact_MiddleNames, T1.Contact_Initials, T1.Contact_DOB, T1.Contact_BirthCountryID, T1.Contact_BirthCity, T1.Contact_AspNetUserID, T1.Contact_XafUserID, T1.Contact_OAuthID, T1.Contact_Photo, T1.Contact_ShortBiography, T1.Contact_Version, T1.Contact_VersionAntecedentID, T1.Contact_VersionCertainty, T1.Contact_VersionWorkflowInstanceID, T1.Contact_VersionUpdatedBy, T1.Contact_VersionDeletedBy, T1.Contact_VersionOwnerContactID, T1.Contact_VersionOwnerCompanyID, T1.Contact_VersionUpdated, T1.Contact_DefaultMobile, T1.Contact_DefaultEmailValidated, T1.Contact_DefaultMobileValidated)
    FROM (
        SELECT 
            T.ContactID AS Contact_ContactID, 
            T.ContactName AS Contact_ContactName, 
            T.Title AS Contact_Title, 
            T.Surname AS Contact_Surname, 
            T.Firstname AS Contact_Firstname, 
            T.Username AS Contact_Username, 
            T.Hash AS Contact_Hash, 
            T.DefaultEmail AS Contact_DefaultEmail, 
            T.MiddleNames AS Contact_MiddleNames, 
            T.Initials AS Contact_Initials, 
            T.DOB AS Contact_DOB, 
            T.BirthCountryID AS Contact_BirthCountryID, 
            T.BirthCity AS Contact_BirthCity, 
            T.AspNetUserID AS Contact_AspNetUserID, 
            T.XafUserID AS Contact_XafUserID, 
            T.OAuthID AS Contact_OAuthID, 
            T.Photo AS Contact_Photo, 
            T.ShortBiography AS Contact_ShortBiography, 
            T.Version AS Contact_Version, 
            T.VersionAntecedentID AS Contact_VersionAntecedentID, 
            T.VersionCertainty AS Contact_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Contact_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Contact_VersionUpdatedBy, 
            T.VersionDeletedBy AS Contact_VersionDeletedBy, 
            T.VersionOwnerContactID AS Contact_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Contact_VersionOwnerCompanyID, 
            T.VersionUpdated AS Contact_VersionUpdated, 
            T.DefaultMobile AS Contact_DefaultMobile, 
            T.DefaultEmailValidated AS Contact_DefaultEmailValidated, 
            T.DefaultMobileValidated AS Contact_DefaultMobileValidated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Contact AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContactAddresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView420()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContactAddresses
        [NKD.Module.BusinessObjects.ContactAddress](T1.ContactAddress_ContactAddressID, T1.ContactAddress_ContactID, T1.ContactAddress_AddressID, T1.ContactAddress_Version, T1.ContactAddress_VersionAntecedentID, T1.ContactAddress_VersionCertainty, T1.ContactAddress_VersionWorkflowInstanceID, T1.ContactAddress_VersionUpdatedBy, T1.ContactAddress_VersionDeletedBy, T1.ContactAddress_VersionOwnerContactID, T1.ContactAddress_VersionOwnerCompanyID, T1.ContactAddress_VersionUpdated)
    FROM (
        SELECT 
            T.ContactAddressID AS ContactAddress_ContactAddressID, 
            T.ContactID AS ContactAddress_ContactID, 
            T.AddressID AS ContactAddress_AddressID, 
            T.Version AS ContactAddress_Version, 
            T.VersionAntecedentID AS ContactAddress_VersionAntecedentID, 
            T.VersionCertainty AS ContactAddress_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContactAddress_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContactAddress_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContactAddress_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContactAddress_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContactAddress_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContactAddress_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ContactAddress AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Contracts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView421()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Contracts
        [NKD.Module.BusinessObjects.Contract](T1.Contract_ContractID, T1.Contract_ParentContractID, T1.Contract_ContractName, T1.Contract_Description, T1.Contract_ProjectID, T1.Contract_LastDeliverableID, T1.Contract_ObligeeID, T1.Contract_ObligeeCompanyID, T1.Contract_ObligorID, T1.Contract_ObligorCompanyID, T1.Contract_AssigneeID, T1.Contract_AssigneeCompanyID, T1.Contract_SolicitorID, T1.Contract_SolicitorCompanyID, T1.Contract_Risk, T1.Contract_RiskStarts, T1.Contract_RiskEnds, T1.Contract_RiskCriticality, T1.Contract_RiskLikelihood, T1.Contract_Value, T1.Contract_Tax, T1.Contract_Started, T1.Contract_Ended, T1.Contract_Completed, T1.Contract_Comment, T1.Contract_FileDataID, T1.Contract_RespondWithinHours, T1.Contract_Version, T1.Contract_VersionAntecedentID, T1.Contract_VersionCertainty, T1.Contract_VersionWorkflowInstanceID, T1.Contract_VersionUpdatedBy, T1.Contract_VersionDeletedBy, T1.Contract_VersionOwnerContactID, T1.Contract_VersionOwnerCompanyID, T1.Contract_VersionUpdated, T1.Contract_ContractText)
    FROM (
        SELECT 
            T.ContractID AS Contract_ContractID, 
            T.ParentContractID AS Contract_ParentContractID, 
            T.ContractName AS Contract_ContractName, 
            T.Description AS Contract_Description, 
            T.ProjectID AS Contract_ProjectID, 
            T.LastDeliverableID AS Contract_LastDeliverableID, 
            T.ObligeeID AS Contract_ObligeeID, 
            T.ObligeeCompanyID AS Contract_ObligeeCompanyID, 
            T.ObligorID AS Contract_ObligorID, 
            T.ObligorCompanyID AS Contract_ObligorCompanyID, 
            T.AssigneeID AS Contract_AssigneeID, 
            T.AssigneeCompanyID AS Contract_AssigneeCompanyID, 
            T.SolicitorID AS Contract_SolicitorID, 
            T.SolicitorCompanyID AS Contract_SolicitorCompanyID, 
            T.Risk AS Contract_Risk, 
            T.RiskStarts AS Contract_RiskStarts, 
            T.RiskEnds AS Contract_RiskEnds, 
            T.RiskCriticality AS Contract_RiskCriticality, 
            T.RiskLikelihood AS Contract_RiskLikelihood, 
            T.[Value] AS Contract_Value, 
            T.Tax AS Contract_Tax, 
            T.Started AS Contract_Started, 
            T.Ended AS Contract_Ended, 
            T.Completed AS Contract_Completed, 
            T.Comment AS Contract_Comment, 
            T.FileDataID AS Contract_FileDataID, 
            T.RespondWithinHours AS Contract_RespondWithinHours, 
            T.Version AS Contract_Version, 
            T.VersionAntecedentID AS Contract_VersionAntecedentID, 
            T.VersionCertainty AS Contract_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Contract_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Contract_VersionUpdatedBy, 
            T.VersionDeletedBy AS Contract_VersionDeletedBy, 
            T.VersionOwnerContactID AS Contract_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Contract_VersionOwnerCompanyID, 
            T.VersionUpdated AS Contract_VersionUpdated, 
            T.ContractText AS Contract_ContractText, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Contract AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContractConditions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView422()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContractConditions
        [NKD.Module.BusinessObjects.ContractCondition](T1.ContractCondition_ContractConditionID, T1.ContractCondition_ContractID, T1.ContractCondition_ContractConditionTypeID, T1.ContractCondition_IsIncluded, T1.ContractCondition_IsExluded, T1.ContractCondition_UnitID, T1.ContractCondition_Maximum, T1.ContractCondition_Minimum, T1.ContractCondition_EstimatedValueUpfront, T1.ContractCondition_EstimatedValueOngoingUnitID, T1.ContractCondition_EstimatedValueOngoing, T1.ContractCondition_Version, T1.ContractCondition_VersionAntecedentID, T1.ContractCondition_VersionCertainty, T1.ContractCondition_VersionWorkflowInstanceID, T1.ContractCondition_VersionUpdatedBy, T1.ContractCondition_VersionDeletedBy, T1.ContractCondition_VersionOwnerContactID, T1.ContractCondition_VersionOwnerCompanyID, T1.ContractCondition_VersionUpdated, T1.ContractCondition_ContractConditionText, T1.ContractCondition_Comment)
    FROM (
        SELECT 
            T.ContractConditionID AS ContractCondition_ContractConditionID, 
            T.ContractID AS ContractCondition_ContractID, 
            T.ContractConditionTypeID AS ContractCondition_ContractConditionTypeID, 
            T.IsIncluded AS ContractCondition_IsIncluded, 
            T.IsExluded AS ContractCondition_IsExluded, 
            T.UnitID AS ContractCondition_UnitID, 
            T.Maximum AS ContractCondition_Maximum, 
            T.Minimum AS ContractCondition_Minimum, 
            T.EstimatedValueUpfront AS ContractCondition_EstimatedValueUpfront, 
            T.EstimatedValueOngoingUnitID AS ContractCondition_EstimatedValueOngoingUnitID, 
            T.EstimatedValueOngoing AS ContractCondition_EstimatedValueOngoing, 
            T.Version AS ContractCondition_Version, 
            T.VersionAntecedentID AS ContractCondition_VersionAntecedentID, 
            T.VersionCertainty AS ContractCondition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContractCondition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContractCondition_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContractCondition_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContractCondition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContractCondition_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContractCondition_VersionUpdated, 
            T.ContractConditionText AS ContractCondition_ContractConditionText, 
            T.Comment AS ContractCondition_Comment, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ContractCondition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContractConditionModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView423()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContractConditionModels
        [NKD.Module.BusinessObjects.ContractConditionModel](T1.ContractConditionModel_ContractConditionModelID, T1.ContractConditionModel_ContractConditionID, T1.ContractConditionModel_ModelID, T1.ContractConditionModel_Version, T1.ContractConditionModel_VersionAntecedentID, T1.ContractConditionModel_VersionCertainty, T1.ContractConditionModel_VersionWorkflowInstanceID, T1.ContractConditionModel_VersionUpdatedBy, T1.ContractConditionModel_VersionDeletedBy, T1.ContractConditionModel_VersionOwnerContactID, T1.ContractConditionModel_VersionOwnerCompanyID, T1.ContractConditionModel_VersionUpdated)
    FROM (
        SELECT 
            T.ContractConditionModelID AS ContractConditionModel_ContractConditionModelID, 
            T.ContractConditionID AS ContractConditionModel_ContractConditionID, 
            T.ModelID AS ContractConditionModel_ModelID, 
            T.Version AS ContractConditionModel_Version, 
            T.VersionAntecedentID AS ContractConditionModel_VersionAntecedentID, 
            T.VersionCertainty AS ContractConditionModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContractConditionModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContractConditionModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContractConditionModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContractConditionModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContractConditionModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContractConditionModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ContractConditionModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContractConditionParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView424()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContractConditionParts
        [NKD.Module.BusinessObjects.ContractConditionPart](T1.ContractConditionPart_ContractConditionPartID, T1.ContractConditionPart_ContractConditionID, T1.ContractConditionPart_PartID, T1.ContractConditionPart_Version, T1.ContractConditionPart_VersionAntecedentID, T1.ContractConditionPart_VersionCertainty, T1.ContractConditionPart_VersionWorkflowInstanceID, T1.ContractConditionPart_VersionUpdatedBy, T1.ContractConditionPart_VersionDeletedBy, T1.ContractConditionPart_VersionOwnerContactID, T1.ContractConditionPart_VersionOwnerCompanyID, T1.ContractConditionPart_VersionUpdated)
    FROM (
        SELECT 
            T.ContractConditionPartID AS ContractConditionPart_ContractConditionPartID, 
            T.ContractConditionID AS ContractConditionPart_ContractConditionID, 
            T.PartID AS ContractConditionPart_PartID, 
            T.Version AS ContractConditionPart_Version, 
            T.VersionAntecedentID AS ContractConditionPart_VersionAntecedentID, 
            T.VersionCertainty AS ContractConditionPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContractConditionPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContractConditionPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContractConditionPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContractConditionPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContractConditionPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContractConditionPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ContractConditionPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CostEstimateModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView425()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CostEstimateModels
        [NKD.Module.BusinessObjects.CostEstimateModel](T1.CostEstimateModel_CostEstimateModelID, T1.CostEstimateModel_ParentCostEstimateModelID, T1.CostEstimateModel_ContractID, T1.CostEstimateModel_ModelID, T1.CostEstimateModel_CostTypeID, T1.CostEstimateModel_ProRataUnitID, T1.CostEstimateModel_ProRataUnits, T1.CostEstimateModel_ProRataCost, T1.CostEstimateModel_IsAccruableWithParentCost, T1.CostEstimateModel_AccruedQuantumSIUnitID, T1.CostEstimateModel_Accrued, T1.CostEstimateModel_Source, T1.CostEstimateModel_Note, T1.CostEstimateModel_Version, T1.CostEstimateModel_VersionAntecedentID, T1.CostEstimateModel_VersionCertainty, T1.CostEstimateModel_VersionWorkflowInstanceID, T1.CostEstimateModel_VersionUpdatedBy, T1.CostEstimateModel_VersionDeletedBy, T1.CostEstimateModel_VersionOwnerContactID, T1.CostEstimateModel_VersionOwnerCompanyID, T1.CostEstimateModel_VersionUpdated)
    FROM (
        SELECT 
            T.CostEstimateModelID AS CostEstimateModel_CostEstimateModelID, 
            T.ParentCostEstimateModelID AS CostEstimateModel_ParentCostEstimateModelID, 
            T.ContractID AS CostEstimateModel_ContractID, 
            T.ModelID AS CostEstimateModel_ModelID, 
            T.CostTypeID AS CostEstimateModel_CostTypeID, 
            T.ProRataUnitID AS CostEstimateModel_ProRataUnitID, 
            T.ProRataUnits AS CostEstimateModel_ProRataUnits, 
            T.ProRataCost AS CostEstimateModel_ProRataCost, 
            T.IsAccruableWithParentCost AS CostEstimateModel_IsAccruableWithParentCost, 
            T.AccruedQuantumSIUnitID AS CostEstimateModel_AccruedQuantumSIUnitID, 
            T.Accrued AS CostEstimateModel_Accrued, 
            T.Source AS CostEstimateModel_Source, 
            T.Note AS CostEstimateModel_Note, 
            T.Version AS CostEstimateModel_Version, 
            T.VersionAntecedentID AS CostEstimateModel_VersionAntecedentID, 
            T.VersionCertainty AS CostEstimateModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CostEstimateModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CostEstimateModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS CostEstimateModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS CostEstimateModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CostEstimateModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS CostEstimateModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_CostEstimateModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Defects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView426()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Defects
        [NKD.Module.BusinessObjects.Defect](T1.Defect_DefectID, T1.Defect_HeaderID, T1.Defect_FromDepth, T1.Defect_ToDepth, T1.Defect_WeatheringID, T1.Defect_RockMassUnitTypeID, T1.Defect_AlterationID, T1.Defect_EstimatedStrengthID, T1.Defect_BedSpacingID, T1.Defect_BedDip, T1.Defect_MoistureSensitivityID, T1.Defect_PlasticityID, T1.Defect_DefectDepth, T1.Defect_DefectLength, T1.Defect_NumberOfDefects, T1.Defect_DefectsSpacing, T1.Defect_DefectTypeID, T1.Defect_DefectCompletenessID, T1.Defect_DefectContinuityID, T1.Defect_DefectDip, T1.Defect_MinimumDipBrokenZone, T1.Defect_MaximumDipBrokenZone, T1.Defect_DipOrientation, T1.Defect_DipOrientationMethodID, T1.Defect_ShapeID, T1.Defect_RoughnessID, T1.Defect_JointRoughnessCoefficient, T1.Defect_PerpendicularWidth, T1.Defect_PrimaryInfillTypeID, T1.Defect_SecondaryInfillTypeID, T1.Defect_InfillModeID, T1.Defect_InfillEstimatedStrengthID, T1.Defect_InfillPlasticityID, T1.Defect_Comment, T1.Defect_Version, T1.Defect_VersionAntecedentID, T1.Defect_VersionCertainty, T1.Defect_VersionWorkflowInstanceID, T1.Defect_VersionUpdatedBy, T1.Defect_VersionDeletedBy, T1.Defect_VersionOwnerContactID, T1.Defect_VersionOwnerCompanyID, T1.Defect_VersionUpdated, T1.Defect_GeotechLithologyTypeID, T1.Defect_GeotechLithologyQualifierID, T1.Defect_GeotechColourID, T1.Defect_FriabilityTypeID, T1.Defect_BedDevelopmentID, T1.Defect_NumberOfStructureSets, T1.Defect_SurfaceWeatheringID, T1.Defect_AlterationJointTypeID, T1.Defect_StructureSetID, T1.Defect_NumberOfFractures)
    FROM (
        SELECT 
            T.DefectID AS Defect_DefectID, 
            T.HeaderID AS Defect_HeaderID, 
            T.FromDepth AS Defect_FromDepth, 
            T.ToDepth AS Defect_ToDepth, 
            T.WeatheringID AS Defect_WeatheringID, 
            T.RockMassUnitTypeID AS Defect_RockMassUnitTypeID, 
            T.AlterationID AS Defect_AlterationID, 
            T.EstimatedStrengthID AS Defect_EstimatedStrengthID, 
            T.BedSpacingID AS Defect_BedSpacingID, 
            T.BedDip AS Defect_BedDip, 
            T.MoistureSensitivityID AS Defect_MoistureSensitivityID, 
            T.PlasticityID AS Defect_PlasticityID, 
            T.DefectDepth AS Defect_DefectDepth, 
            T.DefectLength AS Defect_DefectLength, 
            T.NumberOfDefects AS Defect_NumberOfDefects, 
            T.DefectsSpacing AS Defect_DefectsSpacing, 
            T.DefectTypeID AS Defect_DefectTypeID, 
            T.DefectCompletenessID AS Defect_DefectCompletenessID, 
            T.DefectContinuityID AS Defect_DefectContinuityID, 
            T.DefectDip AS Defect_DefectDip, 
            T.MinimumDipBrokenZone AS Defect_MinimumDipBrokenZone, 
            T.MaximumDipBrokenZone AS Defect_MaximumDipBrokenZone, 
            T.DipOrientation AS Defect_DipOrientation, 
            T.DipOrientationMethodID AS Defect_DipOrientationMethodID, 
            T.ShapeID AS Defect_ShapeID, 
            T.RoughnessID AS Defect_RoughnessID, 
            T.JointRoughnessCoefficient AS Defect_JointRoughnessCoefficient, 
            T.PerpendicularWidth AS Defect_PerpendicularWidth, 
            T.PrimaryInfillTypeID AS Defect_PrimaryInfillTypeID, 
            T.SecondaryInfillTypeID AS Defect_SecondaryInfillTypeID, 
            T.InfillModeID AS Defect_InfillModeID, 
            T.InfillEstimatedStrengthID AS Defect_InfillEstimatedStrengthID, 
            T.InfillPlasticityID AS Defect_InfillPlasticityID, 
            T.Comment AS Defect_Comment, 
            T.Version AS Defect_Version, 
            T.VersionAntecedentID AS Defect_VersionAntecedentID, 
            T.VersionCertainty AS Defect_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Defect_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Defect_VersionUpdatedBy, 
            T.VersionDeletedBy AS Defect_VersionDeletedBy, 
            T.VersionOwnerContactID AS Defect_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Defect_VersionOwnerCompanyID, 
            T.VersionUpdated AS Defect_VersionUpdated, 
            T.GeotechLithologyTypeID AS Defect_GeotechLithologyTypeID, 
            T.GeotechLithologyQualifierID AS Defect_GeotechLithologyQualifierID, 
            T.GeotechColourID AS Defect_GeotechColourID, 
            T.FriabilityTypeID AS Defect_FriabilityTypeID, 
            T.BedDevelopmentID AS Defect_BedDevelopmentID, 
            T.NumberOfStructureSets AS Defect_NumberOfStructureSets, 
            T.SurfaceWeatheringID AS Defect_SurfaceWeatheringID, 
            T.AlterationJointTypeID AS Defect_AlterationJointTypeID, 
            T.StructureSetID AS Defect_StructureSetID, 
            T.NumberOfFractures AS Defect_NumberOfFractures, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Defect AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Desurveys.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView427()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Desurveys
        [NKD.Module.BusinessObjects.Desurvey](T1.Desurvey_DesurveyID, T1.Desurvey_SurveyID, T1.Desurvey_DesurveyAlgorithmTypeID, T1.Desurvey_Version, T1.Desurvey_VersionAntecedentID, T1.Desurvey_VersionCertainty, T1.Desurvey_VersionWorkflowInstanceID, T1.Desurvey_VersionUpdatedBy, T1.Desurvey_VersionDeletedBy, T1.Desurvey_VersionOwnerContactID, T1.Desurvey_VersionOwnerCompanyID, T1.Desurvey_VersionUpdated)
    FROM (
        SELECT 
            T.DesurveyID AS Desurvey_DesurveyID, 
            T.SurveyID AS Desurvey_SurveyID, 
            T.DesurveyAlgorithmTypeID AS Desurvey_DesurveyAlgorithmTypeID, 
            T.Version AS Desurvey_Version, 
            T.VersionAntecedentID AS Desurvey_VersionAntecedentID, 
            T.VersionCertainty AS Desurvey_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Desurvey_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Desurvey_VersionUpdatedBy, 
            T.VersionDeletedBy AS Desurvey_VersionDeletedBy, 
            T.VersionOwnerContactID AS Desurvey_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Desurvey_VersionOwnerCompanyID, 
            T.VersionUpdated AS Desurvey_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Desurvey AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAdjectives.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView428()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAdjectives
        [NKD.Module.BusinessObjects.DictionaryAdjective](T1.DictionaryAdjective_AdjectiveID, T1.DictionaryAdjective_StandardAdjectiveName, T1.DictionaryAdjective_CoalAdjectiveName, T1.DictionaryAdjective_GoldAdjectiveName, T1.DictionaryAdjective_CustomAdjectiveName, T1.DictionaryAdjective_Description, T1.DictionaryAdjective_FullDescription, T1.DictionaryAdjective_Thumbnail, T1.DictionaryAdjective_OriginalFileDataID, T1.DictionaryAdjective_Version, T1.DictionaryAdjective_VersionAntecedentID, T1.DictionaryAdjective_VersionCertainty, T1.DictionaryAdjective_VersionWorkflowInstanceID, T1.DictionaryAdjective_VersionUpdatedBy, T1.DictionaryAdjective_VersionDeletedBy, T1.DictionaryAdjective_VersionOwnerContactID, T1.DictionaryAdjective_VersionOwnerCompanyID, T1.DictionaryAdjective_VersionUpdated)
    FROM (
        SELECT 
            T.AdjectiveID AS DictionaryAdjective_AdjectiveID, 
            T.StandardAdjectiveName AS DictionaryAdjective_StandardAdjectiveName, 
            T.CoalAdjectiveName AS DictionaryAdjective_CoalAdjectiveName, 
            T.GoldAdjectiveName AS DictionaryAdjective_GoldAdjectiveName, 
            T.CustomAdjectiveName AS DictionaryAdjective_CustomAdjectiveName, 
            T.Description AS DictionaryAdjective_Description, 
            T.FullDescription AS DictionaryAdjective_FullDescription, 
            T.Thumbnail AS DictionaryAdjective_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAdjective_OriginalFileDataID, 
            T.Version AS DictionaryAdjective_Version, 
            T.VersionAntecedentID AS DictionaryAdjective_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAdjective_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAdjective_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAdjective_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAdjective_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAdjective_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAdjective_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAdjective_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAdjective AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAlterations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView429()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAlterations
        [NKD.Module.BusinessObjects.DictionaryAlteration](T1.DictionaryAlteration_AlterationID, T1.DictionaryAlteration_StandardAlterationName, T1.DictionaryAlteration_CoalAlterationName, T1.DictionaryAlteration_GoldAlterationName, T1.DictionaryAlteration_CustomAlterationName, T1.DictionaryAlteration_Description, T1.DictionaryAlteration_FullDescription, T1.DictionaryAlteration_Thumbnail, T1.DictionaryAlteration_OriginalFileDataID, T1.DictionaryAlteration_Version, T1.DictionaryAlteration_VersionAntecedentID, T1.DictionaryAlteration_VersionCertainty, T1.DictionaryAlteration_VersionWorkflowInstanceID, T1.DictionaryAlteration_VersionUpdatedBy, T1.DictionaryAlteration_VersionDeletedBy, T1.DictionaryAlteration_VersionOwnerContactID, T1.DictionaryAlteration_VersionOwnerCompanyID, T1.DictionaryAlteration_VersionUpdated)
    FROM (
        SELECT 
            T.AlterationID AS DictionaryAlteration_AlterationID, 
            T.StandardAlterationName AS DictionaryAlteration_StandardAlterationName, 
            T.CoalAlterationName AS DictionaryAlteration_CoalAlterationName, 
            T.GoldAlterationName AS DictionaryAlteration_GoldAlterationName, 
            T.CustomAlterationName AS DictionaryAlteration_CustomAlterationName, 
            T.Description AS DictionaryAlteration_Description, 
            T.FullDescription AS DictionaryAlteration_FullDescription, 
            T.Thumbnail AS DictionaryAlteration_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAlteration_OriginalFileDataID, 
            T.Version AS DictionaryAlteration_Version, 
            T.VersionAntecedentID AS DictionaryAlteration_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAlteration_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAlteration_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAlteration_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAlteration_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAlteration_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAlteration_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAlteration_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlteration AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayMethods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView430()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayMethods
        [NKD.Module.BusinessObjects.DictionaryAssayMethod](T1.DictionaryAssayMethod_AssayMethodID, T1.DictionaryAssayMethod_StandardAssayMethodName, T1.DictionaryAssayMethod_CoalAssayMethodName, T1.DictionaryAssayMethod_GoldAssayMethodName, T1.DictionaryAssayMethod_CustomAssayMethodName, T1.DictionaryAssayMethod_Description, T1.DictionaryAssayMethod_FullDescription, T1.DictionaryAssayMethod_Thumbnail, T1.DictionaryAssayMethod_OriginalFileDataID, T1.DictionaryAssayMethod_Version, T1.DictionaryAssayMethod_VersionAntecedentID, T1.DictionaryAssayMethod_VersionCertainty, T1.DictionaryAssayMethod_VersionWorkflowInstanceID, T1.DictionaryAssayMethod_VersionUpdatedBy, T1.DictionaryAssayMethod_VersionDeletedBy, T1.DictionaryAssayMethod_VersionOwnerContactID, T1.DictionaryAssayMethod_VersionOwnerCompanyID, T1.DictionaryAssayMethod_VersionUpdated)
    FROM (
        SELECT 
            T.AssayMethodID AS DictionaryAssayMethod_AssayMethodID, 
            T.StandardAssayMethodName AS DictionaryAssayMethod_StandardAssayMethodName, 
            T.CoalAssayMethodName AS DictionaryAssayMethod_CoalAssayMethodName, 
            T.GoldAssayMethodName AS DictionaryAssayMethod_GoldAssayMethodName, 
            T.CustomAssayMethodName AS DictionaryAssayMethod_CustomAssayMethodName, 
            T.Description AS DictionaryAssayMethod_Description, 
            T.FullDescription AS DictionaryAssayMethod_FullDescription, 
            T.Thumbnail AS DictionaryAssayMethod_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayMethod_OriginalFileDataID, 
            T.Version AS DictionaryAssayMethod_Version, 
            T.VersionAntecedentID AS DictionaryAssayMethod_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayMethod_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayMethod_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayMethod_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayMethod_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayMethod_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayMethod_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayMethod_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayMethod AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayStandards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView431()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayStandards
        [NKD.Module.BusinessObjects.DictionaryAssayStandard](T1.DictionaryAssayStandard_AssayStandardID, T1.DictionaryAssayStandard_StandardAssayStandardName, T1.DictionaryAssayStandard_CoalAssayStandardName, T1.DictionaryAssayStandard_GoldAssayStandardName, T1.DictionaryAssayStandard_CustomAssayStandardName, T1.DictionaryAssayStandard_Description, T1.DictionaryAssayStandard_FullDescription, T1.DictionaryAssayStandard_Thumbnail, T1.DictionaryAssayStandard_OriginalFileDataID, T1.DictionaryAssayStandard_Version, T1.DictionaryAssayStandard_VersionAntecedentID, T1.DictionaryAssayStandard_VersionCertainty, T1.DictionaryAssayStandard_VersionWorkflowInstanceID, T1.DictionaryAssayStandard_VersionUpdatedBy, T1.DictionaryAssayStandard_VersionDeletedBy, T1.DictionaryAssayStandard_VersionOwnerContactID, T1.DictionaryAssayStandard_VersionOwnerCompanyID, T1.DictionaryAssayStandard_VersionUpdated)
    FROM (
        SELECT 
            T.AssayStandardID AS DictionaryAssayStandard_AssayStandardID, 
            T.StandardAssayStandardName AS DictionaryAssayStandard_StandardAssayStandardName, 
            T.CoalAssayStandardName AS DictionaryAssayStandard_CoalAssayStandardName, 
            T.GoldAssayStandardName AS DictionaryAssayStandard_GoldAssayStandardName, 
            T.CustomAssayStandardName AS DictionaryAssayStandard_CustomAssayStandardName, 
            T.Description AS DictionaryAssayStandard_Description, 
            T.FullDescription AS DictionaryAssayStandard_FullDescription, 
            T.Thumbnail AS DictionaryAssayStandard_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayStandard_OriginalFileDataID, 
            T.Version AS DictionaryAssayStandard_Version, 
            T.VersionAntecedentID AS DictionaryAssayStandard_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayStandard_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayStandard_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayStandard_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayStandard_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayStandard_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayStandard_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayStandard_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayStandard AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayTests.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView432()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayTests
        [NKD.Module.BusinessObjects.DictionaryAssayTest](T1.DictionaryAssayTest_AssayTestID, T1.DictionaryAssayTest_StandardAssayTestName, T1.DictionaryAssayTest_CoalAssayTestName, T1.DictionaryAssayTest_GoldAssayTestName, T1.DictionaryAssayTest_CustomAssayTestName, T1.DictionaryAssayTest_Description, T1.DictionaryAssayTest_FullDescription, T1.DictionaryAssayTest_Thumbnail, T1.DictionaryAssayTest_OriginalFileDataID, T1.DictionaryAssayTest_Version, T1.DictionaryAssayTest_VersionAntecedentID, T1.DictionaryAssayTest_VersionCertainty, T1.DictionaryAssayTest_VersionWorkflowInstanceID, T1.DictionaryAssayTest_VersionUpdatedBy, T1.DictionaryAssayTest_VersionDeletedBy, T1.DictionaryAssayTest_VersionOwnerContactID, T1.DictionaryAssayTest_VersionOwnerCompanyID, T1.DictionaryAssayTest_VersionUpdated)
    FROM (
        SELECT 
            T.AssayTestID AS DictionaryAssayTest_AssayTestID, 
            T.StandardAssayTestName AS DictionaryAssayTest_StandardAssayTestName, 
            T.CoalAssayTestName AS DictionaryAssayTest_CoalAssayTestName, 
            T.GoldAssayTestName AS DictionaryAssayTest_GoldAssayTestName, 
            T.CustomAssayTestName AS DictionaryAssayTest_CustomAssayTestName, 
            T.Description AS DictionaryAssayTest_Description, 
            T.FullDescription AS DictionaryAssayTest_FullDescription, 
            T.Thumbnail AS DictionaryAssayTest_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayTest_OriginalFileDataID, 
            T.Version AS DictionaryAssayTest_Version, 
            T.VersionAntecedentID AS DictionaryAssayTest_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayTest_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayTest_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayTest_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayTest_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayTest_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayTest_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayTest_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTest AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView433()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayTypes
        [NKD.Module.BusinessObjects.DictionaryAssayType](T1.DictionaryAssayType_AssayTypeID, T1.DictionaryAssayType_StandardAssayTypeName, T1.DictionaryAssayType_CoalAssayTypeName, T1.DictionaryAssayType_GoldAssayTypeName, T1.DictionaryAssayType_CustomAssayTypeName, T1.DictionaryAssayType_Description, T1.DictionaryAssayType_FullDescription, T1.DictionaryAssayType_Thumbnail, T1.DictionaryAssayType_OriginalFileDataID, T1.DictionaryAssayType_Version, T1.DictionaryAssayType_VersionAntecedentID, T1.DictionaryAssayType_VersionCertainty, T1.DictionaryAssayType_VersionWorkflowInstanceID, T1.DictionaryAssayType_VersionUpdatedBy, T1.DictionaryAssayType_VersionDeletedBy, T1.DictionaryAssayType_VersionOwnerContactID, T1.DictionaryAssayType_VersionOwnerCompanyID, T1.DictionaryAssayType_VersionUpdated)
    FROM (
        SELECT 
            T.AssayTypeID AS DictionaryAssayType_AssayTypeID, 
            T.StandardAssayTypeName AS DictionaryAssayType_StandardAssayTypeName, 
            T.CoalAssayTypeName AS DictionaryAssayType_CoalAssayTypeName, 
            T.GoldAssayTypeName AS DictionaryAssayType_GoldAssayTypeName, 
            T.CustomAssayTypeName AS DictionaryAssayType_CustomAssayTypeName, 
            T.Description AS DictionaryAssayType_Description, 
            T.FullDescription AS DictionaryAssayType_FullDescription, 
            T.Thumbnail AS DictionaryAssayType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayType_OriginalFileDataID, 
            T.Version AS DictionaryAssayType_Version, 
            T.VersionAntecedentID AS DictionaryAssayType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryBasalContacts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView434()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryBasalContacts
        [NKD.Module.BusinessObjects.DictionaryBasalContact](T1.DictionaryBasalContact_BasalContactID, T1.DictionaryBasalContact_StandardBasalContactName, T1.DictionaryBasalContact_CoalBasalContactName, T1.DictionaryBasalContact_GoldBasalContactName, T1.DictionaryBasalContact_CustomBasalContactName, T1.DictionaryBasalContact_Description, T1.DictionaryBasalContact_FullDescription, T1.DictionaryBasalContact_Thumbnail, T1.DictionaryBasalContact_OriginalFileDataID, T1.DictionaryBasalContact_Version, T1.DictionaryBasalContact_VersionAntecedentID, T1.DictionaryBasalContact_VersionCertainty, T1.DictionaryBasalContact_VersionWorkflowInstanceID, T1.DictionaryBasalContact_VersionUpdatedBy, T1.DictionaryBasalContact_VersionDeletedBy, T1.DictionaryBasalContact_VersionOwnerContactID, T1.DictionaryBasalContact_VersionOwnerCompanyID, T1.DictionaryBasalContact_VersionUpdated)
    FROM (
        SELECT 
            T.BasalContactID AS DictionaryBasalContact_BasalContactID, 
            T.StandardBasalContactName AS DictionaryBasalContact_StandardBasalContactName, 
            T.CoalBasalContactName AS DictionaryBasalContact_CoalBasalContactName, 
            T.GoldBasalContactName AS DictionaryBasalContact_GoldBasalContactName, 
            T.CustomBasalContactName AS DictionaryBasalContact_CustomBasalContactName, 
            T.Description AS DictionaryBasalContact_Description, 
            T.FullDescription AS DictionaryBasalContact_FullDescription, 
            T.Thumbnail AS DictionaryBasalContact_Thumbnail, 
            T.OriginalFileDataID AS DictionaryBasalContact_OriginalFileDataID, 
            T.Version AS DictionaryBasalContact_Version, 
            T.VersionAntecedentID AS DictionaryBasalContact_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryBasalContact_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryBasalContact_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryBasalContact_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryBasalContact_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryBasalContact_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryBasalContact_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryBasalContact_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryBasalContact AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryBedSpacings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView435()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryBedSpacings
        [NKD.Module.BusinessObjects.DictionaryBedSpacing](T1.DictionaryBedSpacing_BedSpacingID, T1.DictionaryBedSpacing_StandardBedSpacingName, T1.DictionaryBedSpacing_CoalBedSpacingName, T1.DictionaryBedSpacing_GoldBedSpacingName, T1.DictionaryBedSpacing_CustomBedSpacingName, T1.DictionaryBedSpacing_Description, T1.DictionaryBedSpacing_FullDescription, T1.DictionaryBedSpacing_Thumbnail, T1.DictionaryBedSpacing_OriginalFileDataID, T1.DictionaryBedSpacing_Version, T1.DictionaryBedSpacing_VersionAntecedentID, T1.DictionaryBedSpacing_VersionCertainty, T1.DictionaryBedSpacing_VersionWorkflowInstanceID, T1.DictionaryBedSpacing_VersionUpdatedBy, T1.DictionaryBedSpacing_VersionDeletedBy, T1.DictionaryBedSpacing_VersionOwnerContactID, T1.DictionaryBedSpacing_VersionOwnerCompanyID, T1.DictionaryBedSpacing_VersionUpdated)
    FROM (
        SELECT 
            T.BedSpacingID AS DictionaryBedSpacing_BedSpacingID, 
            T.StandardBedSpacingName AS DictionaryBedSpacing_StandardBedSpacingName, 
            T.CoalBedSpacingName AS DictionaryBedSpacing_CoalBedSpacingName, 
            T.GoldBedSpacingName AS DictionaryBedSpacing_GoldBedSpacingName, 
            T.CustomBedSpacingName AS DictionaryBedSpacing_CustomBedSpacingName, 
            T.Description AS DictionaryBedSpacing_Description, 
            T.FullDescription AS DictionaryBedSpacing_FullDescription, 
            T.Thumbnail AS DictionaryBedSpacing_Thumbnail, 
            T.OriginalFileDataID AS DictionaryBedSpacing_OriginalFileDataID, 
            T.Version AS DictionaryBedSpacing_Version, 
            T.VersionAntecedentID AS DictionaryBedSpacing_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryBedSpacing_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryBedSpacing_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryBedSpacing_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryBedSpacing_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryBedSpacing_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryBedSpacing_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryBedSpacing_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedSpacing AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCharacteristics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView436()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCharacteristics
        [NKD.Module.BusinessObjects.DictionaryCharacteristic](T1.DictionaryCharacteristic_CharacteristicID, T1.DictionaryCharacteristic_StandardCharacteristicName, T1.DictionaryCharacteristic_CustomCharacteristicName, T1.DictionaryCharacteristic_UnitID, T1.DictionaryCharacteristic_CharacteristicTypeID, T1.DictionaryCharacteristic_Description, T1.DictionaryCharacteristic_FullDescription, T1.DictionaryCharacteristic_Thumbnail, T1.DictionaryCharacteristic_OriginalFileDataID, T1.DictionaryCharacteristic_Version, T1.DictionaryCharacteristic_VersionAntecedentID, T1.DictionaryCharacteristic_VersionCertainty, T1.DictionaryCharacteristic_VersionWorkflowInstanceID, T1.DictionaryCharacteristic_VersionUpdatedBy, T1.DictionaryCharacteristic_VersionDeletedBy, T1.DictionaryCharacteristic_VersionOwnerContactID, T1.DictionaryCharacteristic_VersionOwnerCompanyID, T1.DictionaryCharacteristic_VersionUpdated)
    FROM (
        SELECT 
            T.CharacteristicID AS DictionaryCharacteristic_CharacteristicID, 
            T.StandardCharacteristicName AS DictionaryCharacteristic_StandardCharacteristicName, 
            T.CustomCharacteristicName AS DictionaryCharacteristic_CustomCharacteristicName, 
            T.UnitID AS DictionaryCharacteristic_UnitID, 
            T.CharacteristicTypeID AS DictionaryCharacteristic_CharacteristicTypeID, 
            T.Description AS DictionaryCharacteristic_Description, 
            T.FullDescription AS DictionaryCharacteristic_FullDescription, 
            T.Thumbnail AS DictionaryCharacteristic_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCharacteristic_OriginalFileDataID, 
            T.Version AS DictionaryCharacteristic_Version, 
            T.VersionAntecedentID AS DictionaryCharacteristic_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCharacteristic_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCharacteristic_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCharacteristic_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCharacteristic_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCharacteristic_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCharacteristic_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCharacteristic_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristic AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCharacteristicTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView437()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCharacteristicTypes
        [NKD.Module.BusinessObjects.DictionaryCharacteristicType](T1.DictionaryCharacteristicType_CharacteristicTypeID, T1.DictionaryCharacteristicType_StandardCharacteristicTypeName, T1.DictionaryCharacteristicType_CustomCharacteristicTypeName, T1.DictionaryCharacteristicType_Description, T1.DictionaryCharacteristicType_FullDescription, T1.DictionaryCharacteristicType_Thumbnail, T1.DictionaryCharacteristicType_OriginalFileDataID, T1.DictionaryCharacteristicType_Version, T1.DictionaryCharacteristicType_VersionAntecedentID, T1.DictionaryCharacteristicType_VersionCertainty, T1.DictionaryCharacteristicType_VersionWorkflowInstanceID, T1.DictionaryCharacteristicType_VersionUpdatedBy, T1.DictionaryCharacteristicType_VersionDeletedBy, T1.DictionaryCharacteristicType_VersionOwnerContactID, T1.DictionaryCharacteristicType_VersionOwnerCompanyID, T1.DictionaryCharacteristicType_VersionUpdated)
    FROM (
        SELECT 
            T.CharacteristicTypeID AS DictionaryCharacteristicType_CharacteristicTypeID, 
            T.StandardCharacteristicTypeName AS DictionaryCharacteristicType_StandardCharacteristicTypeName, 
            T.CustomCharacteristicTypeName AS DictionaryCharacteristicType_CustomCharacteristicTypeName, 
            T.Description AS DictionaryCharacteristicType_Description, 
            T.FullDescription AS DictionaryCharacteristicType_FullDescription, 
            T.Thumbnail AS DictionaryCharacteristicType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCharacteristicType_OriginalFileDataID, 
            T.Version AS DictionaryCharacteristicType_Version, 
            T.VersionAntecedentID AS DictionaryCharacteristicType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCharacteristicType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCharacteristicType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCharacteristicType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCharacteristicType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCharacteristicType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCharacteristicType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCharacteristicType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristicType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryColours.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView438()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryColours
        [NKD.Module.BusinessObjects.DictionaryColour](T1.DictionaryColour_ColourID, T1.DictionaryColour_StandardColourName, T1.DictionaryColour_CoalColourName, T1.DictionaryColour_GoldColourName, T1.DictionaryColour_CustomColourName, T1.DictionaryColour_Description, T1.DictionaryColour_FullDescription, T1.DictionaryColour_Thumbnail, T1.DictionaryColour_OriginalFileDataID, T1.DictionaryColour_Version, T1.DictionaryColour_VersionAntecedentID, T1.DictionaryColour_VersionCertainty, T1.DictionaryColour_VersionWorkflowInstanceID, T1.DictionaryColour_VersionUpdatedBy, T1.DictionaryColour_VersionDeletedBy, T1.DictionaryColour_VersionOwnerContactID, T1.DictionaryColour_VersionOwnerCompanyID, T1.DictionaryColour_VersionUpdated)
    FROM (
        SELECT 
            T.ColourID AS DictionaryColour_ColourID, 
            T.StandardColourName AS DictionaryColour_StandardColourName, 
            T.CoalColourName AS DictionaryColour_CoalColourName, 
            T.GoldColourName AS DictionaryColour_GoldColourName, 
            T.CustomColourName AS DictionaryColour_CustomColourName, 
            T.Description AS DictionaryColour_Description, 
            T.FullDescription AS DictionaryColour_FullDescription, 
            T.Thumbnail AS DictionaryColour_Thumbnail, 
            T.OriginalFileDataID AS DictionaryColour_OriginalFileDataID, 
            T.Version AS DictionaryColour_Version, 
            T.VersionAntecedentID AS DictionaryColour_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryColour_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryColour_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryColour_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryColour_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryColour_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryColour_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryColour_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryColour AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCommodities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView439()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCommodities
        [NKD.Module.BusinessObjects.DictionaryCommodity](T1.DictionaryCommodity_CommodityID, T1.DictionaryCommodity_StandardCommodityName, T1.DictionaryCommodity_CoalCommodityName, T1.DictionaryCommodity_GoldCommodityName, T1.DictionaryCommodity_CustomCommodityName, T1.DictionaryCommodity_Description, T1.DictionaryCommodity_FullDescription, T1.DictionaryCommodity_Thumbnail, T1.DictionaryCommodity_OriginalFileDataID, T1.DictionaryCommodity_Version, T1.DictionaryCommodity_VersionAntecedentID, T1.DictionaryCommodity_VersionCertainty, T1.DictionaryCommodity_VersionWorkflowInstanceID, T1.DictionaryCommodity_VersionUpdatedBy, T1.DictionaryCommodity_VersionDeletedBy, T1.DictionaryCommodity_VersionOwnerContactID, T1.DictionaryCommodity_VersionOwnerCompanyID, T1.DictionaryCommodity_VersionUpdated)
    FROM (
        SELECT 
            T.CommodityID AS DictionaryCommodity_CommodityID, 
            T.StandardCommodityName AS DictionaryCommodity_StandardCommodityName, 
            T.CoalCommodityName AS DictionaryCommodity_CoalCommodityName, 
            T.GoldCommodityName AS DictionaryCommodity_GoldCommodityName, 
            T.CustomCommodityName AS DictionaryCommodity_CustomCommodityName, 
            T.Description AS DictionaryCommodity_Description, 
            T.FullDescription AS DictionaryCommodity_FullDescription, 
            T.Thumbnail AS DictionaryCommodity_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCommodity_OriginalFileDataID, 
            T.Version AS DictionaryCommodity_Version, 
            T.VersionAntecedentID AS DictionaryCommodity_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCommodity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCommodity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCommodity_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCommodity_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCommodity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCommodity_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCommodity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCommodity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryContractConditionTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView440()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryContractConditionTypes
        [NKD.Module.BusinessObjects.DictionaryContractConditionType](T1.DictionaryContractConditionType_ContractConditionTypeID, T1.DictionaryContractConditionType_StandardContractConditionTypeName, T1.DictionaryContractConditionType_CustomContractConditionTypeName, T1.DictionaryContractConditionType_Description, T1.DictionaryContractConditionType_FullDescription, T1.DictionaryContractConditionType_Thumbnail, T1.DictionaryContractConditionType_OriginalFileDataID, T1.DictionaryContractConditionType_Version, T1.DictionaryContractConditionType_VersionAntecedentID, T1.DictionaryContractConditionType_VersionCertainty, T1.DictionaryContractConditionType_VersionWorkflowInstanceID, T1.DictionaryContractConditionType_VersionUpdatedBy, T1.DictionaryContractConditionType_VersionDeletedBy, T1.DictionaryContractConditionType_VersionOwnerContactID, T1.DictionaryContractConditionType_VersionOwnerCompanyID, T1.DictionaryContractConditionType_VersionUpdated)
    FROM (
        SELECT 
            T.ContractConditionTypeID AS DictionaryContractConditionType_ContractConditionTypeID, 
            T.StandardContractConditionTypeName AS DictionaryContractConditionType_StandardContractConditionTypeName, 
            T.CustomContractConditionTypeName AS DictionaryContractConditionType_CustomContractConditionTypeName, 
            T.Description AS DictionaryContractConditionType_Description, 
            T.FullDescription AS DictionaryContractConditionType_FullDescription, 
            T.Thumbnail AS DictionaryContractConditionType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryContractConditionType_OriginalFileDataID, 
            T.Version AS DictionaryContractConditionType_Version, 
            T.VersionAntecedentID AS DictionaryContractConditionType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryContractConditionType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryContractConditionType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryContractConditionType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryContractConditionType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryContractConditionType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryContractConditionType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryContractConditionType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryContractConditionType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCoreStates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView441()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCoreStates
        [NKD.Module.BusinessObjects.DictionaryCoreState](T1.DictionaryCoreState_CoreStateID, T1.DictionaryCoreState_StandardCoreStateName, T1.DictionaryCoreState_CoalCoreStateName, T1.DictionaryCoreState_GoldCoreStateName, T1.DictionaryCoreState_CustomCoreStateName, T1.DictionaryCoreState_Description, T1.DictionaryCoreState_FullDescription, T1.DictionaryCoreState_Thumbnail, T1.DictionaryCoreState_OriginalFileDataID, T1.DictionaryCoreState_Version, T1.DictionaryCoreState_VersionAntecedentID, T1.DictionaryCoreState_VersionCertainty, T1.DictionaryCoreState_VersionWorkflowInstanceID, T1.DictionaryCoreState_VersionUpdatedBy, T1.DictionaryCoreState_VersionDeletedBy, T1.DictionaryCoreState_VersionOwnerContactID, T1.DictionaryCoreState_VersionOwnerCompanyID, T1.DictionaryCoreState_VersionUpdated)
    FROM (
        SELECT 
            T.CoreStateID AS DictionaryCoreState_CoreStateID, 
            T.StandardCoreStateName AS DictionaryCoreState_StandardCoreStateName, 
            T.CoalCoreStateName AS DictionaryCoreState_CoalCoreStateName, 
            T.GoldCoreStateName AS DictionaryCoreState_GoldCoreStateName, 
            T.CustomCoreStateName AS DictionaryCoreState_CustomCoreStateName, 
            T.Description AS DictionaryCoreState_Description, 
            T.FullDescription AS DictionaryCoreState_FullDescription, 
            T.Thumbnail AS DictionaryCoreState_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCoreState_OriginalFileDataID, 
            T.Version AS DictionaryCoreState_Version, 
            T.VersionAntecedentID AS DictionaryCoreState_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCoreState_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCoreState_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCoreState_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCoreState_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCoreState_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCoreState_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCoreState_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCoreState AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCostTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView442()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCostTypes
        [NKD.Module.BusinessObjects.DictionaryCostType](T1.DictionaryCostType_CostTypeID, T1.DictionaryCostType_StandardCostTypeName, T1.DictionaryCostType_CustomCostTypeName, T1.DictionaryCostType_Description, T1.DictionaryCostType_FullDescription, T1.DictionaryCostType_Thumbnail, T1.DictionaryCostType_OriginalFileDataID, T1.DictionaryCostType_Version, T1.DictionaryCostType_VersionAntecedentID, T1.DictionaryCostType_VersionCertainty, T1.DictionaryCostType_VersionWorkflowInstanceID, T1.DictionaryCostType_VersionUpdatedBy, T1.DictionaryCostType_VersionDeletedBy, T1.DictionaryCostType_VersionOwnerContactID, T1.DictionaryCostType_VersionOwnerCompanyID, T1.DictionaryCostType_VersionUpdated)
    FROM (
        SELECT 
            T.CostTypeID AS DictionaryCostType_CostTypeID, 
            T.StandardCostTypeName AS DictionaryCostType_StandardCostTypeName, 
            T.CustomCostTypeName AS DictionaryCostType_CustomCostTypeName, 
            T.Description AS DictionaryCostType_Description, 
            T.FullDescription AS DictionaryCostType_FullDescription, 
            T.Thumbnail AS DictionaryCostType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCostType_OriginalFileDataID, 
            T.Version AS DictionaryCostType_Version, 
            T.VersionAntecedentID AS DictionaryCostType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCostType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCostType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCostType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCostType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCostType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCostType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCostType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCostType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCountries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView443()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCountries
        [NKD.Module.BusinessObjects.DictionaryCountry](T1.DictionaryCountry_CountryID, T1.DictionaryCountry_StandardCountryName, T1.DictionaryCountry_CoalCountryName, T1.DictionaryCountry_GoldCountryName, T1.DictionaryCountry_CustomCountryName, T1.DictionaryCountry_CurrencyCode, T1.DictionaryCountry_CurrencyFormat, T1.DictionaryCountry_Description, T1.DictionaryCountry_FullDescription, T1.DictionaryCountry_Thumbnail, T1.DictionaryCountry_OriginalFileDataID, T1.DictionaryCountry_Version, T1.DictionaryCountry_VersionAntecedentID, T1.DictionaryCountry_VersionCertainty, T1.DictionaryCountry_VersionWorkflowInstanceID, T1.DictionaryCountry_VersionUpdatedBy, T1.DictionaryCountry_VersionDeletedBy, T1.DictionaryCountry_VersionOwnerContactID, T1.DictionaryCountry_VersionOwnerCompanyID, T1.DictionaryCountry_VersionUpdated, T1.DictionaryCountry_CountryGUID)
    FROM (
        SELECT 
            T.CountryID AS DictionaryCountry_CountryID, 
            T.StandardCountryName AS DictionaryCountry_StandardCountryName, 
            T.CoalCountryName AS DictionaryCountry_CoalCountryName, 
            T.GoldCountryName AS DictionaryCountry_GoldCountryName, 
            T.CustomCountryName AS DictionaryCountry_CustomCountryName, 
            T.CurrencyCode AS DictionaryCountry_CurrencyCode, 
            T.CurrencyFormat AS DictionaryCountry_CurrencyFormat, 
            T.Description AS DictionaryCountry_Description, 
            T.FullDescription AS DictionaryCountry_FullDescription, 
            T.Thumbnail AS DictionaryCountry_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCountry_OriginalFileDataID, 
            T.Version AS DictionaryCountry_Version, 
            T.VersionAntecedentID AS DictionaryCountry_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCountry_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCountry_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCountry_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCountry_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCountry_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCountry_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCountry_VersionUpdated, 
            T.CountryGUID AS DictionaryCountry_CountryGUID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountry AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCountryStates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView444()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCountryStates
        [NKD.Module.BusinessObjects.DictionaryCountryState](T1.DictionaryCountryState_CountryStateID, T1.DictionaryCountryState_CountryID, T1.DictionaryCountryState_StandardCountryStateName, T1.DictionaryCountryState_CoalCountryStateName, T1.DictionaryCountryState_GoldCountryStateName, T1.DictionaryCountryState_CustomCountryStateName, T1.DictionaryCountryState_Description, T1.DictionaryCountryState_FullDescription, T1.DictionaryCountryState_Thumbnail, T1.DictionaryCountryState_OriginalFileDataID, T1.DictionaryCountryState_Version, T1.DictionaryCountryState_VersionAntecedentID, T1.DictionaryCountryState_VersionCertainty, T1.DictionaryCountryState_VersionWorkflowInstanceID, T1.DictionaryCountryState_VersionUpdatedBy, T1.DictionaryCountryState_VersionDeletedBy, T1.DictionaryCountryState_VersionOwnerContactID, T1.DictionaryCountryState_VersionOwnerCompanyID, T1.DictionaryCountryState_VersionUpdated)
    FROM (
        SELECT 
            T.CountryStateID AS DictionaryCountryState_CountryStateID, 
            T.CountryID AS DictionaryCountryState_CountryID, 
            T.StandardCountryStateName AS DictionaryCountryState_StandardCountryStateName, 
            T.CoalCountryStateName AS DictionaryCountryState_CoalCountryStateName, 
            T.GoldCountryStateName AS DictionaryCountryState_GoldCountryStateName, 
            T.CustomCountryStateName AS DictionaryCountryState_CustomCountryStateName, 
            T.Description AS DictionaryCountryState_Description, 
            T.FullDescription AS DictionaryCountryState_FullDescription, 
            T.Thumbnail AS DictionaryCountryState_Thumbnail, 
            T.OriginalFileDataID AS DictionaryCountryState_OriginalFileDataID, 
            T.Version AS DictionaryCountryState_Version, 
            T.VersionAntecedentID AS DictionaryCountryState_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryCountryState_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryCountryState_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryCountryState_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryCountryState_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryCountryState_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryCountryState_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryCountryState_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountryState AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDataStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView445()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDataStatus
        [NKD.Module.BusinessObjects.DictionaryDataStatus](T1.DictionaryDataStatus_DataStatusID, T1.DictionaryDataStatus_StandardDataStatusName, T1.DictionaryDataStatus_CoalDataStatusName, T1.DictionaryDataStatus_GoldDataStatusName, T1.DictionaryDataStatus_CustomDataStatusName, T1.DictionaryDataStatus_Description, T1.DictionaryDataStatus_FullDescription, T1.DictionaryDataStatus_Thumbnail, T1.DictionaryDataStatus_OriginalFileDataID, T1.DictionaryDataStatus_Version, T1.DictionaryDataStatus_VersionAntecedentID, T1.DictionaryDataStatus_VersionCertainty, T1.DictionaryDataStatus_VersionWorkflowInstanceID, T1.DictionaryDataStatus_VersionUpdatedBy, T1.DictionaryDataStatus_VersionDeletedBy, T1.DictionaryDataStatus_VersionOwnerContactID, T1.DictionaryDataStatus_VersionOwnerCompanyID, T1.DictionaryDataStatus_VersionUpdated)
    FROM (
        SELECT 
            T.DataStatusID AS DictionaryDataStatus_DataStatusID, 
            T.StandardDataStatusName AS DictionaryDataStatus_StandardDataStatusName, 
            T.CoalDataStatusName AS DictionaryDataStatus_CoalDataStatusName, 
            T.GoldDataStatusName AS DictionaryDataStatus_GoldDataStatusName, 
            T.CustomDataStatusName AS DictionaryDataStatus_CustomDataStatusName, 
            T.Description AS DictionaryDataStatus_Description, 
            T.FullDescription AS DictionaryDataStatus_FullDescription, 
            T.Thumbnail AS DictionaryDataStatus_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDataStatus_OriginalFileDataID, 
            T.Version AS DictionaryDataStatus_Version, 
            T.VersionAntecedentID AS DictionaryDataStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDataStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDataStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDataStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDataStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDataStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDataStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDataStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDataStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDefectCompletenesses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView446()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDefectCompletenesses
        [NKD.Module.BusinessObjects.DictionaryDefectCompleteness](T1.DictionaryDefectCompleteness_DefectCompletenessID, T1.DictionaryDefectCompleteness_StandardDefectCompletenessName, T1.DictionaryDefectCompleteness_CoalDefectCompletenessName, T1.DictionaryDefectCompleteness_GoldDefectCompletenessName, T1.DictionaryDefectCompleteness_CustomDefectCompletenessName, T1.DictionaryDefectCompleteness_Description, T1.DictionaryDefectCompleteness_FullDescription, T1.DictionaryDefectCompleteness_Thumbnail, T1.DictionaryDefectCompleteness_OriginalFileDataID, T1.DictionaryDefectCompleteness_Version, T1.DictionaryDefectCompleteness_VersionAntecedentID, T1.DictionaryDefectCompleteness_VersionCertainty, T1.DictionaryDefectCompleteness_VersionWorkflowInstanceID, T1.DictionaryDefectCompleteness_VersionUpdatedBy, T1.DictionaryDefectCompleteness_VersionDeletedBy, T1.DictionaryDefectCompleteness_VersionOwnerContactID, T1.DictionaryDefectCompleteness_VersionOwnerCompanyID, T1.DictionaryDefectCompleteness_VersionUpdated)
    FROM (
        SELECT 
            T.DefectCompletenessID AS DictionaryDefectCompleteness_DefectCompletenessID, 
            T.StandardDefectCompletenessName AS DictionaryDefectCompleteness_StandardDefectCompletenessName, 
            T.CoalDefectCompletenessName AS DictionaryDefectCompleteness_CoalDefectCompletenessName, 
            T.GoldDefectCompletenessName AS DictionaryDefectCompleteness_GoldDefectCompletenessName, 
            T.CustomDefectCompletenessName AS DictionaryDefectCompleteness_CustomDefectCompletenessName, 
            T.Description AS DictionaryDefectCompleteness_Description, 
            T.FullDescription AS DictionaryDefectCompleteness_FullDescription, 
            T.Thumbnail AS DictionaryDefectCompleteness_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDefectCompleteness_OriginalFileDataID, 
            T.Version AS DictionaryDefectCompleteness_Version, 
            T.VersionAntecedentID AS DictionaryDefectCompleteness_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDefectCompleteness_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDefectCompleteness_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDefectCompleteness_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDefectCompleteness_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDefectCompleteness_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDefectCompleteness_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDefectCompleteness_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectCompleteness AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDefectContinuities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView447()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDefectContinuities
        [NKD.Module.BusinessObjects.DictionaryDefectContinuity](T1.DictionaryDefectContinuity_DefectContinuityID, T1.DictionaryDefectContinuity_StandardDefectContinuityName, T1.DictionaryDefectContinuity_CoalDefectContinuityName, T1.DictionaryDefectContinuity_GoldDefectContinuityName, T1.DictionaryDefectContinuity_CustomDefectContinuityName, T1.DictionaryDefectContinuity_Description, T1.DictionaryDefectContinuity_FullDescription, T1.DictionaryDefectContinuity_Thumbnail, T1.DictionaryDefectContinuity_OriginalFileDataID, T1.DictionaryDefectContinuity_Version, T1.DictionaryDefectContinuity_VersionAntecedentID, T1.DictionaryDefectContinuity_VersionCertainty, T1.DictionaryDefectContinuity_VersionWorkflowInstanceID, T1.DictionaryDefectContinuity_VersionUpdatedBy, T1.DictionaryDefectContinuity_VersionDeletedBy, T1.DictionaryDefectContinuity_VersionOwnerContactID, T1.DictionaryDefectContinuity_VersionOwnerCompanyID, T1.DictionaryDefectContinuity_VersionUpdated)
    FROM (
        SELECT 
            T.DefectContinuityID AS DictionaryDefectContinuity_DefectContinuityID, 
            T.StandardDefectContinuityName AS DictionaryDefectContinuity_StandardDefectContinuityName, 
            T.CoalDefectContinuityName AS DictionaryDefectContinuity_CoalDefectContinuityName, 
            T.GoldDefectContinuityName AS DictionaryDefectContinuity_GoldDefectContinuityName, 
            T.CustomDefectContinuityName AS DictionaryDefectContinuity_CustomDefectContinuityName, 
            T.Description AS DictionaryDefectContinuity_Description, 
            T.FullDescription AS DictionaryDefectContinuity_FullDescription, 
            T.Thumbnail AS DictionaryDefectContinuity_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDefectContinuity_OriginalFileDataID, 
            T.Version AS DictionaryDefectContinuity_Version, 
            T.VersionAntecedentID AS DictionaryDefectContinuity_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDefectContinuity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDefectContinuity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDefectContinuity_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDefectContinuity_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDefectContinuity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDefectContinuity_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDefectContinuity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectContinuity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDefectSpacings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView448()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDefectSpacings
        [NKD.Module.BusinessObjects.DictionaryDefectSpacing](T1.DictionaryDefectSpacing_DefectSpacingID, T1.DictionaryDefectSpacing_StandardDefectSpacingName, T1.DictionaryDefectSpacing_CoalDefectSpacingName, T1.DictionaryDefectSpacing_GoldDefectSpacingName, T1.DictionaryDefectSpacing_CustomDefectSpacingName, T1.DictionaryDefectSpacing_Description, T1.DictionaryDefectSpacing_FullDescription, T1.DictionaryDefectSpacing_Thumbnail, T1.DictionaryDefectSpacing_OriginalFileDataID, T1.DictionaryDefectSpacing_Version, T1.DictionaryDefectSpacing_VersionAntecedentID, T1.DictionaryDefectSpacing_VersionCertainty, T1.DictionaryDefectSpacing_VersionWorkflowInstanceID, T1.DictionaryDefectSpacing_VersionUpdatedBy, T1.DictionaryDefectSpacing_VersionDeletedBy, T1.DictionaryDefectSpacing_VersionOwnerContactID, T1.DictionaryDefectSpacing_VersionOwnerCompanyID, T1.DictionaryDefectSpacing_VersionUpdated)
    FROM (
        SELECT 
            T.DefectSpacingID AS DictionaryDefectSpacing_DefectSpacingID, 
            T.StandardDefectSpacingName AS DictionaryDefectSpacing_StandardDefectSpacingName, 
            T.CoalDefectSpacingName AS DictionaryDefectSpacing_CoalDefectSpacingName, 
            T.GoldDefectSpacingName AS DictionaryDefectSpacing_GoldDefectSpacingName, 
            T.CustomDefectSpacingName AS DictionaryDefectSpacing_CustomDefectSpacingName, 
            T.Description AS DictionaryDefectSpacing_Description, 
            T.FullDescription AS DictionaryDefectSpacing_FullDescription, 
            T.Thumbnail AS DictionaryDefectSpacing_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDefectSpacing_OriginalFileDataID, 
            T.Version AS DictionaryDefectSpacing_Version, 
            T.VersionAntecedentID AS DictionaryDefectSpacing_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDefectSpacing_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDefectSpacing_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDefectSpacing_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDefectSpacing_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDefectSpacing_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDefectSpacing_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDefectSpacing_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectSpacing AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDefectTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView449()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDefectTypes
        [NKD.Module.BusinessObjects.DictionaryDefectType](T1.DictionaryDefectType_DefectTypeID, T1.DictionaryDefectType_StandardDefectTypeName, T1.DictionaryDefectType_CoalDefectTypeName, T1.DictionaryDefectType_GoldDefectTypeName, T1.DictionaryDefectType_CustomDefectTypeName, T1.DictionaryDefectType_Description, T1.DictionaryDefectType_FullDescription, T1.DictionaryDefectType_Thumbnail, T1.DictionaryDefectType_OriginalFileDataID, T1.DictionaryDefectType_Version, T1.DictionaryDefectType_VersionAntecedentID, T1.DictionaryDefectType_VersionCertainty, T1.DictionaryDefectType_VersionWorkflowInstanceID, T1.DictionaryDefectType_VersionUpdatedBy, T1.DictionaryDefectType_VersionDeletedBy, T1.DictionaryDefectType_VersionOwnerContactID, T1.DictionaryDefectType_VersionOwnerCompanyID, T1.DictionaryDefectType_VersionUpdated)
    FROM (
        SELECT 
            T.DefectTypeID AS DictionaryDefectType_DefectTypeID, 
            T.StandardDefectTypeName AS DictionaryDefectType_StandardDefectTypeName, 
            T.CoalDefectTypeName AS DictionaryDefectType_CoalDefectTypeName, 
            T.GoldDefectTypeName AS DictionaryDefectType_GoldDefectTypeName, 
            T.CustomDefectTypeName AS DictionaryDefectType_CustomDefectTypeName, 
            T.Description AS DictionaryDefectType_Description, 
            T.FullDescription AS DictionaryDefectType_FullDescription, 
            T.Thumbnail AS DictionaryDefectType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDefectType_OriginalFileDataID, 
            T.Version AS DictionaryDefectType_Version, 
            T.VersionAntecedentID AS DictionaryDefectType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDefectType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDefectType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDefectType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDefectType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDefectType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDefectType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDefectType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDesurveyAlgorithmTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView450()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDesurveyAlgorithmTypes
        [NKD.Module.BusinessObjects.DictionaryDesurveyAlgorithmType](T1.DictionaryDesurveyAlgorithmType_DesurveyAlgorithmTypeID, T1.DictionaryDesurveyAlgorithmType_StandardDesurveyAlgorithmTypeName, T1.DictionaryDesurveyAlgorithmType_CoalDesurveyAlgorithmTypeName, T1.DictionaryDesurveyAlgorithmType_GoldDesurveyAlgorithmTypeName, T1.DictionaryDesurveyAlgorithmType_CustomDesurveyAlgorithmTypeName, T1.DictionaryDesurveyAlgorithmType_Description, T1.DictionaryDesurveyAlgorithmType_FullDescription, T1.DictionaryDesurveyAlgorithmType_Thumbnail, T1.DictionaryDesurveyAlgorithmType_OriginalFileDataID, T1.DictionaryDesurveyAlgorithmType_Version, T1.DictionaryDesurveyAlgorithmType_VersionAntecedentID, T1.DictionaryDesurveyAlgorithmType_VersionCertainty, T1.DictionaryDesurveyAlgorithmType_VersionWorkflowInstanceID, T1.DictionaryDesurveyAlgorithmType_VersionUpdatedBy, T1.DictionaryDesurveyAlgorithmType_VersionDeletedBy, T1.DictionaryDesurveyAlgorithmType_VersionOwnerContactID, T1.DictionaryDesurveyAlgorithmType_VersionOwnerCompanyID, T1.DictionaryDesurveyAlgorithmType_VersionUpdated)
    FROM (
        SELECT 
            T.DesurveyAlgorithmTypeID AS DictionaryDesurveyAlgorithmType_DesurveyAlgorithmTypeID, 
            T.StandardDesurveyAlgorithmTypeName AS DictionaryDesurveyAlgorithmType_StandardDesurveyAlgorithmTypeName, 
            T.CoalDesurveyAlgorithmTypeName AS DictionaryDesurveyAlgorithmType_CoalDesurveyAlgorithmTypeName, 
            T.GoldDesurveyAlgorithmTypeName AS DictionaryDesurveyAlgorithmType_GoldDesurveyAlgorithmTypeName, 
            T.CustomDesurveyAlgorithmTypeName AS DictionaryDesurveyAlgorithmType_CustomDesurveyAlgorithmTypeName, 
            T.Description AS DictionaryDesurveyAlgorithmType_Description, 
            T.FullDescription AS DictionaryDesurveyAlgorithmType_FullDescription, 
            T.Thumbnail AS DictionaryDesurveyAlgorithmType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDesurveyAlgorithmType_OriginalFileDataID, 
            T.Version AS DictionaryDesurveyAlgorithmType_Version, 
            T.VersionAntecedentID AS DictionaryDesurveyAlgorithmType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDesurveyAlgorithmType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDesurveyAlgorithmType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDesurveyAlgorithmType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDesurveyAlgorithmType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDesurveyAlgorithmType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDesurveyAlgorithmType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDesurveyAlgorithmType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDesurveyAlgorithmType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDimensions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView451()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDimensions
        [NKD.Module.BusinessObjects.DictionaryDimension](T1.DictionaryDimension_DimensionID, T1.DictionaryDimension_StandardDimensionName, T1.DictionaryDimension_CoalDimensionName, T1.DictionaryDimension_GoldDimensionName, T1.DictionaryDimension_CustomDimensionName, T1.DictionaryDimension_Description, T1.DictionaryDimension_FullDescription, T1.DictionaryDimension_Thumbnail, T1.DictionaryDimension_OriginalFileDataID, T1.DictionaryDimension_Version, T1.DictionaryDimension_VersionAntecedentID, T1.DictionaryDimension_VersionCertainty, T1.DictionaryDimension_VersionWorkflowInstanceID, T1.DictionaryDimension_VersionUpdatedBy, T1.DictionaryDimension_VersionDeletedBy, T1.DictionaryDimension_VersionOwnerContactID, T1.DictionaryDimension_VersionOwnerCompanyID, T1.DictionaryDimension_VersionUpdated, T1.DictionaryDimension_DimensionGUID)
    FROM (
        SELECT 
            T.DimensionID AS DictionaryDimension_DimensionID, 
            T.StandardDimensionName AS DictionaryDimension_StandardDimensionName, 
            T.CoalDimensionName AS DictionaryDimension_CoalDimensionName, 
            T.GoldDimensionName AS DictionaryDimension_GoldDimensionName, 
            T.CustomDimensionName AS DictionaryDimension_CustomDimensionName, 
            T.Description AS DictionaryDimension_Description, 
            T.FullDescription AS DictionaryDimension_FullDescription, 
            T.Thumbnail AS DictionaryDimension_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDimension_OriginalFileDataID, 
            T.Version AS DictionaryDimension_Version, 
            T.VersionAntecedentID AS DictionaryDimension_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDimension_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDimension_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDimension_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDimension_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDimension_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDimension_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDimension_VersionUpdated, 
            T.DimensionGUID AS DictionaryDimension_DimensionGUID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDimension AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDipOrientationMethods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView452()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDipOrientationMethods
        [NKD.Module.BusinessObjects.DictionaryDipOrientationMethod](T1.DictionaryDipOrientationMethod_DipOrientationMethodID, T1.DictionaryDipOrientationMethod_StandardDipOrientationMethodName, T1.DictionaryDipOrientationMethod_CoalDipOrientationMethodName, T1.DictionaryDipOrientationMethod_GoldDipOrientationMethodName, T1.DictionaryDipOrientationMethod_CustomDipOrientationMethodName, T1.DictionaryDipOrientationMethod_Description, T1.DictionaryDipOrientationMethod_FullDescription, T1.DictionaryDipOrientationMethod_Thumbnail, T1.DictionaryDipOrientationMethod_OriginalFileDataID, T1.DictionaryDipOrientationMethod_Version, T1.DictionaryDipOrientationMethod_VersionAntecedentID, T1.DictionaryDipOrientationMethod_VersionCertainty, T1.DictionaryDipOrientationMethod_VersionWorkflowInstanceID, T1.DictionaryDipOrientationMethod_VersionUpdatedBy, T1.DictionaryDipOrientationMethod_VersionDeletedBy, T1.DictionaryDipOrientationMethod_VersionOwnerContactID, T1.DictionaryDipOrientationMethod_VersionOwnerCompanyID, T1.DictionaryDipOrientationMethod_VersionUpdated)
    FROM (
        SELECT 
            T.DipOrientationMethodID AS DictionaryDipOrientationMethod_DipOrientationMethodID, 
            T.StandardDipOrientationMethodName AS DictionaryDipOrientationMethod_StandardDipOrientationMethodName, 
            T.CoalDipOrientationMethodName AS DictionaryDipOrientationMethod_CoalDipOrientationMethodName, 
            T.GoldDipOrientationMethodName AS DictionaryDipOrientationMethod_GoldDipOrientationMethodName, 
            T.CustomDipOrientationMethodName AS DictionaryDipOrientationMethod_CustomDipOrientationMethodName, 
            T.Description AS DictionaryDipOrientationMethod_Description, 
            T.FullDescription AS DictionaryDipOrientationMethod_FullDescription, 
            T.Thumbnail AS DictionaryDipOrientationMethod_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDipOrientationMethod_OriginalFileDataID, 
            T.Version AS DictionaryDipOrientationMethod_Version, 
            T.VersionAntecedentID AS DictionaryDipOrientationMethod_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDipOrientationMethod_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDipOrientationMethod_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDipOrientationMethod_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDipOrientationMethod_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDipOrientationMethod_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDipOrientationMethod_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDipOrientationMethod_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDipOrientationMethod AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDomains.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView453()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDomains
        [NKD.Module.BusinessObjects.DictionaryDomain](T1.DictionaryDomain_DomainID, T1.DictionaryDomain_StandardDomainName, T1.DictionaryDomain_Description, T1.DictionaryDomain_FullDescription, T1.DictionaryDomain_Thumbnail, T1.DictionaryDomain_OriginalFileDataID, T1.DictionaryDomain_Version, T1.DictionaryDomain_VersionAntecedentID, T1.DictionaryDomain_VersionCertainty, T1.DictionaryDomain_VersionWorkflowInstanceID, T1.DictionaryDomain_VersionUpdatedBy, T1.DictionaryDomain_VersionDeletedBy, T1.DictionaryDomain_VersionOwnerContactID, T1.DictionaryDomain_VersionOwnerCompanyID, T1.DictionaryDomain_VersionUpdated)
    FROM (
        SELECT 
            T.DomainID AS DictionaryDomain_DomainID, 
            T.StandardDomainName AS DictionaryDomain_StandardDomainName, 
            T.Description AS DictionaryDomain_Description, 
            T.FullDescription AS DictionaryDomain_FullDescription, 
            T.Thumbnail AS DictionaryDomain_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDomain_OriginalFileDataID, 
            T.Version AS DictionaryDomain_Version, 
            T.VersionAntecedentID AS DictionaryDomain_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDomain_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDomain_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDomain_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDomain_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDomain_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDomain_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDomain_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomain AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDomainAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView454()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDomainAlias
        [NKD.Module.BusinessObjects.DictionaryDomainAlias](T1.DictionaryDomainAlias_DomainAliasID, T1.DictionaryDomainAlias_DomainID, T1.DictionaryDomainAlias_CustomDomainName, T1.DictionaryDomainAlias_FullDescription, T1.DictionaryDomainAlias_Thumbnail, T1.DictionaryDomainAlias_OriginalFileDataID, T1.DictionaryDomainAlias_Version, T1.DictionaryDomainAlias_VersionAntecedentID, T1.DictionaryDomainAlias_VersionCertainty, T1.DictionaryDomainAlias_VersionWorkflowInstanceID, T1.DictionaryDomainAlias_VersionUpdatedBy, T1.DictionaryDomainAlias_VersionDeletedBy, T1.DictionaryDomainAlias_VersionOwnerContactID, T1.DictionaryDomainAlias_VersionOwnerCompanyID, T1.DictionaryDomainAlias_VersionUpdated)
    FROM (
        SELECT 
            T.DomainAliasID AS DictionaryDomainAlias_DomainAliasID, 
            T.DomainID AS DictionaryDomainAlias_DomainID, 
            T.CustomDomainName AS DictionaryDomainAlias_CustomDomainName, 
            T.FullDescription AS DictionaryDomainAlias_FullDescription, 
            T.Thumbnail AS DictionaryDomainAlias_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDomainAlias_OriginalFileDataID, 
            T.Version AS DictionaryDomainAlias_Version, 
            T.VersionAntecedentID AS DictionaryDomainAlias_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDomainAlias_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDomainAlias_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDomainAlias_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDomainAlias_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDomainAlias_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDomainAlias_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDomainAlias_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomainAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDrillBitTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView455()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDrillBitTypes
        [NKD.Module.BusinessObjects.DictionaryDrillBitType](T1.DictionaryDrillBitType_DrillBitTypeID, T1.DictionaryDrillBitType_StandardDrillBitTypeName, T1.DictionaryDrillBitType_CoalDrillBitTypeName, T1.DictionaryDrillBitType_GoldDrillBitTypeName, T1.DictionaryDrillBitType_CustomDrillBitTypeName, T1.DictionaryDrillBitType_Description, T1.DictionaryDrillBitType_FullDescription, T1.DictionaryDrillBitType_Thumbnail, T1.DictionaryDrillBitType_OriginalFileDataID, T1.DictionaryDrillBitType_Version, T1.DictionaryDrillBitType_VersionAntecedentID, T1.DictionaryDrillBitType_VersionCertainty, T1.DictionaryDrillBitType_VersionWorkflowInstanceID, T1.DictionaryDrillBitType_VersionUpdatedBy, T1.DictionaryDrillBitType_VersionDeletedBy, T1.DictionaryDrillBitType_VersionOwnerContactID, T1.DictionaryDrillBitType_VersionOwnerCompanyID, T1.DictionaryDrillBitType_VersionUpdated)
    FROM (
        SELECT 
            T.DrillBitTypeID AS DictionaryDrillBitType_DrillBitTypeID, 
            T.StandardDrillBitTypeName AS DictionaryDrillBitType_StandardDrillBitTypeName, 
            T.CoalDrillBitTypeName AS DictionaryDrillBitType_CoalDrillBitTypeName, 
            T.GoldDrillBitTypeName AS DictionaryDrillBitType_GoldDrillBitTypeName, 
            T.CustomDrillBitTypeName AS DictionaryDrillBitType_CustomDrillBitTypeName, 
            T.Description AS DictionaryDrillBitType_Description, 
            T.FullDescription AS DictionaryDrillBitType_FullDescription, 
            T.Thumbnail AS DictionaryDrillBitType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDrillBitType_OriginalFileDataID, 
            T.Version AS DictionaryDrillBitType_Version, 
            T.VersionAntecedentID AS DictionaryDrillBitType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDrillBitType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDrillBitType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDrillBitType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDrillBitType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDrillBitType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDrillBitType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDrillBitType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillBitType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDrillCasingTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView456()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDrillCasingTypes
        [NKD.Module.BusinessObjects.DictionaryDrillCasingType](T1.DictionaryDrillCasingType_DrillCasingTypeID, T1.DictionaryDrillCasingType_StandardDrillCasingTypeName, T1.DictionaryDrillCasingType_CoalDrillCasingTypeName, T1.DictionaryDrillCasingType_GoldDrillCasingTypeName, T1.DictionaryDrillCasingType_CustomDrillCasingTypeName, T1.DictionaryDrillCasingType_Description, T1.DictionaryDrillCasingType_FullDescription, T1.DictionaryDrillCasingType_Thumbnail, T1.DictionaryDrillCasingType_OriginalFileDataID, T1.DictionaryDrillCasingType_Version, T1.DictionaryDrillCasingType_VersionAntecedentID, T1.DictionaryDrillCasingType_VersionCertainty, T1.DictionaryDrillCasingType_VersionWorkflowInstanceID, T1.DictionaryDrillCasingType_VersionUpdatedBy, T1.DictionaryDrillCasingType_VersionDeletedBy, T1.DictionaryDrillCasingType_VersionOwnerContactID, T1.DictionaryDrillCasingType_VersionOwnerCompanyID, T1.DictionaryDrillCasingType_VersionUpdated)
    FROM (
        SELECT 
            T.DrillCasingTypeID AS DictionaryDrillCasingType_DrillCasingTypeID, 
            T.StandardDrillCasingTypeName AS DictionaryDrillCasingType_StandardDrillCasingTypeName, 
            T.CoalDrillCasingTypeName AS DictionaryDrillCasingType_CoalDrillCasingTypeName, 
            T.GoldDrillCasingTypeName AS DictionaryDrillCasingType_GoldDrillCasingTypeName, 
            T.CustomDrillCasingTypeName AS DictionaryDrillCasingType_CustomDrillCasingTypeName, 
            T.Description AS DictionaryDrillCasingType_Description, 
            T.FullDescription AS DictionaryDrillCasingType_FullDescription, 
            T.Thumbnail AS DictionaryDrillCasingType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDrillCasingType_OriginalFileDataID, 
            T.Version AS DictionaryDrillCasingType_Version, 
            T.VersionAntecedentID AS DictionaryDrillCasingType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDrillCasingType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDrillCasingType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDrillCasingType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDrillCasingType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDrillCasingType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDrillCasingType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDrillCasingType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillCasingType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDrillFluids.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView457()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDrillFluids
        [NKD.Module.BusinessObjects.DictionaryDrillFluid](T1.DictionaryDrillFluid_DrillFluidID, T1.DictionaryDrillFluid_StandardDrillFluidName, T1.DictionaryDrillFluid_CoalDrillFluidName, T1.DictionaryDrillFluid_GoldDrillFluidName, T1.DictionaryDrillFluid_CustomDrillFluidName, T1.DictionaryDrillFluid_Description, T1.DictionaryDrillFluid_FullDescription, T1.DictionaryDrillFluid_Thumbnail, T1.DictionaryDrillFluid_OriginalFileDataID, T1.DictionaryDrillFluid_Version, T1.DictionaryDrillFluid_VersionAntecedentID, T1.DictionaryDrillFluid_VersionCertainty, T1.DictionaryDrillFluid_VersionWorkflowInstanceID, T1.DictionaryDrillFluid_VersionUpdatedBy, T1.DictionaryDrillFluid_VersionDeletedBy, T1.DictionaryDrillFluid_VersionOwnerContactID, T1.DictionaryDrillFluid_VersionOwnerCompanyID, T1.DictionaryDrillFluid_VersionUpdated)
    FROM (
        SELECT 
            T.DrillFluidID AS DictionaryDrillFluid_DrillFluidID, 
            T.StandardDrillFluidName AS DictionaryDrillFluid_StandardDrillFluidName, 
            T.CoalDrillFluidName AS DictionaryDrillFluid_CoalDrillFluidName, 
            T.GoldDrillFluidName AS DictionaryDrillFluid_GoldDrillFluidName, 
            T.CustomDrillFluidName AS DictionaryDrillFluid_CustomDrillFluidName, 
            T.Description AS DictionaryDrillFluid_Description, 
            T.FullDescription AS DictionaryDrillFluid_FullDescription, 
            T.Thumbnail AS DictionaryDrillFluid_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDrillFluid_OriginalFileDataID, 
            T.Version AS DictionaryDrillFluid_Version, 
            T.VersionAntecedentID AS DictionaryDrillFluid_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDrillFluid_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDrillFluid_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDrillFluid_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDrillFluid_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDrillFluid_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDrillFluid_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDrillFluid_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillFluid AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDrillRigTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView458()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDrillRigTypes
        [NKD.Module.BusinessObjects.DictionaryDrillRigType](T1.DictionaryDrillRigType_DrillRigTypeID, T1.DictionaryDrillRigType_StandardDrillRigTypeName, T1.DictionaryDrillRigType_CoalDrillRigTypeName, T1.DictionaryDrillRigType_GoldDrillRigTypeName, T1.DictionaryDrillRigType_CustomDrillRigTypeName, T1.DictionaryDrillRigType_Description, T1.DictionaryDrillRigType_FullDescription, T1.DictionaryDrillRigType_Thumbnail, T1.DictionaryDrillRigType_OriginalFileDataID, T1.DictionaryDrillRigType_Version, T1.DictionaryDrillRigType_VersionAntecedentID, T1.DictionaryDrillRigType_VersionCertainty, T1.DictionaryDrillRigType_VersionWorkflowInstanceID, T1.DictionaryDrillRigType_VersionUpdatedBy, T1.DictionaryDrillRigType_VersionDeletedBy, T1.DictionaryDrillRigType_VersionOwnerContactID, T1.DictionaryDrillRigType_VersionOwnerCompanyID, T1.DictionaryDrillRigType_VersionUpdated)
    FROM (
        SELECT 
            T.DrillRigTypeID AS DictionaryDrillRigType_DrillRigTypeID, 
            T.StandardDrillRigTypeName AS DictionaryDrillRigType_StandardDrillRigTypeName, 
            T.CoalDrillRigTypeName AS DictionaryDrillRigType_CoalDrillRigTypeName, 
            T.GoldDrillRigTypeName AS DictionaryDrillRigType_GoldDrillRigTypeName, 
            T.CustomDrillRigTypeName AS DictionaryDrillRigType_CustomDrillRigTypeName, 
            T.Description AS DictionaryDrillRigType_Description, 
            T.FullDescription AS DictionaryDrillRigType_FullDescription, 
            T.Thumbnail AS DictionaryDrillRigType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDrillRigType_OriginalFileDataID, 
            T.Version AS DictionaryDrillRigType_Version, 
            T.VersionAntecedentID AS DictionaryDrillRigType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDrillRigType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDrillRigType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDrillRigType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDrillRigType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDrillRigType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDrillRigType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDrillRigType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillRigType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryDrillSizes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView459()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryDrillSizes
        [NKD.Module.BusinessObjects.DictionaryDrillSize](T1.DictionaryDrillSize_DrillSizeID, T1.DictionaryDrillSize_StandardDrillSizeName, T1.DictionaryDrillSize_CoalDrillSizeName, T1.DictionaryDrillSize_GoldDrillSizeName, T1.DictionaryDrillSize_CustomDrillSizeName, T1.DictionaryDrillSize_Description, T1.DictionaryDrillSize_FullDescription, T1.DictionaryDrillSize_Thumbnail, T1.DictionaryDrillSize_OriginalFileDataID, T1.DictionaryDrillSize_Version, T1.DictionaryDrillSize_VersionAntecedentID, T1.DictionaryDrillSize_VersionCertainty, T1.DictionaryDrillSize_VersionWorkflowInstanceID, T1.DictionaryDrillSize_VersionUpdatedBy, T1.DictionaryDrillSize_VersionDeletedBy, T1.DictionaryDrillSize_VersionOwnerContactID, T1.DictionaryDrillSize_VersionOwnerCompanyID, T1.DictionaryDrillSize_VersionUpdated)
    FROM (
        SELECT 
            T.DrillSizeID AS DictionaryDrillSize_DrillSizeID, 
            T.StandardDrillSizeName AS DictionaryDrillSize_StandardDrillSizeName, 
            T.CoalDrillSizeName AS DictionaryDrillSize_CoalDrillSizeName, 
            T.GoldDrillSizeName AS DictionaryDrillSize_GoldDrillSizeName, 
            T.CustomDrillSizeName AS DictionaryDrillSize_CustomDrillSizeName, 
            T.Description AS DictionaryDrillSize_Description, 
            T.FullDescription AS DictionaryDrillSize_FullDescription, 
            T.Thumbnail AS DictionaryDrillSize_Thumbnail, 
            T.OriginalFileDataID AS DictionaryDrillSize_OriginalFileDataID, 
            T.Version AS DictionaryDrillSize_Version, 
            T.VersionAntecedentID AS DictionaryDrillSize_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryDrillSize_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryDrillSize_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryDrillSize_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryDrillSize_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryDrillSize_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryDrillSize_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryDrillSize_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillSize AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryEstimatedStrengths.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView460()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryEstimatedStrengths
        [NKD.Module.BusinessObjects.DictionaryEstimatedStrength](T1.DictionaryEstimatedStrength_EstimatedStrengthID, T1.DictionaryEstimatedStrength_StandardEstimatedStrengthName, T1.DictionaryEstimatedStrength_CoalEstimatedStrengthName, T1.DictionaryEstimatedStrength_GoldEstimatedStrengthName, T1.DictionaryEstimatedStrength_CustomEstimatedStrengthName, T1.DictionaryEstimatedStrength_Description, T1.DictionaryEstimatedStrength_FullDescription, T1.DictionaryEstimatedStrength_Thumbnail, T1.DictionaryEstimatedStrength_OriginalFileDataID, T1.DictionaryEstimatedStrength_Version, T1.DictionaryEstimatedStrength_VersionAntecedentID, T1.DictionaryEstimatedStrength_VersionCertainty, T1.DictionaryEstimatedStrength_VersionWorkflowInstanceID, T1.DictionaryEstimatedStrength_VersionUpdatedBy, T1.DictionaryEstimatedStrength_VersionDeletedBy, T1.DictionaryEstimatedStrength_VersionOwnerContactID, T1.DictionaryEstimatedStrength_VersionOwnerCompanyID, T1.DictionaryEstimatedStrength_VersionUpdated)
    FROM (
        SELECT 
            T.EstimatedStrengthID AS DictionaryEstimatedStrength_EstimatedStrengthID, 
            T.StandardEstimatedStrengthName AS DictionaryEstimatedStrength_StandardEstimatedStrengthName, 
            T.CoalEstimatedStrengthName AS DictionaryEstimatedStrength_CoalEstimatedStrengthName, 
            T.GoldEstimatedStrengthName AS DictionaryEstimatedStrength_GoldEstimatedStrengthName, 
            T.CustomEstimatedStrengthName AS DictionaryEstimatedStrength_CustomEstimatedStrengthName, 
            T.Description AS DictionaryEstimatedStrength_Description, 
            T.FullDescription AS DictionaryEstimatedStrength_FullDescription, 
            T.Thumbnail AS DictionaryEstimatedStrength_Thumbnail, 
            T.OriginalFileDataID AS DictionaryEstimatedStrength_OriginalFileDataID, 
            T.Version AS DictionaryEstimatedStrength_Version, 
            T.VersionAntecedentID AS DictionaryEstimatedStrength_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryEstimatedStrength_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryEstimatedStrength_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryEstimatedStrength_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryEstimatedStrength_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryEstimatedStrength_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryEstimatedStrength_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryEstimatedStrength_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryEstimatedStrength AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryFailureModes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView461()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryFailureModes
        [NKD.Module.BusinessObjects.DictionaryFailureMode](T1.DictionaryFailureMode_FailureModeID, T1.DictionaryFailureMode_StandardFailureModeName, T1.DictionaryFailureMode_CoalFailureModeName, T1.DictionaryFailureMode_GoldFailureModeName, T1.DictionaryFailureMode_CustomFailureModeName, T1.DictionaryFailureMode_Description, T1.DictionaryFailureMode_FullDescription, T1.DictionaryFailureMode_Thumbnail, T1.DictionaryFailureMode_OriginalFileDataID, T1.DictionaryFailureMode_Version, T1.DictionaryFailureMode_VersionAntecedentID, T1.DictionaryFailureMode_VersionCertainty, T1.DictionaryFailureMode_VersionWorkflowInstanceID, T1.DictionaryFailureMode_VersionUpdatedBy, T1.DictionaryFailureMode_VersionDeletedBy, T1.DictionaryFailureMode_VersionOwnerContactID, T1.DictionaryFailureMode_VersionOwnerCompanyID, T1.DictionaryFailureMode_VersionUpdated)
    FROM (
        SELECT 
            T.FailureModeID AS DictionaryFailureMode_FailureModeID, 
            T.StandardFailureModeName AS DictionaryFailureMode_StandardFailureModeName, 
            T.CoalFailureModeName AS DictionaryFailureMode_CoalFailureModeName, 
            T.GoldFailureModeName AS DictionaryFailureMode_GoldFailureModeName, 
            T.CustomFailureModeName AS DictionaryFailureMode_CustomFailureModeName, 
            T.Description AS DictionaryFailureMode_Description, 
            T.FullDescription AS DictionaryFailureMode_FullDescription, 
            T.Thumbnail AS DictionaryFailureMode_Thumbnail, 
            T.OriginalFileDataID AS DictionaryFailureMode_OriginalFileDataID, 
            T.Version AS DictionaryFailureMode_Version, 
            T.VersionAntecedentID AS DictionaryFailureMode_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryFailureMode_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryFailureMode_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryFailureMode_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryFailureMode_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryFailureMode_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryFailureMode_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryFailureMode_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryFailureMode AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryFileTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView462()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryFileTypes
        [NKD.Module.BusinessObjects.DictionaryFileType](T1.DictionaryFileType_FileTypeID, T1.DictionaryFileType_ParentFileTypeID, T1.DictionaryFileType_CompanyID, T1.DictionaryFileType_StandardFileTypeName, T1.DictionaryFileType_CustomFileTypeName, T1.DictionaryFileType_Description, T1.DictionaryFileType_FullDescription, T1.DictionaryFileType_Thumbnail, T1.DictionaryFileType_OriginalFileDataID, T1.DictionaryFileType_Version, T1.DictionaryFileType_VersionAntecedentID, T1.DictionaryFileType_VersionCertainty, T1.DictionaryFileType_VersionWorkflowInstanceID, T1.DictionaryFileType_VersionUpdatedBy, T1.DictionaryFileType_VersionDeletedBy, T1.DictionaryFileType_VersionOwnerContactID, T1.DictionaryFileType_VersionOwnerCompanyID, T1.DictionaryFileType_VersionUpdated)
    FROM (
        SELECT 
            T.FileTypeID AS DictionaryFileType_FileTypeID, 
            T.ParentFileTypeID AS DictionaryFileType_ParentFileTypeID, 
            T.CompanyID AS DictionaryFileType_CompanyID, 
            T.StandardFileTypeName AS DictionaryFileType_StandardFileTypeName, 
            T.CustomFileTypeName AS DictionaryFileType_CustomFileTypeName, 
            T.Description AS DictionaryFileType_Description, 
            T.FullDescription AS DictionaryFileType_FullDescription, 
            T.Thumbnail AS DictionaryFileType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryFileType_OriginalFileDataID, 
            T.Version AS DictionaryFileType_Version, 
            T.VersionAntecedentID AS DictionaryFileType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryFileType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryFileType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryFileType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryFileType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryFileType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryFileType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryFileType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryFileType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryFlowTestTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView463()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryFlowTestTypes
        [NKD.Module.BusinessObjects.DictionaryFlowTestType](T1.DictionaryFlowTestType_FlowTestTypeID, T1.DictionaryFlowTestType_StandardFlowTestTypeName, T1.DictionaryFlowTestType_CoalFlowTestTypeName, T1.DictionaryFlowTestType_GoldFlowTestTypeName, T1.DictionaryFlowTestType_CustomFlowTestTypeName, T1.DictionaryFlowTestType_Description, T1.DictionaryFlowTestType_FullDescription, T1.DictionaryFlowTestType_Thumbnail, T1.DictionaryFlowTestType_OriginalFileDataID, T1.DictionaryFlowTestType_Version, T1.DictionaryFlowTestType_VersionAntecedentID, T1.DictionaryFlowTestType_VersionCertainty, T1.DictionaryFlowTestType_VersionWorkflowInstanceID, T1.DictionaryFlowTestType_VersionUpdatedBy, T1.DictionaryFlowTestType_VersionDeletedBy, T1.DictionaryFlowTestType_VersionOwnerContactID, T1.DictionaryFlowTestType_VersionOwnerCompanyID, T1.DictionaryFlowTestType_VersionUpdated)
    FROM (
        SELECT 
            T.FlowTestTypeID AS DictionaryFlowTestType_FlowTestTypeID, 
            T.StandardFlowTestTypeName AS DictionaryFlowTestType_StandardFlowTestTypeName, 
            T.CoalFlowTestTypeName AS DictionaryFlowTestType_CoalFlowTestTypeName, 
            T.GoldFlowTestTypeName AS DictionaryFlowTestType_GoldFlowTestTypeName, 
            T.CustomFlowTestTypeName AS DictionaryFlowTestType_CustomFlowTestTypeName, 
            T.Description AS DictionaryFlowTestType_Description, 
            T.FullDescription AS DictionaryFlowTestType_FullDescription, 
            T.Thumbnail AS DictionaryFlowTestType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryFlowTestType_OriginalFileDataID, 
            T.Version AS DictionaryFlowTestType_Version, 
            T.VersionAntecedentID AS DictionaryFlowTestType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryFlowTestType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryFlowTestType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryFlowTestType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryFlowTestType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryFlowTestType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryFlowTestType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryFlowTestType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryFlowTestType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryGasDetecteds.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView464()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryGasDetecteds
        [NKD.Module.BusinessObjects.DictionaryGasDetected](T1.DictionaryGasDetected_GasDetectedID, T1.DictionaryGasDetected_StandardGasDetectedName, T1.DictionaryGasDetected_CoalGasDetectedName, T1.DictionaryGasDetected_GoldGasDetectedName, T1.DictionaryGasDetected_CustomGasDetectedName, T1.DictionaryGasDetected_Description, T1.DictionaryGasDetected_FullDescription, T1.DictionaryGasDetected_Thumbnail, T1.DictionaryGasDetected_OriginalFileDataID, T1.DictionaryGasDetected_Version, T1.DictionaryGasDetected_VersionAntecedentID, T1.DictionaryGasDetected_VersionCertainty, T1.DictionaryGasDetected_VersionWorkflowInstanceID, T1.DictionaryGasDetected_VersionUpdatedBy, T1.DictionaryGasDetected_VersionDeletedBy, T1.DictionaryGasDetected_VersionOwnerContactID, T1.DictionaryGasDetected_VersionOwnerCompanyID, T1.DictionaryGasDetected_VersionUpdated)
    FROM (
        SELECT 
            T.GasDetectedID AS DictionaryGasDetected_GasDetectedID, 
            T.StandardGasDetectedName AS DictionaryGasDetected_StandardGasDetectedName, 
            T.CoalGasDetectedName AS DictionaryGasDetected_CoalGasDetectedName, 
            T.GoldGasDetectedName AS DictionaryGasDetected_GoldGasDetectedName, 
            T.CustomGasDetectedName AS DictionaryGasDetected_CustomGasDetectedName, 
            T.Description AS DictionaryGasDetected_Description, 
            T.FullDescription AS DictionaryGasDetected_FullDescription, 
            T.Thumbnail AS DictionaryGasDetected_Thumbnail, 
            T.OriginalFileDataID AS DictionaryGasDetected_OriginalFileDataID, 
            T.Version AS DictionaryGasDetected_Version, 
            T.VersionAntecedentID AS DictionaryGasDetected_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryGasDetected_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryGasDetected_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryGasDetected_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryGasDetected_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryGasDetected_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryGasDetected_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryGasDetected_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGasDetected AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryGeodeticDatums.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView465()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryGeodeticDatums
        [NKD.Module.BusinessObjects.DictionaryGeodeticDatum](T1.DictionaryGeodeticDatum_GeodeticDatumID, T1.DictionaryGeodeticDatum_StandardGeodeticDatumName, T1.DictionaryGeodeticDatum_CoalGeodeticDatumName, T1.DictionaryGeodeticDatum_GoldGeodeticDatumName, T1.DictionaryGeodeticDatum_CustomGeodeticDatumName, T1.DictionaryGeodeticDatum_Description, T1.DictionaryGeodeticDatum_FullDescription, T1.DictionaryGeodeticDatum_Thumbnail, T1.DictionaryGeodeticDatum_OriginalFileDataID, T1.DictionaryGeodeticDatum_Version, T1.DictionaryGeodeticDatum_VersionAntecedentID, T1.DictionaryGeodeticDatum_VersionCertainty, T1.DictionaryGeodeticDatum_VersionWorkflowInstanceID, T1.DictionaryGeodeticDatum_VersionUpdatedBy, T1.DictionaryGeodeticDatum_VersionDeletedBy, T1.DictionaryGeodeticDatum_VersionOwnerContactID, T1.DictionaryGeodeticDatum_VersionOwnerCompanyID, T1.DictionaryGeodeticDatum_VersionUpdated)
    FROM (
        SELECT 
            T.GeodeticDatumID AS DictionaryGeodeticDatum_GeodeticDatumID, 
            T.StandardGeodeticDatumName AS DictionaryGeodeticDatum_StandardGeodeticDatumName, 
            T.CoalGeodeticDatumName AS DictionaryGeodeticDatum_CoalGeodeticDatumName, 
            T.GoldGeodeticDatumName AS DictionaryGeodeticDatum_GoldGeodeticDatumName, 
            T.CustomGeodeticDatumName AS DictionaryGeodeticDatum_CustomGeodeticDatumName, 
            T.Description AS DictionaryGeodeticDatum_Description, 
            T.FullDescription AS DictionaryGeodeticDatum_FullDescription, 
            T.Thumbnail AS DictionaryGeodeticDatum_Thumbnail, 
            T.OriginalFileDataID AS DictionaryGeodeticDatum_OriginalFileDataID, 
            T.Version AS DictionaryGeodeticDatum_Version, 
            T.VersionAntecedentID AS DictionaryGeodeticDatum_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryGeodeticDatum_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryGeodeticDatum_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryGeodeticDatum_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryGeodeticDatum_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryGeodeticDatum_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryGeodeticDatum_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryGeodeticDatum_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeodeticDatum AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryGeophysicalLogTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView466()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryGeophysicalLogTypes
        [NKD.Module.BusinessObjects.DictionaryGeophysicalLogType](T1.DictionaryGeophysicalLogType_GeophysicalLogTypeID, T1.DictionaryGeophysicalLogType_StandardGeophysicalLogTypeName, T1.DictionaryGeophysicalLogType_CoalGeophysicalLogTypeName, T1.DictionaryGeophysicalLogType_GoldGeophysicalLogTypeName, T1.DictionaryGeophysicalLogType_CustomGeophysicalLogTypeName, T1.DictionaryGeophysicalLogType_Description, T1.DictionaryGeophysicalLogType_FullDescription, T1.DictionaryGeophysicalLogType_Thumbnail, T1.DictionaryGeophysicalLogType_OriginalFileDataID, T1.DictionaryGeophysicalLogType_Version, T1.DictionaryGeophysicalLogType_VersionAntecedentID, T1.DictionaryGeophysicalLogType_VersionCertainty, T1.DictionaryGeophysicalLogType_VersionWorkflowInstanceID, T1.DictionaryGeophysicalLogType_VersionUpdatedBy, T1.DictionaryGeophysicalLogType_VersionDeletedBy, T1.DictionaryGeophysicalLogType_VersionOwnerContactID, T1.DictionaryGeophysicalLogType_VersionOwnerCompanyID, T1.DictionaryGeophysicalLogType_VersionUpdated)
    FROM (
        SELECT 
            T.GeophysicalLogTypeID AS DictionaryGeophysicalLogType_GeophysicalLogTypeID, 
            T.StandardGeophysicalLogTypeName AS DictionaryGeophysicalLogType_StandardGeophysicalLogTypeName, 
            T.CoalGeophysicalLogTypeName AS DictionaryGeophysicalLogType_CoalGeophysicalLogTypeName, 
            T.GoldGeophysicalLogTypeName AS DictionaryGeophysicalLogType_GoldGeophysicalLogTypeName, 
            T.CustomGeophysicalLogTypeName AS DictionaryGeophysicalLogType_CustomGeophysicalLogTypeName, 
            T.Description AS DictionaryGeophysicalLogType_Description, 
            T.FullDescription AS DictionaryGeophysicalLogType_FullDescription, 
            T.Thumbnail AS DictionaryGeophysicalLogType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryGeophysicalLogType_OriginalFileDataID, 
            T.Version AS DictionaryGeophysicalLogType_Version, 
            T.VersionAntecedentID AS DictionaryGeophysicalLogType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryGeophysicalLogType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryGeophysicalLogType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryGeophysicalLogType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryGeophysicalLogType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryGeophysicalLogType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryGeophysicalLogType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryGeophysicalLogType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeophysicalLogType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView467()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryGroups
        [NKD.Module.BusinessObjects.DictionaryGroup](T1.DictionaryGroup_GroupID, T1.DictionaryGroup_StandardGroupName, T1.DictionaryGroup_CoalGroupName, T1.DictionaryGroup_GoldGroupName, T1.DictionaryGroup_CustomGroupName, T1.DictionaryGroup_Description, T1.DictionaryGroup_FullDescription, T1.DictionaryGroup_Thumbnail, T1.DictionaryGroup_OriginalFileDataID, T1.DictionaryGroup_Version, T1.DictionaryGroup_VersionAntecedentID, T1.DictionaryGroup_VersionCertainty, T1.DictionaryGroup_VersionWorkflowInstanceID, T1.DictionaryGroup_VersionUpdatedBy, T1.DictionaryGroup_VersionDeletedBy, T1.DictionaryGroup_VersionOwnerContactID, T1.DictionaryGroup_VersionOwnerCompanyID, T1.DictionaryGroup_VersionUpdated)
    FROM (
        SELECT 
            T.GroupID AS DictionaryGroup_GroupID, 
            T.StandardGroupName AS DictionaryGroup_StandardGroupName, 
            T.CoalGroupName AS DictionaryGroup_CoalGroupName, 
            T.GoldGroupName AS DictionaryGroup_GoldGroupName, 
            T.CustomGroupName AS DictionaryGroup_CustomGroupName, 
            T.Description AS DictionaryGroup_Description, 
            T.FullDescription AS DictionaryGroup_FullDescription, 
            T.Thumbnail AS DictionaryGroup_Thumbnail, 
            T.OriginalFileDataID AS DictionaryGroup_OriginalFileDataID, 
            T.Version AS DictionaryGroup_Version, 
            T.VersionAntecedentID AS DictionaryGroup_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryGroup_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryGroup_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryGroup_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryGroup_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryGroup_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryGroup_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryGroup_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroup AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryGroupMemberships.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView468()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryGroupMemberships
        [NKD.Module.BusinessObjects.DictionaryGroupMembership](T1.DictionaryGroupMembership_GroupMembershipID, T1.DictionaryGroupMembership_ParentGroupID, T1.DictionaryGroupMembership_ChildGroupID, T1.DictionaryGroupMembership_FullDescription, T1.DictionaryGroupMembership_Thumbnail, T1.DictionaryGroupMembership_OriginalFileDataID, T1.DictionaryGroupMembership_Version, T1.DictionaryGroupMembership_VersionAntecedentID, T1.DictionaryGroupMembership_VersionCertainty, T1.DictionaryGroupMembership_VersionWorkflowInstanceID, T1.DictionaryGroupMembership_VersionUpdatedBy, T1.DictionaryGroupMembership_VersionDeletedBy, T1.DictionaryGroupMembership_VersionOwnerContactID, T1.DictionaryGroupMembership_VersionOwnerCompanyID, T1.DictionaryGroupMembership_VersionUpdated)
    FROM (
        SELECT 
            T.GroupMembershipID AS DictionaryGroupMembership_GroupMembershipID, 
            T.ParentGroupID AS DictionaryGroupMembership_ParentGroupID, 
            T.ChildGroupID AS DictionaryGroupMembership_ChildGroupID, 
            T.FullDescription AS DictionaryGroupMembership_FullDescription, 
            T.Thumbnail AS DictionaryGroupMembership_Thumbnail, 
            T.OriginalFileDataID AS DictionaryGroupMembership_OriginalFileDataID, 
            T.Version AS DictionaryGroupMembership_Version, 
            T.VersionAntecedentID AS DictionaryGroupMembership_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryGroupMembership_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryGroupMembership_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryGroupMembership_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryGroupMembership_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryGroupMembership_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryGroupMembership_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryGroupMembership_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroupMembership AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHeightDatums.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView469()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHeightDatums
        [NKD.Module.BusinessObjects.DictionaryHeightDatum](T1.DictionaryHeightDatum_HeightDatumID, T1.DictionaryHeightDatum_StandardHeightDatumName, T1.DictionaryHeightDatum_CoalHeightDatumName, T1.DictionaryHeightDatum_GoldHeightDatumName, T1.DictionaryHeightDatum_CustomHeightDatumName, T1.DictionaryHeightDatum_Description, T1.DictionaryHeightDatum_FullDescription, T1.DictionaryHeightDatum_Thumbnail, T1.DictionaryHeightDatum_OriginalFileDataID, T1.DictionaryHeightDatum_Version, T1.DictionaryHeightDatum_VersionAntecedentID, T1.DictionaryHeightDatum_VersionCertainty, T1.DictionaryHeightDatum_VersionWorkflowInstanceID, T1.DictionaryHeightDatum_VersionUpdatedBy, T1.DictionaryHeightDatum_VersionDeletedBy, T1.DictionaryHeightDatum_VersionOwnerContactID, T1.DictionaryHeightDatum_VersionOwnerCompanyID, T1.DictionaryHeightDatum_VersionUpdated)
    FROM (
        SELECT 
            T.HeightDatumID AS DictionaryHeightDatum_HeightDatumID, 
            T.StandardHeightDatumName AS DictionaryHeightDatum_StandardHeightDatumName, 
            T.CoalHeightDatumName AS DictionaryHeightDatum_CoalHeightDatumName, 
            T.GoldHeightDatumName AS DictionaryHeightDatum_GoldHeightDatumName, 
            T.CustomHeightDatumName AS DictionaryHeightDatum_CustomHeightDatumName, 
            T.Description AS DictionaryHeightDatum_Description, 
            T.FullDescription AS DictionaryHeightDatum_FullDescription, 
            T.Thumbnail AS DictionaryHeightDatum_Thumbnail, 
            T.OriginalFileDataID AS DictionaryHeightDatum_OriginalFileDataID, 
            T.Version AS DictionaryHeightDatum_Version, 
            T.VersionAntecedentID AS DictionaryHeightDatum_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryHeightDatum_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryHeightDatum_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryHeightDatum_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryHeightDatum_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryHeightDatum_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryHeightDatum_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryHeightDatum_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHeightDatum AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHolePurposes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView470()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHolePurposes
        [NKD.Module.BusinessObjects.DictionaryHolePurpose](T1.DictionaryHolePurpose_HolePurposeID, T1.DictionaryHolePurpose_StandardHolePurposeName, T1.DictionaryHolePurpose_CoalHolePurposeName, T1.DictionaryHolePurpose_GoldHolePurposeName, T1.DictionaryHolePurpose_CustomHolePurposeName, T1.DictionaryHolePurpose_Description, T1.DictionaryHolePurpose_FullDescription, T1.DictionaryHolePurpose_Thumbnail, T1.DictionaryHolePurpose_OriginalFileDataID, T1.DictionaryHolePurpose_Version, T1.DictionaryHolePurpose_VersionAntecedentID, T1.DictionaryHolePurpose_VersionCertainty, T1.DictionaryHolePurpose_VersionWorkflowInstanceID, T1.DictionaryHolePurpose_VersionUpdatedBy, T1.DictionaryHolePurpose_VersionDeletedBy, T1.DictionaryHolePurpose_VersionOwnerContactID, T1.DictionaryHolePurpose_VersionOwnerCompanyID, T1.DictionaryHolePurpose_VersionUpdated)
    FROM (
        SELECT 
            T.HolePurposeID AS DictionaryHolePurpose_HolePurposeID, 
            T.StandardHolePurposeName AS DictionaryHolePurpose_StandardHolePurposeName, 
            T.CoalHolePurposeName AS DictionaryHolePurpose_CoalHolePurposeName, 
            T.GoldHolePurposeName AS DictionaryHolePurpose_GoldHolePurposeName, 
            T.CustomHolePurposeName AS DictionaryHolePurpose_CustomHolePurposeName, 
            T.Description AS DictionaryHolePurpose_Description, 
            T.FullDescription AS DictionaryHolePurpose_FullDescription, 
            T.Thumbnail AS DictionaryHolePurpose_Thumbnail, 
            T.OriginalFileDataID AS DictionaryHolePurpose_OriginalFileDataID, 
            T.Version AS DictionaryHolePurpose_Version, 
            T.VersionAntecedentID AS DictionaryHolePurpose_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryHolePurpose_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryHolePurpose_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryHolePurpose_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryHolePurpose_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryHolePurpose_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryHolePurpose_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryHolePurpose_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHolePurpose AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHoleStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView471()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHoleStatus
        [NKD.Module.BusinessObjects.DictionaryHoleStatus](T1.DictionaryHoleStatus_HoleStatusID, T1.DictionaryHoleStatus_StandardHoleStatusName, T1.DictionaryHoleStatus_CoalHoleStatusName, T1.DictionaryHoleStatus_GoldHoleStatusName, T1.DictionaryHoleStatus_CustomHoleStatusName, T1.DictionaryHoleStatus_Description, T1.DictionaryHoleStatus_FullDescription, T1.DictionaryHoleStatus_Thumbnail, T1.DictionaryHoleStatus_OriginalFileDataID, T1.DictionaryHoleStatus_Version, T1.DictionaryHoleStatus_VersionAntecedentID, T1.DictionaryHoleStatus_VersionCertainty, T1.DictionaryHoleStatus_VersionWorkflowInstanceID, T1.DictionaryHoleStatus_VersionUpdatedBy, T1.DictionaryHoleStatus_VersionDeletedBy, T1.DictionaryHoleStatus_VersionOwnerContactID, T1.DictionaryHoleStatus_VersionOwnerCompanyID, T1.DictionaryHoleStatus_VersionUpdated)
    FROM (
        SELECT 
            T.HoleStatusID AS DictionaryHoleStatus_HoleStatusID, 
            T.StandardHoleStatusName AS DictionaryHoleStatus_StandardHoleStatusName, 
            T.CoalHoleStatusName AS DictionaryHoleStatus_CoalHoleStatusName, 
            T.GoldHoleStatusName AS DictionaryHoleStatus_GoldHoleStatusName, 
            T.CustomHoleStatusName AS DictionaryHoleStatus_CustomHoleStatusName, 
            T.Description AS DictionaryHoleStatus_Description, 
            T.FullDescription AS DictionaryHoleStatus_FullDescription, 
            T.Thumbnail AS DictionaryHoleStatus_Thumbnail, 
            T.OriginalFileDataID AS DictionaryHoleStatus_OriginalFileDataID, 
            T.Version AS DictionaryHoleStatus_Version, 
            T.VersionAntecedentID AS DictionaryHoleStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryHoleStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryHoleStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryHoleStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryHoleStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryHoleStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryHoleStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryHoleStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHoleTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView472()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHoleTypes
        [NKD.Module.BusinessObjects.DictionaryHoleType](T1.DictionaryHoleType_HoleTypeID, T1.DictionaryHoleType_StandardHoleTypeName, T1.DictionaryHoleType_CoalHoleTypeName, T1.DictionaryHoleType_GoldHoleTypeName, T1.DictionaryHoleType_CustomHoleTypeName, T1.DictionaryHoleType_Description, T1.DictionaryHoleType_FullDescription, T1.DictionaryHoleType_Thumbnail, T1.DictionaryHoleType_OriginalFileDataID, T1.DictionaryHoleType_Version, T1.DictionaryHoleType_VersionAntecedentID, T1.DictionaryHoleType_VersionCertainty, T1.DictionaryHoleType_VersionWorkflowInstanceID, T1.DictionaryHoleType_VersionUpdatedBy, T1.DictionaryHoleType_VersionDeletedBy, T1.DictionaryHoleType_VersionOwnerContactID, T1.DictionaryHoleType_VersionOwnerCompanyID, T1.DictionaryHoleType_VersionUpdated)
    FROM (
        SELECT 
            T.HoleTypeID AS DictionaryHoleType_HoleTypeID, 
            T.StandardHoleTypeName AS DictionaryHoleType_StandardHoleTypeName, 
            T.CoalHoleTypeName AS DictionaryHoleType_CoalHoleTypeName, 
            T.GoldHoleTypeName AS DictionaryHoleType_GoldHoleTypeName, 
            T.CustomHoleTypeName AS DictionaryHoleType_CustomHoleTypeName, 
            T.Description AS DictionaryHoleType_Description, 
            T.FullDescription AS DictionaryHoleType_FullDescription, 
            T.Thumbnail AS DictionaryHoleType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryHoleType_OriginalFileDataID, 
            T.Version AS DictionaryHoleType_Version, 
            T.VersionAntecedentID AS DictionaryHoleType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryHoleType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryHoleType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryHoleType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryHoleType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryHoleType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryHoleType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryHoleType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHorizons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView473()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHorizons
        [NKD.Module.BusinessObjects.DictionaryHorizon](T1.DictionaryHorizon_HorizonID, T1.DictionaryHorizon_StandardHorizonName, T1.DictionaryHorizon_CoalHorizonName, T1.DictionaryHorizon_GoldHorizonName, T1.DictionaryHorizon_CustomHorizonName, T1.DictionaryHorizon_Description, T1.DictionaryHorizon_FullDescription, T1.DictionaryHorizon_Thumbnail, T1.DictionaryHorizon_OriginalFileDataID, T1.DictionaryHorizon_Version, T1.DictionaryHorizon_VersionAntecedentID, T1.DictionaryHorizon_VersionCertainty, T1.DictionaryHorizon_VersionWorkflowInstanceID, T1.DictionaryHorizon_VersionUpdatedBy, T1.DictionaryHorizon_VersionDeletedBy, T1.DictionaryHorizon_VersionOwnerContactID, T1.DictionaryHorizon_VersionOwnerCompanyID, T1.DictionaryHorizon_VersionUpdated)
    FROM (
        SELECT 
            T.HorizonID AS DictionaryHorizon_HorizonID, 
            T.StandardHorizonName AS DictionaryHorizon_StandardHorizonName, 
            T.CoalHorizonName AS DictionaryHorizon_CoalHorizonName, 
            T.GoldHorizonName AS DictionaryHorizon_GoldHorizonName, 
            T.CustomHorizonName AS DictionaryHorizon_CustomHorizonName, 
            T.Description AS DictionaryHorizon_Description, 
            T.FullDescription AS DictionaryHorizon_FullDescription, 
            T.Thumbnail AS DictionaryHorizon_Thumbnail, 
            T.OriginalFileDataID AS DictionaryHorizon_OriginalFileDataID, 
            T.Version AS DictionaryHorizon_Version, 
            T.VersionAntecedentID AS DictionaryHorizon_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryHorizon_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryHorizon_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryHorizon_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryHorizon_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryHorizon_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryHorizon_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryHorizon_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHorizon AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHues.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView474()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHues
        [NKD.Module.BusinessObjects.DictionaryHue](T1.DictionaryHue_HueID, T1.DictionaryHue_StandardHueName, T1.DictionaryHue_CoalHueName, T1.DictionaryHue_GoldHueName, T1.DictionaryHue_CustomHueName, T1.DictionaryHue_Description, T1.DictionaryHue_FullDescription, T1.DictionaryHue_Thumbnail, T1.DictionaryHue_OriginalFileDataID, T1.DictionaryHue_Version, T1.DictionaryHue_VersionAntecedentID, T1.DictionaryHue_VersionCertainty, T1.DictionaryHue_VersionWorkflowInstanceID, T1.DictionaryHue_VersionUpdatedBy, T1.DictionaryHue_VersionDeletedBy, T1.DictionaryHue_VersionOwnerContactID, T1.DictionaryHue_VersionOwnerCompanyID, T1.DictionaryHue_VersionUpdated)
    FROM (
        SELECT 
            T.HueID AS DictionaryHue_HueID, 
            T.StandardHueName AS DictionaryHue_StandardHueName, 
            T.CoalHueName AS DictionaryHue_CoalHueName, 
            T.GoldHueName AS DictionaryHue_GoldHueName, 
            T.CustomHueName AS DictionaryHue_CustomHueName, 
            T.Description AS DictionaryHue_Description, 
            T.FullDescription AS DictionaryHue_FullDescription, 
            T.Thumbnail AS DictionaryHue_Thumbnail, 
            T.OriginalFileDataID AS DictionaryHue_OriginalFileDataID, 
            T.Version AS DictionaryHue_Version, 
            T.VersionAntecedentID AS DictionaryHue_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryHue_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryHue_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryHue_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryHue_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryHue_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryHue_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryHue_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHue AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryInfillModes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView475()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryInfillModes
        [NKD.Module.BusinessObjects.DictionaryInfillMode](T1.DictionaryInfillMode_InfillModeID, T1.DictionaryInfillMode_StandardInfillModeName, T1.DictionaryInfillMode_CoalInfillModeName, T1.DictionaryInfillMode_GoldInfillModeName, T1.DictionaryInfillMode_CustomInfillModeName, T1.DictionaryInfillMode_Description, T1.DictionaryInfillMode_FullDescription, T1.DictionaryInfillMode_Thumbnail, T1.DictionaryInfillMode_OriginalFileDataID, T1.DictionaryInfillMode_Version, T1.DictionaryInfillMode_VersionAntecedentID, T1.DictionaryInfillMode_VersionCertainty, T1.DictionaryInfillMode_VersionWorkflowInstanceID, T1.DictionaryInfillMode_VersionUpdatedBy, T1.DictionaryInfillMode_VersionDeletedBy, T1.DictionaryInfillMode_VersionOwnerContactID, T1.DictionaryInfillMode_VersionOwnerCompanyID, T1.DictionaryInfillMode_VersionUpdated)
    FROM (
        SELECT 
            T.InfillModeID AS DictionaryInfillMode_InfillModeID, 
            T.StandardInfillModeName AS DictionaryInfillMode_StandardInfillModeName, 
            T.CoalInfillModeName AS DictionaryInfillMode_CoalInfillModeName, 
            T.GoldInfillModeName AS DictionaryInfillMode_GoldInfillModeName, 
            T.CustomInfillModeName AS DictionaryInfillMode_CustomInfillModeName, 
            T.Description AS DictionaryInfillMode_Description, 
            T.FullDescription AS DictionaryInfillMode_FullDescription, 
            T.Thumbnail AS DictionaryInfillMode_Thumbnail, 
            T.OriginalFileDataID AS DictionaryInfillMode_OriginalFileDataID, 
            T.Version AS DictionaryInfillMode_Version, 
            T.VersionAntecedentID AS DictionaryInfillMode_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryInfillMode_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryInfillMode_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryInfillMode_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryInfillMode_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryInfillMode_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryInfillMode_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryInfillMode_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillMode AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryInfillTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView476()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryInfillTypes
        [NKD.Module.BusinessObjects.DictionaryInfillType](T1.DictionaryInfillType_InfillTypeID, T1.DictionaryInfillType_StandardInfillTypeName, T1.DictionaryInfillType_CoalInfillTypeName, T1.DictionaryInfillType_GoldInfillTypeName, T1.DictionaryInfillType_CustomInfillTypeName, T1.DictionaryInfillType_Description, T1.DictionaryInfillType_FullDescription, T1.DictionaryInfillType_Thumbnail, T1.DictionaryInfillType_OriginalFileDataID, T1.DictionaryInfillType_Version, T1.DictionaryInfillType_VersionAntecedentID, T1.DictionaryInfillType_VersionCertainty, T1.DictionaryInfillType_VersionWorkflowInstanceID, T1.DictionaryInfillType_VersionUpdatedBy, T1.DictionaryInfillType_VersionDeletedBy, T1.DictionaryInfillType_VersionOwnerContactID, T1.DictionaryInfillType_VersionOwnerCompanyID, T1.DictionaryInfillType_VersionUpdated)
    FROM (
        SELECT 
            T.InfillTypeID AS DictionaryInfillType_InfillTypeID, 
            T.StandardInfillTypeName AS DictionaryInfillType_StandardInfillTypeName, 
            T.CoalInfillTypeName AS DictionaryInfillType_CoalInfillTypeName, 
            T.GoldInfillTypeName AS DictionaryInfillType_GoldInfillTypeName, 
            T.CustomInfillTypeName AS DictionaryInfillType_CustomInfillTypeName, 
            T.Description AS DictionaryInfillType_Description, 
            T.FullDescription AS DictionaryInfillType_FullDescription, 
            T.Thumbnail AS DictionaryInfillType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryInfillType_OriginalFileDataID, 
            T.Version AS DictionaryInfillType_Version, 
            T.VersionAntecedentID AS DictionaryInfillType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryInfillType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryInfillType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryInfillType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryInfillType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryInfillType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryInfillType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryInfillType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryIntervalStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView477()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryIntervalStatus
        [NKD.Module.BusinessObjects.DictionaryIntervalStatus](T1.DictionaryIntervalStatus_IntervalStatusID, T1.DictionaryIntervalStatus_StandardIntervalStatusName, T1.DictionaryIntervalStatus_CoalIntervalStatusName, T1.DictionaryIntervalStatus_GoldIntervalStatusName, T1.DictionaryIntervalStatus_CustomIntervalStatusName, T1.DictionaryIntervalStatus_Description, T1.DictionaryIntervalStatus_FullDescription, T1.DictionaryIntervalStatus_Thumbnail, T1.DictionaryIntervalStatus_OriginalFileDataID, T1.DictionaryIntervalStatus_Version, T1.DictionaryIntervalStatus_VersionAntecedentID, T1.DictionaryIntervalStatus_VersionCertainty, T1.DictionaryIntervalStatus_VersionWorkflowInstanceID, T1.DictionaryIntervalStatus_VersionUpdatedBy, T1.DictionaryIntervalStatus_VersionDeletedBy, T1.DictionaryIntervalStatus_VersionOwnerContactID, T1.DictionaryIntervalStatus_VersionOwnerCompanyID, T1.DictionaryIntervalStatus_VersionUpdated)
    FROM (
        SELECT 
            T.IntervalStatusID AS DictionaryIntervalStatus_IntervalStatusID, 
            T.StandardIntervalStatusName AS DictionaryIntervalStatus_StandardIntervalStatusName, 
            T.CoalIntervalStatusName AS DictionaryIntervalStatus_CoalIntervalStatusName, 
            T.GoldIntervalStatusName AS DictionaryIntervalStatus_GoldIntervalStatusName, 
            T.CustomIntervalStatusName AS DictionaryIntervalStatus_CustomIntervalStatusName, 
            T.Description AS DictionaryIntervalStatus_Description, 
            T.FullDescription AS DictionaryIntervalStatus_FullDescription, 
            T.Thumbnail AS DictionaryIntervalStatus_Thumbnail, 
            T.OriginalFileDataID AS DictionaryIntervalStatus_OriginalFileDataID, 
            T.Version AS DictionaryIntervalStatus_Version, 
            T.VersionAntecedentID AS DictionaryIntervalStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryIntervalStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryIntervalStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryIntervalStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryIntervalStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryIntervalStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryIntervalStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryIntervalStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryIntervalStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLeaseApplicationTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView478()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLeaseApplicationTypes
        [NKD.Module.BusinessObjects.DictionaryLeaseApplicationType](T1.DictionaryLeaseApplicationType_LeaseApplicationTypeID, T1.DictionaryLeaseApplicationType_StandardLeaseApplicationTypeName, T1.DictionaryLeaseApplicationType_CoalLeaseApplicationTypeName, T1.DictionaryLeaseApplicationType_GoldLeaseApplicationTypeName, T1.DictionaryLeaseApplicationType_CustomLeaseApplicationTypeName, T1.DictionaryLeaseApplicationType_Description, T1.DictionaryLeaseApplicationType_FullDescription, T1.DictionaryLeaseApplicationType_Thumbnail, T1.DictionaryLeaseApplicationType_OriginalFileDataID, T1.DictionaryLeaseApplicationType_Version, T1.DictionaryLeaseApplicationType_VersionAntecedentID, T1.DictionaryLeaseApplicationType_VersionCertainty, T1.DictionaryLeaseApplicationType_VersionWorkflowInstanceID, T1.DictionaryLeaseApplicationType_VersionUpdatedBy, T1.DictionaryLeaseApplicationType_VersionDeletedBy, T1.DictionaryLeaseApplicationType_VersionOwnerContactID, T1.DictionaryLeaseApplicationType_VersionOwnerCompanyID, T1.DictionaryLeaseApplicationType_VersionUpdated)
    FROM (
        SELECT 
            T.LeaseApplicationTypeID AS DictionaryLeaseApplicationType_LeaseApplicationTypeID, 
            T.StandardLeaseApplicationTypeName AS DictionaryLeaseApplicationType_StandardLeaseApplicationTypeName, 
            T.CoalLeaseApplicationTypeName AS DictionaryLeaseApplicationType_CoalLeaseApplicationTypeName, 
            T.GoldLeaseApplicationTypeName AS DictionaryLeaseApplicationType_GoldLeaseApplicationTypeName, 
            T.CustomLeaseApplicationTypeName AS DictionaryLeaseApplicationType_CustomLeaseApplicationTypeName, 
            T.Description AS DictionaryLeaseApplicationType_Description, 
            T.FullDescription AS DictionaryLeaseApplicationType_FullDescription, 
            T.Thumbnail AS DictionaryLeaseApplicationType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLeaseApplicationType_OriginalFileDataID, 
            T.Version AS DictionaryLeaseApplicationType_Version, 
            T.VersionAntecedentID AS DictionaryLeaseApplicationType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLeaseApplicationType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLeaseApplicationType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLeaseApplicationType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLeaseApplicationType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLeaseApplicationType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLeaseApplicationType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLeaseApplicationType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLeaseApplicationType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLicenseTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView479()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLicenseTypes
        [NKD.Module.BusinessObjects.DictionaryLicenseType](T1.DictionaryLicenseType_LicenseTypeID, T1.DictionaryLicenseType_StandardLicenseTypeName, T1.DictionaryLicenseType_CustomLicenseTypeName, T1.DictionaryLicenseType_Description, T1.DictionaryLicenseType_FullDescription, T1.DictionaryLicenseType_Thumbnail, T1.DictionaryLicenseType_OriginalFileDataID, T1.DictionaryLicenseType_Version, T1.DictionaryLicenseType_VersionAntecedentID, T1.DictionaryLicenseType_VersionCertainty, T1.DictionaryLicenseType_VersionWorkflowInstanceID, T1.DictionaryLicenseType_VersionUpdatedBy, T1.DictionaryLicenseType_VersionDeletedBy, T1.DictionaryLicenseType_VersionOwnerContactID, T1.DictionaryLicenseType_VersionOwnerCompanyID, T1.DictionaryLicenseType_VersionUpdated)
    FROM (
        SELECT 
            T.LicenseTypeID AS DictionaryLicenseType_LicenseTypeID, 
            T.StandardLicenseTypeName AS DictionaryLicenseType_StandardLicenseTypeName, 
            T.CustomLicenseTypeName AS DictionaryLicenseType_CustomLicenseTypeName, 
            T.Description AS DictionaryLicenseType_Description, 
            T.FullDescription AS DictionaryLicenseType_FullDescription, 
            T.Thumbnail AS DictionaryLicenseType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLicenseType_OriginalFileDataID, 
            T.Version AS DictionaryLicenseType_Version, 
            T.VersionAntecedentID AS DictionaryLicenseType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLicenseType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLicenseType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLicenseType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLicenseType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLicenseType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLicenseType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLicenseType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLicenseType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLithologyInterrelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView480()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLithologyInterrelations
        [NKD.Module.BusinessObjects.DictionaryLithologyInterrelation](T1.DictionaryLithologyInterrelation_StandardLithologyInterrelationName, T1.DictionaryLithologyInterrelation_CoalLithologyInterrelationName, T1.DictionaryLithologyInterrelation_GoldLithologyInterrelationName, T1.DictionaryLithologyInterrelation_CustomLithologyInterrelationName, T1.DictionaryLithologyInterrelation_Description, T1.DictionaryLithologyInterrelation_FullDescription, T1.DictionaryLithologyInterrelation_Thumbnail, T1.DictionaryLithologyInterrelation_OriginalFileDataID, T1.DictionaryLithologyInterrelation_Version, T1.DictionaryLithologyInterrelation_VersionAntecedentID, T1.DictionaryLithologyInterrelation_VersionCertainty, T1.DictionaryLithologyInterrelation_VersionWorkflowInstanceID, T1.DictionaryLithologyInterrelation_VersionUpdatedBy, T1.DictionaryLithologyInterrelation_VersionDeletedBy, T1.DictionaryLithologyInterrelation_VersionOwnerContactID, T1.DictionaryLithologyInterrelation_VersionOwnerCompanyID, T1.DictionaryLithologyInterrelation_VersionUpdated, T1.DictionaryLithologyInterrelation_LithologyInterrelationID)
    FROM (
        SELECT 
            T.StandardLithologyInterrelationName AS DictionaryLithologyInterrelation_StandardLithologyInterrelationName, 
            T.CoalLithologyInterrelationName AS DictionaryLithologyInterrelation_CoalLithologyInterrelationName, 
            T.GoldLithologyInterrelationName AS DictionaryLithologyInterrelation_GoldLithologyInterrelationName, 
            T.CustomLithologyInterrelationName AS DictionaryLithologyInterrelation_CustomLithologyInterrelationName, 
            T.Description AS DictionaryLithologyInterrelation_Description, 
            T.FullDescription AS DictionaryLithologyInterrelation_FullDescription, 
            T.Thumbnail AS DictionaryLithologyInterrelation_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLithologyInterrelation_OriginalFileDataID, 
            T.Version AS DictionaryLithologyInterrelation_Version, 
            T.VersionAntecedentID AS DictionaryLithologyInterrelation_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLithologyInterrelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLithologyInterrelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLithologyInterrelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLithologyInterrelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLithologyInterrelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLithologyInterrelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLithologyInterrelation_VersionUpdated, 
            T.LithologyInterrelationID AS DictionaryLithologyInterrelation_LithologyInterrelationID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyInterrelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLithologyQualifiers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView481()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLithologyQualifiers
        [NKD.Module.BusinessObjects.DictionaryLithologyQualifier](T1.DictionaryLithologyQualifier_LithologyQualifierID, T1.DictionaryLithologyQualifier_StandardLithologyQualifierName, T1.DictionaryLithologyQualifier_CoalLithologyQualifierName, T1.DictionaryLithologyQualifier_GoldLithologyQualifierName, T1.DictionaryLithologyQualifier_CustomLithologyQualifierName, T1.DictionaryLithologyQualifier_Description, T1.DictionaryLithologyQualifier_FullDescription, T1.DictionaryLithologyQualifier_Thumbnail, T1.DictionaryLithologyQualifier_OriginalFileDataID, T1.DictionaryLithologyQualifier_Version, T1.DictionaryLithologyQualifier_VersionAntecedentID, T1.DictionaryLithologyQualifier_VersionCertainty, T1.DictionaryLithologyQualifier_VersionWorkflowInstanceID, T1.DictionaryLithologyQualifier_VersionUpdatedBy, T1.DictionaryLithologyQualifier_VersionDeletedBy, T1.DictionaryLithologyQualifier_VersionOwnerContactID, T1.DictionaryLithologyQualifier_VersionOwnerCompanyID, T1.DictionaryLithologyQualifier_VersionUpdated)
    FROM (
        SELECT 
            T.LithologyQualifierID AS DictionaryLithologyQualifier_LithologyQualifierID, 
            T.StandardLithologyQualifierName AS DictionaryLithologyQualifier_StandardLithologyQualifierName, 
            T.CoalLithologyQualifierName AS DictionaryLithologyQualifier_CoalLithologyQualifierName, 
            T.GoldLithologyQualifierName AS DictionaryLithologyQualifier_GoldLithologyQualifierName, 
            T.CustomLithologyQualifierName AS DictionaryLithologyQualifier_CustomLithologyQualifierName, 
            T.Description AS DictionaryLithologyQualifier_Description, 
            T.FullDescription AS DictionaryLithologyQualifier_FullDescription, 
            T.Thumbnail AS DictionaryLithologyQualifier_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLithologyQualifier_OriginalFileDataID, 
            T.Version AS DictionaryLithologyQualifier_Version, 
            T.VersionAntecedentID AS DictionaryLithologyQualifier_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLithologyQualifier_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLithologyQualifier_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLithologyQualifier_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLithologyQualifier_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLithologyQualifier_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLithologyQualifier_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLithologyQualifier_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyQualifier AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLithologyTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView482()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLithologyTypes
        [NKD.Module.BusinessObjects.DictionaryLithologyType](T1.DictionaryLithologyType_LithologyTypeID, T1.DictionaryLithologyType_StandardLithologyTypeName, T1.DictionaryLithologyType_CoalLithologyTypeName, T1.DictionaryLithologyType_GoldLithologyTypeName, T1.DictionaryLithologyType_CustomLithologyTypeName, T1.DictionaryLithologyType_Description, T1.DictionaryLithologyType_FullDescription, T1.DictionaryLithologyType_Thumbnail, T1.DictionaryLithologyType_OriginalFileDataID, T1.DictionaryLithologyType_Version, T1.DictionaryLithologyType_VersionAntecedentID, T1.DictionaryLithologyType_VersionCertainty, T1.DictionaryLithologyType_VersionWorkflowInstanceID, T1.DictionaryLithologyType_VersionUpdatedBy, T1.DictionaryLithologyType_VersionDeletedBy, T1.DictionaryLithologyType_VersionOwnerContactID, T1.DictionaryLithologyType_VersionOwnerCompanyID, T1.DictionaryLithologyType_VersionUpdated)
    FROM (
        SELECT 
            T.LithologyTypeID AS DictionaryLithologyType_LithologyTypeID, 
            T.StandardLithologyTypeName AS DictionaryLithologyType_StandardLithologyTypeName, 
            T.CoalLithologyTypeName AS DictionaryLithologyType_CoalLithologyTypeName, 
            T.GoldLithologyTypeName AS DictionaryLithologyType_GoldLithologyTypeName, 
            T.CustomLithologyTypeName AS DictionaryLithologyType_CustomLithologyTypeName, 
            T.Description AS DictionaryLithologyType_Description, 
            T.FullDescription AS DictionaryLithologyType_FullDescription, 
            T.Thumbnail AS DictionaryLithologyType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLithologyType_OriginalFileDataID, 
            T.Version AS DictionaryLithologyType_Version, 
            T.VersionAntecedentID AS DictionaryLithologyType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLithologyType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLithologyType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLithologyType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLithologyType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLithologyType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLithologyType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLithologyType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLocationTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView483()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLocationTypes
        [NKD.Module.BusinessObjects.DictionaryLocationType](T1.DictionaryLocationType_LocationTypeID, T1.DictionaryLocationType_StandardLocationTypeName, T1.DictionaryLocationType_CoalLocationTypeName, T1.DictionaryLocationType_GoldLocationTypeName, T1.DictionaryLocationType_CustomLocationTypeName, T1.DictionaryLocationType_Description, T1.DictionaryLocationType_FullDescription, T1.DictionaryLocationType_Thumbnail, T1.DictionaryLocationType_OriginalFileDataID, T1.DictionaryLocationType_Version, T1.DictionaryLocationType_VersionAntecedentID, T1.DictionaryLocationType_VersionCertainty, T1.DictionaryLocationType_VersionWorkflowInstanceID, T1.DictionaryLocationType_VersionUpdatedBy, T1.DictionaryLocationType_VersionDeletedBy, T1.DictionaryLocationType_VersionOwnerContactID, T1.DictionaryLocationType_VersionOwnerCompanyID, T1.DictionaryLocationType_VersionUpdated)
    FROM (
        SELECT 
            T.LocationTypeID AS DictionaryLocationType_LocationTypeID, 
            T.StandardLocationTypeName AS DictionaryLocationType_StandardLocationTypeName, 
            T.CoalLocationTypeName AS DictionaryLocationType_CoalLocationTypeName, 
            T.GoldLocationTypeName AS DictionaryLocationType_GoldLocationTypeName, 
            T.CustomLocationTypeName AS DictionaryLocationType_CustomLocationTypeName, 
            T.Description AS DictionaryLocationType_Description, 
            T.FullDescription AS DictionaryLocationType_FullDescription, 
            T.Thumbnail AS DictionaryLocationType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLocationType_OriginalFileDataID, 
            T.Version AS DictionaryLocationType_Version, 
            T.VersionAntecedentID AS DictionaryLocationType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLocationType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLocationType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLocationType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLocationType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLocationType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLocationType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLocationType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLocationType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMechanicalStates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView484()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMechanicalStates
        [NKD.Module.BusinessObjects.DictionaryMechanicalState](T1.DictionaryMechanicalState_MechanicalStateID, T1.DictionaryMechanicalState_StandardMechanicalStateName, T1.DictionaryMechanicalState_CoalMechanicalStateName, T1.DictionaryMechanicalState_GoldMechanicalStateName, T1.DictionaryMechanicalState_CustomMechanicalStateName, T1.DictionaryMechanicalState_Description, T1.DictionaryMechanicalState_FullDescription, T1.DictionaryMechanicalState_Thumbnail, T1.DictionaryMechanicalState_OriginalFileDataID, T1.DictionaryMechanicalState_Version, T1.DictionaryMechanicalState_VersionAntecedentID, T1.DictionaryMechanicalState_VersionCertainty, T1.DictionaryMechanicalState_VersionWorkflowInstanceID, T1.DictionaryMechanicalState_VersionUpdatedBy, T1.DictionaryMechanicalState_VersionDeletedBy, T1.DictionaryMechanicalState_VersionOwnerContactID, T1.DictionaryMechanicalState_VersionOwnerCompanyID, T1.DictionaryMechanicalState_VersionUpdated)
    FROM (
        SELECT 
            T.MechanicalStateID AS DictionaryMechanicalState_MechanicalStateID, 
            T.StandardMechanicalStateName AS DictionaryMechanicalState_StandardMechanicalStateName, 
            T.CoalMechanicalStateName AS DictionaryMechanicalState_CoalMechanicalStateName, 
            T.GoldMechanicalStateName AS DictionaryMechanicalState_GoldMechanicalStateName, 
            T.CustomMechanicalStateName AS DictionaryMechanicalState_CustomMechanicalStateName, 
            T.Description AS DictionaryMechanicalState_Description, 
            T.FullDescription AS DictionaryMechanicalState_FullDescription, 
            T.Thumbnail AS DictionaryMechanicalState_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMechanicalState_OriginalFileDataID, 
            T.Version AS DictionaryMechanicalState_Version, 
            T.VersionAntecedentID AS DictionaryMechanicalState_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMechanicalState_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMechanicalState_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMechanicalState_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMechanicalState_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMechanicalState_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMechanicalState_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMechanicalState_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMechanicalState AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralAbundances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView485()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralAbundances
        [NKD.Module.BusinessObjects.DictionaryMineralAbundance](T1.DictionaryMineralAbundance_MineralAbundanceID, T1.DictionaryMineralAbundance_StandardMineralAbundanceName, T1.DictionaryMineralAbundance_CoalMineralAbundanceName, T1.DictionaryMineralAbundance_GoldMineralAbundanceName, T1.DictionaryMineralAbundance_CustomMineralAbundanceName, T1.DictionaryMineralAbundance_Description, T1.DictionaryMineralAbundance_FullDescription, T1.DictionaryMineralAbundance_Thumbnail, T1.DictionaryMineralAbundance_OriginalFileDataID, T1.DictionaryMineralAbundance_Version, T1.DictionaryMineralAbundance_VersionAntecedentID, T1.DictionaryMineralAbundance_VersionCertainty, T1.DictionaryMineralAbundance_VersionWorkflowInstanceID, T1.DictionaryMineralAbundance_VersionUpdatedBy, T1.DictionaryMineralAbundance_VersionDeletedBy, T1.DictionaryMineralAbundance_VersionOwnerContactID, T1.DictionaryMineralAbundance_VersionOwnerCompanyID, T1.DictionaryMineralAbundance_VersionUpdated)
    FROM (
        SELECT 
            T.MineralAbundanceID AS DictionaryMineralAbundance_MineralAbundanceID, 
            T.StandardMineralAbundanceName AS DictionaryMineralAbundance_StandardMineralAbundanceName, 
            T.CoalMineralAbundanceName AS DictionaryMineralAbundance_CoalMineralAbundanceName, 
            T.GoldMineralAbundanceName AS DictionaryMineralAbundance_GoldMineralAbundanceName, 
            T.CustomMineralAbundanceName AS DictionaryMineralAbundance_CustomMineralAbundanceName, 
            T.Description AS DictionaryMineralAbundance_Description, 
            T.FullDescription AS DictionaryMineralAbundance_FullDescription, 
            T.Thumbnail AS DictionaryMineralAbundance_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralAbundance_OriginalFileDataID, 
            T.Version AS DictionaryMineralAbundance_Version, 
            T.VersionAntecedentID AS DictionaryMineralAbundance_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralAbundance_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralAbundance_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralAbundance_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralAbundance_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralAbundance_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralAbundance_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralAbundance_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAbundance AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralAndFossilAbundances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView486()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralAndFossilAbundances
        [NKD.Module.BusinessObjects.DictionaryMineralAndFossilAbundance](T1.DictionaryMineralAndFossilAbundance_MineralAndFossilAbundanceID, T1.DictionaryMineralAndFossilAbundance_StandardMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbundance_CoalMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbundance_GoldMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbundance_CustomMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbundance_Description, T1.DictionaryMineralAndFossilAbundance_FullDescription, T1.DictionaryMineralAndFossilAbundance_Thumbnail, T1.DictionaryMineralAndFossilAbundance_OriginalFileDataID, T1.DictionaryMineralAndFossilAbundance_Version, T1.DictionaryMineralAndFossilAbundance_VersionAntecedentID, T1.DictionaryMineralAndFossilAbundance_VersionCertainty, T1.DictionaryMineralAndFossilAbundance_VersionWorkflowInstanceID, T1.DictionaryMineralAndFossilAbundance_VersionUpdatedBy, T1.DictionaryMineralAndFossilAbundance_VersionDeletedBy, T1.DictionaryMineralAndFossilAbundance_VersionOwnerContactID, T1.DictionaryMineralAndFossilAbundance_VersionOwnerCompanyID, T1.DictionaryMineralAndFossilAbundance_VersionUpdated)
    FROM (
        SELECT 
            T.MineralAndFossilAbundanceID AS DictionaryMineralAndFossilAbundance_MineralAndFossilAbundanceID, 
            T.StandardMineralAndFossilAbundanceName AS DictionaryMineralAndFossilAbundance_StandardMineralAndFossilAbundanceName, 
            T.CoalMineralAndFossilAbundanceName AS DictionaryMineralAndFossilAbundance_CoalMineralAndFossilAbundanceName, 
            T.GoldMineralAndFossilAbundanceName AS DictionaryMineralAndFossilAbundance_GoldMineralAndFossilAbundanceName, 
            T.CustomMineralAndFossilAbundanceName AS DictionaryMineralAndFossilAbundance_CustomMineralAndFossilAbundanceName, 
            T.Description AS DictionaryMineralAndFossilAbundance_Description, 
            T.FullDescription AS DictionaryMineralAndFossilAbundance_FullDescription, 
            T.Thumbnail AS DictionaryMineralAndFossilAbundance_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralAndFossilAbundance_OriginalFileDataID, 
            T.Version AS DictionaryMineralAndFossilAbundance_Version, 
            T.VersionAntecedentID AS DictionaryMineralAndFossilAbundance_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralAndFossilAbundance_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralAndFossilAbundance_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralAndFossilAbundance_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralAndFossilAbundance_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralAndFossilAbundance_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralAndFossilAbundance_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralAndFossilAbundance_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAbundance AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralAndFossilAssociations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView487()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralAndFossilAssociations
        [NKD.Module.BusinessObjects.DictionaryMineralAndFossilAssociation](T1.DictionaryMineralAndFossilAssociation_MineralAndFossilAssociationID, T1.DictionaryMineralAndFossilAssociation_StandardMineralAndFossilAssociationName, T1.DictionaryMineralAndFossilAssociation_CoalMineralAndFossilAssociationName, T1.DictionaryMineralAndFossilAssociation_GoldMineralAndFossilAssociationName, T1.DictionaryMineralAndFossilAssociation_CustomMineralAndFossilAssociationName, T1.DictionaryMineralAndFossilAssociation_Description, T1.DictionaryMineralAndFossilAssociation_FullDescription, T1.DictionaryMineralAndFossilAssociation_Thumbnail, T1.DictionaryMineralAndFossilAssociation_OriginalFileDataID, T1.DictionaryMineralAndFossilAssociation_Version, T1.DictionaryMineralAndFossilAssociation_VersionAntecedentID, T1.DictionaryMineralAndFossilAssociation_VersionCertainty, T1.DictionaryMineralAndFossilAssociation_VersionWorkflowInstanceID, T1.DictionaryMineralAndFossilAssociation_VersionUpdatedBy, T1.DictionaryMineralAndFossilAssociation_VersionDeletedBy, T1.DictionaryMineralAndFossilAssociation_VersionOwnerContactID, T1.DictionaryMineralAndFossilAssociation_VersionOwnerCompanyID, T1.DictionaryMineralAndFossilAssociation_VersionUpdated)
    FROM (
        SELECT 
            T.MineralAndFossilAssociationID AS DictionaryMineralAndFossilAssociation_MineralAndFossilAssociationID, 
            T.StandardMineralAndFossilAssociationName AS DictionaryMineralAndFossilAssociation_StandardMineralAndFossilAssociationName, 
            T.CoalMineralAndFossilAssociationName AS DictionaryMineralAndFossilAssociation_CoalMineralAndFossilAssociationName, 
            T.GoldMineralAndFossilAssociationName AS DictionaryMineralAndFossilAssociation_GoldMineralAndFossilAssociationName, 
            T.CustomMineralAndFossilAssociationName AS DictionaryMineralAndFossilAssociation_CustomMineralAndFossilAssociationName, 
            T.Description AS DictionaryMineralAndFossilAssociation_Description, 
            T.FullDescription AS DictionaryMineralAndFossilAssociation_FullDescription, 
            T.Thumbnail AS DictionaryMineralAndFossilAssociation_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralAndFossilAssociation_OriginalFileDataID, 
            T.Version AS DictionaryMineralAndFossilAssociation_Version, 
            T.VersionAntecedentID AS DictionaryMineralAndFossilAssociation_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralAndFossilAssociation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralAndFossilAssociation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralAndFossilAssociation_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralAndFossilAssociation_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralAndFossilAssociation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralAndFossilAssociation_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralAndFossilAssociation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAssociation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralAndFossilTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView488()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralAndFossilTypes
        [NKD.Module.BusinessObjects.DictionaryMineralAndFossilType](T1.DictionaryMineralAndFossilType_MineralAndFossilTypeID, T1.DictionaryMineralAndFossilType_StandardMineralAndFossilTypeName, T1.DictionaryMineralAndFossilType_CoalMineralAndFossilTypeName, T1.DictionaryMineralAndFossilType_GoldMineralAndFossilTypeName, T1.DictionaryMineralAndFossilType_CustomMineralAndFossilTypeName, T1.DictionaryMineralAndFossilType_Description, T1.DictionaryMineralAndFossilType_FullDescription, T1.DictionaryMineralAndFossilType_Thumbnail, T1.DictionaryMineralAndFossilType_OriginalFileDataID, T1.DictionaryMineralAndFossilType_Version, T1.DictionaryMineralAndFossilType_VersionAntecedentID, T1.DictionaryMineralAndFossilType_VersionCertainty, T1.DictionaryMineralAndFossilType_VersionWorkflowInstanceID, T1.DictionaryMineralAndFossilType_VersionUpdatedBy, T1.DictionaryMineralAndFossilType_VersionDeletedBy, T1.DictionaryMineralAndFossilType_VersionOwnerContactID, T1.DictionaryMineralAndFossilType_VersionOwnerCompanyID, T1.DictionaryMineralAndFossilType_VersionUpdated)
    FROM (
        SELECT 
            T.MineralAndFossilTypeID AS DictionaryMineralAndFossilType_MineralAndFossilTypeID, 
            T.StandardMineralAndFossilTypeName AS DictionaryMineralAndFossilType_StandardMineralAndFossilTypeName, 
            T.CoalMineralAndFossilTypeName AS DictionaryMineralAndFossilType_CoalMineralAndFossilTypeName, 
            T.GoldMineralAndFossilTypeName AS DictionaryMineralAndFossilType_GoldMineralAndFossilTypeName, 
            T.CustomMineralAndFossilTypeName AS DictionaryMineralAndFossilType_CustomMineralAndFossilTypeName, 
            T.Description AS DictionaryMineralAndFossilType_Description, 
            T.FullDescription AS DictionaryMineralAndFossilType_FullDescription, 
            T.Thumbnail AS DictionaryMineralAndFossilType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralAndFossilType_OriginalFileDataID, 
            T.Version AS DictionaryMineralAndFossilType_Version, 
            T.VersionAntecedentID AS DictionaryMineralAndFossilType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralAndFossilType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralAndFossilType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralAndFossilType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralAndFossilType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralAndFossilType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralAndFossilType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralAndFossilType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralForms.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView489()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralForms
        [NKD.Module.BusinessObjects.DictionaryMineralForm](T1.DictionaryMineralForm_MineralFormID, T1.DictionaryMineralForm_StandardMineralFormName, T1.DictionaryMineralForm_CoalMineralFormName, T1.DictionaryMineralForm_GoldMineralFormName, T1.DictionaryMineralForm_CustomMineralFormName, T1.DictionaryMineralForm_Description, T1.DictionaryMineralForm_FullDescription, T1.DictionaryMineralForm_Thumbnail, T1.DictionaryMineralForm_OriginalFileDataID, T1.DictionaryMineralForm_Version, T1.DictionaryMineralForm_VersionAntecedentID, T1.DictionaryMineralForm_VersionCertainty, T1.DictionaryMineralForm_VersionWorkflowInstanceID, T1.DictionaryMineralForm_VersionUpdatedBy, T1.DictionaryMineralForm_VersionDeletedBy, T1.DictionaryMineralForm_VersionOwnerContactID, T1.DictionaryMineralForm_VersionOwnerCompanyID, T1.DictionaryMineralForm_VersionUpdated)
    FROM (
        SELECT 
            T.MineralFormID AS DictionaryMineralForm_MineralFormID, 
            T.StandardMineralFormName AS DictionaryMineralForm_StandardMineralFormName, 
            T.CoalMineralFormName AS DictionaryMineralForm_CoalMineralFormName, 
            T.GoldMineralFormName AS DictionaryMineralForm_GoldMineralFormName, 
            T.CustomMineralFormName AS DictionaryMineralForm_CustomMineralFormName, 
            T.Description AS DictionaryMineralForm_Description, 
            T.FullDescription AS DictionaryMineralForm_FullDescription, 
            T.Thumbnail AS DictionaryMineralForm_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralForm_OriginalFileDataID, 
            T.Version AS DictionaryMineralForm_Version, 
            T.VersionAntecedentID AS DictionaryMineralForm_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralForm_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralForm_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralForm_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralForm_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralForm_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralForm_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralForm_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralForm AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralStyles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView490()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralStyles
        [NKD.Module.BusinessObjects.DictionaryMineralStyle](T1.DictionaryMineralStyle_MineralStyleID, T1.DictionaryMineralStyle_StandardMineralStyleName, T1.DictionaryMineralStyle_CoalMineralStyleName, T1.DictionaryMineralStyle_GoldMineralStyleName, T1.DictionaryMineralStyle_CustomMineralStyleName, T1.DictionaryMineralStyle_Description, T1.DictionaryMineralStyle_FullDescription, T1.DictionaryMineralStyle_Thumbnail, T1.DictionaryMineralStyle_OriginalFileDataID, T1.DictionaryMineralStyle_Version, T1.DictionaryMineralStyle_VersionAntecedentID, T1.DictionaryMineralStyle_VersionCertainty, T1.DictionaryMineralStyle_VersionWorkflowInstanceID, T1.DictionaryMineralStyle_VersionUpdatedBy, T1.DictionaryMineralStyle_VersionDeletedBy, T1.DictionaryMineralStyle_VersionOwnerContactID, T1.DictionaryMineralStyle_VersionOwnerCompanyID, T1.DictionaryMineralStyle_VersionUpdated)
    FROM (
        SELECT 
            T.MineralStyleID AS DictionaryMineralStyle_MineralStyleID, 
            T.StandardMineralStyleName AS DictionaryMineralStyle_StandardMineralStyleName, 
            T.CoalMineralStyleName AS DictionaryMineralStyle_CoalMineralStyleName, 
            T.GoldMineralStyleName AS DictionaryMineralStyle_GoldMineralStyleName, 
            T.CustomMineralStyleName AS DictionaryMineralStyle_CustomMineralStyleName, 
            T.Description AS DictionaryMineralStyle_Description, 
            T.FullDescription AS DictionaryMineralStyle_FullDescription, 
            T.Thumbnail AS DictionaryMineralStyle_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralStyle_OriginalFileDataID, 
            T.Version AS DictionaryMineralStyle_Version, 
            T.VersionAntecedentID AS DictionaryMineralStyle_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralStyle_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralStyle_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralStyle_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralStyle_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralStyle_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralStyle_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralStyle_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralStyle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMineralTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView491()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMineralTypes
        [NKD.Module.BusinessObjects.DictionaryMineralType](T1.DictionaryMineralType_MineralTypeID, T1.DictionaryMineralType_StandardMineralTypeName, T1.DictionaryMineralType_CoalMineralTypeName, T1.DictionaryMineralType_GoldMineralTypeName, T1.DictionaryMineralType_CustomMineralTypeName, T1.DictionaryMineralType_Description, T1.DictionaryMineralType_FullDescription, T1.DictionaryMineralType_Thumbnail, T1.DictionaryMineralType_OriginalFileDataID, T1.DictionaryMineralType_Version, T1.DictionaryMineralType_VersionAntecedentID, T1.DictionaryMineralType_VersionCertainty, T1.DictionaryMineralType_VersionWorkflowInstanceID, T1.DictionaryMineralType_VersionUpdatedBy, T1.DictionaryMineralType_VersionDeletedBy, T1.DictionaryMineralType_VersionOwnerContactID, T1.DictionaryMineralType_VersionOwnerCompanyID, T1.DictionaryMineralType_VersionUpdated)
    FROM (
        SELECT 
            T.MineralTypeID AS DictionaryMineralType_MineralTypeID, 
            T.StandardMineralTypeName AS DictionaryMineralType_StandardMineralTypeName, 
            T.CoalMineralTypeName AS DictionaryMineralType_CoalMineralTypeName, 
            T.GoldMineralTypeName AS DictionaryMineralType_GoldMineralTypeName, 
            T.CustomMineralTypeName AS DictionaryMineralType_CustomMineralTypeName, 
            T.Description AS DictionaryMineralType_Description, 
            T.FullDescription AS DictionaryMineralType_FullDescription, 
            T.Thumbnail AS DictionaryMineralType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMineralType_OriginalFileDataID, 
            T.Version AS DictionaryMineralType_Version, 
            T.VersionAntecedentID AS DictionaryMineralType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMineralType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMineralType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMineralType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMineralType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMineralType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMineralType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMineralType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView492()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryModels
        [NKD.Module.BusinessObjects.DictionaryModel](T1.DictionaryModel_ModelID, T1.DictionaryModel_ParentModelID, T1.DictionaryModel_StandardModelName, T1.DictionaryModel_EcriModelName, T1.DictionaryModel_CustomModelName, T1.DictionaryModel_CompanyID, T1.DictionaryModel_OriginalManufacturerName, T1.DictionaryModel_ModelStatusID, T1.DictionaryModel_DeviceTypeID, T1.DictionaryModel_IsMake, T1.DictionaryModel_ManufacturedFrom, T1.DictionaryModel_ManufacturedUntil, T1.DictionaryModel_SupportedUntil, T1.DictionaryModel_EstimatedLifetimeUnitID, T1.DictionaryModel_EstimatedLifetime, T1.DictionaryModel_Description, T1.DictionaryModel_FullDescription, T1.DictionaryModel_Thumbnail, T1.DictionaryModel_OriginalFileDataID, T1.DictionaryModel_Version, T1.DictionaryModel_VersionAntecedentID, T1.DictionaryModel_VersionCertainty, T1.DictionaryModel_VersionWorkflowInstanceID, T1.DictionaryModel_VersionUpdatedBy, T1.DictionaryModel_VersionDeletedBy, T1.DictionaryModel_VersionOwnerContactID, T1.DictionaryModel_VersionOwnerCompanyID, T1.DictionaryModel_VersionUpdated, T1.DictionaryModel_UserGuideFileDataID, T1.DictionaryModel_DefaultLicenseTypeID, T1.DictionaryModel_SecureFileDataID, T1.DictionaryModel_SecureRedirectURL)
    FROM (
        SELECT 
            T.ModelID AS DictionaryModel_ModelID, 
            T.ParentModelID AS DictionaryModel_ParentModelID, 
            T.StandardModelName AS DictionaryModel_StandardModelName, 
            T.EcriModelName AS DictionaryModel_EcriModelName, 
            T.CustomModelName AS DictionaryModel_CustomModelName, 
            T.CompanyID AS DictionaryModel_CompanyID, 
            T.OriginalManufacturerName AS DictionaryModel_OriginalManufacturerName, 
            T.ModelStatusID AS DictionaryModel_ModelStatusID, 
            T.DeviceTypeID AS DictionaryModel_DeviceTypeID, 
            T.IsMake AS DictionaryModel_IsMake, 
            T.ManufacturedFrom AS DictionaryModel_ManufacturedFrom, 
            T.ManufacturedUntil AS DictionaryModel_ManufacturedUntil, 
            T.SupportedUntil AS DictionaryModel_SupportedUntil, 
            T.EstimatedLifetimeUnitID AS DictionaryModel_EstimatedLifetimeUnitID, 
            T.EstimatedLifetime AS DictionaryModel_EstimatedLifetime, 
            T.Description AS DictionaryModel_Description, 
            T.FullDescription AS DictionaryModel_FullDescription, 
            T.Thumbnail AS DictionaryModel_Thumbnail, 
            T.OriginalFileDataID AS DictionaryModel_OriginalFileDataID, 
            T.Version AS DictionaryModel_Version, 
            T.VersionAntecedentID AS DictionaryModel_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryModel_VersionUpdated, 
            T.UserGuideFileDataID AS DictionaryModel_UserGuideFileDataID, 
            T.DefaultLicenseTypeID AS DictionaryModel_DefaultLicenseTypeID, 
            T.SecureFileDataID AS DictionaryModel_SecureFileDataID, 
            T.SecureRedirectURL AS DictionaryModel_SecureRedirectURL, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryModelCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView493()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryModelCategories
        [NKD.Module.BusinessObjects.DictionaryModelCategory](T1.DictionaryModelCategory_ModelCategoryID, T1.DictionaryModelCategory_ModelID, T1.DictionaryModelCategory_CategoryDeviceTypeID, T1.DictionaryModelCategory_Version, T1.DictionaryModelCategory_VersionAntecedentID, T1.DictionaryModelCategory_VersionCertainty, T1.DictionaryModelCategory_VersionWorkflowInstanceID, T1.DictionaryModelCategory_VersionUpdatedBy, T1.DictionaryModelCategory_VersionDeletedBy, T1.DictionaryModelCategory_VersionOwnerContactID, T1.DictionaryModelCategory_VersionOwnerCompanyID, T1.DictionaryModelCategory_VersionUpdated)
    FROM (
        SELECT 
            T.ModelCategoryID AS DictionaryModelCategory_ModelCategoryID, 
            T.ModelID AS DictionaryModelCategory_ModelID, 
            T.CategoryDeviceTypeID AS DictionaryModelCategory_CategoryDeviceTypeID, 
            T.Version AS DictionaryModelCategory_Version, 
            T.VersionAntecedentID AS DictionaryModelCategory_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryModelCategory_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryModelCategory_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryModelCategory_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryModelCategory_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryModelCategory_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryModelCategory_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryModelCategory_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryModelRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView494()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryModelRelations
        [NKD.Module.BusinessObjects.DictionaryModelRelation](T1.DictionaryModelRelation_ModelRelationID, T1.DictionaryModelRelation_OriginalModelID, T1.DictionaryModelRelation_RelatedModelID, T1.DictionaryModelRelation_RelationTypeID, T1.DictionaryModelRelation_Related, T1.DictionaryModelRelation_Version, T1.DictionaryModelRelation_VersionAntecedentID, T1.DictionaryModelRelation_VersionCertainty, T1.DictionaryModelRelation_VersionWorkflowInstanceID, T1.DictionaryModelRelation_VersionUpdatedBy, T1.DictionaryModelRelation_VersionDeletedBy, T1.DictionaryModelRelation_VersionOwnerContactID, T1.DictionaryModelRelation_VersionOwnerCompanyID, T1.DictionaryModelRelation_VersionUpdated)
    FROM (
        SELECT 
            T.ModelRelationID AS DictionaryModelRelation_ModelRelationID, 
            T.OriginalModelID AS DictionaryModelRelation_OriginalModelID, 
            T.RelatedModelID AS DictionaryModelRelation_RelatedModelID, 
            T.RelationTypeID AS DictionaryModelRelation_RelationTypeID, 
            T.Related AS DictionaryModelRelation_Related, 
            T.Version AS DictionaryModelRelation_Version, 
            T.VersionAntecedentID AS DictionaryModelRelation_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryModelRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryModelRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryModelRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryModelRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryModelRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryModelRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryModelRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryModelStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView495()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryModelStatus
        [NKD.Module.BusinessObjects.DictionaryModelStatus](T1.DictionaryModelStatus_ModelStatusID, T1.DictionaryModelStatus_StandardModelStatusName, T1.DictionaryModelStatus_CustomModelStatusName, T1.DictionaryModelStatus_Description, T1.DictionaryModelStatus_FullDescription, T1.DictionaryModelStatus_Thumbnail, T1.DictionaryModelStatus_OriginalFileDataID, T1.DictionaryModelStatus_Version, T1.DictionaryModelStatus_VersionAntecedentID, T1.DictionaryModelStatus_VersionCertainty, T1.DictionaryModelStatus_VersionWorkflowInstanceID, T1.DictionaryModelStatus_VersionUpdatedBy, T1.DictionaryModelStatus_VersionDeletedBy, T1.DictionaryModelStatus_VersionOwnerContactID, T1.DictionaryModelStatus_VersionOwnerCompanyID, T1.DictionaryModelStatus_VersionUpdated)
    FROM (
        SELECT 
            T.ModelStatusID AS DictionaryModelStatus_ModelStatusID, 
            T.StandardModelStatusName AS DictionaryModelStatus_StandardModelStatusName, 
            T.CustomModelStatusName AS DictionaryModelStatus_CustomModelStatusName, 
            T.Description AS DictionaryModelStatus_Description, 
            T.FullDescription AS DictionaryModelStatus_FullDescription, 
            T.Thumbnail AS DictionaryModelStatus_Thumbnail, 
            T.OriginalFileDataID AS DictionaryModelStatus_OriginalFileDataID, 
            T.Version AS DictionaryModelStatus_Version, 
            T.VersionAntecedentID AS DictionaryModelStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryModelStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryModelStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryModelStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryModelStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryModelStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryModelStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryModelStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryMoistureSensitivities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView496()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryMoistureSensitivities
        [NKD.Module.BusinessObjects.DictionaryMoistureSensitivity](T1.DictionaryMoistureSensitivity_MoistureSensitivityID, T1.DictionaryMoistureSensitivity_StandardMoistureSensitivityName, T1.DictionaryMoistureSensitivity_CoalMoistureSensitivityName, T1.DictionaryMoistureSensitivity_GoldMoistureSensitivityName, T1.DictionaryMoistureSensitivity_CustomMoistureSensitivityName, T1.DictionaryMoistureSensitivity_Description, T1.DictionaryMoistureSensitivity_FullDescription, T1.DictionaryMoistureSensitivity_Thumbnail, T1.DictionaryMoistureSensitivity_OriginalFileDataID, T1.DictionaryMoistureSensitivity_Version, T1.DictionaryMoistureSensitivity_VersionAntecedentID, T1.DictionaryMoistureSensitivity_VersionCertainty, T1.DictionaryMoistureSensitivity_VersionWorkflowInstanceID, T1.DictionaryMoistureSensitivity_VersionUpdatedBy, T1.DictionaryMoistureSensitivity_VersionDeletedBy, T1.DictionaryMoistureSensitivity_VersionOwnerContactID, T1.DictionaryMoistureSensitivity_VersionOwnerCompanyID, T1.DictionaryMoistureSensitivity_VersionUpdated)
    FROM (
        SELECT 
            T.MoistureSensitivityID AS DictionaryMoistureSensitivity_MoistureSensitivityID, 
            T.StandardMoistureSensitivityName AS DictionaryMoistureSensitivity_StandardMoistureSensitivityName, 
            T.CoalMoistureSensitivityName AS DictionaryMoistureSensitivity_CoalMoistureSensitivityName, 
            T.GoldMoistureSensitivityName AS DictionaryMoistureSensitivity_GoldMoistureSensitivityName, 
            T.CustomMoistureSensitivityName AS DictionaryMoistureSensitivity_CustomMoistureSensitivityName, 
            T.Description AS DictionaryMoistureSensitivity_Description, 
            T.FullDescription AS DictionaryMoistureSensitivity_FullDescription, 
            T.Thumbnail AS DictionaryMoistureSensitivity_Thumbnail, 
            T.OriginalFileDataID AS DictionaryMoistureSensitivity_OriginalFileDataID, 
            T.Version AS DictionaryMoistureSensitivity_Version, 
            T.VersionAntecedentID AS DictionaryMoistureSensitivity_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryMoistureSensitivity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryMoistureSensitivity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryMoistureSensitivity_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryMoistureSensitivity_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryMoistureSensitivity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryMoistureSensitivity_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryMoistureSensitivity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMoistureSensitivity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPartStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView497()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPartStatus
        [NKD.Module.BusinessObjects.DictionaryPartStatus](T1.DictionaryPartStatus_PartStatusID, T1.DictionaryPartStatus_StandardPartStatusName, T1.DictionaryPartStatus_CustomPartStatusName, T1.DictionaryPartStatus_Description, T1.DictionaryPartStatus_FullDescription, T1.DictionaryPartStatus_Thumbnail, T1.DictionaryPartStatus_OriginalFileDataID, T1.DictionaryPartStatus_Version, T1.DictionaryPartStatus_VersionAntecedentID, T1.DictionaryPartStatus_VersionCertainty, T1.DictionaryPartStatus_VersionWorkflowInstanceID, T1.DictionaryPartStatus_VersionUpdatedBy, T1.DictionaryPartStatus_VersionDeletedBy, T1.DictionaryPartStatus_VersionOwnerContactID, T1.DictionaryPartStatus_VersionOwnerCompanyID, T1.DictionaryPartStatus_VersionUpdated)
    FROM (
        SELECT 
            T.PartStatusID AS DictionaryPartStatus_PartStatusID, 
            T.StandardPartStatusName AS DictionaryPartStatus_StandardPartStatusName, 
            T.CustomPartStatusName AS DictionaryPartStatus_CustomPartStatusName, 
            T.Description AS DictionaryPartStatus_Description, 
            T.FullDescription AS DictionaryPartStatus_FullDescription, 
            T.Thumbnail AS DictionaryPartStatus_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPartStatus_OriginalFileDataID, 
            T.Version AS DictionaryPartStatus_Version, 
            T.VersionAntecedentID AS DictionaryPartStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPartStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPartStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPartStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPartStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPartStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPartStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPartStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPartStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPlasticities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView498()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPlasticities
        [NKD.Module.BusinessObjects.DictionaryPlasticity](T1.DictionaryPlasticity_PlasticityID, T1.DictionaryPlasticity_StandardPlasticityName, T1.DictionaryPlasticity_CoalPlasticityName, T1.DictionaryPlasticity_GoldPlasticityName, T1.DictionaryPlasticity_CustomPlasticityName, T1.DictionaryPlasticity_Description, T1.DictionaryPlasticity_FullDescription, T1.DictionaryPlasticity_Thumbnail, T1.DictionaryPlasticity_OriginalFileDataID, T1.DictionaryPlasticity_Version, T1.DictionaryPlasticity_VersionAntecedentID, T1.DictionaryPlasticity_VersionCertainty, T1.DictionaryPlasticity_VersionWorkflowInstanceID, T1.DictionaryPlasticity_VersionUpdatedBy, T1.DictionaryPlasticity_VersionDeletedBy, T1.DictionaryPlasticity_VersionOwnerContactID, T1.DictionaryPlasticity_VersionOwnerCompanyID, T1.DictionaryPlasticity_VersionUpdated)
    FROM (
        SELECT 
            T.PlasticityID AS DictionaryPlasticity_PlasticityID, 
            T.StandardPlasticityName AS DictionaryPlasticity_StandardPlasticityName, 
            T.CoalPlasticityName AS DictionaryPlasticity_CoalPlasticityName, 
            T.GoldPlasticityName AS DictionaryPlasticity_GoldPlasticityName, 
            T.CustomPlasticityName AS DictionaryPlasticity_CustomPlasticityName, 
            T.Description AS DictionaryPlasticity_Description, 
            T.FullDescription AS DictionaryPlasticity_FullDescription, 
            T.Thumbnail AS DictionaryPlasticity_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPlasticity_OriginalFileDataID, 
            T.Version AS DictionaryPlasticity_Version, 
            T.VersionAntecedentID AS DictionaryPlasticity_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPlasticity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPlasticity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPlasticity_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPlasticity_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPlasticity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPlasticity_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPlasticity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlasticity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPlies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView499()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPlies
        [NKD.Module.BusinessObjects.DictionaryPly](T1.DictionaryPly_PlyID, T1.DictionaryPly_StandardPlyName, T1.DictionaryPly_Description, T1.DictionaryPly_FullDescription, T1.DictionaryPly_Thumbnail, T1.DictionaryPly_OriginalFileDataID, T1.DictionaryPly_Version, T1.DictionaryPly_VersionAntecedentID, T1.DictionaryPly_VersionCertainty, T1.DictionaryPly_VersionWorkflowInstanceID, T1.DictionaryPly_VersionUpdatedBy, T1.DictionaryPly_VersionDeletedBy, T1.DictionaryPly_VersionOwnerContactID, T1.DictionaryPly_VersionOwnerCompanyID, T1.DictionaryPly_VersionUpdated, T1.DictionaryPly_CustomPlyName)
    FROM (
        SELECT 
            T.PlyID AS DictionaryPly_PlyID, 
            T.StandardPlyName AS DictionaryPly_StandardPlyName, 
            T.Description AS DictionaryPly_Description, 
            T.FullDescription AS DictionaryPly_FullDescription, 
            T.Thumbnail AS DictionaryPly_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPly_OriginalFileDataID, 
            T.Version AS DictionaryPly_Version, 
            T.VersionAntecedentID AS DictionaryPly_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPly_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPly_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPly_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPly_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPly_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPly_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPly_VersionUpdated, 
            T.CustomPlyName AS DictionaryPly_CustomPlyName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPly AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPlyAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView500()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPlyAlias
        [NKD.Module.BusinessObjects.DictionaryPlyAlias](T1.DictionaryPlyAlias_PlyAliasID, T1.DictionaryPlyAlias_PlyID, T1.DictionaryPlyAlias_CustomPlyName, T1.DictionaryPlyAlias_FullDescription, T1.DictionaryPlyAlias_Thumbnail, T1.DictionaryPlyAlias_OriginalFileDataID, T1.DictionaryPlyAlias_Version, T1.DictionaryPlyAlias_VersionAntecedentID, T1.DictionaryPlyAlias_VersionCertainty, T1.DictionaryPlyAlias_VersionWorkflowInstanceID, T1.DictionaryPlyAlias_VersionUpdatedBy, T1.DictionaryPlyAlias_VersionDeletedBy, T1.DictionaryPlyAlias_VersionOwnerContactID, T1.DictionaryPlyAlias_VersionOwnerCompanyID, T1.DictionaryPlyAlias_VersionUpdated)
    FROM (
        SELECT 
            T.PlyAliasID AS DictionaryPlyAlias_PlyAliasID, 
            T.PlyID AS DictionaryPlyAlias_PlyID, 
            T.CustomPlyName AS DictionaryPlyAlias_CustomPlyName, 
            T.FullDescription AS DictionaryPlyAlias_FullDescription, 
            T.Thumbnail AS DictionaryPlyAlias_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPlyAlias_OriginalFileDataID, 
            T.Version AS DictionaryPlyAlias_Version, 
            T.VersionAntecedentID AS DictionaryPlyAlias_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPlyAlias_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPlyAlias_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPlyAlias_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPlyAlias_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPlyAlias_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPlyAlias_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPlyAlias_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlyAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPointLoadTestTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView501()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPointLoadTestTypes
        [NKD.Module.BusinessObjects.DictionaryPointLoadTestType](T1.DictionaryPointLoadTestType_PointLoadTestTypeID, T1.DictionaryPointLoadTestType_StandardPointLoadTestTypeName, T1.DictionaryPointLoadTestType_CoalPointLoadTestTypeName, T1.DictionaryPointLoadTestType_GoldPointLoadTestTypeName, T1.DictionaryPointLoadTestType_CustomPointLoadTestTypeName, T1.DictionaryPointLoadTestType_Description, T1.DictionaryPointLoadTestType_FullDescription, T1.DictionaryPointLoadTestType_Thumbnail, T1.DictionaryPointLoadTestType_OriginalFileDataID, T1.DictionaryPointLoadTestType_Version, T1.DictionaryPointLoadTestType_VersionAntecedentID, T1.DictionaryPointLoadTestType_VersionCertainty, T1.DictionaryPointLoadTestType_VersionWorkflowInstanceID, T1.DictionaryPointLoadTestType_VersionUpdatedBy, T1.DictionaryPointLoadTestType_VersionDeletedBy, T1.DictionaryPointLoadTestType_VersionOwnerContactID, T1.DictionaryPointLoadTestType_VersionOwnerCompanyID, T1.DictionaryPointLoadTestType_VersionUpdated)
    FROM (
        SELECT 
            T.PointLoadTestTypeID AS DictionaryPointLoadTestType_PointLoadTestTypeID, 
            T.StandardPointLoadTestTypeName AS DictionaryPointLoadTestType_StandardPointLoadTestTypeName, 
            T.CoalPointLoadTestTypeName AS DictionaryPointLoadTestType_CoalPointLoadTestTypeName, 
            T.GoldPointLoadTestTypeName AS DictionaryPointLoadTestType_GoldPointLoadTestTypeName, 
            T.CustomPointLoadTestTypeName AS DictionaryPointLoadTestType_CustomPointLoadTestTypeName, 
            T.Description AS DictionaryPointLoadTestType_Description, 
            T.FullDescription AS DictionaryPointLoadTestType_FullDescription, 
            T.Thumbnail AS DictionaryPointLoadTestType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPointLoadTestType_OriginalFileDataID, 
            T.Version AS DictionaryPointLoadTestType_Version, 
            T.VersionAntecedentID AS DictionaryPointLoadTestType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPointLoadTestType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPointLoadTestType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPointLoadTestType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPointLoadTestType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPointLoadTestType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPointLoadTestType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPointLoadTestType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPointLoadTestType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryPositions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView502()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryPositions
        [NKD.Module.BusinessObjects.DictionaryPosition](T1.DictionaryPosition_PositionID, T1.DictionaryPosition_StandardPositionName, T1.DictionaryPosition_CoalPositionName, T1.DictionaryPosition_GoldPositionName, T1.DictionaryPosition_CustomPositionName, T1.DictionaryPosition_Description, T1.DictionaryPosition_FullDescription, T1.DictionaryPosition_Thumbnail, T1.DictionaryPosition_OriginalFileDataID, T1.DictionaryPosition_Version, T1.DictionaryPosition_VersionAntecedentID, T1.DictionaryPosition_VersionCertainty, T1.DictionaryPosition_VersionWorkflowInstanceID, T1.DictionaryPosition_VersionUpdatedBy, T1.DictionaryPosition_VersionDeletedBy, T1.DictionaryPosition_VersionOwnerContactID, T1.DictionaryPosition_VersionOwnerCompanyID, T1.DictionaryPosition_VersionUpdated)
    FROM (
        SELECT 
            T.PositionID AS DictionaryPosition_PositionID, 
            T.StandardPositionName AS DictionaryPosition_StandardPositionName, 
            T.CoalPositionName AS DictionaryPosition_CoalPositionName, 
            T.GoldPositionName AS DictionaryPosition_GoldPositionName, 
            T.CustomPositionName AS DictionaryPosition_CustomPositionName, 
            T.Description AS DictionaryPosition_Description, 
            T.FullDescription AS DictionaryPosition_FullDescription, 
            T.Thumbnail AS DictionaryPosition_Thumbnail, 
            T.OriginalFileDataID AS DictionaryPosition_OriginalFileDataID, 
            T.Version AS DictionaryPosition_Version, 
            T.VersionAntecedentID AS DictionaryPosition_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryPosition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryPosition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryPosition_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryPosition_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryPosition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryPosition_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryPosition_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPosition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryProfessions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView503()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryProfessions
        [NKD.Module.BusinessObjects.DictionaryProfession](T1.DictionaryProfession_ProfessionID, T1.DictionaryProfession_StandardProfessionName, T1.DictionaryProfession_CoalProfessionName, T1.DictionaryProfession_GoldProfessionName, T1.DictionaryProfession_CustomProfessionName, T1.DictionaryProfession_Description, T1.DictionaryProfession_FullDescription, T1.DictionaryProfession_Thumbnail, T1.DictionaryProfession_OriginalFileDataID, T1.DictionaryProfession_Version, T1.DictionaryProfession_VersionAntecedentID, T1.DictionaryProfession_VersionCertainty, T1.DictionaryProfession_VersionWorkflowInstanceID, T1.DictionaryProfession_VersionUpdatedBy, T1.DictionaryProfession_VersionDeletedBy, T1.DictionaryProfession_VersionOwnerContactID, T1.DictionaryProfession_VersionOwnerCompanyID, T1.DictionaryProfession_VersionUpdated)
    FROM (
        SELECT 
            T.ProfessionID AS DictionaryProfession_ProfessionID, 
            T.StandardProfessionName AS DictionaryProfession_StandardProfessionName, 
            T.CoalProfessionName AS DictionaryProfession_CoalProfessionName, 
            T.GoldProfessionName AS DictionaryProfession_GoldProfessionName, 
            T.CustomProfessionName AS DictionaryProfession_CustomProfessionName, 
            T.Description AS DictionaryProfession_Description, 
            T.FullDescription AS DictionaryProfession_FullDescription, 
            T.Thumbnail AS DictionaryProfession_Thumbnail, 
            T.OriginalFileDataID AS DictionaryProfession_OriginalFileDataID, 
            T.Version AS DictionaryProfession_Version, 
            T.VersionAntecedentID AS DictionaryProfession_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryProfession_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryProfession_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryProfession_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryProfession_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryProfession_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryProfession_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryProfession_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryProfession AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryProvinceGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView504()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryProvinceGroups
        [NKD.Module.BusinessObjects.DictionaryProvinceGroup](T1.DictionaryProvinceGroup_ProvinceGroupID, T1.DictionaryProvinceGroup_StandardProvinceGroupName, T1.DictionaryProvinceGroup_CoalProvinceGroupName, T1.DictionaryProvinceGroup_GoldProvinceGroupName, T1.DictionaryProvinceGroup_CustomProvinceGroupName, T1.DictionaryProvinceGroup_ParentProvinceTypeID, T1.DictionaryProvinceGroup_Description, T1.DictionaryProvinceGroup_FullDescription, T1.DictionaryProvinceGroup_Thumbnail, T1.DictionaryProvinceGroup_OriginalFileDataID, T1.DictionaryProvinceGroup_Version, T1.DictionaryProvinceGroup_VersionAntecedentID, T1.DictionaryProvinceGroup_VersionCertainty, T1.DictionaryProvinceGroup_VersionWorkflowInstanceID, T1.DictionaryProvinceGroup_VersionUpdatedBy, T1.DictionaryProvinceGroup_VersionDeletedBy, T1.DictionaryProvinceGroup_VersionOwnerContactID, T1.DictionaryProvinceGroup_VersionOwnerCompanyID, T1.DictionaryProvinceGroup_VersionUpdated)
    FROM (
        SELECT 
            T.ProvinceGroupID AS DictionaryProvinceGroup_ProvinceGroupID, 
            T.StandardProvinceGroupName AS DictionaryProvinceGroup_StandardProvinceGroupName, 
            T.CoalProvinceGroupName AS DictionaryProvinceGroup_CoalProvinceGroupName, 
            T.GoldProvinceGroupName AS DictionaryProvinceGroup_GoldProvinceGroupName, 
            T.CustomProvinceGroupName AS DictionaryProvinceGroup_CustomProvinceGroupName, 
            T.ParentProvinceTypeID AS DictionaryProvinceGroup_ParentProvinceTypeID, 
            T.Description AS DictionaryProvinceGroup_Description, 
            T.FullDescription AS DictionaryProvinceGroup_FullDescription, 
            T.Thumbnail AS DictionaryProvinceGroup_Thumbnail, 
            T.OriginalFileDataID AS DictionaryProvinceGroup_OriginalFileDataID, 
            T.Version AS DictionaryProvinceGroup_Version, 
            T.VersionAntecedentID AS DictionaryProvinceGroup_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryProvinceGroup_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryProvinceGroup_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryProvinceGroup_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryProvinceGroup_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryProvinceGroup_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryProvinceGroup_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryProvinceGroup_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceGroup AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryProvinceTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView505()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryProvinceTypes
        [NKD.Module.BusinessObjects.DictionaryProvinceType](T1.DictionaryProvinceType_ProvinceTypeID, T1.DictionaryProvinceType_StandardProvinceTypeName, T1.DictionaryProvinceType_CoalProvinceTypeName, T1.DictionaryProvinceType_GoldProvinceTypeName, T1.DictionaryProvinceType_CustomProvinceTypeName, T1.DictionaryProvinceType_Description, T1.DictionaryProvinceType_FullDescription, T1.DictionaryProvinceType_Thumbnail, T1.DictionaryProvinceType_OriginalFileDataID, T1.DictionaryProvinceType_Version, T1.DictionaryProvinceType_VersionAntecedentID, T1.DictionaryProvinceType_VersionCertainty, T1.DictionaryProvinceType_VersionWorkflowInstanceID, T1.DictionaryProvinceType_VersionUpdatedBy, T1.DictionaryProvinceType_VersionDeletedBy, T1.DictionaryProvinceType_VersionOwnerContactID, T1.DictionaryProvinceType_VersionOwnerCompanyID, T1.DictionaryProvinceType_VersionUpdated)
    FROM (
        SELECT 
            T.ProvinceTypeID AS DictionaryProvinceType_ProvinceTypeID, 
            T.StandardProvinceTypeName AS DictionaryProvinceType_StandardProvinceTypeName, 
            T.CoalProvinceTypeName AS DictionaryProvinceType_CoalProvinceTypeName, 
            T.GoldProvinceTypeName AS DictionaryProvinceType_GoldProvinceTypeName, 
            T.CustomProvinceTypeName AS DictionaryProvinceType_CustomProvinceTypeName, 
            T.Description AS DictionaryProvinceType_Description, 
            T.FullDescription AS DictionaryProvinceType_FullDescription, 
            T.Thumbnail AS DictionaryProvinceType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryProvinceType_OriginalFileDataID, 
            T.Version AS DictionaryProvinceType_Version, 
            T.VersionAntecedentID AS DictionaryProvinceType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryProvinceType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryProvinceType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryProvinceType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryProvinceType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryProvinceType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryProvinceType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryProvinceType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryRelationTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView506()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryRelationTypes
        [NKD.Module.BusinessObjects.DictionaryRelationType](T1.DictionaryRelationType_RelationTypeID, T1.DictionaryRelationType_StandardRelationTypeName, T1.DictionaryRelationType_CoalRelationTypeName, T1.DictionaryRelationType_GoldRelationTypeName, T1.DictionaryRelationType_CustomRelationTypeName, T1.DictionaryRelationType_Description, T1.DictionaryRelationType_FullDescription, T1.DictionaryRelationType_Thumbnail, T1.DictionaryRelationType_OriginalFileDataID, T1.DictionaryRelationType_Version, T1.DictionaryRelationType_VersionAntecedentID, T1.DictionaryRelationType_VersionCertainty, T1.DictionaryRelationType_VersionWorkflowInstanceID, T1.DictionaryRelationType_VersionUpdatedBy, T1.DictionaryRelationType_VersionDeletedBy, T1.DictionaryRelationType_VersionOwnerContactID, T1.DictionaryRelationType_VersionOwnerCompanyID, T1.DictionaryRelationType_VersionUpdated)
    FROM (
        SELECT 
            T.RelationTypeID AS DictionaryRelationType_RelationTypeID, 
            T.StandardRelationTypeName AS DictionaryRelationType_StandardRelationTypeName, 
            T.CoalRelationTypeName AS DictionaryRelationType_CoalRelationTypeName, 
            T.GoldRelationTypeName AS DictionaryRelationType_GoldRelationTypeName, 
            T.CustomRelationTypeName AS DictionaryRelationType_CustomRelationTypeName, 
            T.Description AS DictionaryRelationType_Description, 
            T.FullDescription AS DictionaryRelationType_FullDescription, 
            T.Thumbnail AS DictionaryRelationType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryRelationType_OriginalFileDataID, 
            T.Version AS DictionaryRelationType_Version, 
            T.VersionAntecedentID AS DictionaryRelationType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryRelationType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryRelationType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryRelationType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryRelationType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryRelationType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryRelationType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryRelationType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryRelationType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryRockMassUnitTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView507()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryRockMassUnitTypes
        [NKD.Module.BusinessObjects.DictionaryRockMassUnitType](T1.DictionaryRockMassUnitType_RockMassUnitTypeID, T1.DictionaryRockMassUnitType_StandardRockMassUnitTypeName, T1.DictionaryRockMassUnitType_CoalRockMassUnitTypeName, T1.DictionaryRockMassUnitType_GoldRockMassUnitTypeName, T1.DictionaryRockMassUnitType_CustomRockMassUnitTypeName, T1.DictionaryRockMassUnitType_Description, T1.DictionaryRockMassUnitType_FullDescription, T1.DictionaryRockMassUnitType_Thumbnail, T1.DictionaryRockMassUnitType_OriginalFileDataID, T1.DictionaryRockMassUnitType_Version, T1.DictionaryRockMassUnitType_VersionAntecedentID, T1.DictionaryRockMassUnitType_VersionCertainty, T1.DictionaryRockMassUnitType_VersionWorkflowInstanceID, T1.DictionaryRockMassUnitType_VersionUpdatedBy, T1.DictionaryRockMassUnitType_VersionDeletedBy, T1.DictionaryRockMassUnitType_VersionOwnerContactID, T1.DictionaryRockMassUnitType_VersionOwnerCompanyID, T1.DictionaryRockMassUnitType_VersionUpdated)
    FROM (
        SELECT 
            T.RockMassUnitTypeID AS DictionaryRockMassUnitType_RockMassUnitTypeID, 
            T.StandardRockMassUnitTypeName AS DictionaryRockMassUnitType_StandardRockMassUnitTypeName, 
            T.CoalRockMassUnitTypeName AS DictionaryRockMassUnitType_CoalRockMassUnitTypeName, 
            T.GoldRockMassUnitTypeName AS DictionaryRockMassUnitType_GoldRockMassUnitTypeName, 
            T.CustomRockMassUnitTypeName AS DictionaryRockMassUnitType_CustomRockMassUnitTypeName, 
            T.Description AS DictionaryRockMassUnitType_Description, 
            T.FullDescription AS DictionaryRockMassUnitType_FullDescription, 
            T.Thumbnail AS DictionaryRockMassUnitType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryRockMassUnitType_OriginalFileDataID, 
            T.Version AS DictionaryRockMassUnitType_Version, 
            T.VersionAntecedentID AS DictionaryRockMassUnitType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryRockMassUnitType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryRockMassUnitType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryRockMassUnitType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryRockMassUnitType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryRockMassUnitType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryRockMassUnitType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryRockMassUnitType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryRockMassUnitType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySampleCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView508()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySampleCategories
        [NKD.Module.BusinessObjects.DictionarySampleCategory](T1.DictionarySampleCategory_SampleCategoryID, T1.DictionarySampleCategory_StandardSampleCategoryName, T1.DictionarySampleCategory_CoalSampleCategoryName, T1.DictionarySampleCategory_GoldSampleCategoryName, T1.DictionarySampleCategory_CustomSampleCategoryName, T1.DictionarySampleCategory_Description, T1.DictionarySampleCategory_FullDescription, T1.DictionarySampleCategory_Thumbnail, T1.DictionarySampleCategory_OriginalFileDataID, T1.DictionarySampleCategory_Version, T1.DictionarySampleCategory_VersionAntecedentID, T1.DictionarySampleCategory_VersionCertainty, T1.DictionarySampleCategory_VersionWorkflowInstanceID, T1.DictionarySampleCategory_VersionUpdatedBy, T1.DictionarySampleCategory_VersionDeletedBy, T1.DictionarySampleCategory_VersionOwnerContactID, T1.DictionarySampleCategory_VersionOwnerCompanyID, T1.DictionarySampleCategory_VersionUpdated)
    FROM (
        SELECT 
            T.SampleCategoryID AS DictionarySampleCategory_SampleCategoryID, 
            T.StandardSampleCategoryName AS DictionarySampleCategory_StandardSampleCategoryName, 
            T.CoalSampleCategoryName AS DictionarySampleCategory_CoalSampleCategoryName, 
            T.GoldSampleCategoryName AS DictionarySampleCategory_GoldSampleCategoryName, 
            T.CustomSampleCategoryName AS DictionarySampleCategory_CustomSampleCategoryName, 
            T.Description AS DictionarySampleCategory_Description, 
            T.FullDescription AS DictionarySampleCategory_FullDescription, 
            T.Thumbnail AS DictionarySampleCategory_Thumbnail, 
            T.OriginalFileDataID AS DictionarySampleCategory_OriginalFileDataID, 
            T.Version AS DictionarySampleCategory_Version, 
            T.VersionAntecedentID AS DictionarySampleCategory_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySampleCategory_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySampleCategory_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySampleCategory_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySampleCategory_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySampleCategory_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySampleCategory_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySampleCategory_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySampleStates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView509()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySampleStates
        [NKD.Module.BusinessObjects.DictionarySampleState](T1.DictionarySampleState_SampleStateID, T1.DictionarySampleState_StandardSampleStateName, T1.DictionarySampleState_CoalSampleStateName, T1.DictionarySampleState_GoldSampleStateName, T1.DictionarySampleState_CustomSampleStateName, T1.DictionarySampleState_Description, T1.DictionarySampleState_FullDescription, T1.DictionarySampleState_Thumbnail, T1.DictionarySampleState_OriginalFileDataID, T1.DictionarySampleState_Version, T1.DictionarySampleState_VersionAntecedentID, T1.DictionarySampleState_VersionCertainty, T1.DictionarySampleState_VersionWorkflowInstanceID, T1.DictionarySampleState_VersionUpdatedBy, T1.DictionarySampleState_VersionDeletedBy, T1.DictionarySampleState_VersionOwnerContactID, T1.DictionarySampleState_VersionOwnerCompanyID, T1.DictionarySampleState_VersionUpdated)
    FROM (
        SELECT 
            T.SampleStateID AS DictionarySampleState_SampleStateID, 
            T.StandardSampleStateName AS DictionarySampleState_StandardSampleStateName, 
            T.CoalSampleStateName AS DictionarySampleState_CoalSampleStateName, 
            T.GoldSampleStateName AS DictionarySampleState_GoldSampleStateName, 
            T.CustomSampleStateName AS DictionarySampleState_CustomSampleStateName, 
            T.Description AS DictionarySampleState_Description, 
            T.FullDescription AS DictionarySampleState_FullDescription, 
            T.Thumbnail AS DictionarySampleState_Thumbnail, 
            T.OriginalFileDataID AS DictionarySampleState_OriginalFileDataID, 
            T.Version AS DictionarySampleState_Version, 
            T.VersionAntecedentID AS DictionarySampleState_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySampleState_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySampleState_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySampleState_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySampleState_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySampleState_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySampleState_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySampleState_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleState AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySampleTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView510()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySampleTypes
        [NKD.Module.BusinessObjects.DictionarySampleType](T1.DictionarySampleType_SampleTypeID, T1.DictionarySampleType_StandardSampleTypeName, T1.DictionarySampleType_CoalSampleTypeName, T1.DictionarySampleType_GoldSampleTypeName, T1.DictionarySampleType_CustomSampleTypeName, T1.DictionarySampleType_Description, T1.DictionarySampleType_FullDescription, T1.DictionarySampleType_Thumbnail, T1.DictionarySampleType_OriginalFileDataID, T1.DictionarySampleType_Version, T1.DictionarySampleType_VersionAntecedentID, T1.DictionarySampleType_VersionCertainty, T1.DictionarySampleType_VersionWorkflowInstanceID, T1.DictionarySampleType_VersionUpdatedBy, T1.DictionarySampleType_VersionDeletedBy, T1.DictionarySampleType_VersionOwnerContactID, T1.DictionarySampleType_VersionOwnerCompanyID, T1.DictionarySampleType_VersionUpdated)
    FROM (
        SELECT 
            T.SampleTypeID AS DictionarySampleType_SampleTypeID, 
            T.StandardSampleTypeName AS DictionarySampleType_StandardSampleTypeName, 
            T.CoalSampleTypeName AS DictionarySampleType_CoalSampleTypeName, 
            T.GoldSampleTypeName AS DictionarySampleType_GoldSampleTypeName, 
            T.CustomSampleTypeName AS DictionarySampleType_CustomSampleTypeName, 
            T.Description AS DictionarySampleType_Description, 
            T.FullDescription AS DictionarySampleType_FullDescription, 
            T.Thumbnail AS DictionarySampleType_Thumbnail, 
            T.OriginalFileDataID AS DictionarySampleType_OriginalFileDataID, 
            T.Version AS DictionarySampleType_Version, 
            T.VersionAntecedentID AS DictionarySampleType_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySampleType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySampleType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySampleType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySampleType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySampleType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySampleType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySampleType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySeams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView511()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySeams
        [NKD.Module.BusinessObjects.DictionarySeam](T1.DictionarySeam_SeamID, T1.DictionarySeam_StandardSeamName, T1.DictionarySeam_Description, T1.DictionarySeam_FullDescription, T1.DictionarySeam_Thumbnail, T1.DictionarySeam_OriginalFileDataID, T1.DictionarySeam_Version, T1.DictionarySeam_VersionAntecedentID, T1.DictionarySeam_VersionCertainty, T1.DictionarySeam_VersionWorkflowInstanceID, T1.DictionarySeam_VersionUpdatedBy, T1.DictionarySeam_VersionDeletedBy, T1.DictionarySeam_VersionOwnerContactID, T1.DictionarySeam_VersionOwnerCompanyID, T1.DictionarySeam_VersionUpdated, T1.DictionarySeam_CustomSeamName)
    FROM (
        SELECT 
            T.SeamID AS DictionarySeam_SeamID, 
            T.StandardSeamName AS DictionarySeam_StandardSeamName, 
            T.Description AS DictionarySeam_Description, 
            T.FullDescription AS DictionarySeam_FullDescription, 
            T.Thumbnail AS DictionarySeam_Thumbnail, 
            T.OriginalFileDataID AS DictionarySeam_OriginalFileDataID, 
            T.Version AS DictionarySeam_Version, 
            T.VersionAntecedentID AS DictionarySeam_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySeam_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySeam_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySeam_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySeam_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySeam_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySeam_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySeam_VersionUpdated, 
            T.CustomSeamName AS DictionarySeam_CustomSeamName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySeam AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySeamAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView512()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySeamAlias
        [NKD.Module.BusinessObjects.DictionarySeamAlias](T1.DictionarySeamAlias_SeamAliasID, T1.DictionarySeamAlias_SeamID, T1.DictionarySeamAlias_CustomSeamName, T1.DictionarySeamAlias_FullDescription, T1.DictionarySeamAlias_Thumbnail, T1.DictionarySeamAlias_OriginalFileDataID, T1.DictionarySeamAlias_Version, T1.DictionarySeamAlias_VersionAntecedentID, T1.DictionarySeamAlias_VersionCertainty, T1.DictionarySeamAlias_VersionWorkflowInstanceID, T1.DictionarySeamAlias_VersionUpdatedBy, T1.DictionarySeamAlias_VersionDeletedBy, T1.DictionarySeamAlias_VersionOwnerContactID, T1.DictionarySeamAlias_VersionOwnerCompanyID, T1.DictionarySeamAlias_VersionUpdated)
    FROM (
        SELECT 
            T.SeamAliasID AS DictionarySeamAlias_SeamAliasID, 
            T.SeamID AS DictionarySeamAlias_SeamID, 
            T.CustomSeamName AS DictionarySeamAlias_CustomSeamName, 
            T.FullDescription AS DictionarySeamAlias_FullDescription, 
            T.Thumbnail AS DictionarySeamAlias_Thumbnail, 
            T.OriginalFileDataID AS DictionarySeamAlias_OriginalFileDataID, 
            T.Version AS DictionarySeamAlias_Version, 
            T.VersionAntecedentID AS DictionarySeamAlias_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySeamAlias_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySeamAlias_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySeamAlias_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySeamAlias_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySeamAlias_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySeamAlias_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySeamAlias_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySeamAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySedimentaryFeatures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView513()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySedimentaryFeatures
        [NKD.Module.BusinessObjects.DictionarySedimentaryFeature](T1.DictionarySedimentaryFeature_SedimentaryFeatureID, T1.DictionarySedimentaryFeature_StandardSedimentaryFeatureName, T1.DictionarySedimentaryFeature_CoalSedimentaryFeatureName, T1.DictionarySedimentaryFeature_GoldSedimentaryFeatureName, T1.DictionarySedimentaryFeature_CustomSedimentaryFeatureName, T1.DictionarySedimentaryFeature_Description, T1.DictionarySedimentaryFeature_FullDescription, T1.DictionarySedimentaryFeature_Thumbnail, T1.DictionarySedimentaryFeature_OriginalFileDataID, T1.DictionarySedimentaryFeature_Version, T1.DictionarySedimentaryFeature_VersionAntecedentID, T1.DictionarySedimentaryFeature_VersionCertainty, T1.DictionarySedimentaryFeature_VersionWorkflowInstanceID, T1.DictionarySedimentaryFeature_VersionUpdatedBy, T1.DictionarySedimentaryFeature_VersionDeletedBy, T1.DictionarySedimentaryFeature_VersionOwnerContactID, T1.DictionarySedimentaryFeature_VersionOwnerCompanyID, T1.DictionarySedimentaryFeature_VersionUpdated)
    FROM (
        SELECT 
            T.SedimentaryFeatureID AS DictionarySedimentaryFeature_SedimentaryFeatureID, 
            T.StandardSedimentaryFeatureName AS DictionarySedimentaryFeature_StandardSedimentaryFeatureName, 
            T.CoalSedimentaryFeatureName AS DictionarySedimentaryFeature_CoalSedimentaryFeatureName, 
            T.GoldSedimentaryFeatureName AS DictionarySedimentaryFeature_GoldSedimentaryFeatureName, 
            T.CustomSedimentaryFeatureName AS DictionarySedimentaryFeature_CustomSedimentaryFeatureName, 
            T.Description AS DictionarySedimentaryFeature_Description, 
            T.FullDescription AS DictionarySedimentaryFeature_FullDescription, 
            T.Thumbnail AS DictionarySedimentaryFeature_Thumbnail, 
            T.OriginalFileDataID AS DictionarySedimentaryFeature_OriginalFileDataID, 
            T.Version AS DictionarySedimentaryFeature_Version, 
            T.VersionAntecedentID AS DictionarySedimentaryFeature_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySedimentaryFeature_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySedimentaryFeature_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySedimentaryFeature_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySedimentaryFeature_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySedimentaryFeature_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySedimentaryFeature_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySedimentaryFeature_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySedimentaryFeature AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryShades.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView514()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryShades
        [NKD.Module.BusinessObjects.DictionaryShade](T1.DictionaryShade_ShadeID, T1.DictionaryShade_StandardShadeName, T1.DictionaryShade_CoalShadeName, T1.DictionaryShade_GoldShadeName, T1.DictionaryShade_CustomShadeName, T1.DictionaryShade_Description, T1.DictionaryShade_FullDescription, T1.DictionaryShade_Thumbnail, T1.DictionaryShade_OriginalFileDataID, T1.DictionaryShade_Version, T1.DictionaryShade_VersionAntecedentID, T1.DictionaryShade_VersionCertainty, T1.DictionaryShade_VersionWorkflowInstanceID, T1.DictionaryShade_VersionUpdatedBy, T1.DictionaryShade_VersionDeletedBy, T1.DictionaryShade_VersionOwnerContactID, T1.DictionaryShade_VersionOwnerCompanyID, T1.DictionaryShade_VersionUpdated)
    FROM (
        SELECT 
            T.ShadeID AS DictionaryShade_ShadeID, 
            T.StandardShadeName AS DictionaryShade_StandardShadeName, 
            T.CoalShadeName AS DictionaryShade_CoalShadeName, 
            T.GoldShadeName AS DictionaryShade_GoldShadeName, 
            T.CustomShadeName AS DictionaryShade_CustomShadeName, 
            T.Description AS DictionaryShade_Description, 
            T.FullDescription AS DictionaryShade_FullDescription, 
            T.Thumbnail AS DictionaryShade_Thumbnail, 
            T.OriginalFileDataID AS DictionaryShade_OriginalFileDataID, 
            T.Version AS DictionaryShade_Version, 
            T.VersionAntecedentID AS DictionaryShade_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryShade_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryShade_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryShade_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryShade_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryShade_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryShade_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryShade_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryShade AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryShapes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView515()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryShapes
        [NKD.Module.BusinessObjects.DictionaryShape](T1.DictionaryShape_ShapeID, T1.DictionaryShape_StandardShapeName, T1.DictionaryShape_CoalShapeName, T1.DictionaryShape_GoldShapeName, T1.DictionaryShape_CustomShapeName, T1.DictionaryShape_Description, T1.DictionaryShape_FullDescription, T1.DictionaryShape_Thumbnail, T1.DictionaryShape_OriginalFileDataID, T1.DictionaryShape_Version, T1.DictionaryShape_VersionAntecedentID, T1.DictionaryShape_VersionCertainty, T1.DictionaryShape_VersionWorkflowInstanceID, T1.DictionaryShape_VersionUpdatedBy, T1.DictionaryShape_VersionDeletedBy, T1.DictionaryShape_VersionOwnerContactID, T1.DictionaryShape_VersionOwnerCompanyID, T1.DictionaryShape_VersionUpdated)
    FROM (
        SELECT 
            T.ShapeID AS DictionaryShape_ShapeID, 
            T.StandardShapeName AS DictionaryShape_StandardShapeName, 
            T.CoalShapeName AS DictionaryShape_CoalShapeName, 
            T.GoldShapeName AS DictionaryShape_GoldShapeName, 
            T.CustomShapeName AS DictionaryShape_CustomShapeName, 
            T.Description AS DictionaryShape_Description, 
            T.FullDescription AS DictionaryShape_FullDescription, 
            T.Thumbnail AS DictionaryShape_Thumbnail, 
            T.OriginalFileDataID AS DictionaryShape_OriginalFileDataID, 
            T.Version AS DictionaryShape_Version, 
            T.VersionAntecedentID AS DictionaryShape_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryShape_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryShape_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryShape_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryShape_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryShape_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryShape_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryShape_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryShape AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryStratigraphies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView516()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryStratigraphies
        [NKD.Module.BusinessObjects.DictionaryStratigraphy](T1.DictionaryStratigraphy_StratigraphyID, T1.DictionaryStratigraphy_StandardStratigraphyName, T1.DictionaryStratigraphy_CoalStratigraphyName, T1.DictionaryStratigraphy_GoldStratigraphyName, T1.DictionaryStratigraphy_CustomStratigraphyName, T1.DictionaryStratigraphy_Description, T1.DictionaryStratigraphy_FullDescription, T1.DictionaryStratigraphy_Thumbnail, T1.DictionaryStratigraphy_OriginalFileDataID, T1.DictionaryStratigraphy_Version, T1.DictionaryStratigraphy_VersionAntecedentID, T1.DictionaryStratigraphy_VersionCertainty, T1.DictionaryStratigraphy_VersionWorkflowInstanceID, T1.DictionaryStratigraphy_VersionUpdatedBy, T1.DictionaryStratigraphy_VersionDeletedBy, T1.DictionaryStratigraphy_VersionOwnerContactID, T1.DictionaryStratigraphy_VersionOwnerCompanyID, T1.DictionaryStratigraphy_VersionUpdated)
    FROM (
        SELECT 
            T.StratigraphyID AS DictionaryStratigraphy_StratigraphyID, 
            T.StandardStratigraphyName AS DictionaryStratigraphy_StandardStratigraphyName, 
            T.CoalStratigraphyName AS DictionaryStratigraphy_CoalStratigraphyName, 
            T.GoldStratigraphyName AS DictionaryStratigraphy_GoldStratigraphyName, 
            T.CustomStratigraphyName AS DictionaryStratigraphy_CustomStratigraphyName, 
            T.Description AS DictionaryStratigraphy_Description, 
            T.FullDescription AS DictionaryStratigraphy_FullDescription, 
            T.Thumbnail AS DictionaryStratigraphy_Thumbnail, 
            T.OriginalFileDataID AS DictionaryStratigraphy_OriginalFileDataID, 
            T.Version AS DictionaryStratigraphy_Version, 
            T.VersionAntecedentID AS DictionaryStratigraphy_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryStratigraphy_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryStratigraphy_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryStratigraphy_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryStratigraphy_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryStratigraphy_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryStratigraphy_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryStratigraphy_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryStratigraphy AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySurfaceRoughnesses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView517()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySurfaceRoughnesses
        [NKD.Module.BusinessObjects.DictionarySurfaceRoughness](T1.DictionarySurfaceRoughness_SurfaceRoughnessID, T1.DictionarySurfaceRoughness_StandardSurfaceRoughnessName, T1.DictionarySurfaceRoughness_CoalSurfaceRoughnessName, T1.DictionarySurfaceRoughness_GoldSurfaceRoughnessName, T1.DictionarySurfaceRoughness_CustomSurfaceRoughnessName, T1.DictionarySurfaceRoughness_Description, T1.DictionarySurfaceRoughness_FullDescription, T1.DictionarySurfaceRoughness_Thumbnail, T1.DictionarySurfaceRoughness_OriginalFileDataID, T1.DictionarySurfaceRoughness_Version, T1.DictionarySurfaceRoughness_VersionAntecedentID, T1.DictionarySurfaceRoughness_VersionCertainty, T1.DictionarySurfaceRoughness_VersionWorkflowInstanceID, T1.DictionarySurfaceRoughness_VersionUpdatedBy, T1.DictionarySurfaceRoughness_VersionDeletedBy, T1.DictionarySurfaceRoughness_VersionOwnerContactID, T1.DictionarySurfaceRoughness_VersionOwnerCompanyID, T1.DictionarySurfaceRoughness_VersionUpdated)
    FROM (
        SELECT 
            T.SurfaceRoughnessID AS DictionarySurfaceRoughness_SurfaceRoughnessID, 
            T.StandardSurfaceRoughnessName AS DictionarySurfaceRoughness_StandardSurfaceRoughnessName, 
            T.CoalSurfaceRoughnessName AS DictionarySurfaceRoughness_CoalSurfaceRoughnessName, 
            T.GoldSurfaceRoughnessName AS DictionarySurfaceRoughness_GoldSurfaceRoughnessName, 
            T.CustomSurfaceRoughnessName AS DictionarySurfaceRoughness_CustomSurfaceRoughnessName, 
            T.Description AS DictionarySurfaceRoughness_Description, 
            T.FullDescription AS DictionarySurfaceRoughness_FullDescription, 
            T.Thumbnail AS DictionarySurfaceRoughness_Thumbnail, 
            T.OriginalFileDataID AS DictionarySurfaceRoughness_OriginalFileDataID, 
            T.Version AS DictionarySurfaceRoughness_Version, 
            T.VersionAntecedentID AS DictionarySurfaceRoughness_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySurfaceRoughness_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySurfaceRoughness_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySurfaceRoughness_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySurfaceRoughness_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySurfaceRoughness_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySurfaceRoughness_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySurfaceRoughness_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySurfaceRoughness AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionarySurveyAccuracies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView518()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionarySurveyAccuracies
        [NKD.Module.BusinessObjects.DictionarySurveyAccuracy](T1.DictionarySurveyAccuracy_SurveyAccuracyID, T1.DictionarySurveyAccuracy_StandardSurveyAccuracyName, T1.DictionarySurveyAccuracy_CoalSurveyAccuracyName, T1.DictionarySurveyAccuracy_GoldSurveyAccuracyName, T1.DictionarySurveyAccuracy_CustomSurveyAccuracyName, T1.DictionarySurveyAccuracy_Description, T1.DictionarySurveyAccuracy_FullDescription, T1.DictionarySurveyAccuracy_Thumbnail, T1.DictionarySurveyAccuracy_OriginalFileDataID, T1.DictionarySurveyAccuracy_Version, T1.DictionarySurveyAccuracy_VersionAntecedentID, T1.DictionarySurveyAccuracy_VersionCertainty, T1.DictionarySurveyAccuracy_VersionWorkflowInstanceID, T1.DictionarySurveyAccuracy_VersionUpdatedBy, T1.DictionarySurveyAccuracy_VersionDeletedBy, T1.DictionarySurveyAccuracy_VersionOwnerContactID, T1.DictionarySurveyAccuracy_VersionOwnerCompanyID, T1.DictionarySurveyAccuracy_VersionUpdated)
    FROM (
        SELECT 
            T.SurveyAccuracyID AS DictionarySurveyAccuracy_SurveyAccuracyID, 
            T.StandardSurveyAccuracyName AS DictionarySurveyAccuracy_StandardSurveyAccuracyName, 
            T.CoalSurveyAccuracyName AS DictionarySurveyAccuracy_CoalSurveyAccuracyName, 
            T.GoldSurveyAccuracyName AS DictionarySurveyAccuracy_GoldSurveyAccuracyName, 
            T.CustomSurveyAccuracyName AS DictionarySurveyAccuracy_CustomSurveyAccuracyName, 
            T.Description AS DictionarySurveyAccuracy_Description, 
            T.FullDescription AS DictionarySurveyAccuracy_FullDescription, 
            T.Thumbnail AS DictionarySurveyAccuracy_Thumbnail, 
            T.OriginalFileDataID AS DictionarySurveyAccuracy_OriginalFileDataID, 
            T.Version AS DictionarySurveyAccuracy_Version, 
            T.VersionAntecedentID AS DictionarySurveyAccuracy_VersionAntecedentID, 
            T.VersionCertainty AS DictionarySurveyAccuracy_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionarySurveyAccuracy_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionarySurveyAccuracy_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionarySurveyAccuracy_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionarySurveyAccuracy_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionarySurveyAccuracy_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionarySurveyAccuracy_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySurveyAccuracy AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryTextures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView519()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryTextures
        [NKD.Module.BusinessObjects.DictionaryTexture](T1.DictionaryTexture_TextureID, T1.DictionaryTexture_StandardTextureName, T1.DictionaryTexture_CoalTextureName, T1.DictionaryTexture_GoldTextureName, T1.DictionaryTexture_CustomTextureName, T1.DictionaryTexture_Description, T1.DictionaryTexture_FullDescription, T1.DictionaryTexture_Thumbnail, T1.DictionaryTexture_OriginalFileDataID, T1.DictionaryTexture_Version, T1.DictionaryTexture_VersionAntecedentID, T1.DictionaryTexture_VersionCertainty, T1.DictionaryTexture_VersionWorkflowInstanceID, T1.DictionaryTexture_VersionUpdatedBy, T1.DictionaryTexture_VersionDeletedBy, T1.DictionaryTexture_VersionOwnerContactID, T1.DictionaryTexture_VersionOwnerCompanyID, T1.DictionaryTexture_VersionUpdated)
    FROM (
        SELECT 
            T.TextureID AS DictionaryTexture_TextureID, 
            T.StandardTextureName AS DictionaryTexture_StandardTextureName, 
            T.CoalTextureName AS DictionaryTexture_CoalTextureName, 
            T.GoldTextureName AS DictionaryTexture_GoldTextureName, 
            T.CustomTextureName AS DictionaryTexture_CustomTextureName, 
            T.Description AS DictionaryTexture_Description, 
            T.FullDescription AS DictionaryTexture_FullDescription, 
            T.Thumbnail AS DictionaryTexture_Thumbnail, 
            T.OriginalFileDataID AS DictionaryTexture_OriginalFileDataID, 
            T.Version AS DictionaryTexture_Version, 
            T.VersionAntecedentID AS DictionaryTexture_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryTexture_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryTexture_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryTexture_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryTexture_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryTexture_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryTexture_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryTexture_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryTexture AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryUnits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView520()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryUnits
        [NKD.Module.BusinessObjects.DictionaryUnit](T1.DictionaryUnit_UnitID, T1.DictionaryUnit_UnitTypeID, T1.DictionaryUnit_StrictlySI, T1.DictionaryUnit_EquivalentMultiplier, T1.DictionaryUnit_StandardUnitName, T1.DictionaryUnit_CoalUnitName, T1.DictionaryUnit_GoldUnitName, T1.DictionaryUnit_CustomUnitName, T1.DictionaryUnit_Description, T1.DictionaryUnit_FullDescription, T1.DictionaryUnit_Thumbnail, T1.DictionaryUnit_OriginalFileDataID, T1.DictionaryUnit_Version, T1.DictionaryUnit_VersionAntecedentID, T1.DictionaryUnit_VersionCertainty, T1.DictionaryUnit_VersionWorkflowInstanceID, T1.DictionaryUnit_VersionUpdatedBy, T1.DictionaryUnit_VersionDeletedBy, T1.DictionaryUnit_VersionOwnerContactID, T1.DictionaryUnit_VersionOwnerCompanyID, T1.DictionaryUnit_VersionUpdated, T1.DictionaryUnit_EquivalentUnitID)
    FROM (
        SELECT 
            T.UnitID AS DictionaryUnit_UnitID, 
            T.UnitTypeID AS DictionaryUnit_UnitTypeID, 
            T.StrictlySI AS DictionaryUnit_StrictlySI, 
            T.EquivalentMultiplier AS DictionaryUnit_EquivalentMultiplier, 
            T.StandardUnitName AS DictionaryUnit_StandardUnitName, 
            T.CoalUnitName AS DictionaryUnit_CoalUnitName, 
            T.GoldUnitName AS DictionaryUnit_GoldUnitName, 
            T.CustomUnitName AS DictionaryUnit_CustomUnitName, 
            T.Description AS DictionaryUnit_Description, 
            T.FullDescription AS DictionaryUnit_FullDescription, 
            T.Thumbnail AS DictionaryUnit_Thumbnail, 
            T.OriginalFileDataID AS DictionaryUnit_OriginalFileDataID, 
            T.Version AS DictionaryUnit_Version, 
            T.VersionAntecedentID AS DictionaryUnit_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryUnit_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryUnit_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryUnit_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryUnit_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryUnit_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryUnit_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryUnit_VersionUpdated, 
            T.EquivalentUnitID AS DictionaryUnit_EquivalentUnitID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryUnitTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView521()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryUnitTypes
        [NKD.Module.BusinessObjects.DictionaryUnitType](T1.DictionaryUnitType_UnitTypeID, T1.DictionaryUnitType_StandardUnitTypeName, T1.DictionaryUnitType_CustomUnitTypeName, T1.DictionaryUnitType_Description, T1.DictionaryUnitType_FullDescription, T1.DictionaryUnitType_Thumbnail, T1.DictionaryUnitType_OriginalFileDataID, T1.DictionaryUnitType_Version, T1.DictionaryUnitType_VersionAntecedentID, T1.DictionaryUnitType_VersionCertainty, T1.DictionaryUnitType_VersionWorkflowInstanceID, T1.DictionaryUnitType_VersionUpdatedBy, T1.DictionaryUnitType_VersionDeletedBy, T1.DictionaryUnitType_VersionOwnerContactID, T1.DictionaryUnitType_VersionOwnerCompanyID, T1.DictionaryUnitType_VersionUpdated)
    FROM (
        SELECT 
            T.UnitTypeID AS DictionaryUnitType_UnitTypeID, 
            T.StandardUnitTypeName AS DictionaryUnitType_StandardUnitTypeName, 
            T.CustomUnitTypeName AS DictionaryUnitType_CustomUnitTypeName, 
            T.Description AS DictionaryUnitType_Description, 
            T.FullDescription AS DictionaryUnitType_FullDescription, 
            T.Thumbnail AS DictionaryUnitType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryUnitType_OriginalFileDataID, 
            T.Version AS DictionaryUnitType_Version, 
            T.VersionAntecedentID AS DictionaryUnitType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryUnitType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryUnitType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryUnitType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryUnitType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryUnitType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryUnitType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryUnitType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnitType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryWeatherings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView522()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryWeatherings
        [NKD.Module.BusinessObjects.DictionaryWeathering](T1.DictionaryWeathering_WeatheringID, T1.DictionaryWeathering_StandardWeatheringName, T1.DictionaryWeathering_CoalWeatheringName, T1.DictionaryWeathering_GoldWeatheringName, T1.DictionaryWeathering_CustomWeatheringName, T1.DictionaryWeathering_Description, T1.DictionaryWeathering_FullDescription, T1.DictionaryWeathering_Thumbnail, T1.DictionaryWeathering_OriginalFileDataID, T1.DictionaryWeathering_Version, T1.DictionaryWeathering_VersionAntecedentID, T1.DictionaryWeathering_VersionCertainty, T1.DictionaryWeathering_VersionWorkflowInstanceID, T1.DictionaryWeathering_VersionUpdatedBy, T1.DictionaryWeathering_VersionDeletedBy, T1.DictionaryWeathering_VersionOwnerContactID, T1.DictionaryWeathering_VersionOwnerCompanyID, T1.DictionaryWeathering_VersionUpdated)
    FROM (
        SELECT 
            T.WeatheringID AS DictionaryWeathering_WeatheringID, 
            T.StandardWeatheringName AS DictionaryWeathering_StandardWeatheringName, 
            T.CoalWeatheringName AS DictionaryWeathering_CoalWeatheringName, 
            T.GoldWeatheringName AS DictionaryWeathering_GoldWeatheringName, 
            T.CustomWeatheringName AS DictionaryWeathering_CustomWeatheringName, 
            T.Description AS DictionaryWeathering_Description, 
            T.FullDescription AS DictionaryWeathering_FullDescription, 
            T.Thumbnail AS DictionaryWeathering_Thumbnail, 
            T.OriginalFileDataID AS DictionaryWeathering_OriginalFileDataID, 
            T.Version AS DictionaryWeathering_Version, 
            T.VersionAntecedentID AS DictionaryWeathering_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryWeathering_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryWeathering_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryWeathering_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryWeathering_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryWeathering_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryWeathering_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryWeathering_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWeathering AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryWorkTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView523()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryWorkTypes
        [NKD.Module.BusinessObjects.DictionaryWorkType](T1.DictionaryWorkType_WorkTypeID, T1.DictionaryWorkType_ProfessionID, T1.DictionaryWorkType_WorkTypeClassID, T1.DictionaryWorkType_WorkTypeName, T1.DictionaryWorkType_WorkTypeDescription, T1.DictionaryWorkType_FullDescription, T1.DictionaryWorkType_Thumbnail, T1.DictionaryWorkType_OriginalFileDataID, T1.DictionaryWorkType_Version, T1.DictionaryWorkType_VersionAntecedentID, T1.DictionaryWorkType_VersionCertainty, T1.DictionaryWorkType_VersionWorkflowInstanceID, T1.DictionaryWorkType_VersionUpdatedBy, T1.DictionaryWorkType_VersionDeletedBy, T1.DictionaryWorkType_VersionOwnerContactID, T1.DictionaryWorkType_VersionOwnerCompanyID, T1.DictionaryWorkType_VersionUpdated)
    FROM (
        SELECT 
            T.WorkTypeID AS DictionaryWorkType_WorkTypeID, 
            T.ProfessionID AS DictionaryWorkType_ProfessionID, 
            T.WorkTypeClassID AS DictionaryWorkType_WorkTypeClassID, 
            T.WorkTypeName AS DictionaryWorkType_WorkTypeName, 
            T.WorkTypeDescription AS DictionaryWorkType_WorkTypeDescription, 
            T.FullDescription AS DictionaryWorkType_FullDescription, 
            T.Thumbnail AS DictionaryWorkType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryWorkType_OriginalFileDataID, 
            T.Version AS DictionaryWorkType_Version, 
            T.VersionAntecedentID AS DictionaryWorkType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryWorkType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryWorkType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryWorkType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryWorkType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryWorkType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryWorkType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryWorkType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryWorkTypeClasses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView524()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryWorkTypeClasses
        [NKD.Module.BusinessObjects.DictionaryWorkTypeClass](T1.DictionaryWorkTypeClass_WorkTypeClassID, T1.DictionaryWorkTypeClass_Description, T1.DictionaryWorkTypeClass_FullDescription, T1.DictionaryWorkTypeClass_Thumbnail, T1.DictionaryWorkTypeClass_OriginalFileDataID, T1.DictionaryWorkTypeClass_Version, T1.DictionaryWorkTypeClass_VersionAntecedentID, T1.DictionaryWorkTypeClass_VersionCertainty, T1.DictionaryWorkTypeClass_VersionWorkflowInstanceID, T1.DictionaryWorkTypeClass_VersionUpdatedBy, T1.DictionaryWorkTypeClass_VersionDeletedBy, T1.DictionaryWorkTypeClass_VersionOwnerContactID, T1.DictionaryWorkTypeClass_VersionOwnerCompanyID, T1.DictionaryWorkTypeClass_VersionUpdated, T1.DictionaryWorkTypeClass_WorkTypeClassName)
    FROM (
        SELECT 
            T.WorkTypeClassID AS DictionaryWorkTypeClass_WorkTypeClassID, 
            T.Description AS DictionaryWorkTypeClass_Description, 
            T.FullDescription AS DictionaryWorkTypeClass_FullDescription, 
            T.Thumbnail AS DictionaryWorkTypeClass_Thumbnail, 
            T.OriginalFileDataID AS DictionaryWorkTypeClass_OriginalFileDataID, 
            T.Version AS DictionaryWorkTypeClass_Version, 
            T.VersionAntecedentID AS DictionaryWorkTypeClass_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryWorkTypeClass_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryWorkTypeClass_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryWorkTypeClass_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryWorkTypeClass_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryWorkTypeClass_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryWorkTypeClass_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryWorkTypeClass_VersionUpdated, 
            T.WorkTypeClassName AS DictionaryWorkTypeClass_WorkTypeClassName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeClass AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryWorkTypeRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView525()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryWorkTypeRelations
        [NKD.Module.BusinessObjects.DictionaryWorkTypeRelation](T1.DictionaryWorkTypeRelation_WorkTypeRelationID, T1.DictionaryWorkTypeRelation_WorkTypeID, T1.DictionaryWorkTypeRelation_ParentWorkTypeID, T1.DictionaryWorkTypeRelation_Version, T1.DictionaryWorkTypeRelation_VersionAntecedentID, T1.DictionaryWorkTypeRelation_VersionCertainty, T1.DictionaryWorkTypeRelation_VersionWorkflowInstanceID, T1.DictionaryWorkTypeRelation_VersionUpdatedBy, T1.DictionaryWorkTypeRelation_VersionDeletedBy, T1.DictionaryWorkTypeRelation_VersionOwnerContactID, T1.DictionaryWorkTypeRelation_VersionOwnerCompanyID, T1.DictionaryWorkTypeRelation_VersionUpdated)
    FROM (
        SELECT 
            T.WorkTypeRelationID AS DictionaryWorkTypeRelation_WorkTypeRelationID, 
            T.WorkTypeID AS DictionaryWorkTypeRelation_WorkTypeID, 
            T.ParentWorkTypeID AS DictionaryWorkTypeRelation_ParentWorkTypeID, 
            T.Version AS DictionaryWorkTypeRelation_Version, 
            T.VersionAntecedentID AS DictionaryWorkTypeRelation_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryWorkTypeRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryWorkTypeRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryWorkTypeRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryWorkTypeRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryWorkTypeRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryWorkTypeRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryWorkTypeRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Drillings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView526()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Drillings
        [NKD.Module.BusinessObjects.Drilling](T1.Drilling_DrillingID, T1.Drilling_HeaderID, T1.Drilling_RunNumber, T1.Drilling_DrillingDate, T1.Drilling_DrillingCompanyID, T1.Drilling_DrillRigNumber, T1.Drilling_DrillRigTypeID, T1.Drilling_DrillerID, T1.Drilling_DrillBitTypeID, T1.Drilling_DrillFluidID, T1.Drilling_DrillSizeID, T1.Drilling_CoreSize, T1.Drilling_HoleSize, T1.Drilling_Reamed, T1.Drilling_Comment, T1.Drilling_Version, T1.Drilling_VersionAntecedentID, T1.Drilling_VersionCertainty, T1.Drilling_VersionWorkflowInstanceID, T1.Drilling_VersionUpdatedBy, T1.Drilling_VersionDeletedBy, T1.Drilling_VersionOwnerContactID, T1.Drilling_VersionOwnerCompanyID, T1.Drilling_VersionUpdated, T1.Drilling_GeologistFromDepth, T1.Drilling_GeologistToDepth, T1.Drilling_GeologistRecoveredLength, T1.Drilling_DrillerFromDepth, T1.Drilling_DrillerToDepth, T1.Drilling_DrillerRecoveredLength, T1.Drilling_RockQualityDesignationLength)
    FROM (
        SELECT 
            T.DrillingID AS Drilling_DrillingID, 
            T.HeaderID AS Drilling_HeaderID, 
            T.RunNumber AS Drilling_RunNumber, 
            T.DrillingDate AS Drilling_DrillingDate, 
            T.DrillingCompanyID AS Drilling_DrillingCompanyID, 
            T.DrillRigNumber AS Drilling_DrillRigNumber, 
            T.DrillRigTypeID AS Drilling_DrillRigTypeID, 
            T.DrillerID AS Drilling_DrillerID, 
            T.DrillBitTypeID AS Drilling_DrillBitTypeID, 
            T.DrillFluidID AS Drilling_DrillFluidID, 
            T.DrillSizeID AS Drilling_DrillSizeID, 
            T.CoreSize AS Drilling_CoreSize, 
            T.HoleSize AS Drilling_HoleSize, 
            T.Reamed AS Drilling_Reamed, 
            T.Comment AS Drilling_Comment, 
            T.Version AS Drilling_Version, 
            T.VersionAntecedentID AS Drilling_VersionAntecedentID, 
            T.VersionCertainty AS Drilling_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Drilling_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Drilling_VersionUpdatedBy, 
            T.VersionDeletedBy AS Drilling_VersionDeletedBy, 
            T.VersionOwnerContactID AS Drilling_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Drilling_VersionOwnerCompanyID, 
            T.VersionUpdated AS Drilling_VersionUpdated, 
            T.GeologistFromDepth AS Drilling_GeologistFromDepth, 
            T.GeologistToDepth AS Drilling_GeologistToDepth, 
            T.GeologistRecoveredLength AS Drilling_GeologistRecoveredLength, 
            T.DrillerFromDepth AS Drilling_DrillerFromDepth, 
            T.DrillerToDepth AS Drilling_DrillerToDepth, 
            T.DrillerRecoveredLength AS Drilling_DrillerRecoveredLength, 
            T.RockQualityDesignationLength AS Drilling_RockQualityDesignationLength, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Drilling AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Experiences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView527()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Experiences
        [NKD.Module.BusinessObjects.Experience](T1.Experience_ExperienceID, T1.Experience_ExperienceName, T1.Experience_ExperienceGroupID, T1.Experience_CompanyID, T1.Experience_ProjectID, T1.Experience_ContactID, T1.Experience_LocationID, T1.Experience_ProvinceID, T1.Experience_WorkTypeID, T1.Experience_ProfessionID, T1.Experience_PositionID, T1.Experience_ClientAlias, T1.Experience_Division, T1.Experience_OfficeLocationAlias, T1.Experience_ExternalProjectCode, T1.Experience_EstimatedDurationDays, T1.Experience_UserExperienceLevel, T1.Experience_AssignedExperienceLevel, T1.Experience_NormalizedExperienceLevel, T1.Experience_DateStart, T1.Experience_DateFinished, T1.Experience_Expiry, T1.Experience_HourlyRate, T1.Experience_DailyRate, T1.Experience_AnnualRate, T1.Experience_BlendedHourlyRate, T1.Experience_BlendedHourlyCost, T1.Experience_Comment, T1.Experience_IsApproved, T1.Experience_Version, T1.Experience_VersionAntecedentID, T1.Experience_VersionCertainty, T1.Experience_VersionWorkflowInstanceID, T1.Experience_VersionUpdatedBy, T1.Experience_VersionDeletedBy, T1.Experience_VersionOwnerContactID, T1.Experience_VersionOwnerCompanyID, T1.Experience_VersionUpdated, T1.Experience_LinestringID)
    FROM (
        SELECT 
            T.ExperienceID AS Experience_ExperienceID, 
            T.ExperienceName AS Experience_ExperienceName, 
            T.ExperienceGroupID AS Experience_ExperienceGroupID, 
            T.CompanyID AS Experience_CompanyID, 
            T.ProjectID AS Experience_ProjectID, 
            T.ContactID AS Experience_ContactID, 
            T.LocationID AS Experience_LocationID, 
            T.ProvinceID AS Experience_ProvinceID, 
            T.WorkTypeID AS Experience_WorkTypeID, 
            T.ProfessionID AS Experience_ProfessionID, 
            T.PositionID AS Experience_PositionID, 
            T.ClientAlias AS Experience_ClientAlias, 
            T.Division AS Experience_Division, 
            T.OfficeLocationAlias AS Experience_OfficeLocationAlias, 
            T.ExternalProjectCode AS Experience_ExternalProjectCode, 
            T.EstimatedDurationDays AS Experience_EstimatedDurationDays, 
            T.UserExperienceLevel AS Experience_UserExperienceLevel, 
            T.AssignedExperienceLevel AS Experience_AssignedExperienceLevel, 
            T.NormalizedExperienceLevel AS Experience_NormalizedExperienceLevel, 
            T.DateStart AS Experience_DateStart, 
            T.DateFinished AS Experience_DateFinished, 
            T.Expiry AS Experience_Expiry, 
            T.HourlyRate AS Experience_HourlyRate, 
            T.DailyRate AS Experience_DailyRate, 
            T.AnnualRate AS Experience_AnnualRate, 
            T.BlendedHourlyRate AS Experience_BlendedHourlyRate, 
            T.BlendedHourlyCost AS Experience_BlendedHourlyCost, 
            T.Comment AS Experience_Comment, 
            T.IsApproved AS Experience_IsApproved, 
            T.Version AS Experience_Version, 
            T.VersionAntecedentID AS Experience_VersionAntecedentID, 
            T.VersionCertainty AS Experience_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Experience_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Experience_VersionUpdatedBy, 
            T.VersionDeletedBy AS Experience_VersionDeletedBy, 
            T.VersionOwnerContactID AS Experience_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Experience_VersionOwnerCompanyID, 
            T.VersionUpdated AS Experience_VersionUpdated, 
            T.LinestringID AS Experience_LinestringID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Experience AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.FileDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView528()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FileDatas
        [NKD.Module.BusinessObjects.FileData](T1.FileData_FileDataID, T1.FileData_ParentFileID, T1.FileData_TableType, T1.FileData_ReferenceID, T1.FileData_WorkerID, T1.FileData_FileTypeID, T1.FileData_FileName, T1.FileData_DocumentType, T1.FileData_MimeType, T1.FileData_Author, T1.FileData_FileBytes, T1.FileData_FileContent, T1.FileData_FileChecksum, T1.FileData_Comment, T1.FileData_Version, T1.FileData_VersionAntecedentID, T1.FileData_VersionCertainty, T1.FileData_VersionWorkflowInstanceID, T1.FileData_VersionUpdatedBy, T1.FileData_VersionDeletedBy, T1.FileData_VersionOwnerContactID, T1.FileData_VersionOwnerCompanyID, T1.FileData_VersionUpdated, T1.FileData_FileLength)
    FROM (
        SELECT 
            T.FileDataID AS FileData_FileDataID, 
            T.ParentFileID AS FileData_ParentFileID, 
            T.TableType AS FileData_TableType, 
            T.ReferenceID AS FileData_ReferenceID, 
            T.WorkerID AS FileData_WorkerID, 
            T.FileTypeID AS FileData_FileTypeID, 
            T.FileName AS FileData_FileName, 
            T.DocumentType AS FileData_DocumentType, 
            T.MimeType AS FileData_MimeType, 
            T.Author AS FileData_Author, 
            T.FileBytes AS FileData_FileBytes, 
            T.FileContent AS FileData_FileContent, 
            T.FileChecksum AS FileData_FileChecksum, 
            T.Comment AS FileData_Comment, 
            T.Version AS FileData_Version, 
            T.VersionAntecedentID AS FileData_VersionAntecedentID, 
            T.VersionCertainty AS FileData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS FileData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS FileData_VersionUpdatedBy, 
            T.VersionDeletedBy AS FileData_VersionDeletedBy, 
            T.VersionOwnerContactID AS FileData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS FileData_VersionOwnerCompanyID, 
            T.VersionUpdated AS FileData_VersionUpdated, 
            T.FileLength AS FileData_FileLength, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_FileData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Geologies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView529()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Geologies
        [NKD.Module.BusinessObjects.Geology](T1.Geology_GeologyID, T1.Geology_HeaderID, T1.Geology_GeologyContactID, T1.Geology_FromDepth, T1.Geology_ToDepth, T1.Geology_Comment, T1.Geology_Version, T1.Geology_VersionAntecedentID, T1.Geology_VersionCertainty, T1.Geology_VersionWorkflowInstanceID, T1.Geology_VersionUpdatedBy, T1.Geology_VersionDeletedBy, T1.Geology_VersionOwnerContactID, T1.Geology_VersionOwnerCompanyID, T1.Geology_VersionUpdated)
    FROM (
        SELECT 
            T.GeologyID AS Geology_GeologyID, 
            T.HeaderID AS Geology_HeaderID, 
            T.GeologyContactID AS Geology_GeologyContactID, 
            T.FromDepth AS Geology_FromDepth, 
            T.ToDepth AS Geology_ToDepth, 
            T.Comment AS Geology_Comment, 
            T.Version AS Geology_Version, 
            T.VersionAntecedentID AS Geology_VersionAntecedentID, 
            T.VersionCertainty AS Geology_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Geology_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Geology_VersionUpdatedBy, 
            T.VersionDeletedBy AS Geology_VersionDeletedBy, 
            T.VersionOwnerContactID AS Geology_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Geology_VersionOwnerCompanyID, 
            T.VersionUpdated AS Geology_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Geology AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Geophysics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView530()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Geophysics
        [NKD.Module.BusinessObjects.Geophysics](T1.Geophysics_GeophysicsID, T1.Geophysics_FileName, T1.Geophysics_OriginalFileDataID, T1.Geophysics_HeaderID, T1.Geophysics_DimensionUnitID, T1.Geophysics_LasVersion, T1.Geophysics_LasFormat, T1.Geophysics_LasWrap, T1.Geophysics_LasDelimiter, T1.Geophysics_LasNullValue, T1.Geophysics_Version, T1.Geophysics_VersionAntecedentID, T1.Geophysics_VersionCertainty, T1.Geophysics_VersionWorkflowInstanceID, T1.Geophysics_VersionUpdatedBy, T1.Geophysics_VersionDeletedBy, T1.Geophysics_VersionOwnerContactID, T1.Geophysics_VersionOwnerCompanyID, T1.Geophysics_VersionUpdated)
    FROM (
        SELECT 
            T.GeophysicsID AS Geophysics_GeophysicsID, 
            T.FileName AS Geophysics_FileName, 
            T.OriginalFileDataID AS Geophysics_OriginalFileDataID, 
            T.HeaderID AS Geophysics_HeaderID, 
            T.DimensionUnitID AS Geophysics_DimensionUnitID, 
            T.LasVersion AS Geophysics_LasVersion, 
            T.LasFormat AS Geophysics_LasFormat, 
            T.LasWrap AS Geophysics_LasWrap, 
            T.LasDelimiter AS Geophysics_LasDelimiter, 
            T.LasNullValue AS Geophysics_LasNullValue, 
            T.Version AS Geophysics_Version, 
            T.VersionAntecedentID AS Geophysics_VersionAntecedentID, 
            T.VersionCertainty AS Geophysics_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Geophysics_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Geophysics_VersionUpdatedBy, 
            T.VersionDeletedBy AS Geophysics_VersionDeletedBy, 
            T.VersionOwnerContactID AS Geophysics_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Geophysics_VersionOwnerCompanyID, 
            T.VersionUpdated AS Geophysics_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Geophysics AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GeophysicsDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView531()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GeophysicsDatas
        [NKD.Module.BusinessObjects.GeophysicsData](T1.GeophysicsData_GeophysicsDataID, T1.GeophysicsData_GeophysicsMetadataID, T1.GeophysicsData_Dimension, T1.GeophysicsData_MeasurementValue, T1.GeophysicsData_MeasurementText, T1.GeophysicsData_Version, T1.GeophysicsData_VersionAntecedentID, T1.GeophysicsData_VersionCertainty, T1.GeophysicsData_VersionWorkflowInstanceID, T1.GeophysicsData_VersionUpdatedBy, T1.GeophysicsData_VersionDeletedBy, T1.GeophysicsData_VersionOwnerContactID, T1.GeophysicsData_VersionOwnerCompanyID, T1.GeophysicsData_VersionUpdated)
    FROM (
        SELECT 
            T.GeophysicsDataID AS GeophysicsData_GeophysicsDataID, 
            T.GeophysicsMetadataID AS GeophysicsData_GeophysicsMetadataID, 
            T.Dimension AS GeophysicsData_Dimension, 
            T.MeasurementValue AS GeophysicsData_MeasurementValue, 
            T.MeasurementText AS GeophysicsData_MeasurementText, 
            T.Version AS GeophysicsData_Version, 
            T.VersionAntecedentID AS GeophysicsData_VersionAntecedentID, 
            T.VersionCertainty AS GeophysicsData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GeophysicsData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GeophysicsData_VersionUpdatedBy, 
            T.VersionDeletedBy AS GeophysicsData_VersionDeletedBy, 
            T.VersionOwnerContactID AS GeophysicsData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GeophysicsData_VersionOwnerCompanyID, 
            T.VersionUpdated AS GeophysicsData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_GeophysicsData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GeophysicsMetadatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView532()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GeophysicsMetadatas
        [NKD.Module.BusinessObjects.GeophysicsMetadata](T1.GeophysicsMetadata_GeophysicsMetadataID, T1.GeophysicsMetadata_GeophysicsID, T1.GeophysicsMetadata_ParameterID, T1.GeophysicsMetadata_Mnemonic, T1.GeophysicsMetadata_Unit, T1.GeophysicsMetadata_Data, T1.GeophysicsMetadata_Code, T1.GeophysicsMetadata_Description, T1.GeophysicsMetadata_Format, T1.GeophysicsMetadata_Version, T1.GeophysicsMetadata_VersionAntecedentID, T1.GeophysicsMetadata_VersionCertainty, T1.GeophysicsMetadata_VersionWorkflowInstanceID, T1.GeophysicsMetadata_VersionUpdatedBy, T1.GeophysicsMetadata_VersionDeletedBy, T1.GeophysicsMetadata_VersionOwnerContactID, T1.GeophysicsMetadata_VersionOwnerCompanyID, T1.GeophysicsMetadata_VersionUpdated)
    FROM (
        SELECT 
            T.GeophysicsMetadataID AS GeophysicsMetadata_GeophysicsMetadataID, 
            T.GeophysicsID AS GeophysicsMetadata_GeophysicsID, 
            T.ParameterID AS GeophysicsMetadata_ParameterID, 
            T.Mnemonic AS GeophysicsMetadata_Mnemonic, 
            T.Unit AS GeophysicsMetadata_Unit, 
            T.Data AS GeophysicsMetadata_Data, 
            T.Code AS GeophysicsMetadata_Code, 
            T.Description AS GeophysicsMetadata_Description, 
            T.Format AS GeophysicsMetadata_Format, 
            T.Version AS GeophysicsMetadata_Version, 
            T.VersionAntecedentID AS GeophysicsMetadata_VersionAntecedentID, 
            T.VersionCertainty AS GeophysicsMetadata_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GeophysicsMetadata_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GeophysicsMetadata_VersionUpdatedBy, 
            T.VersionDeletedBy AS GeophysicsMetadata_VersionDeletedBy, 
            T.VersionOwnerContactID AS GeophysicsMetadata_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GeophysicsMetadata_VersionOwnerCompanyID, 
            T.VersionUpdated AS GeophysicsMetadata_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_GeophysicsMetadata AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Headers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView533()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Headers
        [NKD.Module.BusinessObjects.Header](T1.Header_HeaderID, T1.Header_ProjectID, T1.Header_HoleName, T1.Header_Site, T1.Header_HoleTypeID, T1.Header_DataStatusID, T1.Header_PrimaryHolePurposeID, T1.Header_SurveyAccuracyID, T1.Header_GeodeticDatumID, T1.Header_UtmZoneNumber, T1.Header_UtmZoneHemisphere, T1.Header_HeightDatumID, T1.Header_EastingUtm, T1.Header_NorthingUtm, T1.Header_Elevation, T1.Header_Inclination, T1.Header_Azimuth, T1.Header_LocationID, T1.Header_StartDate, T1.Header_CompleteDate, T1.Header_TotalDepth, T1.Header_HoleRedrilled, T1.Header_GeologyCompanyID, T1.Header_HasHadGeotechLogs, T1.Header_HasHadCorePhotos, T1.Header_DefaultGeophysicalLoggingCompanyID, T1.Header_DefaultGeophysicalLoggerID, T1.Header_StandingWaterLevel, T1.Header_StandingWaterLevelDate, T1.Header_DateRehabilitated, T1.Header_HoleStatusID, T1.Header_Comment, T1.Header_Version, T1.Header_VersionAntecedentID, T1.Header_VersionCertainty, T1.Header_VersionWorkflowInstanceID, T1.Header_VersionUpdatedBy, T1.Header_VersionDeletedBy, T1.Header_VersionOwnerContactID, T1.Header_VersionOwnerCompanyID, T1.Header_VersionUpdated)
    FROM (
        SELECT 
            T.HeaderID AS Header_HeaderID, 
            T.ProjectID AS Header_ProjectID, 
            T.HoleName AS Header_HoleName, 
            T.Site AS Header_Site, 
            T.HoleTypeID AS Header_HoleTypeID, 
            T.DataStatusID AS Header_DataStatusID, 
            T.PrimaryHolePurposeID AS Header_PrimaryHolePurposeID, 
            T.SurveyAccuracyID AS Header_SurveyAccuracyID, 
            T.GeodeticDatumID AS Header_GeodeticDatumID, 
            T.UtmZoneNumber AS Header_UtmZoneNumber, 
            T.UtmZoneHemisphere AS Header_UtmZoneHemisphere, 
            T.HeightDatumID AS Header_HeightDatumID, 
            T.EastingUtm AS Header_EastingUtm, 
            T.NorthingUtm AS Header_NorthingUtm, 
            T.Elevation AS Header_Elevation, 
            T.Inclination AS Header_Inclination, 
            T.Azimuth AS Header_Azimuth, 
            T.LocationID AS Header_LocationID, 
            T.StartDate AS Header_StartDate, 
            T.CompleteDate AS Header_CompleteDate, 
            T.TotalDepth AS Header_TotalDepth, 
            T.HoleRedrilled AS Header_HoleRedrilled, 
            T.GeologyCompanyID AS Header_GeologyCompanyID, 
            T.HasHadGeotechLogs AS Header_HasHadGeotechLogs, 
            T.HasHadCorePhotos AS Header_HasHadCorePhotos, 
            T.DefaultGeophysicalLoggingCompanyID AS Header_DefaultGeophysicalLoggingCompanyID, 
            T.DefaultGeophysicalLoggerID AS Header_DefaultGeophysicalLoggerID, 
            T.StandingWaterLevel AS Header_StandingWaterLevel, 
            T.StandingWaterLevelDate AS Header_StandingWaterLevelDate, 
            T.DateRehabilitated AS Header_DateRehabilitated, 
            T.HoleStatusID AS Header_HoleStatusID, 
            T.Comment AS Header_Comment, 
            T.Version AS Header_Version, 
            T.VersionAntecedentID AS Header_VersionAntecedentID, 
            T.VersionCertainty AS Header_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Header_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Header_VersionUpdatedBy, 
            T.VersionDeletedBy AS Header_VersionDeletedBy, 
            T.VersionOwnerContactID AS Header_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Header_VersionOwnerCompanyID, 
            T.VersionUpdated AS Header_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Header AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.HeaderGeophysicalLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView534()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing HeaderGeophysicalLogs
        [NKD.Module.BusinessObjects.HeaderGeophysicalLog](T1.HeaderGeophysicalLog_HeaderGeophysicalLogID, T1.HeaderGeophysicalLog_HeaderID, T1.HeaderGeophysicalLog_GeophysicalLogTypeID, T1.HeaderGeophysicalLog_Sequence, T1.HeaderGeophysicalLog_GeophysicalLoggingCompanyID, T1.HeaderGeophysicalLog_GeophysicalLoggerID, T1.HeaderGeophysicalLog_Version, T1.HeaderGeophysicalLog_VersionAntecedentID, T1.HeaderGeophysicalLog_VersionCertainty, T1.HeaderGeophysicalLog_VersionWorkflowInstanceID, T1.HeaderGeophysicalLog_VersionUpdatedBy, T1.HeaderGeophysicalLog_VersionDeletedBy, T1.HeaderGeophysicalLog_VersionOwnerContactID, T1.HeaderGeophysicalLog_VersionOwnerCompanyID, T1.HeaderGeophysicalLog_VersionUpdated)
    FROM (
        SELECT 
            T.HeaderGeophysicalLogID AS HeaderGeophysicalLog_HeaderGeophysicalLogID, 
            T.HeaderID AS HeaderGeophysicalLog_HeaderID, 
            T.GeophysicalLogTypeID AS HeaderGeophysicalLog_GeophysicalLogTypeID, 
            T.Sequence AS HeaderGeophysicalLog_Sequence, 
            T.GeophysicalLoggingCompanyID AS HeaderGeophysicalLog_GeophysicalLoggingCompanyID, 
            T.GeophysicalLoggerID AS HeaderGeophysicalLog_GeophysicalLoggerID, 
            T.Version AS HeaderGeophysicalLog_Version, 
            T.VersionAntecedentID AS HeaderGeophysicalLog_VersionAntecedentID, 
            T.VersionCertainty AS HeaderGeophysicalLog_VersionCertainty, 
            T.VersionWorkflowInstanceID AS HeaderGeophysicalLog_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS HeaderGeophysicalLog_VersionUpdatedBy, 
            T.VersionDeletedBy AS HeaderGeophysicalLog_VersionDeletedBy, 
            T.VersionOwnerContactID AS HeaderGeophysicalLog_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS HeaderGeophysicalLog_VersionOwnerCompanyID, 
            T.VersionUpdated AS HeaderGeophysicalLog_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_HeaderGeophysicalLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.HeaderRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView535()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing HeaderRelations
        [NKD.Module.BusinessObjects.HeaderRelation](T1.HeaderRelation_HeaderRelationID, T1.HeaderRelation_OriginalHeaderID, T1.HeaderRelation_RelatedHeaderID, T1.HeaderRelation_RelationTypeID, T1.HeaderRelation_Related, T1.HeaderRelation_Version, T1.HeaderRelation_VersionAntecedentID, T1.HeaderRelation_VersionCertainty, T1.HeaderRelation_VersionWorkflowInstanceID, T1.HeaderRelation_VersionUpdatedBy, T1.HeaderRelation_VersionDeletedBy, T1.HeaderRelation_VersionOwnerContactID, T1.HeaderRelation_VersionOwnerCompanyID, T1.HeaderRelation_VersionUpdated)
    FROM (
        SELECT 
            T.HeaderRelationID AS HeaderRelation_HeaderRelationID, 
            T.OriginalHeaderID AS HeaderRelation_OriginalHeaderID, 
            T.RelatedHeaderID AS HeaderRelation_RelatedHeaderID, 
            T.RelationTypeID AS HeaderRelation_RelationTypeID, 
            T.Related AS HeaderRelation_Related, 
            T.Version AS HeaderRelation_Version, 
            T.VersionAntecedentID AS HeaderRelation_VersionAntecedentID, 
            T.VersionCertainty AS HeaderRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS HeaderRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS HeaderRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS HeaderRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS HeaderRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS HeaderRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS HeaderRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_HeaderRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Interpretations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView536()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Interpretations
        [NKD.Module.BusinessObjects.Interpretation](T1.Interpretation_InterpretationID, T1.Interpretation_FromDepth, T1.Interpretation_ToDepth, T1.Interpretation_TopX, T1.Interpretation_TopY, T1.Interpretation_TopZ, T1.Interpretation_CentroidX, T1.Interpretation_CentroidY, T1.Interpretation_CentroidZ, T1.Interpretation_BottomX, T1.Interpretation_BottomY, T1.Interpretation_BottomZ, T1.Interpretation_DesurveyID, T1.Interpretation_HeaderID, T1.Interpretation_AssayGroupTestSampleID, T1.Interpretation_CasingID, T1.Interpretation_CementingID, T1.Interpretation_DefectID, T1.Interpretation_DrillingID, T1.Interpretation_GeologyID, T1.Interpretation_GeophysicsDataID, T1.Interpretation_LithologyID, T1.Interpretation_SeamID, T1.Interpretation_PlyID, T1.Interpretation_MineralogyID, T1.Interpretation_PointLoadID, T1.Interpretation_RecoveryID, T1.Interpretation_BlockModelBlockID, T1.Interpretation_Version, T1.Interpretation_VersionAntecedentID, T1.Interpretation_VersionCertainty, T1.Interpretation_VersionWorkflowInstanceID, T1.Interpretation_VersionUpdatedBy, T1.Interpretation_VersionDeletedBy, T1.Interpretation_VersionOwnerContactID, T1.Interpretation_VersionOwnerCompanyID, T1.Interpretation_VersionUpdated)
    FROM (
        SELECT 
            T.InterpretationID AS Interpretation_InterpretationID, 
            T.FromDepth AS Interpretation_FromDepth, 
            T.ToDepth AS Interpretation_ToDepth, 
            T.TopX AS Interpretation_TopX, 
            T.TopY AS Interpretation_TopY, 
            T.TopZ AS Interpretation_TopZ, 
            T.CentroidX AS Interpretation_CentroidX, 
            T.CentroidY AS Interpretation_CentroidY, 
            T.CentroidZ AS Interpretation_CentroidZ, 
            T.BottomX AS Interpretation_BottomX, 
            T.BottomY AS Interpretation_BottomY, 
            T.BottomZ AS Interpretation_BottomZ, 
            T.DesurveyID AS Interpretation_DesurveyID, 
            T.HeaderID AS Interpretation_HeaderID, 
            T.AssayGroupTestSampleID AS Interpretation_AssayGroupTestSampleID, 
            T.CasingID AS Interpretation_CasingID, 
            T.CementingID AS Interpretation_CementingID, 
            T.DefectID AS Interpretation_DefectID, 
            T.DrillingID AS Interpretation_DrillingID, 
            T.GeologyID AS Interpretation_GeologyID, 
            T.GeophysicsDataID AS Interpretation_GeophysicsDataID, 
            T.LithologyID AS Interpretation_LithologyID, 
            T.SeamID AS Interpretation_SeamID, 
            T.PlyID AS Interpretation_PlyID, 
            T.MineralogyID AS Interpretation_MineralogyID, 
            T.PointLoadID AS Interpretation_PointLoadID, 
            T.RecoveryID AS Interpretation_RecoveryID, 
            T.BlockModelBlockID AS Interpretation_BlockModelBlockID, 
            T.Version AS Interpretation_Version, 
            T.VersionAntecedentID AS Interpretation_VersionAntecedentID, 
            T.VersionCertainty AS Interpretation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Interpretation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Interpretation_VersionUpdatedBy, 
            T.VersionDeletedBy AS Interpretation_VersionDeletedBy, 
            T.VersionOwnerContactID AS Interpretation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Interpretation_VersionOwnerCompanyID, 
            T.VersionUpdated AS Interpretation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Interpretation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.InterpretationDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView537()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InterpretationDatas
        [NKD.Module.BusinessObjects.InterpretationData](T1.InterpretationData_InterpretationDataID, T1.InterpretationData_InterpretationID, T1.InterpretationData_ParameterID, T1.InterpretationData_InterpretationDataText, T1.InterpretationData_InterpretationDataValue, T1.InterpretationData_Version, T1.InterpretationData_VersionAntecedentID, T1.InterpretationData_VersionCertainty, T1.InterpretationData_VersionWorkflowInstanceID, T1.InterpretationData_VersionUpdatedBy, T1.InterpretationData_VersionDeletedBy, T1.InterpretationData_VersionOwnerContactID, T1.InterpretationData_VersionOwnerCompanyID, T1.InterpretationData_VersionUpdated)
    FROM (
        SELECT 
            T.InterpretationDataID AS InterpretationData_InterpretationDataID, 
            T.InterpretationID AS InterpretationData_InterpretationID, 
            T.ParameterID AS InterpretationData_ParameterID, 
            T.InterpretationDataText AS InterpretationData_InterpretationDataText, 
            T.InterpretationDataValue AS InterpretationData_InterpretationDataValue, 
            T.Version AS InterpretationData_Version, 
            T.VersionAntecedentID AS InterpretationData_VersionAntecedentID, 
            T.VersionCertainty AS InterpretationData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS InterpretationData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS InterpretationData_VersionUpdatedBy, 
            T.VersionDeletedBy AS InterpretationData_VersionDeletedBy, 
            T.VersionOwnerContactID AS InterpretationData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS InterpretationData_VersionOwnerCompanyID, 
            T.VersionUpdated AS InterpretationData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_InterpretationData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Leases.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView538()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Leases
        [NKD.Module.BusinessObjects.Lease](T1.Lease_LeaseID, T1.Lease_TenementID, T1.Lease_LeaseNumber, T1.Lease_OwnerCompanyID, T1.Lease_ApprovedByContactID, T1.Lease_ValidFrom, T1.Lease_Expiry, T1.Lease_Comment, T1.Lease_Version, T1.Lease_VersionAntecedentID, T1.Lease_VersionCertainty, T1.Lease_VersionWorkflowInstanceID, T1.Lease_VersionUpdatedBy, T1.Lease_VersionDeletedBy, T1.Lease_VersionOwnerContactID, T1.Lease_VersionOwnerCompanyID, T1.Lease_VersionUpdated)
    FROM (
        SELECT 
            T.LeaseID AS Lease_LeaseID, 
            T.TenementID AS Lease_TenementID, 
            T.LeaseNumber AS Lease_LeaseNumber, 
            T.OwnerCompanyID AS Lease_OwnerCompanyID, 
            T.ApprovedByContactID AS Lease_ApprovedByContactID, 
            T.ValidFrom AS Lease_ValidFrom, 
            T.Expiry AS Lease_Expiry, 
            T.Comment AS Lease_Comment, 
            T.Version AS Lease_Version, 
            T.VersionAntecedentID AS Lease_VersionAntecedentID, 
            T.VersionCertainty AS Lease_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Lease_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Lease_VersionUpdatedBy, 
            T.VersionDeletedBy AS Lease_VersionDeletedBy, 
            T.VersionOwnerContactID AS Lease_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Lease_VersionOwnerCompanyID, 
            T.VersionUpdated AS Lease_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Lease AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LeaseApplications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView539()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LeaseApplications
        [NKD.Module.BusinessObjects.LeaseApplication](T1.LeaseApplication_LeaseApplicationID, T1.LeaseApplication_TenementID, T1.LeaseApplication_LeaseApplicationTypeID, T1.LeaseApplication_LeaseApplicationNumber, T1.LeaseApplication_OwnerCompanyID, T1.LeaseApplication_OfficeOfApproval, T1.LeaseApplication_Approved, T1.LeaseApplication_ApprovedByContactID, T1.LeaseApplication_ValidFrom, T1.LeaseApplication_Expiry, T1.LeaseApplication_Comment, T1.LeaseApplication_Version, T1.LeaseApplication_VersionAntecedentID, T1.LeaseApplication_VersionCertainty, T1.LeaseApplication_VersionWorkflowInstanceID, T1.LeaseApplication_VersionUpdatedBy, T1.LeaseApplication_VersionDeletedBy, T1.LeaseApplication_VersionOwnerContactID, T1.LeaseApplication_VersionOwnerCompanyID, T1.LeaseApplication_VersionUpdated)
    FROM (
        SELECT 
            T.LeaseApplicationID AS LeaseApplication_LeaseApplicationID, 
            T.TenementID AS LeaseApplication_TenementID, 
            T.LeaseApplicationTypeID AS LeaseApplication_LeaseApplicationTypeID, 
            T.LeaseApplicationNumber AS LeaseApplication_LeaseApplicationNumber, 
            T.OwnerCompanyID AS LeaseApplication_OwnerCompanyID, 
            T.OfficeOfApproval AS LeaseApplication_OfficeOfApproval, 
            T.Approved AS LeaseApplication_Approved, 
            T.ApprovedByContactID AS LeaseApplication_ApprovedByContactID, 
            T.ValidFrom AS LeaseApplication_ValidFrom, 
            T.Expiry AS LeaseApplication_Expiry, 
            T.Comment AS LeaseApplication_Comment, 
            T.Version AS LeaseApplication_Version, 
            T.VersionAntecedentID AS LeaseApplication_VersionAntecedentID, 
            T.VersionCertainty AS LeaseApplication_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LeaseApplication_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LeaseApplication_VersionUpdatedBy, 
            T.VersionDeletedBy AS LeaseApplication_VersionDeletedBy, 
            T.VersionOwnerContactID AS LeaseApplication_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LeaseApplication_VersionOwnerCompanyID, 
            T.VersionUpdated AS LeaseApplication_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LeaseApplication AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Licenses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView540()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Licenses
        [NKD.Module.BusinessObjects.License](T1.License_LicenseID, T1.License_CompanyID, T1.License_ContactID, T1.License_LicenseeGUID, T1.License_LicenseeName, T1.License_LicenseeUsername, T1.License_LicenseeUniqueMachineCode1, T1.License_LicenseeUniqueMachineCode2, T1.License_LicenseeGroupID, T1.License_LicensorIP, T1.License_LicensorName, T1.License_LicenseTypeID, T1.License_LicenseType, T1.License_LicenseURL, T1.License_RootServerName, T1.License_RootServerID, T1.License_ServerName, T1.License_ServerID, T1.License_ApplicationID, T1.License_ServiceAuthenticationMethod, T1.License_ServiceAuthorisationMethod, T1.License_ValidFrom, T1.License_Expiry, T1.License_SupportExpiry, T1.License_ValidForDuration, T1.License_ValidForUnitID, T1.License_ValidForUnitTarget, T1.License_VersionMajor, T1.License_VersionMinor, T1.License_VersionBuild, T1.License_SupportedToMajor, T1.License_SupportedToMinor, T1.License_SupportedToBuild, T1.License_Nuked, T1.License_NukedReason, T1.License_TimeServerID, T1.License_TimeServerName, T1.License_TimeServerResolutionMask, T1.License_TimeServerIP, T1.License_PreAuthorizationCode, T1.License_PreAuthorizationExecuted, T1.License_Signatory1, T1.License_Signatory2, T1.License_Signatory3, T1.License_Signature1, T1.License_Signature2, T1.License_Signature3, T1.License_Received, T1.License_CheckedIn, T1.License_LicenceeCertificate, T1.License_LicensorCertificate, T1.License_ChecksumType, T1.License_Checksum, T1.License_EncryptedKey, T1.License_LicenseKeyCode, T1.License_Version, T1.License_VersionAntecedentID, T1.License_VersionCertainty, T1.License_VersionWorkflowInstanceID, T1.License_VersionUpdatedBy, T1.License_VersionDeletedBy, T1.License_VersionOwnerContactID, T1.License_VersionOwnerCompanyID, T1.License_VersionUpdated)
    FROM (
        SELECT 
            T.LicenseID AS License_LicenseID, 
            T.CompanyID AS License_CompanyID, 
            T.ContactID AS License_ContactID, 
            T.LicenseeGUID AS License_LicenseeGUID, 
            T.LicenseeName AS License_LicenseeName, 
            T.LicenseeUsername AS License_LicenseeUsername, 
            T.LicenseeUniqueMachineCode1 AS License_LicenseeUniqueMachineCode1, 
            T.LicenseeUniqueMachineCode2 AS License_LicenseeUniqueMachineCode2, 
            T.LicenseeGroupID AS License_LicenseeGroupID, 
            T.LicensorIP AS License_LicensorIP, 
            T.LicensorName AS License_LicensorName, 
            T.LicenseTypeID AS License_LicenseTypeID, 
            T.LicenseType AS License_LicenseType, 
            T.LicenseURL AS License_LicenseURL, 
            T.RootServerName AS License_RootServerName, 
            T.RootServerID AS License_RootServerID, 
            T.ServerName AS License_ServerName, 
            T.ServerID AS License_ServerID, 
            T.ApplicationID AS License_ApplicationID, 
            T.ServiceAuthenticationMethod AS License_ServiceAuthenticationMethod, 
            T.ServiceAuthorisationMethod AS License_ServiceAuthorisationMethod, 
            T.ValidFrom AS License_ValidFrom, 
            T.Expiry AS License_Expiry, 
            T.SupportExpiry AS License_SupportExpiry, 
            T.ValidForDuration AS License_ValidForDuration, 
            T.ValidForUnitID AS License_ValidForUnitID, 
            T.ValidForUnitTarget AS License_ValidForUnitTarget, 
            T.VersionMajor AS License_VersionMajor, 
            T.VersionMinor AS License_VersionMinor, 
            T.VersionBuild AS License_VersionBuild, 
            T.SupportedToMajor AS License_SupportedToMajor, 
            T.SupportedToMinor AS License_SupportedToMinor, 
            T.SupportedToBuild AS License_SupportedToBuild, 
            T.Nuked AS License_Nuked, 
            T.NukedReason AS License_NukedReason, 
            T.TimeServerID AS License_TimeServerID, 
            T.TimeServerName AS License_TimeServerName, 
            T.TimeServerResolutionMask AS License_TimeServerResolutionMask, 
            T.TimeServerIP AS License_TimeServerIP, 
            T.PreAuthorizationCode AS License_PreAuthorizationCode, 
            T.PreAuthorizationExecuted AS License_PreAuthorizationExecuted, 
            T.Signatory1 AS License_Signatory1, 
            T.Signatory2 AS License_Signatory2, 
            T.Signatory3 AS License_Signatory3, 
            T.Signature1 AS License_Signature1, 
            T.Signature2 AS License_Signature2, 
            T.Signature3 AS License_Signature3, 
            T.Received AS License_Received, 
            T.CheckedIn AS License_CheckedIn, 
            T.LicenceeCertificate AS License_LicenceeCertificate, 
            T.LicensorCertificate AS License_LicensorCertificate, 
            T.ChecksumType AS License_ChecksumType, 
            T.Checksum AS License_Checksum, 
            T.EncryptedKey AS License_EncryptedKey, 
            T.LicenseKeyCode AS License_LicenseKeyCode, 
            T.Version AS License_Version, 
            T.VersionAntecedentID AS License_VersionAntecedentID, 
            T.VersionCertainty AS License_VersionCertainty, 
            T.VersionWorkflowInstanceID AS License_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS License_VersionUpdatedBy, 
            T.VersionDeletedBy AS License_VersionDeletedBy, 
            T.VersionOwnerContactID AS License_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS License_VersionOwnerCompanyID, 
            T.VersionUpdated AS License_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_License AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LicenseAssets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView541()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LicenseAssets
        [NKD.Module.BusinessObjects.LicenseAsset](T1.LicenseAsset_LicenseAssetID, T1.LicenseAsset_LicenseID, T1.LicenseAsset_AssetID, T1.LicenseAsset_ModelID, T1.LicenseAsset_Restrictions, T1.LicenseAsset_Version, T1.LicenseAsset_VersionAntecedentID, T1.LicenseAsset_VersionCertainty, T1.LicenseAsset_VersionWorkflowInstanceID, T1.LicenseAsset_VersionUpdatedBy, T1.LicenseAsset_VersionDeletedBy, T1.LicenseAsset_VersionOwnerContactID, T1.LicenseAsset_VersionOwnerCompanyID, T1.LicenseAsset_VersionUpdated)
    FROM (
        SELECT 
            T.LicenseAssetID AS LicenseAsset_LicenseAssetID, 
            T.LicenseID AS LicenseAsset_LicenseID, 
            T.AssetID AS LicenseAsset_AssetID, 
            T.ModelID AS LicenseAsset_ModelID, 
            T.Restrictions AS LicenseAsset_Restrictions, 
            T.Version AS LicenseAsset_Version, 
            T.VersionAntecedentID AS LicenseAsset_VersionAntecedentID, 
            T.VersionCertainty AS LicenseAsset_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LicenseAsset_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LicenseAsset_VersionUpdatedBy, 
            T.VersionDeletedBy AS LicenseAsset_VersionDeletedBy, 
            T.VersionOwnerContactID AS LicenseAsset_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LicenseAsset_VersionOwnerCompanyID, 
            T.VersionUpdated AS LicenseAsset_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LicenseAsset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Lithologies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView542()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Lithologies
        [NKD.Module.BusinessObjects.Lithology](T1.Lithology_LithologyID, T1.Lithology_HeaderID, T1.Lithology_FromDepth, T1.Lithology_ToDepth, T1.Lithology_RecoveredThickness, T1.Lithology_DomainID, T1.Lithology_SeamID, T1.Lithology_PlyID, T1.Lithology_StratigraphyID, T1.Lithology_HorizonID, T1.Lithology_SampleTypeID, T1.Lithology_SampleNumber, T1.Lithology_SampleMassKg, T1.Lithology_IntervalStatusID, T1.Lithology_LithologyPercentage, T1.Lithology_LithologyTypeID, T1.Lithology_LithologyQualifierID, T1.Lithology_ShadeID, T1.Lithology_HueID, T1.Lithology_ColourID, T1.Lithology_LithologyInterrelationID, T1.Lithology_WeatheringID, T1.Lithology_EstimatedStrengthID, T1.Lithology_BedSpacingID, T1.Lithology_DefectTypeID, T1.Lithology_DefectCompletenessID, T1.Lithology_DefectSpacingID, T1.Lithology_DefectDip, T1.Lithology_CoreStateID, T1.Lithology_MechanicalStateID, T1.Lithology_TextureID, T1.Lithology_BasalContactID, T1.Lithology_BeddingDip, T1.Lithology_MineralAndFossilAbundanceID, T1.Lithology_MineralAndFossilTypeID, T1.Lithology_MineralAndFossilAssociationID, T1.Lithology_GasDetectedID, T1.Lithology_Description, T1.Lithology_Version, T1.Lithology_VersionAntecedentID, T1.Lithology_VersionCertainty, T1.Lithology_VersionWorkflowInstanceID, T1.Lithology_VersionUpdatedBy, T1.Lithology_VersionDeletedBy, T1.Lithology_VersionOwnerContactID, T1.Lithology_VersionOwnerCompanyID, T1.Lithology_VersionUpdated, T1.Lithology_PrimaryAdjectiveID, T1.Lithology_PrimarySedimentaryFeatureID)
    FROM (
        SELECT 
            T.LithologyID AS Lithology_LithologyID, 
            T.HeaderID AS Lithology_HeaderID, 
            T.FromDepth AS Lithology_FromDepth, 
            T.ToDepth AS Lithology_ToDepth, 
            T.RecoveredThickness AS Lithology_RecoveredThickness, 
            T.DomainID AS Lithology_DomainID, 
            T.SeamID AS Lithology_SeamID, 
            T.PlyID AS Lithology_PlyID, 
            T.StratigraphyID AS Lithology_StratigraphyID, 
            T.HorizonID AS Lithology_HorizonID, 
            T.SampleTypeID AS Lithology_SampleTypeID, 
            T.SampleNumber AS Lithology_SampleNumber, 
            T.SampleMassKg AS Lithology_SampleMassKg, 
            T.IntervalStatusID AS Lithology_IntervalStatusID, 
            T.LithologyPercentage AS Lithology_LithologyPercentage, 
            T.LithologyTypeID AS Lithology_LithologyTypeID, 
            T.LithologyQualifierID AS Lithology_LithologyQualifierID, 
            T.ShadeID AS Lithology_ShadeID, 
            T.HueID AS Lithology_HueID, 
            T.ColourID AS Lithology_ColourID, 
            T.LithologyInterrelationID AS Lithology_LithologyInterrelationID, 
            T.WeatheringID AS Lithology_WeatheringID, 
            T.EstimatedStrengthID AS Lithology_EstimatedStrengthID, 
            T.BedSpacingID AS Lithology_BedSpacingID, 
            T.DefectTypeID AS Lithology_DefectTypeID, 
            T.DefectCompletenessID AS Lithology_DefectCompletenessID, 
            T.DefectSpacingID AS Lithology_DefectSpacingID, 
            T.DefectDip AS Lithology_DefectDip, 
            T.CoreStateID AS Lithology_CoreStateID, 
            T.MechanicalStateID AS Lithology_MechanicalStateID, 
            T.TextureID AS Lithology_TextureID, 
            T.BasalContactID AS Lithology_BasalContactID, 
            T.BeddingDip AS Lithology_BeddingDip, 
            T.MineralAndFossilAbundanceID AS Lithology_MineralAndFossilAbundanceID, 
            T.MineralAndFossilTypeID AS Lithology_MineralAndFossilTypeID, 
            T.MineralAndFossilAssociationID AS Lithology_MineralAndFossilAssociationID, 
            T.GasDetectedID AS Lithology_GasDetectedID, 
            T.Description AS Lithology_Description, 
            T.Version AS Lithology_Version, 
            T.VersionAntecedentID AS Lithology_VersionAntecedentID, 
            T.VersionCertainty AS Lithology_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Lithology_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Lithology_VersionUpdatedBy, 
            T.VersionDeletedBy AS Lithology_VersionDeletedBy, 
            T.VersionOwnerContactID AS Lithology_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Lithology_VersionOwnerCompanyID, 
            T.VersionUpdated AS Lithology_VersionUpdated, 
            T.PrimaryAdjectiveID AS Lithology_PrimaryAdjectiveID, 
            T.PrimarySedimentaryFeatureID AS Lithology_PrimarySedimentaryFeatureID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Lithology AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView543()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Locations
        [NKD.Module.BusinessObjects.Location](T1.Location_LocationID, T1.Location_LocationTypeID, T1.Location_DefaultLocationName, T1.Location_LocationCode, T1.Location_LocationGeography, T1.Location_LatitudeWGS84, T1.Location_LongitudeWGS84, T1.Location_Elevation, T1.Location_CountryID, T1.Location_CountryStateID, T1.Location_DefaultCulture, T1.Location_OwnerCompanyID, T1.Location_ResponsibleContactID, T1.Location_Comment, T1.Location_Version, T1.Location_VersionAntecedentID, T1.Location_VersionCertainty, T1.Location_VersionWorkflowInstanceID, T1.Location_VersionUpdatedBy, T1.Location_VersionDeletedBy, T1.Location_VersionOwnerContactID, T1.Location_VersionOwnerCompanyID, T1.Location_VersionUpdated, T1.Location_Postcode)
    FROM (
        SELECT 
            T.LocationID AS Location_LocationID, 
            T.LocationTypeID AS Location_LocationTypeID, 
            T.DefaultLocationName AS Location_DefaultLocationName, 
            T.LocationCode AS Location_LocationCode, 
            T.LocationGeography AS Location_LocationGeography, 
            T.LatitudeWGS84 AS Location_LatitudeWGS84, 
            T.LongitudeWGS84 AS Location_LongitudeWGS84, 
            T.Elevation AS Location_Elevation, 
            T.CountryID AS Location_CountryID, 
            T.CountryStateID AS Location_CountryStateID, 
            T.DefaultCulture AS Location_DefaultCulture, 
            T.OwnerCompanyID AS Location_OwnerCompanyID, 
            T.ResponsibleContactID AS Location_ResponsibleContactID, 
            T.Comment AS Location_Comment, 
            T.Version AS Location_Version, 
            T.VersionAntecedentID AS Location_VersionAntecedentID, 
            T.VersionCertainty AS Location_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Location_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Location_VersionUpdatedBy, 
            T.VersionDeletedBy AS Location_VersionDeletedBy, 
            T.VersionOwnerContactID AS Location_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Location_VersionOwnerCompanyID, 
            T.VersionUpdated AS Location_VersionUpdated, 
            T.Postcode AS Location_Postcode, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Location AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LocationAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView544()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LocationAlias
        [NKD.Module.BusinessObjects.LocationAlias](T1.LocationAlias_LocationAliasID, T1.LocationAlias_LocationID, T1.LocationAlias_Alias, T1.LocationAlias_Culture, T1.LocationAlias_Priority, T1.LocationAlias_Version, T1.LocationAlias_VersionAntecedentID, T1.LocationAlias_VersionCertainty, T1.LocationAlias_VersionWorkflowInstanceID, T1.LocationAlias_VersionUpdatedBy, T1.LocationAlias_VersionDeletedBy, T1.LocationAlias_VersionOwnerContactID, T1.LocationAlias_VersionOwnerCompanyID, T1.LocationAlias_VersionUpdated)
    FROM (
        SELECT 
            T.LocationAliasID AS LocationAlias_LocationAliasID, 
            T.LocationID AS LocationAlias_LocationID, 
            T.Alias AS LocationAlias_Alias, 
            T.Culture AS LocationAlias_Culture, 
            T.Priority AS LocationAlias_Priority, 
            T.Version AS LocationAlias_Version, 
            T.VersionAntecedentID AS LocationAlias_VersionAntecedentID, 
            T.VersionCertainty AS LocationAlias_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LocationAlias_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LocationAlias_VersionUpdatedBy, 
            T.VersionDeletedBy AS LocationAlias_VersionDeletedBy, 
            T.VersionOwnerContactID AS LocationAlias_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LocationAlias_VersionOwnerCompanyID, 
            T.VersionUpdated AS LocationAlias_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LocationAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LocationDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView545()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LocationDatas
        [NKD.Module.BusinessObjects.LocationData](T1.LocationData_LocationDataID, T1.LocationData_ParentLocationDataID, T1.LocationData_TableType, T1.LocationData_ReferenceID, T1.LocationData_LocationID, T1.LocationData_Version, T1.LocationData_VersionAntecedentID, T1.LocationData_VersionCertainty, T1.LocationData_VersionWorkflowInstanceID, T1.LocationData_VersionUpdatedBy, T1.LocationData_VersionDeletedBy, T1.LocationData_VersionOwnerContactID, T1.LocationData_VersionOwnerCompanyID, T1.LocationData_VersionUpdated)
    FROM (
        SELECT 
            T.LocationDataID AS LocationData_LocationDataID, 
            T.ParentLocationDataID AS LocationData_ParentLocationDataID, 
            T.TableType AS LocationData_TableType, 
            T.ReferenceID AS LocationData_ReferenceID, 
            T.LocationID AS LocationData_LocationID, 
            T.Version AS LocationData_Version, 
            T.VersionAntecedentID AS LocationData_VersionAntecedentID, 
            T.VersionCertainty AS LocationData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LocationData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LocationData_VersionUpdatedBy, 
            T.VersionDeletedBy AS LocationData_VersionDeletedBy, 
            T.VersionOwnerContactID AS LocationData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LocationData_VersionOwnerCompanyID, 
            T.VersionUpdated AS LocationData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LocationData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LocationTraces.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView546()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LocationTraces
        [NKD.Module.BusinessObjects.LocationTrace](T1.LocationTrace_LocationHistoryID, T1.LocationTrace_LocationHistory, T1.LocationTrace_LocationTaken, T1.LocationTrace_CorrectedLocationID, T1.LocationTrace_ContactID, T1.LocationTrace_Version, T1.LocationTrace_VersionAntecedentID, T1.LocationTrace_VersionCertainty, T1.LocationTrace_VersionWorkflowInstanceID, T1.LocationTrace_VersionUpdatedBy, T1.LocationTrace_VersionDeletedBy, T1.LocationTrace_VersionOwnerContactID, T1.LocationTrace_VersionOwnerCompanyID, T1.LocationTrace_VersionUpdated)
    FROM (
        SELECT 
            T.LocationHistoryID AS LocationTrace_LocationHistoryID, 
            T.LocationHistory AS LocationTrace_LocationHistory, 
            T.LocationTaken AS LocationTrace_LocationTaken, 
            T.CorrectedLocationID AS LocationTrace_CorrectedLocationID, 
            T.ContactID AS LocationTrace_ContactID, 
            T.Version AS LocationTrace_Version, 
            T.VersionAntecedentID AS LocationTrace_VersionAntecedentID, 
            T.VersionCertainty AS LocationTrace_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LocationTrace_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LocationTrace_VersionUpdatedBy, 
            T.VersionDeletedBy AS LocationTrace_VersionDeletedBy, 
            T.VersionOwnerContactID AS LocationTrace_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LocationTrace_VersionOwnerCompanyID, 
            T.VersionUpdated AS LocationTrace_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LocationHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Mineralogies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView547()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Mineralogies
        [NKD.Module.BusinessObjects.Mineralogy](T1.Mineralogy_MineralogyID, T1.Mineralogy_HeaderID, T1.Mineralogy_FromDepth, T1.Mineralogy_ToDepth, T1.Mineralogy_MineralAbundanceID, T1.Mineralogy_MineralFormID, T1.Mineralogy_MineralTypeID, T1.Mineralogy_MineralStyleID, T1.Mineralogy_Logged, T1.Mineralogy_LoggedBy, T1.Mineralogy_Comment, T1.Mineralogy_Version, T1.Mineralogy_VersionAntecedentID, T1.Mineralogy_VersionCertainty, T1.Mineralogy_VersionWorkflowInstanceID, T1.Mineralogy_VersionUpdatedBy, T1.Mineralogy_VersionDeletedBy, T1.Mineralogy_VersionOwnerContactID, T1.Mineralogy_VersionOwnerCompanyID, T1.Mineralogy_VersionUpdated)
    FROM (
        SELECT 
            T.MineralogyID AS Mineralogy_MineralogyID, 
            T.HeaderID AS Mineralogy_HeaderID, 
            T.FromDepth AS Mineralogy_FromDepth, 
            T.ToDepth AS Mineralogy_ToDepth, 
            T.MineralAbundanceID AS Mineralogy_MineralAbundanceID, 
            T.MineralFormID AS Mineralogy_MineralFormID, 
            T.MineralTypeID AS Mineralogy_MineralTypeID, 
            T.MineralStyleID AS Mineralogy_MineralStyleID, 
            T.Logged AS Mineralogy_Logged, 
            T.LoggedBy AS Mineralogy_LoggedBy, 
            T.Comment AS Mineralogy_Comment, 
            T.Version AS Mineralogy_Version, 
            T.VersionAntecedentID AS Mineralogy_VersionAntecedentID, 
            T.VersionCertainty AS Mineralogy_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Mineralogy_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Mineralogy_VersionUpdatedBy, 
            T.VersionDeletedBy AS Mineralogy_VersionDeletedBy, 
            T.VersionOwnerContactID AS Mineralogy_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Mineralogy_VersionOwnerCompanyID, 
            T.VersionUpdated AS Mineralogy_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Mineralogy AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelCharacteristics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView548()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelCharacteristics
        [NKD.Module.BusinessObjects.ModelCharacteristic](T1.ModelCharacteristic_ModelCharacteristicID, T1.ModelCharacteristic_ModelID, T1.ModelCharacteristic_CharacteristicID, T1.ModelCharacteristic_Value, T1.ModelCharacteristic_Version, T1.ModelCharacteristic_VersionAntecedentID, T1.ModelCharacteristic_VersionCertainty, T1.ModelCharacteristic_VersionWorkflowInstanceID, T1.ModelCharacteristic_VersionUpdatedBy, T1.ModelCharacteristic_VersionDeletedBy, T1.ModelCharacteristic_VersionOwnerContactID, T1.ModelCharacteristic_VersionOwnerCompanyID, T1.ModelCharacteristic_VersionUpdated)
    FROM (
        SELECT 
            T.ModelCharacteristicID AS ModelCharacteristic_ModelCharacteristicID, 
            T.ModelID AS ModelCharacteristic_ModelID, 
            T.CharacteristicID AS ModelCharacteristic_CharacteristicID, 
            T.[Value] AS ModelCharacteristic_Value, 
            T.Version AS ModelCharacteristic_Version, 
            T.VersionAntecedentID AS ModelCharacteristic_VersionAntecedentID, 
            T.VersionCertainty AS ModelCharacteristic_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelCharacteristic_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelCharacteristic_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelCharacteristic_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelCharacteristic_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelCharacteristic_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelCharacteristic_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ModelCharacteristic AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Opportunities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView549()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Opportunities
        [NKD.Module.BusinessObjects.Opportunity](T1.Opportunity_OpportunityID, T1.Opportunity_OpportunityName, T1.Opportunity_OpportunityContactID, T1.Opportunity_OpportunityCompanyID, T1.Opportunity_StatusWorkTypeID, T1.Opportunity_RegardingWorkTypeID, T1.Opportunity_Description, T1.Opportunity_ProposalContactID, T1.Opportunity_ProposalFileDataID, T1.Opportunity_ProjectID, T1.Opportunity_ExperienceID, T1.Opportunity_OpenedBy, T1.Opportunity_AssignedBy, T1.Opportunity_MaintainedBy, T1.Opportunity_ConvertedBy, T1.Opportunity_EstimatedConversion, T1.Opportunity_EstimatedDurationHours, T1.Opportunity_EstimatedRevenue, T1.Opportunity_Probability, T1.Opportunity_Version, T1.Opportunity_VersionAntecedentID, T1.Opportunity_VersionCertainty, T1.Opportunity_VersionWorkflowInstanceID, T1.Opportunity_VersionUpdatedBy, T1.Opportunity_VersionDeletedBy, T1.Opportunity_VersionOwnerContactID, T1.Opportunity_VersionOwnerCompanyID, T1.Opportunity_VersionUpdated)
    FROM (
        SELECT 
            T.OpportunityID AS Opportunity_OpportunityID, 
            T.OpportunityName AS Opportunity_OpportunityName, 
            T.OpportunityContactID AS Opportunity_OpportunityContactID, 
            T.OpportunityCompanyID AS Opportunity_OpportunityCompanyID, 
            T.StatusWorkTypeID AS Opportunity_StatusWorkTypeID, 
            T.RegardingWorkTypeID AS Opportunity_RegardingWorkTypeID, 
            T.Description AS Opportunity_Description, 
            T.ProposalContactID AS Opportunity_ProposalContactID, 
            T.ProposalFileDataID AS Opportunity_ProposalFileDataID, 
            T.ProjectID AS Opportunity_ProjectID, 
            T.ExperienceID AS Opportunity_ExperienceID, 
            T.OpenedBy AS Opportunity_OpenedBy, 
            T.AssignedBy AS Opportunity_AssignedBy, 
            T.MaintainedBy AS Opportunity_MaintainedBy, 
            T.ConvertedBy AS Opportunity_ConvertedBy, 
            T.EstimatedConversion AS Opportunity_EstimatedConversion, 
            T.EstimatedDurationHours AS Opportunity_EstimatedDurationHours, 
            T.EstimatedRevenue AS Opportunity_EstimatedRevenue, 
            T.Probability AS Opportunity_Probability, 
            T.Version AS Opportunity_Version, 
            T.VersionAntecedentID AS Opportunity_VersionAntecedentID, 
            T.VersionCertainty AS Opportunity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Opportunity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Opportunity_VersionUpdatedBy, 
            T.VersionDeletedBy AS Opportunity_VersionDeletedBy, 
            T.VersionOwnerContactID AS Opportunity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Opportunity_VersionOwnerCompanyID, 
            T.VersionUpdated AS Opportunity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Opportunity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Parameters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView550()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Parameters
        [NKD.Module.BusinessObjects.Parameter](T1.Parameter_ParameterID, T1.Parameter_ParameterType, T1.Parameter_ParameterName, T1.Parameter_DefaultParameterValue, T1.Parameter_DefaultParameterText, T1.Parameter_UnitID, T1.Parameter_Format, T1.Parameter_Description, T1.Parameter_Locale, T1.Parameter_Version, T1.Parameter_VersionAntecedentID, T1.Parameter_VersionCertainty, T1.Parameter_VersionWorkflowInstanceID, T1.Parameter_VersionUpdatedBy, T1.Parameter_VersionDeletedBy, T1.Parameter_VersionOwnerContactID, T1.Parameter_VersionOwnerCompanyID, T1.Parameter_VersionUpdated)
    FROM (
        SELECT 
            T.ParameterID AS Parameter_ParameterID, 
            T.ParameterType AS Parameter_ParameterType, 
            T.ParameterName AS Parameter_ParameterName, 
            T.DefaultParameterValue AS Parameter_DefaultParameterValue, 
            T.DefaultParameterText AS Parameter_DefaultParameterText, 
            T.UnitID AS Parameter_UnitID, 
            T.Format AS Parameter_Format, 
            T.Description AS Parameter_Description, 
            T.Locale AS Parameter_Locale, 
            T.Version AS Parameter_Version, 
            T.VersionAntecedentID AS Parameter_VersionAntecedentID, 
            T.VersionCertainty AS Parameter_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Parameter_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Parameter_VersionUpdatedBy, 
            T.VersionDeletedBy AS Parameter_VersionDeletedBy, 
            T.VersionOwnerContactID AS Parameter_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Parameter_VersionOwnerCompanyID, 
            T.VersionUpdated AS Parameter_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Parameter AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ParameterDuplicates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView551()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParameterDuplicates
        [NKD.Module.BusinessObjects.ParameterDuplicate](T1.ParameterDuplicate_ParameterDuplicateID, T1.ParameterDuplicate_Parameter1ID, T1.ParameterDuplicate_Parameter2ID, T1.ParameterDuplicate_Version, T1.ParameterDuplicate_VersionAntecedentID, T1.ParameterDuplicate_VersionCertainty, T1.ParameterDuplicate_VersionWorkflowInstanceID, T1.ParameterDuplicate_VersionUpdatedBy, T1.ParameterDuplicate_VersionDeletedBy, T1.ParameterDuplicate_VersionOwnerContactID, T1.ParameterDuplicate_VersionOwnerCompanyID, T1.ParameterDuplicate_VersionUpdated)
    FROM (
        SELECT 
            T.ParameterDuplicateID AS ParameterDuplicate_ParameterDuplicateID, 
            T.Parameter1ID AS ParameterDuplicate_Parameter1ID, 
            T.Parameter2ID AS ParameterDuplicate_Parameter2ID, 
            T.Version AS ParameterDuplicate_Version, 
            T.VersionAntecedentID AS ParameterDuplicate_VersionAntecedentID, 
            T.VersionCertainty AS ParameterDuplicate_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ParameterDuplicate_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ParameterDuplicate_VersionUpdatedBy, 
            T.VersionDeletedBy AS ParameterDuplicate_VersionDeletedBy, 
            T.VersionOwnerContactID AS ParameterDuplicate_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ParameterDuplicate_VersionOwnerCompanyID, 
            T.VersionUpdated AS ParameterDuplicate_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ParameterDuplicate AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ParameterGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView552()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParameterGroups
        [NKD.Module.BusinessObjects.ParameterGroup](T1.ParameterGroup_ParameterGroupID, T1.ParameterGroup_ParameterID, T1.ParameterGroup_GroupID, T1.ParameterGroup_Version, T1.ParameterGroup_VersionAntecedentID, T1.ParameterGroup_VersionCertainty, T1.ParameterGroup_VersionWorkflowInstanceID, T1.ParameterGroup_VersionUpdatedBy, T1.ParameterGroup_VersionDeletedBy, T1.ParameterGroup_VersionOwnerContactID, T1.ParameterGroup_VersionOwnerCompanyID, T1.ParameterGroup_VersionUpdated)
    FROM (
        SELECT 
            T.ParameterGroupID AS ParameterGroup_ParameterGroupID, 
            T.ParameterID AS ParameterGroup_ParameterID, 
            T.GroupID AS ParameterGroup_GroupID, 
            T.Version AS ParameterGroup_Version, 
            T.VersionAntecedentID AS ParameterGroup_VersionAntecedentID, 
            T.VersionCertainty AS ParameterGroup_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ParameterGroup_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ParameterGroup_VersionUpdatedBy, 
            T.VersionDeletedBy AS ParameterGroup_VersionDeletedBy, 
            T.VersionOwnerContactID AS ParameterGroup_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ParameterGroup_VersionOwnerCompanyID, 
            T.VersionUpdated AS ParameterGroup_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ParameterGroup AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PartCharacteristics.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView553()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PartCharacteristics
        [NKD.Module.BusinessObjects.PartCharacteristic](T1.PartCharacteristic_PartCharacteristicID, T1.PartCharacteristic_PartID, T1.PartCharacteristic_CharacteristicID, T1.PartCharacteristic_Value, T1.PartCharacteristic_Version, T1.PartCharacteristic_VersionAntecedentID, T1.PartCharacteristic_VersionCertainty, T1.PartCharacteristic_VersionWorkflowInstanceID, T1.PartCharacteristic_VersionUpdatedBy, T1.PartCharacteristic_VersionDeletedBy, T1.PartCharacteristic_VersionOwnerContactID, T1.PartCharacteristic_VersionOwnerCompanyID, T1.PartCharacteristic_VersionUpdated)
    FROM (
        SELECT 
            T.PartCharacteristicID AS PartCharacteristic_PartCharacteristicID, 
            T.PartID AS PartCharacteristic_PartID, 
            T.CharacteristicID AS PartCharacteristic_CharacteristicID, 
            T.[Value] AS PartCharacteristic_Value, 
            T.Version AS PartCharacteristic_Version, 
            T.VersionAntecedentID AS PartCharacteristic_VersionAntecedentID, 
            T.VersionCertainty AS PartCharacteristic_VersionCertainty, 
            T.VersionWorkflowInstanceID AS PartCharacteristic_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS PartCharacteristic_VersionUpdatedBy, 
            T.VersionDeletedBy AS PartCharacteristic_VersionDeletedBy, 
            T.VersionOwnerContactID AS PartCharacteristic_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS PartCharacteristic_VersionOwnerCompanyID, 
            T.VersionUpdated AS PartCharacteristic_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_PartCharacteristic AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PointLoads.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView554()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PointLoads
        [NKD.Module.BusinessObjects.PointLoad](T1.PointLoad_PointLoadID, T1.PointLoad_HeaderID, T1.PointLoad_FromDepth, T1.PointLoad_ToDepth, T1.PointLoad_SampleNumber, T1.PointLoad_SampleLength, T1.PointLoad_SampleStateID, T1.PointLoad_SampleTypeID, T1.PointLoad_TestSampleCode, T1.PointLoad_TestSampleDepth, T1.PointLoad_PointLoadTestTypeID, T1.PointLoad_PlatenSeparation, T1.PointLoad_Width, T1.PointLoad_FailureLoad, T1.PointLoad_FailureModeID, T1.PointLoad_Comment, T1.PointLoad_Version, T1.PointLoad_VersionAntecedentID, T1.PointLoad_VersionCertainty, T1.PointLoad_VersionWorkflowInstanceID, T1.PointLoad_VersionUpdatedBy, T1.PointLoad_VersionDeletedBy, T1.PointLoad_VersionOwnerContactID, T1.PointLoad_VersionOwnerCompanyID, T1.PointLoad_VersionUpdated)
    FROM (
        SELECT 
            T.PointLoadID AS PointLoad_PointLoadID, 
            T.HeaderID AS PointLoad_HeaderID, 
            T.FromDepth AS PointLoad_FromDepth, 
            T.ToDepth AS PointLoad_ToDepth, 
            T.SampleNumber AS PointLoad_SampleNumber, 
            T.SampleLength AS PointLoad_SampleLength, 
            T.SampleStateID AS PointLoad_SampleStateID, 
            T.SampleTypeID AS PointLoad_SampleTypeID, 
            T.TestSampleCode AS PointLoad_TestSampleCode, 
            T.TestSampleDepth AS PointLoad_TestSampleDepth, 
            T.PointLoadTestTypeID AS PointLoad_PointLoadTestTypeID, 
            T.PlatenSeparation AS PointLoad_PlatenSeparation, 
            T.Width AS PointLoad_Width, 
            T.FailureLoad AS PointLoad_FailureLoad, 
            T.FailureModeID AS PointLoad_FailureModeID, 
            T.Comment AS PointLoad_Comment, 
            T.Version AS PointLoad_Version, 
            T.VersionAntecedentID AS PointLoad_VersionAntecedentID, 
            T.VersionCertainty AS PointLoad_VersionCertainty, 
            T.VersionWorkflowInstanceID AS PointLoad_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS PointLoad_VersionUpdatedBy, 
            T.VersionDeletedBy AS PointLoad_VersionDeletedBy, 
            T.VersionOwnerContactID AS PointLoad_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS PointLoad_VersionOwnerCompanyID, 
            T.VersionUpdated AS PointLoad_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_PointLoad AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView555()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [NKD.Module.BusinessObjects.Project](T1.Project_ProjectID, T1.Project_ParentProjectID, T1.Project_TenementID, T1.Project_ProjectName, T1.Project_ProjectCode, T1.Project_ClientCompanyID, T1.Project_Comment, T1.Project_Version, T1.Project_VersionAntecedentID, T1.Project_VersionCertainty, T1.Project_VersionWorkflowInstanceID, T1.Project_VersionUpdatedBy, T1.Project_VersionDeletedBy, T1.Project_VersionOwnerContactID, T1.Project_VersionOwnerCompanyID, T1.Project_VersionUpdated, T1.Project_ProjectTypeID, T1.Project_ClientContactID)
    FROM (
        SELECT 
            T.ProjectID AS Project_ProjectID, 
            T.ParentProjectID AS Project_ParentProjectID, 
            T.TenementID AS Project_TenementID, 
            T.ProjectName AS Project_ProjectName, 
            T.ProjectCode AS Project_ProjectCode, 
            T.ClientCompanyID AS Project_ClientCompanyID, 
            T.Comment AS Project_Comment, 
            T.Version AS Project_Version, 
            T.VersionAntecedentID AS Project_VersionAntecedentID, 
            T.VersionCertainty AS Project_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Project_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Project_VersionUpdatedBy, 
            T.VersionDeletedBy AS Project_VersionDeletedBy, 
            T.VersionOwnerContactID AS Project_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Project_VersionOwnerCompanyID, 
            T.VersionUpdated AS Project_VersionUpdated, 
            T.ProjectTypeID AS Project_ProjectTypeID, 
            T.ClientContactID AS Project_ClientContactID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Project AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectDeliverables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView556()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectDeliverables
        [NKD.Module.BusinessObjects.ProjectDeliverable](T1.ProjectDeliverable_ProjectDeliverableID, T1.ProjectDeliverable_ProjectID, T1.ProjectDeliverable_Sequence, T1.ProjectDeliverable_DeliverableName, T1.ProjectDeliverable_WorkTypeID, T1.ProjectDeliverable_MilestoneTaskID, T1.ProjectDeliverable_Description, T1.ProjectDeliverable_InitiatedBy, T1.ProjectDeliverable_Initiated, T1.ProjectDeliverable_ApprovedBy, T1.ProjectDeliverable_Approved, T1.ProjectDeliverable_EvidenceDescription, T1.ProjectDeliverable_EvidenceFileDataID, T1.ProjectDeliverable_EvidenceContractID, T1.ProjectDeliverable_EvidenceContactID, T1.ProjectDeliverable_EvidenceCreated, T1.ProjectDeliverable_ExpectedProRataUnits, T1.ProjectDeliverable_ExpectedProRataPerUnitID, T1.ProjectDeliverable_ExpectedProRataValue, T1.ProjectDeliverable_EstimatedDurationManHours, T1.ProjectDeliverable_EstimatedCost, T1.ProjectDeliverable_Due, T1.ProjectDeliverable_HourlyPenalties, T1.ProjectDeliverable_TotalValue, T1.ProjectDeliverable_Completed, T1.ProjectDeliverable_Comment, T1.ProjectDeliverable_Version, T1.ProjectDeliverable_VersionAntecedentID, T1.ProjectDeliverable_VersionCertainty, T1.ProjectDeliverable_VersionWorkflowInstanceID, T1.ProjectDeliverable_VersionUpdatedBy, T1.ProjectDeliverable_VersionDeletedBy, T1.ProjectDeliverable_VersionOwnerContactID, T1.ProjectDeliverable_VersionOwnerCompanyID, T1.ProjectDeliverable_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectDeliverableID AS ProjectDeliverable_ProjectDeliverableID, 
            T.ProjectID AS ProjectDeliverable_ProjectID, 
            T.Sequence AS ProjectDeliverable_Sequence, 
            T.DeliverableName AS ProjectDeliverable_DeliverableName, 
            T.WorkTypeID AS ProjectDeliverable_WorkTypeID, 
            T.MilestoneTaskID AS ProjectDeliverable_MilestoneTaskID, 
            T.Description AS ProjectDeliverable_Description, 
            T.InitiatedBy AS ProjectDeliverable_InitiatedBy, 
            T.Initiated AS ProjectDeliverable_Initiated, 
            T.ApprovedBy AS ProjectDeliverable_ApprovedBy, 
            T.Approved AS ProjectDeliverable_Approved, 
            T.EvidenceDescription AS ProjectDeliverable_EvidenceDescription, 
            T.EvidenceFileDataID AS ProjectDeliverable_EvidenceFileDataID, 
            T.EvidenceContractID AS ProjectDeliverable_EvidenceContractID, 
            T.EvidenceContactID AS ProjectDeliverable_EvidenceContactID, 
            T.EvidenceCreated AS ProjectDeliverable_EvidenceCreated, 
            T.ExpectedProRataUnits AS ProjectDeliverable_ExpectedProRataUnits, 
            T.ExpectedProRataPerUnitID AS ProjectDeliverable_ExpectedProRataPerUnitID, 
            T.ExpectedProRataValue AS ProjectDeliverable_ExpectedProRataValue, 
            T.EstimatedDurationManHours AS ProjectDeliverable_EstimatedDurationManHours, 
            T.EstimatedCost AS ProjectDeliverable_EstimatedCost, 
            T.Due AS ProjectDeliverable_Due, 
            T.HourlyPenalties AS ProjectDeliverable_HourlyPenalties, 
            T.TotalValue AS ProjectDeliverable_TotalValue, 
            T.Completed AS ProjectDeliverable_Completed, 
            T.Comment AS ProjectDeliverable_Comment, 
            T.Version AS ProjectDeliverable_Version, 
            T.VersionAntecedentID AS ProjectDeliverable_VersionAntecedentID, 
            T.VersionCertainty AS ProjectDeliverable_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectDeliverable_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectDeliverable_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectDeliverable_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectDeliverable_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectDeliverable_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectDeliverable_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectDeliverable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlans.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView557()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlans
        [NKD.Module.BusinessObjects.ProjectPlan](T1.ProjectPlan_ProjectPlanID, T1.ProjectPlan_ProjectID, T1.ProjectPlan_ParentProjectPlanID, T1.ProjectPlan_ProjectPlanName, T1.ProjectPlan_ResponsibleContactID, T1.ProjectPlan_Comment, T1.ProjectPlan_Version, T1.ProjectPlan_VersionAntecedentID, T1.ProjectPlan_VersionCertainty, T1.ProjectPlan_VersionWorkflowInstanceID, T1.ProjectPlan_VersionUpdatedBy, T1.ProjectPlan_VersionDeletedBy, T1.ProjectPlan_VersionOwnerContactID, T1.ProjectPlan_VersionOwnerCompanyID, T1.ProjectPlan_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPlanID AS ProjectPlan_ProjectPlanID, 
            T.ProjectID AS ProjectPlan_ProjectID, 
            T.ParentProjectPlanID AS ProjectPlan_ParentProjectPlanID, 
            T.ProjectPlanName AS ProjectPlan_ProjectPlanName, 
            T.ResponsibleContactID AS ProjectPlan_ResponsibleContactID, 
            T.Comment AS ProjectPlan_Comment, 
            T.Version AS ProjectPlan_Version, 
            T.VersionAntecedentID AS ProjectPlan_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlan_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlan_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlan_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlan_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlan_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlan_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlan_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlan AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView558()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTasks
        [NKD.Module.BusinessObjects.ProjectPlanTask](T1.ProjectPlanTask_ProjectPlanTaskID, T1.ProjectPlanTask_ProjectPlanID, T1.ProjectPlanTask_ProjectTaskName, T1.ProjectPlanTask_TaskID, T1.ProjectPlanTask_WorkTypeID, T1.ProjectPlanTask_Priority, T1.ProjectPlanTask_Progress, T1.ProjectPlanTask_StartDate, T1.ProjectPlanTask_StopDate, T1.ProjectPlanTask_AllocatedManHours, T1.ProjectPlanTask_Comment, T1.ProjectPlanTask_Version, T1.ProjectPlanTask_VersionAntecedentID, T1.ProjectPlanTask_VersionCertainty, T1.ProjectPlanTask_VersionWorkflowInstanceID, T1.ProjectPlanTask_VersionUpdatedBy, T1.ProjectPlanTask_VersionDeletedBy, T1.ProjectPlanTask_VersionOwnerContactID, T1.ProjectPlanTask_VersionOwnerCompanyID, T1.ProjectPlanTask_VersionUpdated, T1.ProjectPlanTask_ParentProjectPlanTaskID)
    FROM (
        SELECT 
            T.ProjectPlanTaskID AS ProjectPlanTask_ProjectPlanTaskID, 
            T.ProjectPlanID AS ProjectPlanTask_ProjectPlanID, 
            T.ProjectTaskName AS ProjectPlanTask_ProjectTaskName, 
            T.TaskID AS ProjectPlanTask_TaskID, 
            T.WorkTypeID AS ProjectPlanTask_WorkTypeID, 
            T.Priority AS ProjectPlanTask_Priority, 
            T.Progress AS ProjectPlanTask_Progress, 
            T.StartDate AS ProjectPlanTask_StartDate, 
            T.StopDate AS ProjectPlanTask_StopDate, 
            T.AllocatedManHours AS ProjectPlanTask_AllocatedManHours, 
            T.Comment AS ProjectPlanTask_Comment, 
            T.Version AS ProjectPlanTask_Version, 
            T.VersionAntecedentID AS ProjectPlanTask_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTask_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTask_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTask_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTask_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTask_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTask_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTask_VersionUpdated, 
            T.ParentProjectPlanTaskID AS ProjectPlanTask_ParentProjectPlanTaskID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTask AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskComplianceResponses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView559()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskComplianceResponses
        [NKD.Module.BusinessObjects.ProjectPlanTaskComplianceResponse](T1.ProjectPlanTaskComplianceResponse_ProjectPlanTaskComplianceResponseID, T1.ProjectPlanTaskComplianceResponse_ProjectPlanTaskID, T1.ProjectPlanTaskComplianceResponse_ProjectPlanTaskResponseID, T1.ProjectPlanTaskComplianceResponse_ComplianceWorkTypeID, T1.ProjectPlanTaskComplianceResponse_ComplianceFormResponse, T1.ProjectPlanTaskComplianceResponse_CompletedBy, T1.ProjectPlanTaskComplianceResponse_Completed, T1.ProjectPlanTaskComplianceResponse_ApprovedBy, T1.ProjectPlanTaskComplianceResponse_Approved, T1.ProjectPlanTaskComplianceResponse_Version, T1.ProjectPlanTaskComplianceResponse_VersionAntecedentID, T1.ProjectPlanTaskComplianceResponse_VersionCertainty, T1.ProjectPlanTaskComplianceResponse_VersionWorkflowInstanceID, T1.ProjectPlanTaskComplianceResponse_VersionUpdatedBy, T1.ProjectPlanTaskComplianceResponse_VersionDeletedBy, T1.ProjectPlanTaskComplianceResponse_VersionOwnerContactID, T1.ProjectPlanTaskComplianceResponse_VersionOwnerCompanyID, T1.ProjectPlanTaskComplianceResponse_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPlanTaskComplianceResponseID AS ProjectPlanTaskComplianceResponse_ProjectPlanTaskComplianceResponseID, 
            T.ProjectPlanTaskID AS ProjectPlanTaskComplianceResponse_ProjectPlanTaskID, 
            T.ProjectPlanTaskResponseID AS ProjectPlanTaskComplianceResponse_ProjectPlanTaskResponseID, 
            T.ComplianceWorkTypeID AS ProjectPlanTaskComplianceResponse_ComplianceWorkTypeID, 
            T.ComplianceFormResponse AS ProjectPlanTaskComplianceResponse_ComplianceFormResponse, 
            T.CompletedBy AS ProjectPlanTaskComplianceResponse_CompletedBy, 
            T.Completed AS ProjectPlanTaskComplianceResponse_Completed, 
            T.ApprovedBy AS ProjectPlanTaskComplianceResponse_ApprovedBy, 
            T.Approved AS ProjectPlanTaskComplianceResponse_Approved, 
            T.Version AS ProjectPlanTaskComplianceResponse_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskComplianceResponse_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskComplianceResponse_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskComplianceResponse_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskComplianceResponse_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskComplianceResponse_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskComplianceResponse_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskComplianceResponse_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskComplianceResponse_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskComplianceResponse AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView560()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskDatas
        [NKD.Module.BusinessObjects.ProjectPlanTaskData](T1.ProjectPlanTaskData_ProjectPlanTaskDataID, T1.ProjectPlanTaskData_ParentProjectPlanTaskDataID, T1.ProjectPlanTaskData_TableType, T1.ProjectPlanTaskData_ReferenceID, T1.ProjectPlanTaskData_ProjectPlanTaskID, T1.ProjectPlanTaskData_Version, T1.ProjectPlanTaskData_VersionAntecedentID, T1.ProjectPlanTaskData_VersionCertainty, T1.ProjectPlanTaskData_VersionWorkflowInstanceID, T1.ProjectPlanTaskData_VersionUpdatedBy, T1.ProjectPlanTaskData_VersionDeletedBy, T1.ProjectPlanTaskData_VersionOwnerContactID, T1.ProjectPlanTaskData_VersionOwnerCompanyID, T1.ProjectPlanTaskData_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPlanTaskDataID AS ProjectPlanTaskData_ProjectPlanTaskDataID, 
            T.ParentProjectPlanTaskDataID AS ProjectPlanTaskData_ParentProjectPlanTaskDataID, 
            T.TableType AS ProjectPlanTaskData_TableType, 
            T.ReferenceID AS ProjectPlanTaskData_ReferenceID, 
            T.ProjectPlanTaskID AS ProjectPlanTaskData_ProjectPlanTaskID, 
            T.Version AS ProjectPlanTaskData_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskData_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskResponses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView561()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskResponses
        [NKD.Module.BusinessObjects.ProjectPlanTaskResponse](T1.ProjectPlanTaskResponse_ProjectPlanTaskResponseID, T1.ProjectPlanTaskResponse_ProjectPlanTaskID, T1.ProjectPlanTaskResponse_ResponsibleContactID, T1.ProjectPlanTaskResponse_ActualWorkTypeID, T1.ProjectPlanTaskResponse_Began, T1.ProjectPlanTaskResponse_Completed, T1.ProjectPlanTaskResponse_Hours, T1.ProjectPlanTaskResponse_EstimatedProRataUnits, T1.ProjectPlanTaskResponse_EstimatedProRataCost, T1.ProjectPlanTaskResponse_EstimatedValue, T1.ProjectPlanTaskResponse_PerformanceMetricParameterID, T1.ProjectPlanTaskResponse_PerformanceMetricQuantity, T1.ProjectPlanTaskResponse_PerformanceMetricContributedPercent, T1.ProjectPlanTaskResponse_ApprovedProRataUnits, T1.ProjectPlanTaskResponse_ApprovedProRataCost, T1.ProjectPlanTaskResponse_Approved, T1.ProjectPlanTaskResponse_ApprovedBy, T1.ProjectPlanTaskResponse_Comments, T1.ProjectPlanTaskResponse_Version, T1.ProjectPlanTaskResponse_VersionAntecedentID, T1.ProjectPlanTaskResponse_VersionCertainty, T1.ProjectPlanTaskResponse_VersionWorkflowInstanceID, T1.ProjectPlanTaskResponse_VersionUpdatedBy, T1.ProjectPlanTaskResponse_VersionDeletedBy, T1.ProjectPlanTaskResponse_VersionOwnerContactID, T1.ProjectPlanTaskResponse_VersionOwnerCompanyID, T1.ProjectPlanTaskResponse_VersionUpdated, T1.ProjectPlanTaskResponse_ResponsibleCompanyID, T1.ProjectPlanTaskResponse_ProjectID, T1.ProjectPlanTaskResponse_ActualTaskID, T1.ProjectPlanTaskResponse_ActualGraphDataID, T1.ProjectPlanTaskResponse_ActualGraphDataGroupID, T1.ProjectPlanTaskResponse_EstimatedRevenue, T1.ProjectPlanTaskResponse_VersionPriority)
    FROM (
        SELECT 
            T.ProjectPlanTaskResponseID AS ProjectPlanTaskResponse_ProjectPlanTaskResponseID, 
            T.ProjectPlanTaskID AS ProjectPlanTaskResponse_ProjectPlanTaskID, 
            T.ResponsibleContactID AS ProjectPlanTaskResponse_ResponsibleContactID, 
            T.ActualWorkTypeID AS ProjectPlanTaskResponse_ActualWorkTypeID, 
            T.Began AS ProjectPlanTaskResponse_Began, 
            T.Completed AS ProjectPlanTaskResponse_Completed, 
            T.Hours AS ProjectPlanTaskResponse_Hours, 
            T.EstimatedProRataUnits AS ProjectPlanTaskResponse_EstimatedProRataUnits, 
            T.EstimatedProRataCost AS ProjectPlanTaskResponse_EstimatedProRataCost, 
            T.EstimatedValue AS ProjectPlanTaskResponse_EstimatedValue, 
            T.PerformanceMetricParameterID AS ProjectPlanTaskResponse_PerformanceMetricParameterID, 
            T.PerformanceMetricQuantity AS ProjectPlanTaskResponse_PerformanceMetricQuantity, 
            T.PerformanceMetricContributedPercent AS ProjectPlanTaskResponse_PerformanceMetricContributedPercent, 
            T.ApprovedProRataUnits AS ProjectPlanTaskResponse_ApprovedProRataUnits, 
            T.ApprovedProRataCost AS ProjectPlanTaskResponse_ApprovedProRataCost, 
            T.Approved AS ProjectPlanTaskResponse_Approved, 
            T.ApprovedBy AS ProjectPlanTaskResponse_ApprovedBy, 
            T.Comments AS ProjectPlanTaskResponse_Comments, 
            T.Version AS ProjectPlanTaskResponse_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskResponse_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskResponse_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskResponse_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskResponse_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskResponse_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskResponse_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskResponse_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskResponse_VersionUpdated, 
            T.ResponsibleCompanyID AS ProjectPlanTaskResponse_ResponsibleCompanyID, 
            T.ProjectID AS ProjectPlanTaskResponse_ProjectID, 
            T.ActualTaskID AS ProjectPlanTaskResponse_ActualTaskID, 
            T.ActualGraphDataID AS ProjectPlanTaskResponse_ActualGraphDataID, 
            T.ActualGraphDataGroupID AS ProjectPlanTaskResponse_ActualGraphDataGroupID, 
            T.EstimatedRevenue AS ProjectPlanTaskResponse_EstimatedRevenue, 
            T.VersionPriority AS ProjectPlanTaskResponse_VersionPriority, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponse AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskResponseDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView562()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskResponseDatas
        [NKD.Module.BusinessObjects.ProjectPlanTaskResponseData](T1.ProjectPlanTaskResponseData_ProjectPlanTaskResponseDataID, T1.ProjectPlanTaskResponseData_ParentProjectPlanTaskResponseDataID, T1.ProjectPlanTaskResponseData_TableType, T1.ProjectPlanTaskResponseData_ReferenceID, T1.ProjectPlanTaskResponseData_ProjectPlanTaskResponseID, T1.ProjectPlanTaskResponseData_Version, T1.ProjectPlanTaskResponseData_VersionAntecedentID, T1.ProjectPlanTaskResponseData_VersionCertainty, T1.ProjectPlanTaskResponseData_VersionWorkflowInstanceID, T1.ProjectPlanTaskResponseData_VersionUpdatedBy, T1.ProjectPlanTaskResponseData_VersionDeletedBy, T1.ProjectPlanTaskResponseData_VersionOwnerContactID, T1.ProjectPlanTaskResponseData_VersionOwnerCompanyID, T1.ProjectPlanTaskResponseData_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPlanTaskResponseDataID AS ProjectPlanTaskResponseData_ProjectPlanTaskResponseDataID, 
            T.ParentProjectPlanTaskResponseDataID AS ProjectPlanTaskResponseData_ParentProjectPlanTaskResponseDataID, 
            T.TableType AS ProjectPlanTaskResponseData_TableType, 
            T.ReferenceID AS ProjectPlanTaskResponseData_ReferenceID, 
            T.ProjectPlanTaskResponseID AS ProjectPlanTaskResponseData_ProjectPlanTaskResponseID, 
            T.Version AS ProjectPlanTaskResponseData_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskResponseData_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskResponseData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskResponseData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskResponseData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskResponseData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskResponseData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskResponseData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskResponseData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponseData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskWorkers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView563()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskWorkers
        [NKD.Module.BusinessObjects.ProjectPlanTaskWorker](T1.ProjectPlanTaskWorker_ProjectPlanTaskWorkerID, T1.ProjectPlanTaskWorker_ProjectPlanTaskID, T1.ProjectPlanTaskWorker_AvailableFromDate, T1.ProjectPlanTaskWorker_AvailableUntilDate, T1.ProjectPlanTaskWorker_Version, T1.ProjectPlanTaskWorker_VersionAntecedentID, T1.ProjectPlanTaskWorker_VersionCertainty, T1.ProjectPlanTaskWorker_VersionWorkflowInstanceID, T1.ProjectPlanTaskWorker_VersionUpdatedBy, T1.ProjectPlanTaskWorker_VersionDeletedBy, T1.ProjectPlanTaskWorker_VersionOwnerContactID, T1.ProjectPlanTaskWorker_VersionOwnerCompanyID, T1.ProjectPlanTaskWorker_VersionUpdated, T1.ProjectPlanTaskWorker_ExperienceID)
    FROM (
        SELECT 
            T.ProjectPlanTaskWorkerID AS ProjectPlanTaskWorker_ProjectPlanTaskWorkerID, 
            T.ProjectPlanTaskID AS ProjectPlanTaskWorker_ProjectPlanTaskID, 
            T.AvailableFromDate AS ProjectPlanTaskWorker_AvailableFromDate, 
            T.AvailableUntilDate AS ProjectPlanTaskWorker_AvailableUntilDate, 
            T.Version AS ProjectPlanTaskWorker_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskWorker_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskWorker_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskWorker_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskWorker_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskWorker_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskWorker_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskWorker_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskWorker_VersionUpdated, 
            T.ExperienceID AS ProjectPlanTaskWorker_ExperienceID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskWorker AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProspectusProjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView564()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProspectusProjects
        [NKD.Module.BusinessObjects.ProspectusProject](T1.ProspectusProject_ProspectusProjectID, T1.ProspectusProject_ProjectID, T1.ProspectusProject_ProspectusProjectName, T1.ProspectusProject_CompanyID, T1.ProspectusProject_Geologist, T1.ProspectusProject_GeologistContactID, T1.ProspectusProject_GeologyCompanyID, T1.ProspectusProject_ListDate, T1.ProspectusProject_Cost, T1.ProspectusProject_CurrencyID, T1.ProspectusProject_Pages, T1.ProspectusProject_CountryID, T1.ProspectusProject_CountryStateID, T1.ProspectusProject_Place, T1.ProspectusProject_TenementID, T1.ProspectusProject_ProvinceID, T1.ProspectusProject_Version, T1.ProspectusProject_VersionAntecedentID, T1.ProspectusProject_VersionCertainty, T1.ProspectusProject_VersionWorkflowInstanceID, T1.ProspectusProject_VersionUpdatedBy, T1.ProspectusProject_VersionDeletedBy, T1.ProspectusProject_VersionOwnerContactID, T1.ProspectusProject_VersionOwnerCompanyID, T1.ProspectusProject_VersionUpdated, T1.ProspectusProject_CompanyName)
    FROM (
        SELECT 
            T.ProspectusProjectID AS ProspectusProject_ProspectusProjectID, 
            T.ProjectID AS ProspectusProject_ProjectID, 
            T.ProspectusProjectName AS ProspectusProject_ProspectusProjectName, 
            T.CompanyID AS ProspectusProject_CompanyID, 
            T.Geologist AS ProspectusProject_Geologist, 
            T.GeologistContactID AS ProspectusProject_GeologistContactID, 
            T.GeologyCompanyID AS ProspectusProject_GeologyCompanyID, 
            T.ListDate AS ProspectusProject_ListDate, 
            T.Cost AS ProspectusProject_Cost, 
            T.CurrencyID AS ProspectusProject_CurrencyID, 
            T.Pages AS ProspectusProject_Pages, 
            T.CountryID AS ProspectusProject_CountryID, 
            T.CountryStateID AS ProspectusProject_CountryStateID, 
            T.Place AS ProspectusProject_Place, 
            T.TenementID AS ProspectusProject_TenementID, 
            T.ProvinceID AS ProspectusProject_ProvinceID, 
            T.Version AS ProspectusProject_Version, 
            T.VersionAntecedentID AS ProspectusProject_VersionAntecedentID, 
            T.VersionCertainty AS ProspectusProject_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProspectusProject_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProspectusProject_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProspectusProject_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProspectusProject_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProspectusProject_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProspectusProject_VersionUpdated, 
            T.CompanyName AS ProspectusProject_CompanyName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProspectusProject AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProspectusProjectCommodities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView565()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProspectusProjectCommodities
        [NKD.Module.BusinessObjects.ProspectusProjectCommodity](T1.ProspectusProjectCommodity_ProspectusProjectCommodityID, T1.ProspectusProjectCommodity_ProspectusProjectID, T1.ProspectusProjectCommodity_CommodityID, T1.ProspectusProjectCommodity_Version, T1.ProspectusProjectCommodity_VersionAntecedentID, T1.ProspectusProjectCommodity_VersionCertainty, T1.ProspectusProjectCommodity_VersionWorkflowInstanceID, T1.ProspectusProjectCommodity_VersionUpdatedBy, T1.ProspectusProjectCommodity_VersionDeletedBy, T1.ProspectusProjectCommodity_VersionOwnerContactID, T1.ProspectusProjectCommodity_VersionOwnerCompanyID, T1.ProspectusProjectCommodity_VersionUpdated)
    FROM (
        SELECT 
            T.ProspectusProjectCommodityID AS ProspectusProjectCommodity_ProspectusProjectCommodityID, 
            T.ProspectusProjectID AS ProspectusProjectCommodity_ProspectusProjectID, 
            T.CommodityID AS ProspectusProjectCommodity_CommodityID, 
            T.Version AS ProspectusProjectCommodity_Version, 
            T.VersionAntecedentID AS ProspectusProjectCommodity_VersionAntecedentID, 
            T.VersionCertainty AS ProspectusProjectCommodity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProspectusProjectCommodity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProspectusProjectCommodity_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProspectusProjectCommodity_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProspectusProjectCommodity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProspectusProjectCommodity_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProspectusProjectCommodity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProspectusProjectCommodity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Provinces.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView566()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Provinces
        [NKD.Module.BusinessObjects.Province](T1.Province_ProvinceID, T1.Province_ProvinceTypeID, T1.Province_DefaultProvinceName, T1.Province_ProvinceCode, T1.Province_ProvinceGeography, T1.Province_MarkerLatitudeWGS84, T1.Province_MarkerLongitudeWGS84, T1.Province_ProvinceGroupID, T1.Province_CountryID, T1.Province_CountryStateID, T1.Province_DefaultCulture, T1.Province_OwnerCompanyID, T1.Province_ResponsibleContactID, T1.Province_Comment, T1.Province_Version, T1.Province_VersionAntecedentID, T1.Province_VersionCertainty, T1.Province_VersionWorkflowInstanceID, T1.Province_VersionUpdatedBy, T1.Province_VersionDeletedBy, T1.Province_VersionOwnerContactID, T1.Province_VersionOwnerCompanyID, T1.Province_VersionUpdated)
    FROM (
        SELECT 
            T.ProvinceID AS Province_ProvinceID, 
            T.ProvinceTypeID AS Province_ProvinceTypeID, 
            T.DefaultProvinceName AS Province_DefaultProvinceName, 
            T.ProvinceCode AS Province_ProvinceCode, 
            T.ProvinceGeography AS Province_ProvinceGeography, 
            T.MarkerLatitudeWGS84 AS Province_MarkerLatitudeWGS84, 
            T.MarkerLongitudeWGS84 AS Province_MarkerLongitudeWGS84, 
            T.ProvinceGroupID AS Province_ProvinceGroupID, 
            T.CountryID AS Province_CountryID, 
            T.CountryStateID AS Province_CountryStateID, 
            T.DefaultCulture AS Province_DefaultCulture, 
            T.OwnerCompanyID AS Province_OwnerCompanyID, 
            T.ResponsibleContactID AS Province_ResponsibleContactID, 
            T.Comment AS Province_Comment, 
            T.Version AS Province_Version, 
            T.VersionAntecedentID AS Province_VersionAntecedentID, 
            T.VersionCertainty AS Province_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Province_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Province_VersionUpdatedBy, 
            T.VersionDeletedBy AS Province_VersionDeletedBy, 
            T.VersionOwnerContactID AS Province_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Province_VersionOwnerCompanyID, 
            T.VersionUpdated AS Province_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Province AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProvinceAlias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView567()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProvinceAlias
        [NKD.Module.BusinessObjects.ProvinceAlias](T1.ProvinceAlias_ProvinceAliasID, T1.ProvinceAlias_ProvinceID, T1.ProvinceAlias_Alias, T1.ProvinceAlias_Culture, T1.ProvinceAlias_Priority, T1.ProvinceAlias_Version, T1.ProvinceAlias_VersionAntecedentID, T1.ProvinceAlias_VersionCertainty, T1.ProvinceAlias_VersionWorkflowInstanceID, T1.ProvinceAlias_VersionUpdatedBy, T1.ProvinceAlias_VersionDeletedBy, T1.ProvinceAlias_VersionOwnerContactID, T1.ProvinceAlias_VersionOwnerCompanyID, T1.ProvinceAlias_VersionUpdated)
    FROM (
        SELECT 
            T.ProvinceAliasID AS ProvinceAlias_ProvinceAliasID, 
            T.ProvinceID AS ProvinceAlias_ProvinceID, 
            T.Alias AS ProvinceAlias_Alias, 
            T.Culture AS ProvinceAlias_Culture, 
            T.Priority AS ProvinceAlias_Priority, 
            T.Version AS ProvinceAlias_Version, 
            T.VersionAntecedentID AS ProvinceAlias_VersionAntecedentID, 
            T.VersionCertainty AS ProvinceAlias_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProvinceAlias_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProvinceAlias_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProvinceAlias_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProvinceAlias_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProvinceAlias_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProvinceAlias_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProvinceAlias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProvinceDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView568()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProvinceDatas
        [NKD.Module.BusinessObjects.ProvinceData](T1.ProvinceData_ProvinceDataID, T1.ProvinceData_ParentProvinceDataID, T1.ProvinceData_TableType, T1.ProvinceData_ReferenceID, T1.ProvinceData_ProvinceID, T1.ProvinceData_Version, T1.ProvinceData_VersionAntecedentID, T1.ProvinceData_VersionCertainty, T1.ProvinceData_VersionWorkflowInstanceID, T1.ProvinceData_VersionUpdatedBy, T1.ProvinceData_VersionDeletedBy, T1.ProvinceData_VersionOwnerContactID, T1.ProvinceData_VersionOwnerCompanyID, T1.ProvinceData_VersionUpdated)
    FROM (
        SELECT 
            T.ProvinceDataID AS ProvinceData_ProvinceDataID, 
            T.ParentProvinceDataID AS ProvinceData_ParentProvinceDataID, 
            T.TableType AS ProvinceData_TableType, 
            T.ReferenceID AS ProvinceData_ReferenceID, 
            T.ProvinceID AS ProvinceData_ProvinceID, 
            T.Version AS ProvinceData_Version, 
            T.VersionAntecedentID AS ProvinceData_VersionAntecedentID, 
            T.VersionCertainty AS ProvinceData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProvinceData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProvinceData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProvinceData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProvinceData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProvinceData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProvinceData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProvinceData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProvinceRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView569()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProvinceRelations
        [NKD.Module.BusinessObjects.ProvinceRelation](T1.ProvinceRelation_ProvinceRelationID, T1.ProvinceRelation_OriginalProvinceID, T1.ProvinceRelation_RelatedProvinceID, T1.ProvinceRelation_RelationTypeID, T1.ProvinceRelation_Related, T1.ProvinceRelation_Version, T1.ProvinceRelation_VersionAntecedentID, T1.ProvinceRelation_VersionCertainty, T1.ProvinceRelation_VersionWorkflowInstanceID, T1.ProvinceRelation_VersionUpdatedBy, T1.ProvinceRelation_VersionDeletedBy, T1.ProvinceRelation_VersionOwnerContactID, T1.ProvinceRelation_VersionOwnerCompanyID, T1.ProvinceRelation_VersionUpdated)
    FROM (
        SELECT 
            T.ProvinceRelationID AS ProvinceRelation_ProvinceRelationID, 
            T.OriginalProvinceID AS ProvinceRelation_OriginalProvinceID, 
            T.RelatedProvinceID AS ProvinceRelation_RelatedProvinceID, 
            T.RelationTypeID AS ProvinceRelation_RelationTypeID, 
            T.Related AS ProvinceRelation_Related, 
            T.Version AS ProvinceRelation_Version, 
            T.VersionAntecedentID AS ProvinceRelation_VersionAntecedentID, 
            T.VersionCertainty AS ProvinceRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProvinceRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProvinceRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProvinceRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProvinceRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProvinceRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProvinceRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ProvinceRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Recoveries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView570()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Recoveries
        [NKD.Module.BusinessObjects.Recovery](T1.Recovery_RecoveryID, T1.Recovery_HeaderID, T1.Recovery_FromDepth, T1.Recovery_ToDepth, T1.Recovery_Advance, T1.Recovery_CoreLoss, T1.Recovery_CoreRecovered, T1.Recovery_Solid, T1.Recovery_Total, T1.Recovery_Confident, T1.Recovery_DrillSizeID, T1.Recovery_CoreSize, T1.Recovery_Comment, T1.Recovery_Version, T1.Recovery_VersionAntecedentID, T1.Recovery_VersionCertainty, T1.Recovery_VersionWorkflowInstanceID, T1.Recovery_VersionUpdatedBy, T1.Recovery_VersionDeletedBy, T1.Recovery_VersionOwnerContactID, T1.Recovery_VersionOwnerCompanyID, T1.Recovery_VersionUpdated)
    FROM (
        SELECT 
            T.RecoveryID AS Recovery_RecoveryID, 
            T.HeaderID AS Recovery_HeaderID, 
            T.FromDepth AS Recovery_FromDepth, 
            T.ToDepth AS Recovery_ToDepth, 
            T.Advance AS Recovery_Advance, 
            T.CoreLoss AS Recovery_CoreLoss, 
            T.CoreRecovered AS Recovery_CoreRecovered, 
            T.Solid AS Recovery_Solid, 
            T.Total AS Recovery_Total, 
            T.Confident AS Recovery_Confident, 
            T.DrillSizeID AS Recovery_DrillSizeID, 
            T.CoreSize AS Recovery_CoreSize, 
            T.Comment AS Recovery_Comment, 
            T.Version AS Recovery_Version, 
            T.VersionAntecedentID AS Recovery_VersionAntecedentID, 
            T.VersionCertainty AS Recovery_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Recovery_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Recovery_VersionUpdatedBy, 
            T.VersionDeletedBy AS Recovery_VersionDeletedBy, 
            T.VersionOwnerContactID AS Recovery_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Recovery_VersionOwnerCompanyID, 
            T.VersionUpdated AS Recovery_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Recovery AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Samples.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView571()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Samples
        [NKD.Module.BusinessObjects.Sample](T1.Sample_SampleID, T1.Sample_HeaderID, T1.Sample_SampleCategoryID, T1.Sample_SampleStateID, T1.Sample_SampleTypeID, T1.Sample_SampleName, T1.Sample_SampleNumber, T1.Sample_SampleTaken, T1.Sample_FromDepth, T1.Sample_ToDepth, T1.Sample_SampleMassKg, T1.Sample_DryMassKg, T1.Sample_Version, T1.Sample_VersionAntecedentID, T1.Sample_VersionCertainty, T1.Sample_VersionWorkflowInstanceID, T1.Sample_VersionUpdatedBy, T1.Sample_VersionDeletedBy, T1.Sample_VersionOwnerContactID, T1.Sample_VersionOwnerCompanyID, T1.Sample_VersionUpdated, T1.Sample_LocationID)
    FROM (
        SELECT 
            T.SampleID AS Sample_SampleID, 
            T.HeaderID AS Sample_HeaderID, 
            T.SampleCategoryID AS Sample_SampleCategoryID, 
            T.SampleStateID AS Sample_SampleStateID, 
            T.SampleTypeID AS Sample_SampleTypeID, 
            T.SampleName AS Sample_SampleName, 
            T.SampleNumber AS Sample_SampleNumber, 
            T.SampleTaken AS Sample_SampleTaken, 
            T.FromDepth AS Sample_FromDepth, 
            T.ToDepth AS Sample_ToDepth, 
            T.SampleMassKg AS Sample_SampleMassKg, 
            T.DryMassKg AS Sample_DryMassKg, 
            T.Version AS Sample_Version, 
            T.VersionAntecedentID AS Sample_VersionAntecedentID, 
            T.VersionCertainty AS Sample_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Sample_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Sample_VersionUpdatedBy, 
            T.VersionDeletedBy AS Sample_VersionDeletedBy, 
            T.VersionOwnerContactID AS Sample_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Sample_VersionOwnerCompanyID, 
            T.VersionUpdated AS Sample_VersionUpdated, 
            T.LocationID AS Sample_LocationID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Sample AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SecurityBlacklists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView572()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SecurityBlacklists
        [NKD.Module.BusinessObjects.SecurityBlacklist](T1.SecurityBlacklist_SecurityBlacklistID, T1.SecurityBlacklist_OwnerApplicationID, T1.SecurityBlacklist_OwnerCompanyID, T1.SecurityBlacklist_OwnerContactID, T1.SecurityBlacklist_OwnerProjectID, T1.SecurityBlacklist_OwnerEntitySystemType, T1.SecurityBlacklist_OwnerTableType, T1.SecurityBlacklist_OwnerField, T1.SecurityBlacklist_OwnerReferenceID, T1.SecurityBlacklist_AccessorApplicationID, T1.SecurityBlacklist_AccessorCompanyID, T1.SecurityBlacklist_AccessorProjectID, T1.SecurityBlacklist_AccessorContactID, T1.SecurityBlacklist_AccessorRoleID, T1.SecurityBlacklist_CanCreate, T1.SecurityBlacklist_CanRead, T1.SecurityBlacklist_CanUpdate, T1.SecurityBlacklist_CanDelete, T1.SecurityBlacklist_Version, T1.SecurityBlacklist_VersionAntecedentID, T1.SecurityBlacklist_VersionCertainty, T1.SecurityBlacklist_VersionWorkflowInstanceID, T1.SecurityBlacklist_VersionUpdatedBy, T1.SecurityBlacklist_VersionDeletedBy, T1.SecurityBlacklist_VersionOwnerContactID, T1.SecurityBlacklist_VersionOwnerCompanyID, T1.SecurityBlacklist_VersionUpdated)
    FROM (
        SELECT 
            T.SecurityBlacklistID AS SecurityBlacklist_SecurityBlacklistID, 
            T.OwnerApplicationID AS SecurityBlacklist_OwnerApplicationID, 
            T.OwnerCompanyID AS SecurityBlacklist_OwnerCompanyID, 
            T.OwnerContactID AS SecurityBlacklist_OwnerContactID, 
            T.OwnerProjectID AS SecurityBlacklist_OwnerProjectID, 
            T.OwnerEntitySystemType AS SecurityBlacklist_OwnerEntitySystemType, 
            T.OwnerTableType AS SecurityBlacklist_OwnerTableType, 
            T.OwnerField AS SecurityBlacklist_OwnerField, 
            T.OwnerReferenceID AS SecurityBlacklist_OwnerReferenceID, 
            T.AccessorApplicationID AS SecurityBlacklist_AccessorApplicationID, 
            T.AccessorCompanyID AS SecurityBlacklist_AccessorCompanyID, 
            T.AccessorProjectID AS SecurityBlacklist_AccessorProjectID, 
            T.AccessorContactID AS SecurityBlacklist_AccessorContactID, 
            T.AccessorRoleID AS SecurityBlacklist_AccessorRoleID, 
            T.CanCreate AS SecurityBlacklist_CanCreate, 
            T.CanRead AS SecurityBlacklist_CanRead, 
            T.CanUpdate AS SecurityBlacklist_CanUpdate, 
            T.CanDelete AS SecurityBlacklist_CanDelete, 
            T.Version AS SecurityBlacklist_Version, 
            T.VersionAntecedentID AS SecurityBlacklist_VersionAntecedentID, 
            T.VersionCertainty AS SecurityBlacklist_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SecurityBlacklist_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SecurityBlacklist_VersionUpdatedBy, 
            T.VersionDeletedBy AS SecurityBlacklist_VersionDeletedBy, 
            T.VersionOwnerContactID AS SecurityBlacklist_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SecurityBlacklist_VersionOwnerCompanyID, 
            T.VersionUpdated AS SecurityBlacklist_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_SecurityBlacklist AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SecurityWhitelists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView573()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SecurityWhitelists
        [NKD.Module.BusinessObjects.SecurityWhitelist](T1.SecurityWhitelist_SecurityWhitelistID, T1.SecurityWhitelist_OwnerApplicationID, T1.SecurityWhitelist_OwnerCompanyID, T1.SecurityWhitelist_OwnerContactID, T1.SecurityWhitelist_OwnerProjectID, T1.SecurityWhitelist_OwnerEntitySystemType, T1.SecurityWhitelist_OwnerTableType, T1.SecurityWhitelist_OwnerField, T1.SecurityWhitelist_OwnerReferenceID, T1.SecurityWhitelist_AccessorApplicationID, T1.SecurityWhitelist_AccessorCompanyID, T1.SecurityWhitelist_AccessorProjectID, T1.SecurityWhitelist_AccessorContactID, T1.SecurityWhitelist_AccessorRoleID, T1.SecurityWhitelist_CanCreate, T1.SecurityWhitelist_CanRead, T1.SecurityWhitelist_CanUpdate, T1.SecurityWhitelist_CanDelete, T1.SecurityWhitelist_Version, T1.SecurityWhitelist_VersionAntecedentID, T1.SecurityWhitelist_VersionCertainty, T1.SecurityWhitelist_VersionWorkflowInstanceID, T1.SecurityWhitelist_VersionUpdatedBy, T1.SecurityWhitelist_VersionDeletedBy, T1.SecurityWhitelist_VersionOwnerContactID, T1.SecurityWhitelist_VersionOwnerCompanyID, T1.SecurityWhitelist_VersionUpdated)
    FROM (
        SELECT 
            T.SecurityWhitelistID AS SecurityWhitelist_SecurityWhitelistID, 
            T.OwnerApplicationID AS SecurityWhitelist_OwnerApplicationID, 
            T.OwnerCompanyID AS SecurityWhitelist_OwnerCompanyID, 
            T.OwnerContactID AS SecurityWhitelist_OwnerContactID, 
            T.OwnerProjectID AS SecurityWhitelist_OwnerProjectID, 
            T.OwnerEntitySystemType AS SecurityWhitelist_OwnerEntitySystemType, 
            T.OwnerTableType AS SecurityWhitelist_OwnerTableType, 
            T.OwnerField AS SecurityWhitelist_OwnerField, 
            T.OwnerReferenceID AS SecurityWhitelist_OwnerReferenceID, 
            T.AccessorApplicationID AS SecurityWhitelist_AccessorApplicationID, 
            T.AccessorCompanyID AS SecurityWhitelist_AccessorCompanyID, 
            T.AccessorProjectID AS SecurityWhitelist_AccessorProjectID, 
            T.AccessorContactID AS SecurityWhitelist_AccessorContactID, 
            T.AccessorRoleID AS SecurityWhitelist_AccessorRoleID, 
            T.CanCreate AS SecurityWhitelist_CanCreate, 
            T.CanRead AS SecurityWhitelist_CanRead, 
            T.CanUpdate AS SecurityWhitelist_CanUpdate, 
            T.CanDelete AS SecurityWhitelist_CanDelete, 
            T.Version AS SecurityWhitelist_Version, 
            T.VersionAntecedentID AS SecurityWhitelist_VersionAntecedentID, 
            T.VersionCertainty AS SecurityWhitelist_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SecurityWhitelist_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SecurityWhitelist_VersionUpdatedBy, 
            T.VersionDeletedBy AS SecurityWhitelist_VersionDeletedBy, 
            T.VersionOwnerContactID AS SecurityWhitelist_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SecurityWhitelist_VersionOwnerCompanyID, 
            T.VersionUpdated AS SecurityWhitelist_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_SecurityWhitelist AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Servers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView574()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Servers
        [NKD.Module.BusinessObjects.Server](T1.Server_ServerID, T1.Server_Hostname, T1.Server_Domain, T1.Server_IP, T1.Server_ServerUniqueMachineCode1, T1.Server_ServerUniqueMachineCode2, T1.Server_ServerUniqueMachineCode3, T1.Server_Certificate1, T1.Server_Certificate2, T1.Server_Version, T1.Server_VersionAntecedentID, T1.Server_VersionCertainty, T1.Server_VersionWorkflowInstanceID, T1.Server_VersionUpdatedBy, T1.Server_VersionDeletedBy, T1.Server_VersionOwnerContactID, T1.Server_VersionOwnerCompanyID, T1.Server_VersionUpdated)
    FROM (
        SELECT 
            T.ServerID AS Server_ServerID, 
            T.Hostname AS Server_Hostname, 
            T.Domain AS Server_Domain, 
            T.IP AS Server_IP, 
            T.ServerUniqueMachineCode1 AS Server_ServerUniqueMachineCode1, 
            T.ServerUniqueMachineCode2 AS Server_ServerUniqueMachineCode2, 
            T.ServerUniqueMachineCode3 AS Server_ServerUniqueMachineCode3, 
            T.Certificate1 AS Server_Certificate1, 
            T.Certificate2 AS Server_Certificate2, 
            T.Version AS Server_Version, 
            T.VersionAntecedentID AS Server_VersionAntecedentID, 
            T.VersionCertainty AS Server_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Server_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Server_VersionUpdatedBy, 
            T.VersionDeletedBy AS Server_VersionDeletedBy, 
            T.VersionOwnerContactID AS Server_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Server_VersionOwnerCompanyID, 
            T.VersionUpdated AS Server_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Server AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Surveys.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView575()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Surveys
        [NKD.Module.BusinessObjects.Survey](T1.Survey_SurveyID, T1.Survey_HeaderID, T1.Survey_Depth, T1.Survey_Dip, T1.Survey_MagneticDip, T1.Survey_MagnetAffected, T1.Survey_OriginalAzimuth, T1.Survey_CorrectedAzimuth, T1.Survey_Gravity, T1.Survey_InstrumentModelID, T1.Survey_InstrumentAssetID, T1.Survey_Surveyed, T1.Survey_SurveyContactID, T1.Survey_SurveyCompanyID, T1.Survey_Version, T1.Survey_VersionAntecedentID, T1.Survey_VersionCertainty, T1.Survey_VersionWorkflowInstanceID, T1.Survey_VersionUpdatedBy, T1.Survey_VersionDeletedBy, T1.Survey_VersionOwnerContactID, T1.Survey_VersionOwnerCompanyID, T1.Survey_VersionUpdated)
    FROM (
        SELECT 
            T.SurveyID AS Survey_SurveyID, 
            T.HeaderID AS Survey_HeaderID, 
            T.Depth AS Survey_Depth, 
            T.Dip AS Survey_Dip, 
            T.MagneticDip AS Survey_MagneticDip, 
            T.MagnetAffected AS Survey_MagnetAffected, 
            T.OriginalAzimuth AS Survey_OriginalAzimuth, 
            T.CorrectedAzimuth AS Survey_CorrectedAzimuth, 
            T.Gravity AS Survey_Gravity, 
            T.InstrumentModelID AS Survey_InstrumentModelID, 
            T.InstrumentAssetID AS Survey_InstrumentAssetID, 
            T.Surveyed AS Survey_Surveyed, 
            T.SurveyContactID AS Survey_SurveyContactID, 
            T.SurveyCompanyID AS Survey_SurveyCompanyID, 
            T.Version AS Survey_Version, 
            T.VersionAntecedentID AS Survey_VersionAntecedentID, 
            T.VersionCertainty AS Survey_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Survey_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Survey_VersionUpdatedBy, 
            T.VersionDeletedBy AS Survey_VersionDeletedBy, 
            T.VersionOwnerContactID AS Survey_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Survey_VersionOwnerCompanyID, 
            T.VersionUpdated AS Survey_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Survey AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Tasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView576()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tasks
        [NKD.Module.BusinessObjects.Task](T1.Task_TaskID, T1.Task_TaskName, T1.Task_WorkTypeID, T1.Task_DefaultPriority, T1.Task_EstimatedDuration, T1.Task_EstimatedDurationUnitID, T1.Task_EstimatedLabourCosts, T1.Task_EstimatedCapitalCosts, T1.Task_EstimatedValue, T1.Task_PerformanceMetricParameterID, T1.Task_PerformanceMetricQuantity, T1.Task_Comment, T1.Task_Version, T1.Task_VersionAntecedentID, T1.Task_VersionCertainty, T1.Task_VersionWorkflowInstanceID, T1.Task_VersionUpdatedBy, T1.Task_VersionDeletedBy, T1.Task_VersionOwnerContactID, T1.Task_VersionOwnerCompanyID, T1.Task_VersionUpdated, T1.Task_WorkCompanyID, T1.Task_WorkContactID, T1.Task_GraphDataID, T1.Task_GraphDataGroupID, T1.Task_EstimatedIntangibleValue, T1.Task_EstimatedRevenue, T1.Task_EstimatedCompletion, T1.Task_EstimatedCompletionUnitID)
    FROM (
        SELECT 
            T.TaskID AS Task_TaskID, 
            T.TaskName AS Task_TaskName, 
            T.WorkTypeID AS Task_WorkTypeID, 
            T.DefaultPriority AS Task_DefaultPriority, 
            T.EstimatedDuration AS Task_EstimatedDuration, 
            T.EstimatedDurationUnitID AS Task_EstimatedDurationUnitID, 
            T.EstimatedLabourCosts AS Task_EstimatedLabourCosts, 
            T.EstimatedCapitalCosts AS Task_EstimatedCapitalCosts, 
            T.EstimatedValue AS Task_EstimatedValue, 
            T.PerformanceMetricParameterID AS Task_PerformanceMetricParameterID, 
            T.PerformanceMetricQuantity AS Task_PerformanceMetricQuantity, 
            T.Comment AS Task_Comment, 
            T.Version AS Task_Version, 
            T.VersionAntecedentID AS Task_VersionAntecedentID, 
            T.VersionCertainty AS Task_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Task_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Task_VersionUpdatedBy, 
            T.VersionDeletedBy AS Task_VersionDeletedBy, 
            T.VersionOwnerContactID AS Task_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Task_VersionOwnerCompanyID, 
            T.VersionUpdated AS Task_VersionUpdated, 
            T.WorkCompanyID AS Task_WorkCompanyID, 
            T.WorkContactID AS Task_WorkContactID, 
            T.GraphDataID AS Task_GraphDataID, 
            T.GraphDataGroupID AS Task_GraphDataGroupID, 
            T.EstimatedIntangibleValue AS Task_EstimatedIntangibleValue, 
            T.EstimatedRevenue AS Task_EstimatedRevenue, 
            T.EstimatedCompletion AS Task_EstimatedCompletion, 
            T.EstimatedCompletionUnitID AS Task_EstimatedCompletionUnitID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Task AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TaskDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView577()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskDatas
        [NKD.Module.BusinessObjects.TaskData](T1.TaskData_TaskDataID, T1.TaskData_ParentTaskDataID, T1.TaskData_TableType, T1.TaskData_ReferenceID, T1.TaskData_TaskID, T1.TaskData_Version, T1.TaskData_VersionAntecedentID, T1.TaskData_VersionCertainty, T1.TaskData_VersionWorkflowInstanceID, T1.TaskData_VersionUpdatedBy, T1.TaskData_VersionDeletedBy, T1.TaskData_VersionOwnerContactID, T1.TaskData_VersionOwnerCompanyID, T1.TaskData_VersionUpdated)
    FROM (
        SELECT 
            T.TaskDataID AS TaskData_TaskDataID, 
            T.ParentTaskDataID AS TaskData_ParentTaskDataID, 
            T.TableType AS TaskData_TableType, 
            T.ReferenceID AS TaskData_ReferenceID, 
            T.TaskID AS TaskData_TaskID, 
            T.Version AS TaskData_Version, 
            T.VersionAntecedentID AS TaskData_VersionAntecedentID, 
            T.VersionCertainty AS TaskData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TaskData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TaskData_VersionUpdatedBy, 
            T.VersionDeletedBy AS TaskData_VersionDeletedBy, 
            T.VersionOwnerContactID AS TaskData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TaskData_VersionOwnerCompanyID, 
            T.VersionUpdated AS TaskData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_TaskData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TaskRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView578()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskRelations
        [NKD.Module.BusinessObjects.TaskRelation](T1.TaskRelation_TaskRelationID, T1.TaskRelation_OriginalTaskID, T1.TaskRelation_RelatedTaskID, T1.TaskRelation_RelationTypeID, T1.TaskRelation_Related, T1.TaskRelation_Version, T1.TaskRelation_VersionAntecedentID, T1.TaskRelation_VersionCertainty, T1.TaskRelation_VersionWorkflowInstanceID, T1.TaskRelation_VersionUpdatedBy, T1.TaskRelation_VersionDeletedBy, T1.TaskRelation_VersionOwnerContactID, T1.TaskRelation_VersionOwnerCompanyID, T1.TaskRelation_VersionUpdated, T1.TaskRelation_Sequence)
    FROM (
        SELECT 
            T.TaskRelationID AS TaskRelation_TaskRelationID, 
            T.OriginalTaskID AS TaskRelation_OriginalTaskID, 
            T.RelatedTaskID AS TaskRelation_RelatedTaskID, 
            T.RelationTypeID AS TaskRelation_RelationTypeID, 
            T.Related AS TaskRelation_Related, 
            T.Version AS TaskRelation_Version, 
            T.VersionAntecedentID AS TaskRelation_VersionAntecedentID, 
            T.VersionCertainty AS TaskRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TaskRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TaskRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS TaskRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS TaskRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TaskRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS TaskRelation_VersionUpdated, 
            T.Sequence AS TaskRelation_Sequence, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_TaskRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Tenements.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView579()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tenements
        [NKD.Module.BusinessObjects.Tenement](T1.Tenement_TenementID, T1.Tenement_TenementName, T1.Tenement_TenementNumber, T1.Tenement_TenementDevelopmentPhase, T1.Tenement_CountryID, T1.Tenement_TenementBoundaryProvinceID, T1.Tenement_OwnerCompanyID, T1.Tenement_ApprovedByContactID, T1.Tenement_ValidFrom, T1.Tenement_Expiry, T1.Tenement_Version, T1.Tenement_VersionAntecedentID, T1.Tenement_VersionCertainty, T1.Tenement_VersionWorkflowInstanceID, T1.Tenement_VersionUpdatedBy, T1.Tenement_VersionDeletedBy, T1.Tenement_VersionOwnerContactID, T1.Tenement_VersionOwnerCompanyID, T1.Tenement_VersionUpdated)
    FROM (
        SELECT 
            T.TenementID AS Tenement_TenementID, 
            T.TenementName AS Tenement_TenementName, 
            T.TenementNumber AS Tenement_TenementNumber, 
            T.TenementDevelopmentPhase AS Tenement_TenementDevelopmentPhase, 
            T.CountryID AS Tenement_CountryID, 
            T.TenementBoundaryProvinceID AS Tenement_TenementBoundaryProvinceID, 
            T.OwnerCompanyID AS Tenement_OwnerCompanyID, 
            T.ApprovedByContactID AS Tenement_ApprovedByContactID, 
            T.ValidFrom AS Tenement_ValidFrom, 
            T.Expiry AS Tenement_Expiry, 
            T.Version AS Tenement_Version, 
            T.VersionAntecedentID AS Tenement_VersionAntecedentID, 
            T.VersionCertainty AS Tenement_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Tenement_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Tenement_VersionUpdatedBy, 
            T.VersionDeletedBy AS Tenement_VersionDeletedBy, 
            T.VersionOwnerContactID AS Tenement_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Tenement_VersionOwnerCompanyID, 
            T.VersionUpdated AS Tenement_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Tenement AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TenementCommodities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView580()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TenementCommodities
        [NKD.Module.BusinessObjects.TenementCommodity](T1.TenementCommodity_TenementCommodityID, T1.TenementCommodity_TenementID, T1.TenementCommodity_CommodityID, T1.TenementCommodity_Version, T1.TenementCommodity_VersionAntecedentID, T1.TenementCommodity_VersionCertainty, T1.TenementCommodity_VersionWorkflowInstanceID, T1.TenementCommodity_VersionUpdatedBy, T1.TenementCommodity_VersionDeletedBy, T1.TenementCommodity_VersionOwnerContactID, T1.TenementCommodity_VersionOwnerCompanyID, T1.TenementCommodity_VersionUpdated)
    FROM (
        SELECT 
            T.TenementCommodityID AS TenementCommodity_TenementCommodityID, 
            T.TenementID AS TenementCommodity_TenementID, 
            T.CommodityID AS TenementCommodity_CommodityID, 
            T.Version AS TenementCommodity_Version, 
            T.VersionAntecedentID AS TenementCommodity_VersionAntecedentID, 
            T.VersionCertainty AS TenementCommodity_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TenementCommodity_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TenementCommodity_VersionUpdatedBy, 
            T.VersionDeletedBy AS TenementCommodity_VersionDeletedBy, 
            T.VersionOwnerContactID AS TenementCommodity_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TenementCommodity_VersionOwnerCompanyID, 
            T.VersionUpdated AS TenementCommodity_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_TenementCommodity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TenementProvinces.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView581()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TenementProvinces
        [NKD.Module.BusinessObjects.TenementProvince](T1.TenementProvince_TenementProvinceID, T1.TenementProvince_TenementID, T1.TenementProvince_ProvinceID, T1.TenementProvince_Version, T1.TenementProvince_VersionAntecedentID, T1.TenementProvince_VersionCertainty, T1.TenementProvince_VersionWorkflowInstanceID, T1.TenementProvince_VersionUpdatedBy, T1.TenementProvince_VersionDeletedBy, T1.TenementProvince_VersionOwnerContactID, T1.TenementProvince_VersionOwnerCompanyID, T1.TenementProvince_VersionUpdated)
    FROM (
        SELECT 
            T.TenementProvinceID AS TenementProvince_TenementProvinceID, 
            T.TenementID AS TenementProvince_TenementID, 
            T.ProvinceID AS TenementProvince_ProvinceID, 
            T.Version AS TenementProvince_Version, 
            T.VersionAntecedentID AS TenementProvince_VersionAntecedentID, 
            T.VersionCertainty AS TenementProvince_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TenementProvince_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TenementProvince_VersionUpdatedBy, 
            T.VersionDeletedBy AS TenementProvince_VersionDeletedBy, 
            T.VersionOwnerContactID AS TenementProvince_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TenementProvince_VersionOwnerCompanyID, 
            T.VersionUpdated AS TenementProvince_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_TenementProvince AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TenementRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView582()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TenementRelations
        [NKD.Module.BusinessObjects.TenementRelation](T1.TenementRelation_TenementRelationID, T1.TenementRelation_TenementID, T1.TenementRelation_ParentTenementID, T1.TenementRelation_Version, T1.TenementRelation_VersionAntecedentID, T1.TenementRelation_VersionCertainty, T1.TenementRelation_VersionWorkflowInstanceID, T1.TenementRelation_VersionUpdatedBy, T1.TenementRelation_VersionDeletedBy, T1.TenementRelation_VersionOwnerContactID, T1.TenementRelation_VersionOwnerCompanyID, T1.TenementRelation_VersionUpdated)
    FROM (
        SELECT 
            T.TenementRelationID AS TenementRelation_TenementRelationID, 
            T.TenementID AS TenementRelation_TenementID, 
            T.ParentTenementID AS TenementRelation_ParentTenementID, 
            T.Version AS TenementRelation_Version, 
            T.VersionAntecedentID AS TenementRelation_VersionAntecedentID, 
            T.VersionCertainty AS TenementRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TenementRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TenementRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS TenementRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS TenementRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TenementRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS TenementRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_TenementRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.UsageAuditViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView583()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UsageAuditViews
        [NKD.Module.BusinessObjects.UsageAuditView](T1.UsageAuditView_UsageAuditID, T1.UsageAuditView_UsageID, T1.UsageAuditView_UsageAuditTypeID, T1.UsageAuditView_EntitySystemType, T1.UsageAuditView_EntityID, T1.UsageAuditView_Action, T1.UsageAuditView_Audited, T1.UsageAuditView_ContactID, T1.UsageAuditView_Version, T1.UsageAuditView_VersionAntecedentID, T1.UsageAuditView_VersionCertainty, T1.UsageAuditView_VersionWorkflowInstanceID, T1.UsageAuditView_VersionUpdatedBy, T1.UsageAuditView_VersionDeletedBy, T1.UsageAuditView_VersionOwnerContactID, T1.UsageAuditView_VersionOwnerCompanyID, T1.UsageAuditView_VersionUpdated)
    FROM (
        SELECT 
            T.UsageAuditID AS UsageAuditView_UsageAuditID, 
            T.UsageID AS UsageAuditView_UsageID, 
            T.UsageAuditTypeID AS UsageAuditView_UsageAuditTypeID, 
            T.EntitySystemType AS UsageAuditView_EntitySystemType, 
            T.EntityID AS UsageAuditView_EntityID, 
            T.Action AS UsageAuditView_Action, 
            T.Audited AS UsageAuditView_Audited, 
            T.ContactID AS UsageAuditView_ContactID, 
            T.Version AS UsageAuditView_Version, 
            T.VersionAntecedentID AS UsageAuditView_VersionAntecedentID, 
            T.VersionCertainty AS UsageAuditView_VersionCertainty, 
            T.VersionWorkflowInstanceID AS UsageAuditView_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS UsageAuditView_VersionUpdatedBy, 
            T.VersionDeletedBy AS UsageAuditView_VersionDeletedBy, 
            T.VersionOwnerContactID AS UsageAuditView_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS UsageAuditView_VersionOwnerCompanyID, 
            T.VersionUpdated AS UsageAuditView_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_UsageAudit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WaterFlows.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView584()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WaterFlows
        [NKD.Module.BusinessObjects.WaterFlow](T1.WaterFlow_WaterFlowID, T1.WaterFlow_HeaderID, T1.WaterFlow_TestDepth, T1.WaterFlow_TestDate, T1.WaterFlow_SampleTypeID, T1.WaterFlow_SampleNumber, T1.WaterFlow_FlowTestTypeID, T1.WaterFlow_FlowHeight, T1.WaterFlow_FlowRate, T1.WaterFlow_Ph, T1.WaterFlow_TotalDissolvedSolids, T1.WaterFlow_ElectricalConductivity, T1.WaterFlow_Temperature, T1.WaterFlow_Pressure, T1.WaterFlow_Comment, T1.WaterFlow_Version, T1.WaterFlow_VersionAntecedentID, T1.WaterFlow_VersionCertainty, T1.WaterFlow_VersionWorkflowInstanceID, T1.WaterFlow_VersionUpdatedBy, T1.WaterFlow_VersionDeletedBy, T1.WaterFlow_VersionOwnerContactID, T1.WaterFlow_VersionOwnerCompanyID, T1.WaterFlow_VersionUpdated)
    FROM (
        SELECT 
            T.WaterFlowID AS WaterFlow_WaterFlowID, 
            T.HeaderID AS WaterFlow_HeaderID, 
            T.TestDepth AS WaterFlow_TestDepth, 
            T.TestDate AS WaterFlow_TestDate, 
            T.SampleTypeID AS WaterFlow_SampleTypeID, 
            T.SampleNumber AS WaterFlow_SampleNumber, 
            T.FlowTestTypeID AS WaterFlow_FlowTestTypeID, 
            T.FlowHeight AS WaterFlow_FlowHeight, 
            T.FlowRate AS WaterFlow_FlowRate, 
            T.Ph AS WaterFlow_Ph, 
            T.TotalDissolvedSolids AS WaterFlow_TotalDissolvedSolids, 
            T.ElectricalConductivity AS WaterFlow_ElectricalConductivity, 
            T.Temperature AS WaterFlow_Temperature, 
            T.Pressure AS WaterFlow_Pressure, 
            T.Comment AS WaterFlow_Comment, 
            T.Version AS WaterFlow_Version, 
            T.VersionAntecedentID AS WaterFlow_VersionAntecedentID, 
            T.VersionCertainty AS WaterFlow_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WaterFlow_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WaterFlow_VersionUpdatedBy, 
            T.VersionDeletedBy AS WaterFlow_VersionDeletedBy, 
            T.VersionOwnerContactID AS WaterFlow_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WaterFlow_VersionOwnerCompanyID, 
            T.VersionUpdated AS WaterFlow_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_WaterFlow AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LithologyAdjectives.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView585()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LithologyAdjectives
        [NKD.Module.BusinessObjects.LithologyAdjective](T1.LithologyAdjective_LithologyAdjectiveID, T1.LithologyAdjective_LithologyID, T1.LithologyAdjective_AdjectiveID, T1.LithologyAdjective_Sequence, T1.LithologyAdjective_Version, T1.LithologyAdjective_VersionAntecedentID, T1.LithologyAdjective_VersionCertainty, T1.LithologyAdjective_VersionWorkflowInstanceID, T1.LithologyAdjective_VersionUpdatedBy, T1.LithologyAdjective_VersionDeletedBy, T1.LithologyAdjective_VersionOwnerContactID, T1.LithologyAdjective_VersionOwnerCompanyID, T1.LithologyAdjective_VersionUpdated)
    FROM (
        SELECT 
            T.LithologyAdjectiveID AS LithologyAdjective_LithologyAdjectiveID, 
            T.LithologyID AS LithologyAdjective_LithologyID, 
            T.AdjectiveID AS LithologyAdjective_AdjectiveID, 
            T.Sequence AS LithologyAdjective_Sequence, 
            T.Version AS LithologyAdjective_Version, 
            T.VersionAntecedentID AS LithologyAdjective_VersionAntecedentID, 
            T.VersionCertainty AS LithologyAdjective_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LithologyAdjective_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LithologyAdjective_VersionUpdatedBy, 
            T.VersionDeletedBy AS LithologyAdjective_VersionDeletedBy, 
            T.VersionOwnerContactID AS LithologyAdjective_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LithologyAdjective_VersionOwnerCompanyID, 
            T.VersionUpdated AS LithologyAdjective_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LithologyAdjective AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LithologySedimentaryFeatures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView586()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LithologySedimentaryFeatures
        [NKD.Module.BusinessObjects.LithologySedimentaryFeature](T1.LithologySedimentaryFeature_LithologySedimentaryFeatureID, T1.LithologySedimentaryFeature_LithologyID, T1.LithologySedimentaryFeature_SedimentaryFeatureID, T1.LithologySedimentaryFeature_Sequence, T1.LithologySedimentaryFeature_Version, T1.LithologySedimentaryFeature_VersionAntecedentID, T1.LithologySedimentaryFeature_VersionCertainty, T1.LithologySedimentaryFeature_VersionWorkflowInstanceID, T1.LithologySedimentaryFeature_VersionUpdatedBy, T1.LithologySedimentaryFeature_VersionDeletedBy, T1.LithologySedimentaryFeature_VersionOwnerContactID, T1.LithologySedimentaryFeature_VersionOwnerCompanyID, T1.LithologySedimentaryFeature_VersionUpdated)
    FROM (
        SELECT 
            T.LithologySedimentaryFeatureID AS LithologySedimentaryFeature_LithologySedimentaryFeatureID, 
            T.LithologyID AS LithologySedimentaryFeature_LithologyID, 
            T.SedimentaryFeatureID AS LithologySedimentaryFeature_SedimentaryFeatureID, 
            T.Sequence AS LithologySedimentaryFeature_Sequence, 
            T.Version AS LithologySedimentaryFeature_Version, 
            T.VersionAntecedentID AS LithologySedimentaryFeature_VersionAntecedentID, 
            T.VersionCertainty AS LithologySedimentaryFeature_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LithologySedimentaryFeature_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LithologySedimentaryFeature_VersionUpdatedBy, 
            T.VersionDeletedBy AS LithologySedimentaryFeature_VersionDeletedBy, 
            T.VersionOwnerContactID AS LithologySedimentaryFeature_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LithologySedimentaryFeature_VersionOwnerCompanyID, 
            T.VersionUpdated AS LithologySedimentaryFeature_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LithologySedimentaryFeature AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.HeaderHolePurposes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView587()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing HeaderHolePurposes
        [NKD.Module.BusinessObjects.HeaderHolePurpose](T1.HeaderHolePurpose_HeaderHolePurposeID, T1.HeaderHolePurpose_HeaderID, T1.HeaderHolePurpose_HolePurposeID, T1.HeaderHolePurpose_Sequence, T1.HeaderHolePurpose_Version, T1.HeaderHolePurpose_VersionAntecedentID, T1.HeaderHolePurpose_VersionCertainty, T1.HeaderHolePurpose_VersionWorkflowInstanceID, T1.HeaderHolePurpose_VersionUpdatedBy, T1.HeaderHolePurpose_VersionDeletedBy, T1.HeaderHolePurpose_VersionOwnerContactID, T1.HeaderHolePurpose_VersionOwnerCompanyID, T1.HeaderHolePurpose_VersionUpdated)
    FROM (
        SELECT 
            T.HeaderHolePurposeID AS HeaderHolePurpose_HeaderHolePurposeID, 
            T.HeaderID AS HeaderHolePurpose_HeaderID, 
            T.HolePurposeID AS HeaderHolePurpose_HolePurposeID, 
            T.Sequence AS HeaderHolePurpose_Sequence, 
            T.Version AS HeaderHolePurpose_Version, 
            T.VersionAntecedentID AS HeaderHolePurpose_VersionAntecedentID, 
            T.VersionCertainty AS HeaderHolePurpose_VersionCertainty, 
            T.VersionWorkflowInstanceID AS HeaderHolePurpose_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS HeaderHolePurpose_VersionUpdatedBy, 
            T.VersionDeletedBy AS HeaderHolePurpose_VersionDeletedBy, 
            T.VersionOwnerContactID AS HeaderHolePurpose_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS HeaderHolePurpose_VersionOwnerCompanyID, 
            T.VersionUpdated AS HeaderHolePurpose_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_HeaderHolePurpose AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LithologyRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView588()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LithologyRelations
        [NKD.Module.BusinessObjects.LithologyRelation](T1.LithologyRelation_LithologyRelationID, T1.LithologyRelation_OriginalLithologyID, T1.LithologyRelation_RelatedLithologyID, T1.LithologyRelation_RelationTypeID, T1.LithologyRelation_Related, T1.LithologyRelation_Sequence, T1.LithologyRelation_Version, T1.LithologyRelation_VersionAntecedentID, T1.LithologyRelation_VersionCertainty, T1.LithologyRelation_VersionWorkflowInstanceID, T1.LithologyRelation_VersionUpdatedBy, T1.LithologyRelation_VersionDeletedBy, T1.LithologyRelation_VersionOwnerContactID, T1.LithologyRelation_VersionOwnerCompanyID, T1.LithologyRelation_VersionUpdated)
    FROM (
        SELECT 
            T.LithologyRelationID AS LithologyRelation_LithologyRelationID, 
            T.OriginalLithologyID AS LithologyRelation_OriginalLithologyID, 
            T.RelatedLithologyID AS LithologyRelation_RelatedLithologyID, 
            T.RelationTypeID AS LithologyRelation_RelationTypeID, 
            T.Related AS LithologyRelation_Related, 
            T.Sequence AS LithologyRelation_Sequence, 
            T.Version AS LithologyRelation_Version, 
            T.VersionAntecedentID AS LithologyRelation_VersionAntecedentID, 
            T.VersionCertainty AS LithologyRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LithologyRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LithologyRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS LithologyRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS LithologyRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LithologyRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS LithologyRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LithologyRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.FileDataWorkTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView589()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FileDataWorkTypes
        [NKD.Module.BusinessObjects.FileDataWorkType](T1.FileDataWorkType_FileDataWorkTypeID, T1.FileDataWorkType_FileDataID, T1.FileDataWorkType_WorkTypeID, T1.FileDataWorkType_ProcessName, T1.FileDataWorkType_Sequence, T1.FileDataWorkType_Context, T1.FileDataWorkType_Version, T1.FileDataWorkType_VersionAntecedentID, T1.FileDataWorkType_VersionCertainty, T1.FileDataWorkType_VersionWorkflowInstanceID, T1.FileDataWorkType_VersionUpdatedBy, T1.FileDataWorkType_VersionDeletedBy, T1.FileDataWorkType_VersionOwnerContactID, T1.FileDataWorkType_VersionOwnerCompanyID, T1.FileDataWorkType_VersionUpdated)
    FROM (
        SELECT 
            T.FileDataWorkTypeID AS FileDataWorkType_FileDataWorkTypeID, 
            T.FileDataID AS FileDataWorkType_FileDataID, 
            T.WorkTypeID AS FileDataWorkType_WorkTypeID, 
            T.ProcessName AS FileDataWorkType_ProcessName, 
            T.Sequence AS FileDataWorkType_Sequence, 
            T.Context AS FileDataWorkType_Context, 
            T.Version AS FileDataWorkType_Version, 
            T.VersionAntecedentID AS FileDataWorkType_VersionAntecedentID, 
            T.VersionCertainty AS FileDataWorkType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS FileDataWorkType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS FileDataWorkType_VersionUpdatedBy, 
            T.VersionDeletedBy AS FileDataWorkType_VersionDeletedBy, 
            T.VersionOwnerContactID AS FileDataWorkType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS FileDataWorkType_VersionOwnerCompanyID, 
            T.VersionUpdated AS FileDataWorkType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_FileDataWorkType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryWorkflowTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView590()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryWorkflowTypes
        [NKD.Module.BusinessObjects.DictionaryWorkflowType](T1.DictionaryWorkflowType_WorkflowTypeID, T1.DictionaryWorkflowType_StandardWorkflowTypeName, T1.DictionaryWorkflowType_CustomWorkflowTypeName, T1.DictionaryWorkflowType_Description, T1.DictionaryWorkflowType_Version, T1.DictionaryWorkflowType_VersionAntecedentID, T1.DictionaryWorkflowType_VersionCertainty, T1.DictionaryWorkflowType_VersionWorkflowInstanceID, T1.DictionaryWorkflowType_VersionUpdatedBy, T1.DictionaryWorkflowType_VersionDeletedBy, T1.DictionaryWorkflowType_VersionOwnerContactID, T1.DictionaryWorkflowType_VersionOwnerCompanyID, T1.DictionaryWorkflowType_VersionUpdated)
    FROM (
        SELECT 
            T.WorkflowTypeID AS DictionaryWorkflowType_WorkflowTypeID, 
            T.StandardWorkflowTypeName AS DictionaryWorkflowType_StandardWorkflowTypeName, 
            T.CustomWorkflowTypeName AS DictionaryWorkflowType_CustomWorkflowTypeName, 
            T.Description AS DictionaryWorkflowType_Description, 
            T.Version AS DictionaryWorkflowType_Version, 
            T.VersionAntecedentID AS DictionaryWorkflowType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryWorkflowType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryWorkflowType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryWorkflowType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryWorkflowType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryWorkflowType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryWorkflowType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryWorkflowType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryWorkflowType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Workflows.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView591()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Workflows
        [NKD.Module.BusinessObjects.Workflow](T1.Workflow_WorkflowID, T1.Workflow_WorkflowName, T1.Workflow_WorkflowTypeID, T1.Workflow_XAML, T1.Workflow_DLL, T1.Workflow_FullName, T1.Workflow_Version, T1.Workflow_VersionAntecedentID, T1.Workflow_VersionCertainty, T1.Workflow_VersionWorkflowInstanceID, T1.Workflow_VersionUpdatedBy, T1.Workflow_VersionDeletedBy, T1.Workflow_VersionOwnerContactID, T1.Workflow_VersionOwnerCompanyID, T1.Workflow_VersionUpdated, T1.Workflow_ApplicationID)
    FROM (
        SELECT 
            T.WorkflowID AS Workflow_WorkflowID, 
            T.WorkflowName AS Workflow_WorkflowName, 
            T.WorkflowTypeID AS Workflow_WorkflowTypeID, 
            T.XAML AS Workflow_XAML, 
            T.DLL AS Workflow_DLL, 
            T.FullName AS Workflow_FullName, 
            T.Version AS Workflow_Version, 
            T.VersionAntecedentID AS Workflow_VersionAntecedentID, 
            T.VersionCertainty AS Workflow_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Workflow_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Workflow_VersionUpdatedBy, 
            T.VersionDeletedBy AS Workflow_VersionDeletedBy, 
            T.VersionOwnerContactID AS Workflow_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Workflow_VersionOwnerCompanyID, 
            T.VersionUpdated AS Workflow_VersionUpdated, 
            T.ApplicationID AS Workflow_ApplicationID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Workflow AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupSubsamples.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView592()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupSubsamples
        [NKD.Module.BusinessObjects.AssayGroupSubsample](T1.AssayGroupSubsample_AssayGroupSubsampleID, T1.AssayGroupSubsample_AssayGroupID, T1.AssayGroupSubsample_AssayGroupWorkflowProcedureID, T1.AssayGroupSubsample_Sequence, T1.AssayGroupSubsample_LabSubsampleName, T1.AssayGroupSubsample_SampleAntecedentID, T1.AssayGroupSubsample_FromDepth, T1.AssayGroupSubsample_ToDepth, T1.AssayGroupSubsample_AgitationMethodID, T1.AssayGroupSubsample_DurationProcedureSeconds, T1.AssayGroupSubsample_DurationTotalSeconds, T1.AssayGroupSubsample_RackBlock, T1.AssayGroupSubsample_RackPosition, T1.AssayGroupSubsample_SubsampledBy, T1.AssayGroupSubsample_Subsampled, T1.AssayGroupSubsample_Comment, T1.AssayGroupSubsample_Version, T1.AssayGroupSubsample_VersionAntecedentID, T1.AssayGroupSubsample_VersionCertainty, T1.AssayGroupSubsample_VersionWorkflowInstanceID, T1.AssayGroupSubsample_VersionUpdatedBy, T1.AssayGroupSubsample_VersionDeletedBy, T1.AssayGroupSubsample_VersionOwnerContactID, T1.AssayGroupSubsample_VersionOwnerCompanyID, T1.AssayGroupSubsample_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupSubsampleID AS AssayGroupSubsample_AssayGroupSubsampleID, 
            T.AssayGroupID AS AssayGroupSubsample_AssayGroupID, 
            T.AssayGroupWorkflowProcedureID AS AssayGroupSubsample_AssayGroupWorkflowProcedureID, 
            T.Sequence AS AssayGroupSubsample_Sequence, 
            T.LabSubsampleName AS AssayGroupSubsample_LabSubsampleName, 
            T.SampleAntecedentID AS AssayGroupSubsample_SampleAntecedentID, 
            T.FromDepth AS AssayGroupSubsample_FromDepth, 
            T.ToDepth AS AssayGroupSubsample_ToDepth, 
            T.AgitationMethodID AS AssayGroupSubsample_AgitationMethodID, 
            T.DurationProcedureSeconds AS AssayGroupSubsample_DurationProcedureSeconds, 
            T.DurationTotalSeconds AS AssayGroupSubsample_DurationTotalSeconds, 
            T.RackBlock AS AssayGroupSubsample_RackBlock, 
            T.RackPosition AS AssayGroupSubsample_RackPosition, 
            T.SubsampledBy AS AssayGroupSubsample_SubsampledBy, 
            T.Subsampled AS AssayGroupSubsample_Subsampled, 
            T.Comment AS AssayGroupSubsample_Comment, 
            T.Version AS AssayGroupSubsample_Version, 
            T.VersionAntecedentID AS AssayGroupSubsample_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupSubsample_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupSubsample_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupSubsample_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupSubsample_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupSubsample_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupSubsample_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupSubsample_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsample AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupSubsampleChemicals.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView593()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupSubsampleChemicals
        [NKD.Module.BusinessObjects.AssayGroupSubsampleChemical](T1.AssayGroupSubsampleChemical_AssayGroupSubsampleChemicalID, T1.AssayGroupSubsampleChemical_AssayGroupSubsampleID, T1.AssayGroupSubsampleChemical_ChemicalID, T1.AssayGroupSubsampleChemical_Moles, T1.AssayGroupSubsampleChemical_Version, T1.AssayGroupSubsampleChemical_VersionAntecedentID, T1.AssayGroupSubsampleChemical_VersionCertainty, T1.AssayGroupSubsampleChemical_VersionWorkflowInstanceID, T1.AssayGroupSubsampleChemical_VersionUpdatedBy, T1.AssayGroupSubsampleChemical_VersionDeletedBy, T1.AssayGroupSubsampleChemical_VersionOwnerContactID, T1.AssayGroupSubsampleChemical_VersionOwnerCompanyID, T1.AssayGroupSubsampleChemical_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupSubsampleChemicalID AS AssayGroupSubsampleChemical_AssayGroupSubsampleChemicalID, 
            T.AssayGroupSubsampleID AS AssayGroupSubsampleChemical_AssayGroupSubsampleID, 
            T.ChemicalID AS AssayGroupSubsampleChemical_ChemicalID, 
            T.Moles AS AssayGroupSubsampleChemical_Moles, 
            T.Version AS AssayGroupSubsampleChemical_Version, 
            T.VersionAntecedentID AS AssayGroupSubsampleChemical_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupSubsampleChemical_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupSubsampleChemical_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupSubsampleChemical_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupSubsampleChemical_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupSubsampleChemical_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupSubsampleChemical_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupSubsampleChemical_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleChemical AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupSubsampleEquipments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView594()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupSubsampleEquipments
        [NKD.Module.BusinessObjects.AssayGroupSubsampleEquipment](T1.AssayGroupSubsampleEquipment_AssayGroupSubsampleEquipmentID, T1.AssayGroupSubsampleEquipment_AssayGroupSubsampleID, T1.AssayGroupSubsampleEquipment_AssetID, T1.AssayGroupSubsampleEquipment_Version, T1.AssayGroupSubsampleEquipment_VersionAntecedentID, T1.AssayGroupSubsampleEquipment_VersionCertainty, T1.AssayGroupSubsampleEquipment_VersionWorkflowInstanceID, T1.AssayGroupSubsampleEquipment_VersionUpdatedBy, T1.AssayGroupSubsampleEquipment_VersionDeletedBy, T1.AssayGroupSubsampleEquipment_VersionOwnerContactID, T1.AssayGroupSubsampleEquipment_VersionOwnerCompanyID, T1.AssayGroupSubsampleEquipment_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupSubsampleEquipmentID AS AssayGroupSubsampleEquipment_AssayGroupSubsampleEquipmentID, 
            T.AssayGroupSubsampleID AS AssayGroupSubsampleEquipment_AssayGroupSubsampleID, 
            T.AssetID AS AssayGroupSubsampleEquipment_AssetID, 
            T.Version AS AssayGroupSubsampleEquipment_Version, 
            T.VersionAntecedentID AS AssayGroupSubsampleEquipment_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupSubsampleEquipment_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupSubsampleEquipment_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupSubsampleEquipment_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupSubsampleEquipment_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupSubsampleEquipment_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupSubsampleEquipment_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupSubsampleEquipment_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleEquipment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupSubsamplePreconditions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView595()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupSubsamplePreconditions
        [NKD.Module.BusinessObjects.AssayGroupSubsamplePrecondition](T1.AssayGroupSubsamplePrecondition_AssayGroupSubsamplePreconditionID, T1.AssayGroupSubsamplePrecondition_AssayGroupSubsampleID, T1.AssayGroupSubsamplePrecondition_PreconditionName, T1.AssayGroupSubsamplePrecondition_Version, T1.AssayGroupSubsamplePrecondition_VersionAntecedentID, T1.AssayGroupSubsamplePrecondition_VersionCertainty, T1.AssayGroupSubsamplePrecondition_VersionWorkflowInstanceID, T1.AssayGroupSubsamplePrecondition_VersionUpdatedBy, T1.AssayGroupSubsamplePrecondition_VersionDeletedBy, T1.AssayGroupSubsamplePrecondition_VersionOwnerContactID, T1.AssayGroupSubsamplePrecondition_VersionOwnerCompanyID, T1.AssayGroupSubsamplePrecondition_VersionUpdated, T1.AssayGroupSubsamplePrecondition_AssayPreconditionTypeID, T1.AssayGroupSubsamplePrecondition_PreconditionParameterID, T1.AssayGroupSubsamplePrecondition_PreconditionMinimum, T1.AssayGroupSubsamplePrecondition_PreconditionMaximum, T1.AssayGroupSubsamplePrecondition_Precondition)
    FROM (
        SELECT 
            T.AssayGroupSubsamplePreconditionID AS AssayGroupSubsamplePrecondition_AssayGroupSubsamplePreconditionID, 
            T.AssayGroupSubsampleID AS AssayGroupSubsamplePrecondition_AssayGroupSubsampleID, 
            T.PreconditionName AS AssayGroupSubsamplePrecondition_PreconditionName, 
            T.Version AS AssayGroupSubsamplePrecondition_Version, 
            T.VersionAntecedentID AS AssayGroupSubsamplePrecondition_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupSubsamplePrecondition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupSubsamplePrecondition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupSubsamplePrecondition_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupSubsamplePrecondition_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupSubsamplePrecondition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupSubsamplePrecondition_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupSubsamplePrecondition_VersionUpdated, 
            T.AssayPreconditionTypeID AS AssayGroupSubsamplePrecondition_AssayPreconditionTypeID, 
            T.PreconditionParameterID AS AssayGroupSubsamplePrecondition_PreconditionParameterID, 
            T.PreconditionMinimum AS AssayGroupSubsamplePrecondition_PreconditionMinimum, 
            T.PreconditionMaximum AS AssayGroupSubsamplePrecondition_PreconditionMaximum, 
            T.Precondition AS AssayGroupSubsamplePrecondition_Precondition, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsamplePrecondition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupSubsampleRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView596()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupSubsampleRelations
        [NKD.Module.BusinessObjects.AssayGroupSubsampleRelation](T1.AssayGroupSubsampleRelation_AssayGroupSubsampleRelationID, T1.AssayGroupSubsampleRelation_SourceSubsampleID, T1.AssayGroupSubsampleRelation_DestinationSubsampleID, T1.AssayGroupSubsampleRelation_Version, T1.AssayGroupSubsampleRelation_VersionAntecedentID, T1.AssayGroupSubsampleRelation_VersionCertainty, T1.AssayGroupSubsampleRelation_VersionWorkflowInstanceID, T1.AssayGroupSubsampleRelation_VersionUpdatedBy, T1.AssayGroupSubsampleRelation_VersionDeletedBy, T1.AssayGroupSubsampleRelation_VersionOwnerContactID, T1.AssayGroupSubsampleRelation_VersionOwnerCompanyID, T1.AssayGroupSubsampleRelation_VersionUpdated, T1.AssayGroupSubsampleRelation_Sequence)
    FROM (
        SELECT 
            T.AssayGroupSubsampleRelationID AS AssayGroupSubsampleRelation_AssayGroupSubsampleRelationID, 
            T.SourceSubsampleID AS AssayGroupSubsampleRelation_SourceSubsampleID, 
            T.DestinationSubsampleID AS AssayGroupSubsampleRelation_DestinationSubsampleID, 
            T.Version AS AssayGroupSubsampleRelation_Version, 
            T.VersionAntecedentID AS AssayGroupSubsampleRelation_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupSubsampleRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupSubsampleRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupSubsampleRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupSubsampleRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupSubsampleRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupSubsampleRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupSubsampleRelation_VersionUpdated, 
            T.Sequence AS AssayGroupSubsampleRelation_Sequence, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupTestEquipments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView597()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupTestEquipments
        [NKD.Module.BusinessObjects.AssayGroupTestEquipment](T1.AssayGroupTestEquipment_AssayGroupTestEquipmentID, T1.AssayGroupTestEquipment_AssayGroupTestID, T1.AssayGroupTestEquipment_AssetID, T1.AssayGroupTestEquipment_Version, T1.AssayGroupTestEquipment_VersionAntecedentID, T1.AssayGroupTestEquipment_VersionCertainty, T1.AssayGroupTestEquipment_VersionWorkflowInstanceID, T1.AssayGroupTestEquipment_VersionUpdatedBy, T1.AssayGroupTestEquipment_VersionDeletedBy, T1.AssayGroupTestEquipment_VersionOwnerContactID, T1.AssayGroupTestEquipment_VersionOwnerCompanyID, T1.AssayGroupTestEquipment_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupTestEquipmentID AS AssayGroupTestEquipment_AssayGroupTestEquipmentID, 
            T.AssayGroupTestID AS AssayGroupTestEquipment_AssayGroupTestID, 
            T.AssetID AS AssayGroupTestEquipment_AssetID, 
            T.Version AS AssayGroupTestEquipment_Version, 
            T.VersionAntecedentID AS AssayGroupTestEquipment_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupTestEquipment_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupTestEquipment_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupTestEquipment_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupTestEquipment_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupTestEquipment_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupTestEquipment_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupTestEquipment_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestEquipment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupWorkflows.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView598()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupWorkflows
        [NKD.Module.BusinessObjects.AssayGroupWorkflow](T1.AssayGroupWorkflow_AssayGroupWorkflowID, T1.AssayGroupWorkflow_AssayGroupID, T1.AssayGroupWorkflow_WorkflowName, T1.AssayGroupWorkflow_WorkflowID, T1.AssayGroupWorkflow_Version, T1.AssayGroupWorkflow_VersionAntecedentID, T1.AssayGroupWorkflow_VersionCertainty, T1.AssayGroupWorkflow_VersionWorkflowInstanceID, T1.AssayGroupWorkflow_VersionUpdatedBy, T1.AssayGroupWorkflow_VersionDeletedBy, T1.AssayGroupWorkflow_VersionOwnerContactID, T1.AssayGroupWorkflow_VersionOwnerCompanyID, T1.AssayGroupWorkflow_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupWorkflowID AS AssayGroupWorkflow_AssayGroupWorkflowID, 
            T.AssayGroupID AS AssayGroupWorkflow_AssayGroupID, 
            T.WorkflowName AS AssayGroupWorkflow_WorkflowName, 
            T.WorkflowID AS AssayGroupWorkflow_WorkflowID, 
            T.Version AS AssayGroupWorkflow_Version, 
            T.VersionAntecedentID AS AssayGroupWorkflow_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupWorkflow_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupWorkflow_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupWorkflow_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupWorkflow_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupWorkflow_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupWorkflow_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupWorkflow_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflow AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupWorkflowProcedures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView599()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupWorkflowProcedures
        [NKD.Module.BusinessObjects.AssayGroupWorkflowProcedure](T1.AssayGroupWorkflowProcedure_AssayGroupWorkflowProcedureID, T1.AssayGroupWorkflowProcedure_AssayGroupWorkflowID, T1.AssayGroupWorkflowProcedure_AssayProcedureProtocolID, T1.AssayGroupWorkflowProcedure_WorkflowStateName, T1.AssayGroupWorkflowProcedure_Sequence, T1.AssayGroupWorkflowProcedure_Version, T1.AssayGroupWorkflowProcedure_VersionAntecedentID, T1.AssayGroupWorkflowProcedure_VersionCertainty, T1.AssayGroupWorkflowProcedure_VersionWorkflowInstanceID, T1.AssayGroupWorkflowProcedure_VersionUpdatedBy, T1.AssayGroupWorkflowProcedure_VersionDeletedBy, T1.AssayGroupWorkflowProcedure_VersionOwnerContactID, T1.AssayGroupWorkflowProcedure_VersionOwnerCompanyID, T1.AssayGroupWorkflowProcedure_VersionUpdated)
    FROM (
        SELECT 
            T.AssayGroupWorkflowProcedureID AS AssayGroupWorkflowProcedure_AssayGroupWorkflowProcedureID, 
            T.AssayGroupWorkflowID AS AssayGroupWorkflowProcedure_AssayGroupWorkflowID, 
            T.AssayProcedureProtocolID AS AssayGroupWorkflowProcedure_AssayProcedureProtocolID, 
            T.WorkflowStateName AS AssayGroupWorkflowProcedure_WorkflowStateName, 
            T.Sequence AS AssayGroupWorkflowProcedure_Sequence, 
            T.Version AS AssayGroupWorkflowProcedure_Version, 
            T.VersionAntecedentID AS AssayGroupWorkflowProcedure_VersionAntecedentID, 
            T.VersionCertainty AS AssayGroupWorkflowProcedure_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayGroupWorkflowProcedure_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayGroupWorkflowProcedure_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayGroupWorkflowProcedure_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayGroupWorkflowProcedure_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayGroupWorkflowProcedure_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayGroupWorkflowProcedure_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflowProcedure AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayProcedures.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView600()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayProcedures
        [NKD.Module.BusinessObjects.AssayProcedure](T1.AssayProcedure_AssayProcedureID, T1.AssayProcedure_AssayProcedureTypeID, T1.AssayProcedure_AssayProcedureName, T1.AssayProcedure_Version, T1.AssayProcedure_VersionAntecedentID, T1.AssayProcedure_VersionCertainty, T1.AssayProcedure_VersionWorkflowInstanceID, T1.AssayProcedure_VersionUpdatedBy, T1.AssayProcedure_VersionDeletedBy, T1.AssayProcedure_VersionOwnerContactID, T1.AssayProcedure_VersionOwnerCompanyID, T1.AssayProcedure_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureID AS AssayProcedure_AssayProcedureID, 
            T.AssayProcedureTypeID AS AssayProcedure_AssayProcedureTypeID, 
            T.AssayProcedureName AS AssayProcedure_AssayProcedureName, 
            T.Version AS AssayProcedure_Version, 
            T.VersionAntecedentID AS AssayProcedure_VersionAntecedentID, 
            T.VersionCertainty AS AssayProcedure_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayProcedure_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayProcedure_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayProcedure_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayProcedure_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayProcedure_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayProcedure_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayProcedure AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayProcedureProtocols.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView601()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayProcedureProtocols
        [NKD.Module.BusinessObjects.AssayProcedureProtocol](T1.AssayProcedureProtocol_AssayProcedureProtocolID, T1.AssayProcedureProtocol_AssayProcedureProtocolName, T1.AssayProcedureProtocol_AssayProcedureID, T1.AssayProcedureProtocol_AssayProcedureComplianceID, T1.AssayProcedureProtocol_AssayProcedureMethodTypeID, T1.AssayProcedureProtocol_AssayProcedureTechniqueID, T1.AssayProcedureProtocol_Version, T1.AssayProcedureProtocol_VersionAntecedentID, T1.AssayProcedureProtocol_VersionCertainty, T1.AssayProcedureProtocol_VersionWorkflowInstanceID, T1.AssayProcedureProtocol_VersionUpdatedBy, T1.AssayProcedureProtocol_VersionDeletedBy, T1.AssayProcedureProtocol_VersionOwnerContactID, T1.AssayProcedureProtocol_VersionOwnerCompanyID, T1.AssayProcedureProtocol_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureProtocolID AS AssayProcedureProtocol_AssayProcedureProtocolID, 
            T.AssayProcedureProtocolName AS AssayProcedureProtocol_AssayProcedureProtocolName, 
            T.AssayProcedureID AS AssayProcedureProtocol_AssayProcedureID, 
            T.AssayProcedureComplianceID AS AssayProcedureProtocol_AssayProcedureComplianceID, 
            T.AssayProcedureMethodTypeID AS AssayProcedureProtocol_AssayProcedureMethodTypeID, 
            T.AssayProcedureTechniqueID AS AssayProcedureProtocol_AssayProcedureTechniqueID, 
            T.Version AS AssayProcedureProtocol_Version, 
            T.VersionAntecedentID AS AssayProcedureProtocol_VersionAntecedentID, 
            T.VersionCertainty AS AssayProcedureProtocol_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayProcedureProtocol_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayProcedureProtocol_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayProcedureProtocol_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayProcedureProtocol_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayProcedureProtocol_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayProcedureProtocol_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocol AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayProcedureProtocolEquipments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView602()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayProcedureProtocolEquipments
        [NKD.Module.BusinessObjects.AssayProcedureProtocolEquipment](T1.AssayProcedureProtocolEquipment_AssayProcedureProtocolEquipmentID, T1.AssayProcedureProtocolEquipment_AssayProcedureProtocolID, T1.AssayProcedureProtocolEquipment_ModelID, T1.AssayProcedureProtocolEquipment_Version, T1.AssayProcedureProtocolEquipment_VersionAntecedentID, T1.AssayProcedureProtocolEquipment_VersionCertainty, T1.AssayProcedureProtocolEquipment_VersionWorkflowInstanceID, T1.AssayProcedureProtocolEquipment_VersionUpdatedBy, T1.AssayProcedureProtocolEquipment_VersionDeletedBy, T1.AssayProcedureProtocolEquipment_VersionOwnerContactID, T1.AssayProcedureProtocolEquipment_VersionOwnerCompanyID, T1.AssayProcedureProtocolEquipment_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureProtocolEquipmentID AS AssayProcedureProtocolEquipment_AssayProcedureProtocolEquipmentID, 
            T.AssayProcedureProtocolID AS AssayProcedureProtocolEquipment_AssayProcedureProtocolID, 
            T.ModelID AS AssayProcedureProtocolEquipment_ModelID, 
            T.Version AS AssayProcedureProtocolEquipment_Version, 
            T.VersionAntecedentID AS AssayProcedureProtocolEquipment_VersionAntecedentID, 
            T.VersionCertainty AS AssayProcedureProtocolEquipment_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayProcedureProtocolEquipment_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayProcedureProtocolEquipment_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayProcedureProtocolEquipment_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayProcedureProtocolEquipment_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayProcedureProtocolEquipment_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayProcedureProtocolEquipment_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolEquipment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAgitationMethods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView603()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAgitationMethods
        [NKD.Module.BusinessObjects.DictionaryAgitationMethod](T1.DictionaryAgitationMethod_AgitationMethodID, T1.DictionaryAgitationMethod_StandardAgitationMethodName, T1.DictionaryAgitationMethod_CoalAgitationMethodName, T1.DictionaryAgitationMethod_GoldAgitationMethodName, T1.DictionaryAgitationMethod_CustomAgitationMethodName, T1.DictionaryAgitationMethod_UnitID, T1.DictionaryAgitationMethod_AgitatedUnits, T1.DictionaryAgitationMethod_Description, T1.DictionaryAgitationMethod_FullDescription, T1.DictionaryAgitationMethod_Thumbnail, T1.DictionaryAgitationMethod_OriginalFileDataID, T1.DictionaryAgitationMethod_Version, T1.DictionaryAgitationMethod_VersionAntecedentID, T1.DictionaryAgitationMethod_VersionCertainty, T1.DictionaryAgitationMethod_VersionWorkflowInstanceID, T1.DictionaryAgitationMethod_VersionUpdatedBy, T1.DictionaryAgitationMethod_VersionDeletedBy, T1.DictionaryAgitationMethod_VersionOwnerContactID, T1.DictionaryAgitationMethod_VersionOwnerCompanyID, T1.DictionaryAgitationMethod_VersionUpdated)
    FROM (
        SELECT 
            T.AgitationMethodID AS DictionaryAgitationMethod_AgitationMethodID, 
            T.StandardAgitationMethodName AS DictionaryAgitationMethod_StandardAgitationMethodName, 
            T.CoalAgitationMethodName AS DictionaryAgitationMethod_CoalAgitationMethodName, 
            T.GoldAgitationMethodName AS DictionaryAgitationMethod_GoldAgitationMethodName, 
            T.CustomAgitationMethodName AS DictionaryAgitationMethod_CustomAgitationMethodName, 
            T.UnitID AS DictionaryAgitationMethod_UnitID, 
            T.AgitatedUnits AS DictionaryAgitationMethod_AgitatedUnits, 
            T.Description AS DictionaryAgitationMethod_Description, 
            T.FullDescription AS DictionaryAgitationMethod_FullDescription, 
            T.Thumbnail AS DictionaryAgitationMethod_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAgitationMethod_OriginalFileDataID, 
            T.Version AS DictionaryAgitationMethod_Version, 
            T.VersionAntecedentID AS DictionaryAgitationMethod_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAgitationMethod_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAgitationMethod_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAgitationMethod_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAgitationMethod_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAgitationMethod_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAgitationMethod_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAgitationMethod_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAgitationMethod AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayProcedureMethods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView604()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayProcedureMethods
        [NKD.Module.BusinessObjects.DictionaryAssayProcedureMethod](T1.DictionaryAssayProcedureMethod_AssayProcedureMethodID, T1.DictionaryAssayProcedureMethod_StandardAssayProcedureMethodName, T1.DictionaryAssayProcedureMethod_CoalAssayProcedureMethodName, T1.DictionaryAssayProcedureMethod_GoldAssayProcedureMethodName, T1.DictionaryAssayProcedureMethod_CustomAssayProcedureMethodName, T1.DictionaryAssayProcedureMethod_Description, T1.DictionaryAssayProcedureMethod_FullDescription, T1.DictionaryAssayProcedureMethod_Thumbnail, T1.DictionaryAssayProcedureMethod_OriginalFileDataID, T1.DictionaryAssayProcedureMethod_Version, T1.DictionaryAssayProcedureMethod_VersionAntecedentID, T1.DictionaryAssayProcedureMethod_VersionCertainty, T1.DictionaryAssayProcedureMethod_VersionWorkflowInstanceID, T1.DictionaryAssayProcedureMethod_VersionUpdatedBy, T1.DictionaryAssayProcedureMethod_VersionDeletedBy, T1.DictionaryAssayProcedureMethod_VersionOwnerContactID, T1.DictionaryAssayProcedureMethod_VersionOwnerCompanyID, T1.DictionaryAssayProcedureMethod_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureMethodID AS DictionaryAssayProcedureMethod_AssayProcedureMethodID, 
            T.StandardAssayProcedureMethodName AS DictionaryAssayProcedureMethod_StandardAssayProcedureMethodName, 
            T.CoalAssayProcedureMethodName AS DictionaryAssayProcedureMethod_CoalAssayProcedureMethodName, 
            T.GoldAssayProcedureMethodName AS DictionaryAssayProcedureMethod_GoldAssayProcedureMethodName, 
            T.CustomAssayProcedureMethodName AS DictionaryAssayProcedureMethod_CustomAssayProcedureMethodName, 
            T.Description AS DictionaryAssayProcedureMethod_Description, 
            T.FullDescription AS DictionaryAssayProcedureMethod_FullDescription, 
            T.Thumbnail AS DictionaryAssayProcedureMethod_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayProcedureMethod_OriginalFileDataID, 
            T.Version AS DictionaryAssayProcedureMethod_Version, 
            T.VersionAntecedentID AS DictionaryAssayProcedureMethod_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayProcedureMethod_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayProcedureMethod_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayProcedureMethod_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayProcedureMethod_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayProcedureMethod_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayProcedureMethod_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayProcedureMethod_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureMethod AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayProcedureTechniques.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView605()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayProcedureTechniques
        [NKD.Module.BusinessObjects.DictionaryAssayProcedureTechnique](T1.DictionaryAssayProcedureTechnique_AssayProcedureTechniqueID, T1.DictionaryAssayProcedureTechnique_StandardAssayProcedureTechniqueName, T1.DictionaryAssayProcedureTechnique_CoalAssayProcedureTechniqueName, T1.DictionaryAssayProcedureTechnique_GoldAssayProcedureTechniqueName, T1.DictionaryAssayProcedureTechnique_CustomAssayProcedureTechniqueName, T1.DictionaryAssayProcedureTechnique_Description, T1.DictionaryAssayProcedureTechnique_FullDescription, T1.DictionaryAssayProcedureTechnique_Thumbnail, T1.DictionaryAssayProcedureTechnique_OriginalFileDataID, T1.DictionaryAssayProcedureTechnique_Version, T1.DictionaryAssayProcedureTechnique_VersionAntecedentID, T1.DictionaryAssayProcedureTechnique_VersionCertainty, T1.DictionaryAssayProcedureTechnique_VersionWorkflowInstanceID, T1.DictionaryAssayProcedureTechnique_VersionUpdatedBy, T1.DictionaryAssayProcedureTechnique_VersionDeletedBy, T1.DictionaryAssayProcedureTechnique_VersionOwnerContactID, T1.DictionaryAssayProcedureTechnique_VersionOwnerCompanyID, T1.DictionaryAssayProcedureTechnique_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureTechniqueID AS DictionaryAssayProcedureTechnique_AssayProcedureTechniqueID, 
            T.StandardAssayProcedureTechniqueName AS DictionaryAssayProcedureTechnique_StandardAssayProcedureTechniqueName, 
            T.CoalAssayProcedureTechniqueName AS DictionaryAssayProcedureTechnique_CoalAssayProcedureTechniqueName, 
            T.GoldAssayProcedureTechniqueName AS DictionaryAssayProcedureTechnique_GoldAssayProcedureTechniqueName, 
            T.CustomAssayProcedureTechniqueName AS DictionaryAssayProcedureTechnique_CustomAssayProcedureTechniqueName, 
            T.Description AS DictionaryAssayProcedureTechnique_Description, 
            T.FullDescription AS DictionaryAssayProcedureTechnique_FullDescription, 
            T.Thumbnail AS DictionaryAssayProcedureTechnique_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayProcedureTechnique_OriginalFileDataID, 
            T.Version AS DictionaryAssayProcedureTechnique_Version, 
            T.VersionAntecedentID AS DictionaryAssayProcedureTechnique_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayProcedureTechnique_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayProcedureTechnique_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayProcedureTechnique_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayProcedureTechnique_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayProcedureTechnique_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayProcedureTechnique_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayProcedureTechnique_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureTechnique AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayProcedureTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView606()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayProcedureTypes
        [NKD.Module.BusinessObjects.DictionaryAssayProcedureType](T1.DictionaryAssayProcedureType_AssayProcedureTypeID, T1.DictionaryAssayProcedureType_StandardAssayProcedureTypeName, T1.DictionaryAssayProcedureType_CoalAssayProcedureTypeName, T1.DictionaryAssayProcedureType_GoldAssayProcedureTypeName, T1.DictionaryAssayProcedureType_CustomAssayProcedureTypeName, T1.DictionaryAssayProcedureType_Description, T1.DictionaryAssayProcedureType_FullDescription, T1.DictionaryAssayProcedureType_Thumbnail, T1.DictionaryAssayProcedureType_OriginalFileDataID, T1.DictionaryAssayProcedureType_Version, T1.DictionaryAssayProcedureType_VersionAntecedentID, T1.DictionaryAssayProcedureType_VersionCertainty, T1.DictionaryAssayProcedureType_VersionWorkflowInstanceID, T1.DictionaryAssayProcedureType_VersionUpdatedBy, T1.DictionaryAssayProcedureType_VersionDeletedBy, T1.DictionaryAssayProcedureType_VersionOwnerContactID, T1.DictionaryAssayProcedureType_VersionOwnerCompanyID, T1.DictionaryAssayProcedureType_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureTypeID AS DictionaryAssayProcedureType_AssayProcedureTypeID, 
            T.StandardAssayProcedureTypeName AS DictionaryAssayProcedureType_StandardAssayProcedureTypeName, 
            T.CoalAssayProcedureTypeName AS DictionaryAssayProcedureType_CoalAssayProcedureTypeName, 
            T.GoldAssayProcedureTypeName AS DictionaryAssayProcedureType_GoldAssayProcedureTypeName, 
            T.CustomAssayProcedureTypeName AS DictionaryAssayProcedureType_CustomAssayProcedureTypeName, 
            T.Description AS DictionaryAssayProcedureType_Description, 
            T.FullDescription AS DictionaryAssayProcedureType_FullDescription, 
            T.Thumbnail AS DictionaryAssayProcedureType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayProcedureType_OriginalFileDataID, 
            T.Version AS DictionaryAssayProcedureType_Version, 
            T.VersionAntecedentID AS DictionaryAssayProcedureType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayProcedureType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayProcedureType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayProcedureType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayProcedureType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayProcedureType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayProcedureType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayProcedureType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayTechniques.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView607()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayTechniques
        [NKD.Module.BusinessObjects.DictionaryAssayTechnique](T1.DictionaryAssayTechnique_AssayTechniqueID, T1.DictionaryAssayTechnique_StandardAssayTechniqueName, T1.DictionaryAssayTechnique_CoalAssayTechniqueName, T1.DictionaryAssayTechnique_GoldAssayTechniqueName, T1.DictionaryAssayTechnique_CustomAssayTechniqueName, T1.DictionaryAssayTechnique_Description, T1.DictionaryAssayTechnique_FullDescription, T1.DictionaryAssayTechnique_Thumbnail, T1.DictionaryAssayTechnique_OriginalFileDataID, T1.DictionaryAssayTechnique_Version, T1.DictionaryAssayTechnique_VersionAntecedentID, T1.DictionaryAssayTechnique_VersionCertainty, T1.DictionaryAssayTechnique_VersionWorkflowInstanceID, T1.DictionaryAssayTechnique_VersionUpdatedBy, T1.DictionaryAssayTechnique_VersionDeletedBy, T1.DictionaryAssayTechnique_VersionOwnerContactID, T1.DictionaryAssayTechnique_VersionOwnerCompanyID, T1.DictionaryAssayTechnique_VersionUpdated)
    FROM (
        SELECT 
            T.AssayTechniqueID AS DictionaryAssayTechnique_AssayTechniqueID, 
            T.StandardAssayTechniqueName AS DictionaryAssayTechnique_StandardAssayTechniqueName, 
            T.CoalAssayTechniqueName AS DictionaryAssayTechnique_CoalAssayTechniqueName, 
            T.GoldAssayTechniqueName AS DictionaryAssayTechnique_GoldAssayTechniqueName, 
            T.CustomAssayTechniqueName AS DictionaryAssayTechnique_CustomAssayTechniqueName, 
            T.Description AS DictionaryAssayTechnique_Description, 
            T.FullDescription AS DictionaryAssayTechnique_FullDescription, 
            T.Thumbnail AS DictionaryAssayTechnique_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayTechnique_OriginalFileDataID, 
            T.Version AS DictionaryAssayTechnique_Version, 
            T.VersionAntecedentID AS DictionaryAssayTechnique_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayTechnique_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayTechnique_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayTechnique_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayTechnique_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayTechnique_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayTechnique_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayTechnique_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTechnique AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryChemicals.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView608()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryChemicals
        [NKD.Module.BusinessObjects.DictionaryChemical](T1.DictionaryChemical_ChemicalID, T1.DictionaryChemical_StandardChemicalName, T1.DictionaryChemical_CoalChemicalName, T1.DictionaryChemical_GoldChemicalName, T1.DictionaryChemical_CustomChemicalName, T1.DictionaryChemical_Description, T1.DictionaryChemical_FullDescription, T1.DictionaryChemical_Thumbnail, T1.DictionaryChemical_OriginalFileDataID, T1.DictionaryChemical_Version, T1.DictionaryChemical_VersionAntecedentID, T1.DictionaryChemical_VersionCertainty, T1.DictionaryChemical_VersionWorkflowInstanceID, T1.DictionaryChemical_VersionUpdatedBy, T1.DictionaryChemical_VersionDeletedBy, T1.DictionaryChemical_VersionOwnerContactID, T1.DictionaryChemical_VersionOwnerCompanyID, T1.DictionaryChemical_VersionUpdated)
    FROM (
        SELECT 
            T.ChemicalID AS DictionaryChemical_ChemicalID, 
            T.StandardChemicalName AS DictionaryChemical_StandardChemicalName, 
            T.CoalChemicalName AS DictionaryChemical_CoalChemicalName, 
            T.GoldChemicalName AS DictionaryChemical_GoldChemicalName, 
            T.CustomChemicalName AS DictionaryChemical_CustomChemicalName, 
            T.Description AS DictionaryChemical_Description, 
            T.FullDescription AS DictionaryChemical_FullDescription, 
            T.Thumbnail AS DictionaryChemical_Thumbnail, 
            T.OriginalFileDataID AS DictionaryChemical_OriginalFileDataID, 
            T.Version AS DictionaryChemical_Version, 
            T.VersionAntecedentID AS DictionaryChemical_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryChemical_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryChemical_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryChemical_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryChemical_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryChemical_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryChemical_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryChemical_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryChemical AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayProcedureProtocolPreconditions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView609()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayProcedureProtocolPreconditions
        [NKD.Module.BusinessObjects.AssayProcedureProtocolPrecondition](T1.AssayProcedureProtocolPrecondition_AssayProcedureProtocolPreconditionID, T1.AssayProcedureProtocolPrecondition_AssayProcedureProtocolID, T1.AssayProcedureProtocolPrecondition_AssayPreconditionTypeID, T1.AssayProcedureProtocolPrecondition_PreconditionName, T1.AssayProcedureProtocolPrecondition_UnitID, T1.AssayProcedureProtocolPrecondition_Sequence, T1.AssayProcedureProtocolPrecondition_Version, T1.AssayProcedureProtocolPrecondition_VersionAntecedentID, T1.AssayProcedureProtocolPrecondition_VersionCertainty, T1.AssayProcedureProtocolPrecondition_VersionWorkflowInstanceID, T1.AssayProcedureProtocolPrecondition_VersionUpdatedBy, T1.AssayProcedureProtocolPrecondition_VersionDeletedBy, T1.AssayProcedureProtocolPrecondition_VersionOwnerContactID, T1.AssayProcedureProtocolPrecondition_VersionOwnerCompanyID, T1.AssayProcedureProtocolPrecondition_VersionUpdated)
    FROM (
        SELECT 
            T.AssayProcedureProtocolPreconditionID AS AssayProcedureProtocolPrecondition_AssayProcedureProtocolPreconditionID, 
            T.AssayProcedureProtocolID AS AssayProcedureProtocolPrecondition_AssayProcedureProtocolID, 
            T.AssayPreconditionTypeID AS AssayProcedureProtocolPrecondition_AssayPreconditionTypeID, 
            T.PreconditionName AS AssayProcedureProtocolPrecondition_PreconditionName, 
            T.UnitID AS AssayProcedureProtocolPrecondition_UnitID, 
            T.Sequence AS AssayProcedureProtocolPrecondition_Sequence, 
            T.Version AS AssayProcedureProtocolPrecondition_Version, 
            T.VersionAntecedentID AS AssayProcedureProtocolPrecondition_VersionAntecedentID, 
            T.VersionCertainty AS AssayProcedureProtocolPrecondition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayProcedureProtocolPrecondition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayProcedureProtocolPrecondition_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayProcedureProtocolPrecondition_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayProcedureProtocolPrecondition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayProcedureProtocolPrecondition_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayProcedureProtocolPrecondition_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolPrecondition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayWorkflowProcedureProtocols.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView610()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayWorkflowProcedureProtocols
        [NKD.Module.BusinessObjects.AssayWorkflowProcedureProtocol](T1.AssayWorkflowProcedureProtocol_AssayWorkflowProcedureProtocolID, T1.AssayWorkflowProcedureProtocol_WorkflowID, T1.AssayWorkflowProcedureProtocol_WorkflowStateName, T1.AssayWorkflowProcedureProtocol_AssayProcedureProtocolID, T1.AssayWorkflowProcedureProtocol_Sequence, T1.AssayWorkflowProcedureProtocol_Version, T1.AssayWorkflowProcedureProtocol_VersionAntecedentID, T1.AssayWorkflowProcedureProtocol_VersionCertainty, T1.AssayWorkflowProcedureProtocol_VersionWorkflowInstanceID, T1.AssayWorkflowProcedureProtocol_VersionUpdatedBy, T1.AssayWorkflowProcedureProtocol_VersionDeletedBy, T1.AssayWorkflowProcedureProtocol_VersionOwnerContactID, T1.AssayWorkflowProcedureProtocol_VersionOwnerCompanyID, T1.AssayWorkflowProcedureProtocol_VersionUpdated)
    FROM (
        SELECT 
            T.AssayWorkflowProcedureProtocolID AS AssayWorkflowProcedureProtocol_AssayWorkflowProcedureProtocolID, 
            T.WorkflowID AS AssayWorkflowProcedureProtocol_WorkflowID, 
            T.WorkflowStateName AS AssayWorkflowProcedureProtocol_WorkflowStateName, 
            T.AssayProcedureProtocolID AS AssayWorkflowProcedureProtocol_AssayProcedureProtocolID, 
            T.Sequence AS AssayWorkflowProcedureProtocol_Sequence, 
            T.Version AS AssayWorkflowProcedureProtocol_Version, 
            T.VersionAntecedentID AS AssayWorkflowProcedureProtocol_VersionAntecedentID, 
            T.VersionCertainty AS AssayWorkflowProcedureProtocol_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssayWorkflowProcedureProtocol_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssayWorkflowProcedureProtocol_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssayWorkflowProcedureProtocol_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssayWorkflowProcedureProtocol_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssayWorkflowProcedureProtocol_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssayWorkflowProcedureProtocol_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayWorkflowProcedureProtocol AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssayPreconditionTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView611()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssayPreconditionTypes
        [NKD.Module.BusinessObjects.DictionaryAssayPreconditionType](T1.DictionaryAssayPreconditionType_AssayPreconditionTypeID, T1.DictionaryAssayPreconditionType_StandardAssayPreconditionTypeName, T1.DictionaryAssayPreconditionType_CoalAssayPreconditionTypeName, T1.DictionaryAssayPreconditionType_GoldAssayPreconditionTypeName, T1.DictionaryAssayPreconditionType_CustomAssayPreconditionTypeName, T1.DictionaryAssayPreconditionType_Description, T1.DictionaryAssayPreconditionType_FullDescription, T1.DictionaryAssayPreconditionType_Thumbnail, T1.DictionaryAssayPreconditionType_OriginalFileDataID, T1.DictionaryAssayPreconditionType_Version, T1.DictionaryAssayPreconditionType_VersionAntecedentID, T1.DictionaryAssayPreconditionType_VersionCertainty, T1.DictionaryAssayPreconditionType_VersionWorkflowInstanceID, T1.DictionaryAssayPreconditionType_VersionUpdatedBy, T1.DictionaryAssayPreconditionType_VersionDeletedBy, T1.DictionaryAssayPreconditionType_VersionOwnerContactID, T1.DictionaryAssayPreconditionType_VersionOwnerCompanyID, T1.DictionaryAssayPreconditionType_VersionUpdated)
    FROM (
        SELECT 
            T.AssayPreconditionTypeID AS DictionaryAssayPreconditionType_AssayPreconditionTypeID, 
            T.StandardAssayPreconditionTypeName AS DictionaryAssayPreconditionType_StandardAssayPreconditionTypeName, 
            T.CoalAssayPreconditionTypeName AS DictionaryAssayPreconditionType_CoalAssayPreconditionTypeName, 
            T.GoldAssayPreconditionTypeName AS DictionaryAssayPreconditionType_GoldAssayPreconditionTypeName, 
            T.CustomAssayPreconditionTypeName AS DictionaryAssayPreconditionType_CustomAssayPreconditionTypeName, 
            T.Description AS DictionaryAssayPreconditionType_Description, 
            T.FullDescription AS DictionaryAssayPreconditionType_FullDescription, 
            T.Thumbnail AS DictionaryAssayPreconditionType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAssayPreconditionType_OriginalFileDataID, 
            T.Version AS DictionaryAssayPreconditionType_Version, 
            T.VersionAntecedentID AS DictionaryAssayPreconditionType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssayPreconditionType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssayPreconditionType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssayPreconditionType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssayPreconditionType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssayPreconditionType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssayPreconditionType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssayPreconditionType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayPreconditionType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationPaymentProviders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView612()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationPaymentProviders
        [NKD.Module.BusinessObjects.ApplicationPaymentProvider](T1.ApplicationPaymentProvider_ApplicationPaymentProviderID, T1.ApplicationPaymentProvider_ApplicationID, T1.ApplicationPaymentProvider_ApplicationPaymentProviderName, T1.ApplicationPaymentProvider_CompanyID, T1.ApplicationPaymentProvider_Environment, T1.ApplicationPaymentProvider_MerchantID, T1.ApplicationPaymentProvider_ClientKeyPrivate, T1.ApplicationPaymentProvider_ClientKeyPublic, T1.ApplicationPaymentProvider_ServerKeyPrivate, T1.ApplicationPaymentProvider_ServerKeyPublic, T1.ApplicationPaymentProvider_ReturnURL, T1.ApplicationPaymentProvider_ResponsibleContactID, T1.ApplicationPaymentProvider_Version, T1.ApplicationPaymentProvider_VersionAntecedentID, T1.ApplicationPaymentProvider_VersionCertainty, T1.ApplicationPaymentProvider_VersionWorkflowInstanceID, T1.ApplicationPaymentProvider_VersionUpdatedBy, T1.ApplicationPaymentProvider_VersionDeletedBy, T1.ApplicationPaymentProvider_VersionOwnerContactID, T1.ApplicationPaymentProvider_VersionOwnerCompanyID, T1.ApplicationPaymentProvider_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderID AS ApplicationPaymentProvider_ApplicationPaymentProviderID, 
            T.ApplicationID AS ApplicationPaymentProvider_ApplicationID, 
            T.ApplicationPaymentProviderName AS ApplicationPaymentProvider_ApplicationPaymentProviderName, 
            T.CompanyID AS ApplicationPaymentProvider_CompanyID, 
            T.Environment AS ApplicationPaymentProvider_Environment, 
            T.MerchantID AS ApplicationPaymentProvider_MerchantID, 
            T.ClientKeyPrivate AS ApplicationPaymentProvider_ClientKeyPrivate, 
            T.ClientKeyPublic AS ApplicationPaymentProvider_ClientKeyPublic, 
            T.ServerKeyPrivate AS ApplicationPaymentProvider_ServerKeyPrivate, 
            T.ServerKeyPublic AS ApplicationPaymentProvider_ServerKeyPublic, 
            T.ReturnURL AS ApplicationPaymentProvider_ReturnURL, 
            T.ResponsibleContactID AS ApplicationPaymentProvider_ResponsibleContactID, 
            T.Version AS ApplicationPaymentProvider_Version, 
            T.VersionAntecedentID AS ApplicationPaymentProvider_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationPaymentProvider_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationPaymentProvider_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationPaymentProvider_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationPaymentProvider_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationPaymentProvider_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationPaymentProvider_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationPaymentProvider_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProvider AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationPaymentProviderCurrencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView613()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationPaymentProviderCurrencies
        [NKD.Module.BusinessObjects.ApplicationPaymentProviderCurrency](T1.ApplicationPaymentProviderCurrency_ApplicationPaymentProviderCurrencyID, T1.ApplicationPaymentProviderCurrency_ApplicationPaymentProviderID, T1.ApplicationPaymentProviderCurrency_CurrencyID, T1.ApplicationPaymentProviderCurrency_PaymentProviderCurrencyCode, T1.ApplicationPaymentProviderCurrency_IsMultiplierAccepted, T1.ApplicationPaymentProviderCurrency_Version, T1.ApplicationPaymentProviderCurrency_VersionAntecedentID, T1.ApplicationPaymentProviderCurrency_VersionCertainty, T1.ApplicationPaymentProviderCurrency_VersionWorkflowInstanceID, T1.ApplicationPaymentProviderCurrency_VersionUpdatedBy, T1.ApplicationPaymentProviderCurrency_VersionDeletedBy, T1.ApplicationPaymentProviderCurrency_VersionOwnerContactID, T1.ApplicationPaymentProviderCurrency_VersionOwnerCompanyID, T1.ApplicationPaymentProviderCurrency_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderCurrencyID AS ApplicationPaymentProviderCurrency_ApplicationPaymentProviderCurrencyID, 
            T.ApplicationPaymentProviderID AS ApplicationPaymentProviderCurrency_ApplicationPaymentProviderID, 
            T.CurrencyID AS ApplicationPaymentProviderCurrency_CurrencyID, 
            T.PaymentProviderCurrencyCode AS ApplicationPaymentProviderCurrency_PaymentProviderCurrencyCode, 
            T.IsMultiplierAccepted AS ApplicationPaymentProviderCurrency_IsMultiplierAccepted, 
            T.Version AS ApplicationPaymentProviderCurrency_Version, 
            T.VersionAntecedentID AS ApplicationPaymentProviderCurrency_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationPaymentProviderCurrency_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationPaymentProviderCurrency_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationPaymentProviderCurrency_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationPaymentProviderCurrency_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationPaymentProviderCurrency_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationPaymentProviderCurrency_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationPaymentProviderCurrency_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderCurrency AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationPaymentProviderProducts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView614()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationPaymentProviderProducts
        [NKD.Module.BusinessObjects.ApplicationPaymentProviderProduct](T1.ApplicationPaymentProviderProduct_ApplicationPaymentProviderProductID, T1.ApplicationPaymentProviderProduct_ApplicationPaymentProviderID, T1.ApplicationPaymentProviderProduct_PaymentProviderProductName, T1.ApplicationPaymentProviderProduct_ProductUnitID, T1.ApplicationPaymentProviderProduct_PaymentProviderUnitName, T1.ApplicationPaymentProviderProduct_IsRecurring, T1.ApplicationPaymentProviderProduct_UnitDefault, T1.ApplicationPaymentProviderProduct_UnitMaximum, T1.ApplicationPaymentProviderProduct_UnitMinimum, T1.ApplicationPaymentProviderProduct_Version, T1.ApplicationPaymentProviderProduct_VersionAntecedentID, T1.ApplicationPaymentProviderProduct_VersionCertainty, T1.ApplicationPaymentProviderProduct_VersionWorkflowInstanceID, T1.ApplicationPaymentProviderProduct_VersionUpdatedBy, T1.ApplicationPaymentProviderProduct_VersionDeletedBy, T1.ApplicationPaymentProviderProduct_VersionOwnerContactID, T1.ApplicationPaymentProviderProduct_VersionOwnerCompanyID, T1.ApplicationPaymentProviderProduct_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderProductID AS ApplicationPaymentProviderProduct_ApplicationPaymentProviderProductID, 
            T.ApplicationPaymentProviderID AS ApplicationPaymentProviderProduct_ApplicationPaymentProviderID, 
            T.PaymentProviderProductName AS ApplicationPaymentProviderProduct_PaymentProviderProductName, 
            T.ProductUnitID AS ApplicationPaymentProviderProduct_ProductUnitID, 
            T.PaymentProviderUnitName AS ApplicationPaymentProviderProduct_PaymentProviderUnitName, 
            T.IsRecurring AS ApplicationPaymentProviderProduct_IsRecurring, 
            T.UnitDefault AS ApplicationPaymentProviderProduct_UnitDefault, 
            T.UnitMaximum AS ApplicationPaymentProviderProduct_UnitMaximum, 
            T.UnitMinimum AS ApplicationPaymentProviderProduct_UnitMinimum, 
            T.Version AS ApplicationPaymentProviderProduct_Version, 
            T.VersionAntecedentID AS ApplicationPaymentProviderProduct_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationPaymentProviderProduct_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationPaymentProviderProduct_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationPaymentProviderProduct_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationPaymentProviderProduct_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationPaymentProviderProduct_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationPaymentProviderProduct_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationPaymentProviderProduct_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProduct AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationPaymentProviderProductModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView615()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationPaymentProviderProductModels
        [NKD.Module.BusinessObjects.ApplicationPaymentProviderProductModel](T1.ApplicationPaymentProviderProductModel_ApplicationPaymentProviderProductModelID, T1.ApplicationPaymentProviderProductModel_ApplicationPaymentProviderProductID, T1.ApplicationPaymentProviderProductModel_ModelID, T1.ApplicationPaymentProviderProductModel_UnitDefault, T1.ApplicationPaymentProviderProductModel_UnitMaximum, T1.ApplicationPaymentProviderProductModel_UnitMinimum, T1.ApplicationPaymentProviderProductModel_Version, T1.ApplicationPaymentProviderProductModel_VersionAntecedentID, T1.ApplicationPaymentProviderProductModel_VersionCertainty, T1.ApplicationPaymentProviderProductModel_VersionWorkflowInstanceID, T1.ApplicationPaymentProviderProductModel_VersionUpdatedBy, T1.ApplicationPaymentProviderProductModel_VersionDeletedBy, T1.ApplicationPaymentProviderProductModel_VersionOwnerContactID, T1.ApplicationPaymentProviderProductModel_VersionOwnerCompanyID, T1.ApplicationPaymentProviderProductModel_VersionUpdated, T1.ApplicationPaymentProviderProductModel_SupplierModelID)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderProductModelID AS ApplicationPaymentProviderProductModel_ApplicationPaymentProviderProductModelID, 
            T.ApplicationPaymentProviderProductID AS ApplicationPaymentProviderProductModel_ApplicationPaymentProviderProductID, 
            T.ModelID AS ApplicationPaymentProviderProductModel_ModelID, 
            T.UnitDefault AS ApplicationPaymentProviderProductModel_UnitDefault, 
            T.UnitMaximum AS ApplicationPaymentProviderProductModel_UnitMaximum, 
            T.UnitMinimum AS ApplicationPaymentProviderProductModel_UnitMinimum, 
            T.Version AS ApplicationPaymentProviderProductModel_Version, 
            T.VersionAntecedentID AS ApplicationPaymentProviderProductModel_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationPaymentProviderProductModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationPaymentProviderProductModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationPaymentProviderProductModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationPaymentProviderProductModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationPaymentProviderProductModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationPaymentProviderProductModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationPaymentProviderProductModel_VersionUpdated, 
            T.SupplierModelID AS ApplicationPaymentProviderProductModel_SupplierModelID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationPaymentProviderProductParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView616()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationPaymentProviderProductParts
        [NKD.Module.BusinessObjects.ApplicationPaymentProviderProductPart](T1.ApplicationPaymentProviderProductPart_ApplicationPaymentProviderProductPartID, T1.ApplicationPaymentProviderProductPart_ApplicationPaymentProviderProductID, T1.ApplicationPaymentProviderProductPart_PartID, T1.ApplicationPaymentProviderProductPart_UnitDefault, T1.ApplicationPaymentProviderProductPart_UnitMaximum, T1.ApplicationPaymentProviderProductPart_UnitMinimum, T1.ApplicationPaymentProviderProductPart_Version, T1.ApplicationPaymentProviderProductPart_VersionAntecedentID, T1.ApplicationPaymentProviderProductPart_VersionCertainty, T1.ApplicationPaymentProviderProductPart_VersionWorkflowInstanceID, T1.ApplicationPaymentProviderProductPart_VersionUpdatedBy, T1.ApplicationPaymentProviderProductPart_VersionDeletedBy, T1.ApplicationPaymentProviderProductPart_VersionOwnerContactID, T1.ApplicationPaymentProviderProductPart_VersionOwnerCompanyID, T1.ApplicationPaymentProviderProductPart_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderProductPartID AS ApplicationPaymentProviderProductPart_ApplicationPaymentProviderProductPartID, 
            T.ApplicationPaymentProviderProductID AS ApplicationPaymentProviderProductPart_ApplicationPaymentProviderProductID, 
            T.PartID AS ApplicationPaymentProviderProductPart_PartID, 
            T.UnitDefault AS ApplicationPaymentProviderProductPart_UnitDefault, 
            T.UnitMaximum AS ApplicationPaymentProviderProductPart_UnitMaximum, 
            T.UnitMinimum AS ApplicationPaymentProviderProductPart_UnitMinimum, 
            T.Version AS ApplicationPaymentProviderProductPart_Version, 
            T.VersionAntecedentID AS ApplicationPaymentProviderProductPart_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationPaymentProviderProductPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationPaymentProviderProductPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationPaymentProviderProductPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationPaymentProviderProductPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationPaymentProviderProductPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationPaymentProviderProductPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationPaymentProviderProductPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationRoutes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView617()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationRoutes
        [NKD.Module.BusinessObjects.ApplicationRoute](T1.ApplicationRoute_ApplicationRouteID, T1.ApplicationRoute_ApplicationID, T1.ApplicationRoute_RouteTypeID, T1.ApplicationRoute_Sequence, T1.ApplicationRoute_RouteName, T1.ApplicationRoute_RouteURL, T1.ApplicationRoute_RouteMask, T1.ApplicationRoute_RedirectURL, T1.ApplicationRoute_IsExternal, T1.ApplicationRoute_IsCapturingStatistic, T1.ApplicationRoute_Version, T1.ApplicationRoute_VersionAntecedentID, T1.ApplicationRoute_VersionCertainty, T1.ApplicationRoute_VersionWorkflowInstanceID, T1.ApplicationRoute_VersionUpdatedBy, T1.ApplicationRoute_VersionDeletedBy, T1.ApplicationRoute_VersionOwnerContactID, T1.ApplicationRoute_VersionOwnerCompanyID, T1.ApplicationRoute_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationRouteID AS ApplicationRoute_ApplicationRouteID, 
            T.ApplicationID AS ApplicationRoute_ApplicationID, 
            T.RouteTypeID AS ApplicationRoute_RouteTypeID, 
            T.Sequence AS ApplicationRoute_Sequence, 
            T.RouteName AS ApplicationRoute_RouteName, 
            T.RouteURL AS ApplicationRoute_RouteURL, 
            T.RouteMask AS ApplicationRoute_RouteMask, 
            T.RedirectURL AS ApplicationRoute_RedirectURL, 
            T.IsExternal AS ApplicationRoute_IsExternal, 
            T.IsCapturingStatistic AS ApplicationRoute_IsCapturingStatistic, 
            T.Version AS ApplicationRoute_Version, 
            T.VersionAntecedentID AS ApplicationRoute_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationRoute_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationRoute_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationRoute_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationRoute_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationRoute_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationRoute_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationRoute_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationRoute AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationRouteDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView618()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationRouteDatas
        [NKD.Module.BusinessObjects.ApplicationRouteData](T1.ApplicationRouteData_ApplicationRouteDataID, T1.ApplicationRouteData_ApplicationRouteID, T1.ApplicationRouteData_TableType, T1.ApplicationRouteData_ReferenceID, T1.ApplicationRouteData_ReferenceName, T1.ApplicationRouteData_Ticks, T1.ApplicationRouteData_ValidFrom, T1.ApplicationRouteData_ValidUntil, T1.ApplicationRouteData_Comment, T1.ApplicationRouteData_Version, T1.ApplicationRouteData_VersionAntecedentID, T1.ApplicationRouteData_VersionCertainty, T1.ApplicationRouteData_VersionWorkflowInstanceID, T1.ApplicationRouteData_VersionUpdatedBy, T1.ApplicationRouteData_VersionDeletedBy, T1.ApplicationRouteData_VersionOwnerContactID, T1.ApplicationRouteData_VersionOwnerCompanyID, T1.ApplicationRouteData_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationRouteDataID AS ApplicationRouteData_ApplicationRouteDataID, 
            T.ApplicationRouteID AS ApplicationRouteData_ApplicationRouteID, 
            T.TableType AS ApplicationRouteData_TableType, 
            T.ReferenceID AS ApplicationRouteData_ReferenceID, 
            T.ReferenceName AS ApplicationRouteData_ReferenceName, 
            T.Ticks AS ApplicationRouteData_Ticks, 
            T.ValidFrom AS ApplicationRouteData_ValidFrom, 
            T.ValidUntil AS ApplicationRouteData_ValidUntil, 
            T.Comment AS ApplicationRouteData_Comment, 
            T.Version AS ApplicationRouteData_Version, 
            T.VersionAntecedentID AS ApplicationRouteData_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationRouteData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationRouteData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationRouteData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationRouteData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationRouteData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationRouteData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationRouteData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationRouteParameters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView619()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationRouteParameters
        [NKD.Module.BusinessObjects.ApplicationRouteParameter](T1.ApplicationRouteParameter_ApplicationRouteID, T1.ApplicationRouteParameter_RouteParameterName, T1.ApplicationRouteParameter_RouteParameterValue, T1.ApplicationRouteParameter_Version, T1.ApplicationRouteParameter_VersionAntecedentID, T1.ApplicationRouteParameter_VersionCertainty, T1.ApplicationRouteParameter_VersionWorkflowInstanceID, T1.ApplicationRouteParameter_VersionUpdatedBy, T1.ApplicationRouteParameter_VersionDeletedBy, T1.ApplicationRouteParameter_VersionOwnerContactID, T1.ApplicationRouteParameter_VersionOwnerCompanyID, T1.ApplicationRouteParameter_VersionUpdated, T1.ApplicationRouteParameter_ApplicationRouteParameterID)
    FROM (
        SELECT 
            T.ApplicationRouteID AS ApplicationRouteParameter_ApplicationRouteID, 
            T.RouteParameterName AS ApplicationRouteParameter_RouteParameterName, 
            T.RouteParameterValue AS ApplicationRouteParameter_RouteParameterValue, 
            T.Version AS ApplicationRouteParameter_Version, 
            T.VersionAntecedentID AS ApplicationRouteParameter_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationRouteParameter_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationRouteParameter_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationRouteParameter_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationRouteParameter_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationRouteParameter_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationRouteParameter_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationRouteParameter_VersionUpdated, 
            T.ApplicationRouteParameterID AS ApplicationRouteParameter_ApplicationRouteParameterID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteParameter AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssetDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView620()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetDatas
        [NKD.Module.BusinessObjects.AssetData](T1.AssetData_AssetDataID, T1.AssetData_AssetID, T1.AssetData_TableType, T1.AssetData_ReferenceID, T1.AssetData_ReferenceName, T1.AssetData_AvailabilityID, T1.AssetData_IsFixed, T1.AssetData_CoverageProvinceID, T1.AssetData_CurrentLocationID, T1.AssetData_TickUnitID, T1.AssetData_Ticks, T1.AssetData_TicksOffset, T1.AssetData_TicksResolution, T1.AssetData_ValidFrom, T1.AssetData_ValidUntil, T1.AssetData_Culture, T1.AssetData_Weight, T1.AssetData_Comment, T1.AssetData_Version, T1.AssetData_VersionAntecedentID, T1.AssetData_VersionCertainty, T1.AssetData_VersionWorkflowInstanceID, T1.AssetData_VersionUpdatedBy, T1.AssetData_VersionDeletedBy, T1.AssetData_VersionOwnerContactID, T1.AssetData_VersionOwnerCompanyID, T1.AssetData_VersionUpdated)
    FROM (
        SELECT 
            T.AssetDataID AS AssetData_AssetDataID, 
            T.AssetID AS AssetData_AssetID, 
            T.TableType AS AssetData_TableType, 
            T.ReferenceID AS AssetData_ReferenceID, 
            T.ReferenceName AS AssetData_ReferenceName, 
            T.AvailabilityID AS AssetData_AvailabilityID, 
            T.IsFixed AS AssetData_IsFixed, 
            T.CoverageProvinceID AS AssetData_CoverageProvinceID, 
            T.CurrentLocationID AS AssetData_CurrentLocationID, 
            T.TickUnitID AS AssetData_TickUnitID, 
            T.Ticks AS AssetData_Ticks, 
            T.TicksOffset AS AssetData_TicksOffset, 
            T.TicksResolution AS AssetData_TicksResolution, 
            T.ValidFrom AS AssetData_ValidFrom, 
            T.ValidUntil AS AssetData_ValidUntil, 
            T.Culture AS AssetData_Culture, 
            T.Weight AS AssetData_Weight, 
            T.Comment AS AssetData_Comment, 
            T.Version AS AssetData_Version, 
            T.VersionAntecedentID AS AssetData_VersionAntecedentID, 
            T.VersionCertainty AS AssetData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssetData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssetData_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssetData_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssetData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssetData_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssetData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_AssetData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssetProductions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView621()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetProductions
        [NKD.Module.BusinessObjects.AssetProduction](T1.AssetProduction_AssetProductionID, T1.AssetProduction_AssetID, T1.AssetProduction_ProductionParameterID, T1.AssetProduction_ProRataUnits, T1.AssetProduction_ProRataCost, T1.AssetProduction_EstimatedProRataValue, T1.AssetProduction_ProRataUnitMinimum, T1.AssetProduction_ProRataUnitMaximum, T1.AssetProduction_ProRataUnitOptimum, T1.AssetProduction_AssetProductionGroupID, T1.AssetProduction_Weight, T1.AssetProduction_Variance, T1.AssetProduction_Correction, T1.AssetProduction_Comment, T1.AssetProduction_Version, T1.AssetProduction_VersionAntecedentID, T1.AssetProduction_VersionCertainty, T1.AssetProduction_VersionWorkflowInstanceID, T1.AssetProduction_VersionUpdatedBy, T1.AssetProduction_VersionDeletedBy, T1.AssetProduction_VersionOwnerContactID, T1.AssetProduction_VersionOwnerCompanyID, T1.AssetProduction_VersionUpdated)
    FROM (
        SELECT 
            T.AssetProductionID AS AssetProduction_AssetProductionID, 
            T.AssetID AS AssetProduction_AssetID, 
            T.ProductionParameterID AS AssetProduction_ProductionParameterID, 
            T.ProRataUnits AS AssetProduction_ProRataUnits, 
            T.ProRataCost AS AssetProduction_ProRataCost, 
            T.EstimatedProRataValue AS AssetProduction_EstimatedProRataValue, 
            T.ProRataUnitMinimum AS AssetProduction_ProRataUnitMinimum, 
            T.ProRataUnitMaximum AS AssetProduction_ProRataUnitMaximum, 
            T.ProRataUnitOptimum AS AssetProduction_ProRataUnitOptimum, 
            T.AssetProductionGroupID AS AssetProduction_AssetProductionGroupID, 
            T.Weight AS AssetProduction_Weight, 
            T.Variance AS AssetProduction_Variance, 
            T.Correction AS AssetProduction_Correction, 
            T.Comment AS AssetProduction_Comment, 
            T.Version AS AssetProduction_Version, 
            T.VersionAntecedentID AS AssetProduction_VersionAntecedentID, 
            T.VersionCertainty AS AssetProduction_VersionCertainty, 
            T.VersionWorkflowInstanceID AS AssetProduction_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS AssetProduction_VersionUpdatedBy, 
            T.VersionDeletedBy AS AssetProduction_VersionDeletedBy, 
            T.VersionOwnerContactID AS AssetProduction_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS AssetProduction_VersionOwnerCompanyID, 
            T.VersionUpdated AS AssetProduction_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_AssetProduction AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContactCreditCards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView622()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContactCreditCards
        [NKD.Module.BusinessObjects.ContactCreditCard](T1.ContactCreditCard_ContactCreditCardID, T1.ContactCreditCard_ContactID, T1.ContactCreditCard_CreditCardName, T1.ContactCreditCard_Sequence, T1.ContactCreditCard_CreditCardType, T1.ContactCreditCard_CreditCard, T1.ContactCreditCard_CreditCardMasked, T1.ContactCreditCard_Expiry, T1.ContactCreditCard_Valid, T1.ContactCreditCard_CVV, T1.ContactCreditCard_Version, T1.ContactCreditCard_VersionAntecedentID, T1.ContactCreditCard_VersionCertainty, T1.ContactCreditCard_VersionWorkflowInstanceID, T1.ContactCreditCard_VersionUpdatedBy, T1.ContactCreditCard_VersionDeletedBy, T1.ContactCreditCard_VersionOwnerContactID, T1.ContactCreditCard_VersionOwnerCompanyID, T1.ContactCreditCard_VersionUpdated, T1.ContactCreditCard_ApplicationPaymentProviderContactID, T1.ContactCreditCard_ApplicationPaymentProviderToken, T1.ContactCreditCard_DefaultCurrencyID)
    FROM (
        SELECT 
            T.ContactCreditCardID AS ContactCreditCard_ContactCreditCardID, 
            T.ContactID AS ContactCreditCard_ContactID, 
            T.CreditCardName AS ContactCreditCard_CreditCardName, 
            T.Sequence AS ContactCreditCard_Sequence, 
            T.CreditCardType AS ContactCreditCard_CreditCardType, 
            T.CreditCard AS ContactCreditCard_CreditCard, 
            T.CreditCardMasked AS ContactCreditCard_CreditCardMasked, 
            T.Expiry AS ContactCreditCard_Expiry, 
            T.Valid AS ContactCreditCard_Valid, 
            T.CVV AS ContactCreditCard_CVV, 
            T.Version AS ContactCreditCard_Version, 
            T.VersionAntecedentID AS ContactCreditCard_VersionAntecedentID, 
            T.VersionCertainty AS ContactCreditCard_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContactCreditCard_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContactCreditCard_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContactCreditCard_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContactCreditCard_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContactCreditCard_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContactCreditCard_VersionUpdated, 
            T.ApplicationPaymentProviderContactID AS ContactCreditCard_ApplicationPaymentProviderContactID, 
            T.ApplicationPaymentProviderToken AS ContactCreditCard_ApplicationPaymentProviderToken, 
            T.DefaultCurrencyID AS ContactCreditCard_DefaultCurrencyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ContactCreditCard AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAccountTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView623()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAccountTypes
        [NKD.Module.BusinessObjects.DictionaryAccountType](T1.DictionaryAccountType_AccountTypeID, T1.DictionaryAccountType_StandardAccountTypeName, T1.DictionaryAccountType_CustomAccountTypeName, T1.DictionaryAccountType_Description, T1.DictionaryAccountType_FullDescription, T1.DictionaryAccountType_Thumbnail, T1.DictionaryAccountType_OriginalFileDataID, T1.DictionaryAccountType_Version, T1.DictionaryAccountType_VersionAntecedentID, T1.DictionaryAccountType_VersionCertainty, T1.DictionaryAccountType_VersionWorkflowInstanceID, T1.DictionaryAccountType_VersionUpdatedBy, T1.DictionaryAccountType_VersionDeletedBy, T1.DictionaryAccountType_VersionOwnerContactID, T1.DictionaryAccountType_VersionOwnerCompanyID, T1.DictionaryAccountType_VersionUpdated)
    FROM (
        SELECT 
            T.AccountTypeID AS DictionaryAccountType_AccountTypeID, 
            T.StandardAccountTypeName AS DictionaryAccountType_StandardAccountTypeName, 
            T.CustomAccountTypeName AS DictionaryAccountType_CustomAccountTypeName, 
            T.Description AS DictionaryAccountType_Description, 
            T.FullDescription AS DictionaryAccountType_FullDescription, 
            T.Thumbnail AS DictionaryAccountType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAccountType_OriginalFileDataID, 
            T.Version AS DictionaryAccountType_Version, 
            T.VersionAntecedentID AS DictionaryAccountType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAccountType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAccountType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAccountType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAccountType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAccountType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAccountType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAccountType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryAccountType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryOrderStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView624()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryOrderStatus
        [NKD.Module.BusinessObjects.DictionaryOrderStatus](T1.DictionaryOrderStatus_OrderStatusID, T1.DictionaryOrderStatus_StandardOrderStatusName, T1.DictionaryOrderStatus_CustomOrderStatusName, T1.DictionaryOrderStatus_Description, T1.DictionaryOrderStatus_FullDescription, T1.DictionaryOrderStatus_Thumbnail, T1.DictionaryOrderStatus_OriginalFileDataID, T1.DictionaryOrderStatus_Version, T1.DictionaryOrderStatus_VersionAntecedentID, T1.DictionaryOrderStatus_VersionCertainty, T1.DictionaryOrderStatus_VersionWorkflowInstanceID, T1.DictionaryOrderStatus_VersionUpdatedBy, T1.DictionaryOrderStatus_VersionDeletedBy, T1.DictionaryOrderStatus_VersionOwnerContactID, T1.DictionaryOrderStatus_VersionOwnerCompanyID, T1.DictionaryOrderStatus_VersionUpdated)
    FROM (
        SELECT 
            T.OrderStatusID AS DictionaryOrderStatus_OrderStatusID, 
            T.StandardOrderStatusName AS DictionaryOrderStatus_StandardOrderStatusName, 
            T.CustomOrderStatusName AS DictionaryOrderStatus_CustomOrderStatusName, 
            T.Description AS DictionaryOrderStatus_Description, 
            T.FullDescription AS DictionaryOrderStatus_FullDescription, 
            T.Thumbnail AS DictionaryOrderStatus_Thumbnail, 
            T.OriginalFileDataID AS DictionaryOrderStatus_OriginalFileDataID, 
            T.Version AS DictionaryOrderStatus_Version, 
            T.VersionAntecedentID AS DictionaryOrderStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryOrderStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryOrderStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryOrderStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryOrderStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryOrderStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryOrderStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryOrderStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryOrderStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryRouteTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView625()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryRouteTypes
        [NKD.Module.BusinessObjects.DictionaryRouteType](T1.DictionaryRouteType_RouteTypeID, T1.DictionaryRouteType_StandardRouteTypeName, T1.DictionaryRouteType_CustomRouteTypeName, T1.DictionaryRouteType_Description, T1.DictionaryRouteType_FullDescription, T1.DictionaryRouteType_Thumbnail, T1.DictionaryRouteType_OriginalFileDataID, T1.DictionaryRouteType_Version, T1.DictionaryRouteType_VersionAntecedentID, T1.DictionaryRouteType_VersionCertainty, T1.DictionaryRouteType_VersionWorkflowInstanceID, T1.DictionaryRouteType_VersionUpdatedBy, T1.DictionaryRouteType_VersionDeletedBy, T1.DictionaryRouteType_VersionOwnerContactID, T1.DictionaryRouteType_VersionOwnerCompanyID, T1.DictionaryRouteType_VersionUpdated)
    FROM (
        SELECT 
            T.RouteTypeID AS DictionaryRouteType_RouteTypeID, 
            T.StandardRouteTypeName AS DictionaryRouteType_StandardRouteTypeName, 
            T.CustomRouteTypeName AS DictionaryRouteType_CustomRouteTypeName, 
            T.Description AS DictionaryRouteType_Description, 
            T.FullDescription AS DictionaryRouteType_FullDescription, 
            T.Thumbnail AS DictionaryRouteType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryRouteType_OriginalFileDataID, 
            T.Version AS DictionaryRouteType_Version, 
            T.VersionAntecedentID AS DictionaryRouteType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryRouteType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryRouteType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryRouteType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryRouteType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryRouteType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryRouteType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryRouteType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryRouteType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Downloads.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView626()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Downloads
        [NKD.Module.BusinessObjects.Download](T1.Download_DownloadID, T1.Download_FileDataID, T1.Download_FileAllocated, T1.Download_FileChecksum, T1.Download_FilterCompanyID, T1.Download_FilterContactID, T1.Download_FilterServerID, T1.Download_FilterApplicationID, T1.Download_FilterClientIP, T1.Download_LicenseID, T1.Download_LicenseAssetID, T1.Download_RemainingDownloads, T1.Download_ValidFrom, T1.Download_ValidUntil, T1.Download_Version, T1.Download_VersionAntecedentID, T1.Download_VersionCertainty, T1.Download_VersionWorkflowInstanceID, T1.Download_VersionUpdatedBy, T1.Download_VersionDeletedBy, T1.Download_VersionOwnerContactID, T1.Download_VersionOwnerCompanyID, T1.Download_VersionUpdated)
    FROM (
        SELECT 
            T.DownloadID AS Download_DownloadID, 
            T.FileDataID AS Download_FileDataID, 
            T.FileAllocated AS Download_FileAllocated, 
            T.FileChecksum AS Download_FileChecksum, 
            T.FilterCompanyID AS Download_FilterCompanyID, 
            T.FilterContactID AS Download_FilterContactID, 
            T.FilterServerID AS Download_FilterServerID, 
            T.FilterApplicationID AS Download_FilterApplicationID, 
            T.FilterClientIP AS Download_FilterClientIP, 
            T.LicenseID AS Download_LicenseID, 
            T.LicenseAssetID AS Download_LicenseAssetID, 
            T.RemainingDownloads AS Download_RemainingDownloads, 
            T.ValidFrom AS Download_ValidFrom, 
            T.ValidUntil AS Download_ValidUntil, 
            T.Version AS Download_Version, 
            T.VersionAntecedentID AS Download_VersionAntecedentID, 
            T.VersionCertainty AS Download_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Download_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Download_VersionUpdatedBy, 
            T.VersionDeletedBy AS Download_VersionDeletedBy, 
            T.VersionOwnerContactID AS Download_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Download_VersionOwnerCompanyID, 
            T.VersionUpdated AS Download_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Download AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Problems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView627()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Problems
        [NKD.Module.BusinessObjects.Problem](T1.Problem_ProblemID, T1.Problem_ProblemName, T1.Problem_OptimiseForParameterID, T1.Problem_ProduceForParameterID, T1.Problem_OptimumMin, T1.Problem_OptimumMax, T1.Problem_ProductionMin, T1.Problem_ProductionMax, T1.Problem_Complexity, T1.Problem_IterationsMax, T1.Problem_SolutionETA, T1.Problem_LiveUpdateClient, T1.Problem_LiveUpdateServer, T1.Problem_UniversalPriority, T1.Problem_LastThreadID, T1.Problem_LastServerID, T1.Problem_IsThreadAlive, T1.Problem_ProblemCompleted, T1.Problem_ProblemTerminated, T1.Problem_ExecutedFromLocationID, T1.Problem_DefaultTickUnitID, T1.Problem_DefaultTicks, T1.Problem_DefaultTicksOffset, T1.Problem_DefaultTicksResolution, T1.Problem_DefaultCulture, T1.Problem_Version, T1.Problem_VersionAntecedentID, T1.Problem_VersionCertainty, T1.Problem_VersionWorkflowInstanceID, T1.Problem_VersionUpdatedBy, T1.Problem_VersionDeletedBy, T1.Problem_VersionOwnerContactID, T1.Problem_VersionOwnerCompanyID, T1.Problem_VersionUpdated)
    FROM (
        SELECT 
            T.ProblemID AS Problem_ProblemID, 
            T.ProblemName AS Problem_ProblemName, 
            T.OptimiseForParameterID AS Problem_OptimiseForParameterID, 
            T.ProduceForParameterID AS Problem_ProduceForParameterID, 
            T.OptimumMin AS Problem_OptimumMin, 
            T.OptimumMax AS Problem_OptimumMax, 
            T.ProductionMin AS Problem_ProductionMin, 
            T.ProductionMax AS Problem_ProductionMax, 
            T.Complexity AS Problem_Complexity, 
            T.IterationsMax AS Problem_IterationsMax, 
            T.SolutionETA AS Problem_SolutionETA, 
            T.LiveUpdateClient AS Problem_LiveUpdateClient, 
            T.LiveUpdateServer AS Problem_LiveUpdateServer, 
            T.UniversalPriority AS Problem_UniversalPriority, 
            T.LastThreadID AS Problem_LastThreadID, 
            T.LastServerID AS Problem_LastServerID, 
            T.IsThreadAlive AS Problem_IsThreadAlive, 
            T.ProblemCompleted AS Problem_ProblemCompleted, 
            T.ProblemTerminated AS Problem_ProblemTerminated, 
            T.ExecutedFromLocationID AS Problem_ExecutedFromLocationID, 
            T.DefaultTickUnitID AS Problem_DefaultTickUnitID, 
            T.DefaultTicks AS Problem_DefaultTicks, 
            T.DefaultTicksOffset AS Problem_DefaultTicksOffset, 
            T.DefaultTicksResolution AS Problem_DefaultTicksResolution, 
            T.DefaultCulture AS Problem_DefaultCulture, 
            T.Version AS Problem_Version, 
            T.VersionAntecedentID AS Problem_VersionAntecedentID, 
            T.VersionCertainty AS Problem_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Problem_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Problem_VersionUpdatedBy, 
            T.VersionDeletedBy AS Problem_VersionDeletedBy, 
            T.VersionOwnerContactID AS Problem_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Problem_VersionOwnerCompanyID, 
            T.VersionUpdated AS Problem_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Problem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProblemAssetDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView628()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProblemAssetDatas
        [NKD.Module.BusinessObjects.ProblemAssetData](T1.ProblemAssetData_ProblemAssetDataID, T1.ProblemAssetData_ProblemID, T1.ProblemAssetData_AssetDataID, T1.ProblemAssetData_Version, T1.ProblemAssetData_VersionAntecedentID, T1.ProblemAssetData_VersionCertainty, T1.ProblemAssetData_VersionWorkflowInstanceID, T1.ProblemAssetData_VersionUpdatedBy, T1.ProblemAssetData_VersionDeletedBy, T1.ProblemAssetData_VersionOwnerContactID, T1.ProblemAssetData_VersionOwnerCompanyID, T1.ProblemAssetData_VersionUpdated)
    FROM (
        SELECT 
            T.ProblemAssetDataID AS ProblemAssetData_ProblemAssetDataID, 
            T.ProblemID AS ProblemAssetData_ProblemID, 
            T.AssetDataID AS ProblemAssetData_AssetDataID, 
            T.Version AS ProblemAssetData_Version, 
            T.VersionAntecedentID AS ProblemAssetData_VersionAntecedentID, 
            T.VersionCertainty AS ProblemAssetData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProblemAssetData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProblemAssetData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProblemAssetData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProblemAssetData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProblemAssetData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProblemAssetData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProblemAssetData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProblemRequirements.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView629()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProblemRequirements
        [NKD.Module.BusinessObjects.ProblemRequirement](T1.ProblemRequirement_ProblemRequirementID, T1.ProblemRequirement_ProblemID, T1.ProblemRequirement_ProblemRequirementName, T1.ProblemRequirement_Complexity, T1.ProblemRequirement_IterationsMax, T1.ProblemRequirement_Version, T1.ProblemRequirement_VersionAntecedentID, T1.ProblemRequirement_VersionCertainty, T1.ProblemRequirement_VersionWorkflowInstanceID, T1.ProblemRequirement_VersionUpdatedBy, T1.ProblemRequirement_VersionDeletedBy, T1.ProblemRequirement_VersionOwnerContactID, T1.ProblemRequirement_VersionOwnerCompanyID, T1.ProblemRequirement_VersionUpdated)
    FROM (
        SELECT 
            T.ProblemRequirementID AS ProblemRequirement_ProblemRequirementID, 
            T.ProblemID AS ProblemRequirement_ProblemID, 
            T.ProblemRequirementName AS ProblemRequirement_ProblemRequirementName, 
            T.Complexity AS ProblemRequirement_Complexity, 
            T.IterationsMax AS ProblemRequirement_IterationsMax, 
            T.Version AS ProblemRequirement_Version, 
            T.VersionAntecedentID AS ProblemRequirement_VersionAntecedentID, 
            T.VersionCertainty AS ProblemRequirement_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProblemRequirement_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProblemRequirement_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProblemRequirement_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProblemRequirement_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProblemRequirement_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProblemRequirement_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirement AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProblemRequirementAssetDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView630()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProblemRequirementAssetDatas
        [NKD.Module.BusinessObjects.ProblemRequirementAssetData](T1.ProblemRequirementAssetData_ProblemRequirementAssetDataID, T1.ProblemRequirementAssetData_ProblemRequirementID, T1.ProblemRequirementAssetData_AssetDataID, T1.ProblemRequirementAssetData_SuggestedAvailabilityID, T1.ProblemRequirementAssetData_SuggestedProvinceID, T1.ProblemRequirementAssetData_SuggestedLocationID, T1.ProblemRequirementAssetData_TickUnitID, T1.ProblemRequirementAssetData_Ticks, T1.ProblemRequirementAssetData_TicksOffset, T1.ProblemRequirementAssetData_TicksResolution, T1.ProblemRequirementAssetData_ValidFrom, T1.ProblemRequirementAssetData_ValidUntil, T1.ProblemRequirementAssetData_Culture, T1.ProblemRequirementAssetData_Weight, T1.ProblemRequirementAssetData_Version, T1.ProblemRequirementAssetData_VersionAntecedentID, T1.ProblemRequirementAssetData_VersionCertainty, T1.ProblemRequirementAssetData_VersionWorkflowInstanceID, T1.ProblemRequirementAssetData_VersionUpdatedBy, T1.ProblemRequirementAssetData_VersionDeletedBy, T1.ProblemRequirementAssetData_VersionOwnerContactID, T1.ProblemRequirementAssetData_VersionOwnerCompanyID, T1.ProblemRequirementAssetData_VersionUpdated)
    FROM (
        SELECT 
            T.ProblemRequirementAssetDataID AS ProblemRequirementAssetData_ProblemRequirementAssetDataID, 
            T.ProblemRequirementID AS ProblemRequirementAssetData_ProblemRequirementID, 
            T.AssetDataID AS ProblemRequirementAssetData_AssetDataID, 
            T.SuggestedAvailabilityID AS ProblemRequirementAssetData_SuggestedAvailabilityID, 
            T.SuggestedProvinceID AS ProblemRequirementAssetData_SuggestedProvinceID, 
            T.SuggestedLocationID AS ProblemRequirementAssetData_SuggestedLocationID, 
            T.TickUnitID AS ProblemRequirementAssetData_TickUnitID, 
            T.Ticks AS ProblemRequirementAssetData_Ticks, 
            T.TicksOffset AS ProblemRequirementAssetData_TicksOffset, 
            T.TicksResolution AS ProblemRequirementAssetData_TicksResolution, 
            T.ValidFrom AS ProblemRequirementAssetData_ValidFrom, 
            T.ValidUntil AS ProblemRequirementAssetData_ValidUntil, 
            T.Culture AS ProblemRequirementAssetData_Culture, 
            T.Weight AS ProblemRequirementAssetData_Weight, 
            T.Version AS ProblemRequirementAssetData_Version, 
            T.VersionAntecedentID AS ProblemRequirementAssetData_VersionAntecedentID, 
            T.VersionCertainty AS ProblemRequirementAssetData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProblemRequirementAssetData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProblemRequirementAssetData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProblemRequirementAssetData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProblemRequirementAssetData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProblemRequirementAssetData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProblemRequirementAssetData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirementAssetData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProblemSolutions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView631()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProblemSolutions
        [NKD.Module.BusinessObjects.ProblemSolution](T1.ProblemSolution_ProblemSolutionID, T1.ProblemSolution_ProblemID, T1.ProblemSolution_CostOptimum, T1.ProblemSolution_Confidence, T1.ProblemSolution_Iterations, T1.ProblemSolution_Version, T1.ProblemSolution_VersionAntecedentID, T1.ProblemSolution_VersionCertainty, T1.ProblemSolution_VersionWorkflowInstanceID, T1.ProblemSolution_VersionUpdatedBy, T1.ProblemSolution_VersionDeletedBy, T1.ProblemSolution_VersionOwnerContactID, T1.ProblemSolution_VersionOwnerCompanyID, T1.ProblemSolution_VersionUpdated)
    FROM (
        SELECT 
            T.ProblemSolutionID AS ProblemSolution_ProblemSolutionID, 
            T.ProblemID AS ProblemSolution_ProblemID, 
            T.CostOptimum AS ProblemSolution_CostOptimum, 
            T.Confidence AS ProblemSolution_Confidence, 
            T.Iterations AS ProblemSolution_Iterations, 
            T.Version AS ProblemSolution_Version, 
            T.VersionAntecedentID AS ProblemSolution_VersionAntecedentID, 
            T.VersionCertainty AS ProblemSolution_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProblemSolution_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProblemSolution_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProblemSolution_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProblemSolution_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProblemSolution_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProblemSolution_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProblemSolution AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProblemSolutionAssetDataAllocations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView632()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProblemSolutionAssetDataAllocations
        [NKD.Module.BusinessObjects.ProblemSolutionAssetDataAllocation](T1.ProblemSolutionAssetDataAllocation_ProblemSolutionID, T1.ProblemSolutionAssetDataAllocation_AssetDataID, T1.ProblemSolutionAssetDataAllocation_Weight, T1.ProblemSolutionAssetDataAllocation_WindowCost, T1.ProblemSolutionAssetDataAllocation_WindowValue, T1.ProblemSolutionAssetDataAllocation_WindowMetric, T1.ProblemSolutionAssetDataAllocation_AllocationID, T1.ProblemSolutionAssetDataAllocation_Version, T1.ProblemSolutionAssetDataAllocation_VersionAntecedentID, T1.ProblemSolutionAssetDataAllocation_VersionCertainty, T1.ProblemSolutionAssetDataAllocation_VersionWorkflowInstanceID, T1.ProblemSolutionAssetDataAllocation_VersionUpdatedBy, T1.ProblemSolutionAssetDataAllocation_VersionDeletedBy, T1.ProblemSolutionAssetDataAllocation_VersionOwnerContactID, T1.ProblemSolutionAssetDataAllocation_VersionOwnerCompanyID, T1.ProblemSolutionAssetDataAllocation_VersionUpdated, T1.ProblemSolutionAssetDataAllocation_ProblemSolutionAssetDataAllocationID)
    FROM (
        SELECT 
            T.ProblemSolutionID AS ProblemSolutionAssetDataAllocation_ProblemSolutionID, 
            T.AssetDataID AS ProblemSolutionAssetDataAllocation_AssetDataID, 
            T.Weight AS ProblemSolutionAssetDataAllocation_Weight, 
            T.WindowCost AS ProblemSolutionAssetDataAllocation_WindowCost, 
            T.WindowValue AS ProblemSolutionAssetDataAllocation_WindowValue, 
            T.WindowMetric AS ProblemSolutionAssetDataAllocation_WindowMetric, 
            T.AllocationID AS ProblemSolutionAssetDataAllocation_AllocationID, 
            T.Version AS ProblemSolutionAssetDataAllocation_Version, 
            T.VersionAntecedentID AS ProblemSolutionAssetDataAllocation_VersionAntecedentID, 
            T.VersionCertainty AS ProblemSolutionAssetDataAllocation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProblemSolutionAssetDataAllocation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProblemSolutionAssetDataAllocation_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProblemSolutionAssetDataAllocation_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProblemSolutionAssetDataAllocation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProblemSolutionAssetDataAllocation_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProblemSolutionAssetDataAllocation_VersionUpdated, 
            T.ProblemSolutionAssetDataAllocationID AS ProblemSolutionAssetDataAllocation_ProblemSolutionAssetDataAllocationID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProblemSolutionAssetDataAllocation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplierModelContracts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView633()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplierModelContracts
        [NKD.Module.BusinessObjects.SupplierModelContract](T1.SupplierModelContract_SupplierModelContractID, T1.SupplierModelContract_SupplierModelID, T1.SupplierModelContract_ContractID, T1.SupplierModelContract_RequiredFrom, T1.SupplierModelContract_IsIntendedForDistributor, T1.SupplierModelContract_IsIntendedForEndUser, T1.SupplierModelContract_IsIntendedForSupplier, T1.SupplierModelContract_Version, T1.SupplierModelContract_VersionAntecedentID, T1.SupplierModelContract_VersionCertainty, T1.SupplierModelContract_VersionWorkflowInstanceID, T1.SupplierModelContract_VersionUpdatedBy, T1.SupplierModelContract_VersionDeletedBy, T1.SupplierModelContract_VersionOwnerContactID, T1.SupplierModelContract_VersionOwnerCompanyID, T1.SupplierModelContract_VersionUpdated)
    FROM (
        SELECT 
            T.SupplierModelContractID AS SupplierModelContract_SupplierModelContractID, 
            T.SupplierModelID AS SupplierModelContract_SupplierModelID, 
            T.ContractID AS SupplierModelContract_ContractID, 
            T.RequiredFrom AS SupplierModelContract_RequiredFrom, 
            T.IsIntendedForDistributor AS SupplierModelContract_IsIntendedForDistributor, 
            T.IsIntendedForEndUser AS SupplierModelContract_IsIntendedForEndUser, 
            T.IsIntendedForSupplier AS SupplierModelContract_IsIntendedForSupplier, 
            T.Version AS SupplierModelContract_Version, 
            T.VersionAntecedentID AS SupplierModelContract_VersionAntecedentID, 
            T.VersionCertainty AS SupplierModelContract_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplierModelContract_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplierModelContract_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplierModelContract_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplierModelContract_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplierModelContract_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplierModelContract_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplierModelContract AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplierPartContracts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView634()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplierPartContracts
        [NKD.Module.BusinessObjects.SupplierPartContract](T1.SupplierPartContract_SupplierPartContractID, T1.SupplierPartContract_SupplierPartID, T1.SupplierPartContract_ContractID, T1.SupplierPartContract_RequiredFrom, T1.SupplierPartContract_IsIntendedForDistributor, T1.SupplierPartContract_IsIntendedForEndUser, T1.SupplierPartContract_IsIntendedForSupplier, T1.SupplierPartContract_Version, T1.SupplierPartContract_VersionAntecedentID, T1.SupplierPartContract_VersionCertainty, T1.SupplierPartContract_VersionWorkflowInstanceID, T1.SupplierPartContract_VersionUpdatedBy, T1.SupplierPartContract_VersionDeletedBy, T1.SupplierPartContract_VersionOwnerContactID, T1.SupplierPartContract_VersionOwnerCompanyID, T1.SupplierPartContract_VersionUpdated)
    FROM (
        SELECT 
            T.SupplierPartContractID AS SupplierPartContract_SupplierPartContractID, 
            T.SupplierPartID AS SupplierPartContract_SupplierPartID, 
            T.ContractID AS SupplierPartContract_ContractID, 
            T.RequiredFrom AS SupplierPartContract_RequiredFrom, 
            T.IsIntendedForDistributor AS SupplierPartContract_IsIntendedForDistributor, 
            T.IsIntendedForEndUser AS SupplierPartContract_IsIntendedForEndUser, 
            T.IsIntendedForSupplier AS SupplierPartContract_IsIntendedForSupplier, 
            T.Version AS SupplierPartContract_Version, 
            T.VersionAntecedentID AS SupplierPartContract_VersionAntecedentID, 
            T.VersionCertainty AS SupplierPartContract_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplierPartContract_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplierPartContract_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplierPartContract_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplierPartContract_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplierPartContract_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplierPartContract_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplierPartContract AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplyContractConditions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView635()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplyContractConditions
        [NKD.Module.BusinessObjects.SupplyContractCondition](T1.SupplyContractCondition_SupplyContractConditionID, T1.SupplyContractCondition_ContractID, T1.SupplyContractCondition_ContractConditionID, T1.SupplyContractCondition_AgreedForCompanyID, T1.SupplyContractCondition_AgreedByContactID, T1.SupplyContractCondition_Agreed, T1.SupplyContractCondition_Version, T1.SupplyContractCondition_VersionAntecedentID, T1.SupplyContractCondition_VersionCertainty, T1.SupplyContractCondition_VersionWorkflowInstanceID, T1.SupplyContractCondition_VersionUpdatedBy, T1.SupplyContractCondition_VersionDeletedBy, T1.SupplyContractCondition_VersionOwnerContactID, T1.SupplyContractCondition_VersionOwnerCompanyID, T1.SupplyContractCondition_VersionUpdated, T1.SupplyContractCondition_SupplyID)
    FROM (
        SELECT 
            T.SupplyContractConditionID AS SupplyContractCondition_SupplyContractConditionID, 
            T.ContractID AS SupplyContractCondition_ContractID, 
            T.ContractConditionID AS SupplyContractCondition_ContractConditionID, 
            T.AgreedForCompanyID AS SupplyContractCondition_AgreedForCompanyID, 
            T.AgreedByContactID AS SupplyContractCondition_AgreedByContactID, 
            T.Agreed AS SupplyContractCondition_Agreed, 
            T.Version AS SupplyContractCondition_Version, 
            T.VersionAntecedentID AS SupplyContractCondition_VersionAntecedentID, 
            T.VersionCertainty AS SupplyContractCondition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplyContractCondition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplyContractCondition_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplyContractCondition_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplyContractCondition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplyContractCondition_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplyContractCondition_VersionUpdated, 
            T.SupplyID AS SupplyContractCondition_SupplyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplyContractCondition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Communications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView636()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Communications
        [NKD.Module.BusinessObjects.Communication](T1.Communication_CommunicationID, T1.Communication_CommunicationName, T1.Communication_CommunicationContactID, T1.Communication_CommunicationCompanyID, T1.Communication_StatusWorkTypeID, T1.Communication_RegardingWorkTypeID, T1.Communication_RegardingCompanyID, T1.Communication_RegardingContactID, T1.Communication_RegardingFileDataID, T1.Communication_RegardingProjectID, T1.Communication_RegardingExperienceID, T1.Communication_RegardingDescription, T1.Communication_OpenedBy, T1.Communication_AssignedBy, T1.Communication_MaintainedBy, T1.Communication_ClosedBy, T1.Communication_EstimatedClosure, T1.Communication_EstimatedDurationHours, T1.Communication_EstimatedRevenue, T1.Communication_EstimatedCost, T1.Communication_Probability, T1.Communication_Comment, T1.Communication_Version, T1.Communication_VersionAntecedentID, T1.Communication_VersionCertainty, T1.Communication_VersionWorkflowInstanceID, T1.Communication_VersionUpdatedBy, T1.Communication_VersionDeletedBy, T1.Communication_VersionOwnerContactID, T1.Communication_VersionOwnerCompanyID, T1.Communication_VersionUpdated, T1.Communication_CommunicationMobile, T1.Communication_CommunicationEmail, T1.Communication_RegardingTableType, T1.Communication_RegardingReferenceID)
    FROM (
        SELECT 
            T.CommunicationID AS Communication_CommunicationID, 
            T.CommunicationName AS Communication_CommunicationName, 
            T.CommunicationContactID AS Communication_CommunicationContactID, 
            T.CommunicationCompanyID AS Communication_CommunicationCompanyID, 
            T.StatusWorkTypeID AS Communication_StatusWorkTypeID, 
            T.RegardingWorkTypeID AS Communication_RegardingWorkTypeID, 
            T.RegardingCompanyID AS Communication_RegardingCompanyID, 
            T.RegardingContactID AS Communication_RegardingContactID, 
            T.RegardingFileDataID AS Communication_RegardingFileDataID, 
            T.RegardingProjectID AS Communication_RegardingProjectID, 
            T.RegardingExperienceID AS Communication_RegardingExperienceID, 
            T.RegardingDescription AS Communication_RegardingDescription, 
            T.OpenedBy AS Communication_OpenedBy, 
            T.AssignedBy AS Communication_AssignedBy, 
            T.MaintainedBy AS Communication_MaintainedBy, 
            T.ClosedBy AS Communication_ClosedBy, 
            T.EstimatedClosure AS Communication_EstimatedClosure, 
            T.EstimatedDurationHours AS Communication_EstimatedDurationHours, 
            T.EstimatedRevenue AS Communication_EstimatedRevenue, 
            T.EstimatedCost AS Communication_EstimatedCost, 
            T.Probability AS Communication_Probability, 
            T.Comment AS Communication_Comment, 
            T.Version AS Communication_Version, 
            T.VersionAntecedentID AS Communication_VersionAntecedentID, 
            T.VersionCertainty AS Communication_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Communication_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Communication_VersionUpdatedBy, 
            T.VersionDeletedBy AS Communication_VersionDeletedBy, 
            T.VersionOwnerContactID AS Communication_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Communication_VersionOwnerCompanyID, 
            T.VersionUpdated AS Communication_VersionUpdated, 
            T.CommunicationMobile AS Communication_CommunicationMobile, 
            T.CommunicationEmail AS Communication_CommunicationEmail, 
            T.RegardingTableType AS Communication_RegardingTableType, 
            T.RegardingReferenceID AS Communication_RegardingReferenceID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Communication AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAddressTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView637()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAddressTypes
        [NKD.Module.BusinessObjects.DictionaryAddressType](T1.DictionaryAddressType_AddressTypeID, T1.DictionaryAddressType_StandardAddressTypeName, T1.DictionaryAddressType_CustomAddressTypeName, T1.DictionaryAddressType_Description, T1.DictionaryAddressType_FullDescription, T1.DictionaryAddressType_Thumbnail, T1.DictionaryAddressType_OriginalFileDataID, T1.DictionaryAddressType_Version, T1.DictionaryAddressType_VersionAntecedentID, T1.DictionaryAddressType_VersionCertainty, T1.DictionaryAddressType_VersionWorkflowInstanceID, T1.DictionaryAddressType_VersionUpdatedBy, T1.DictionaryAddressType_VersionDeletedBy, T1.DictionaryAddressType_VersionOwnerContactID, T1.DictionaryAddressType_VersionOwnerCompanyID, T1.DictionaryAddressType_VersionUpdated)
    FROM (
        SELECT 
            T.AddressTypeID AS DictionaryAddressType_AddressTypeID, 
            T.StandardAddressTypeName AS DictionaryAddressType_StandardAddressTypeName, 
            T.CustomAddressTypeName AS DictionaryAddressType_CustomAddressTypeName, 
            T.Description AS DictionaryAddressType_Description, 
            T.FullDescription AS DictionaryAddressType_FullDescription, 
            T.Thumbnail AS DictionaryAddressType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAddressType_OriginalFileDataID, 
            T.Version AS DictionaryAddressType_Version, 
            T.VersionAntecedentID AS DictionaryAddressType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAddressType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAddressType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAddressType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAddressType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAddressType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAddressType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAddressType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryAddressType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationPaymentProviderContacts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView638()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationPaymentProviderContacts
        [NKD.Module.BusinessObjects.ApplicationPaymentProviderContact](T1.ApplicationPaymentProviderContact_ApplicationPaymentProviderContactID, T1.ApplicationPaymentProviderContact_ApplicationPaymentProviderID, T1.ApplicationPaymentProviderContact_ContactID, T1.ApplicationPaymentProviderContact_CustomerReference, T1.ApplicationPaymentProviderContact_UserDataType, T1.ApplicationPaymentProviderContact_SystemDataType, T1.ApplicationPaymentProviderContact_Version, T1.ApplicationPaymentProviderContact_VersionAntecedentID, T1.ApplicationPaymentProviderContact_VersionCertainty, T1.ApplicationPaymentProviderContact_VersionWorkflowInstanceID, T1.ApplicationPaymentProviderContact_VersionUpdatedBy, T1.ApplicationPaymentProviderContact_VersionDeletedBy, T1.ApplicationPaymentProviderContact_VersionOwnerContactID, T1.ApplicationPaymentProviderContact_VersionOwnerCompanyID, T1.ApplicationPaymentProviderContact_VersionUpdated)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderContactID AS ApplicationPaymentProviderContact_ApplicationPaymentProviderContactID, 
            T.ApplicationPaymentProviderID AS ApplicationPaymentProviderContact_ApplicationPaymentProviderID, 
            T.ContactID AS ApplicationPaymentProviderContact_ContactID, 
            T.CustomerReference AS ApplicationPaymentProviderContact_CustomerReference, 
            T.UserDataType AS ApplicationPaymentProviderContact_UserDataType, 
            T.SystemDataType AS ApplicationPaymentProviderContact_SystemDataType, 
            T.Version AS ApplicationPaymentProviderContact_Version, 
            T.VersionAntecedentID AS ApplicationPaymentProviderContact_VersionAntecedentID, 
            T.VersionCertainty AS ApplicationPaymentProviderContact_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ApplicationPaymentProviderContact_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ApplicationPaymentProviderContact_VersionUpdatedBy, 
            T.VersionDeletedBy AS ApplicationPaymentProviderContact_VersionDeletedBy, 
            T.VersionOwnerContactID AS ApplicationPaymentProviderContact_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ApplicationPaymentProviderContact_VersionOwnerCompanyID, 
            T.VersionUpdated AS ApplicationPaymentProviderContact_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderContact AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PaymentInvoices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView639()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PaymentInvoices
        [NKD.Module.BusinessObjects.PaymentInvoice](T1.PaymentInvoice_PaymentInvoiceID, T1.PaymentInvoice_PaymentID, T1.PaymentInvoice_InvoiceID, T1.PaymentInvoice_IsFinalPaymentInvoice, T1.PaymentInvoice_Version, T1.PaymentInvoice_VersionAntecedentID, T1.PaymentInvoice_VersionCertainty, T1.PaymentInvoice_VersionWorkflowInstanceID, T1.PaymentInvoice_VersionUpdatedBy, T1.PaymentInvoice_VersionDeletedBy, T1.PaymentInvoice_VersionOwnerContactID, T1.PaymentInvoice_VersionOwnerCompanyID, T1.PaymentInvoice_VersionUpdated)
    FROM (
        SELECT 
            T.PaymentInvoiceID AS PaymentInvoice_PaymentInvoiceID, 
            T.PaymentID AS PaymentInvoice_PaymentID, 
            T.InvoiceID AS PaymentInvoice_InvoiceID, 
            T.IsFinalPaymentInvoice AS PaymentInvoice_IsFinalPaymentInvoice, 
            T.Version AS PaymentInvoice_Version, 
            T.VersionAntecedentID AS PaymentInvoice_VersionAntecedentID, 
            T.VersionCertainty AS PaymentInvoice_VersionCertainty, 
            T.VersionWorkflowInstanceID AS PaymentInvoice_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS PaymentInvoice_VersionUpdatedBy, 
            T.VersionDeletedBy AS PaymentInvoice_VersionDeletedBy, 
            T.VersionOwnerContactID AS PaymentInvoice_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS PaymentInvoice_VersionOwnerCompanyID, 
            T.VersionUpdated AS PaymentInvoice_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_PaymentInvoice AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TwoStepAuthenticationDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView640()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TwoStepAuthenticationDatas
        [NKD.Module.BusinessObjects.TwoStepAuthenticationData](T1.TwoStepAuthenticationData_TwoStepAuthenticationDataID, T1.TwoStepAuthenticationData_Sequence, T1.TwoStepAuthenticationData_TableType, T1.TwoStepAuthenticationData_ReferenceID, T1.TwoStepAuthenticationData_ReferenceName, T1.TwoStepAuthenticationData_ContactID, T1.TwoStepAuthenticationData_Mobile, T1.TwoStepAuthenticationData_Sent, T1.TwoStepAuthenticationData_ServerReceipt, T1.TwoStepAuthenticationData_IsServerValid, T1.TwoStepAuthenticationData_AcceptRepliesUntil, T1.TwoStepAuthenticationData_Verified, T1.TwoStepAuthenticationData_VerifiedURLHost, T1.TwoStepAuthenticationData_VerifiedURLQueryString, T1.TwoStepAuthenticationData_RequestedByIP, T1.TwoStepAuthenticationData_ContactReceipt, T1.TwoStepAuthenticationData_ContactAccepted, T1.TwoStepAuthenticationData_Version, T1.TwoStepAuthenticationData_VersionAntecedentID, T1.TwoStepAuthenticationData_VersionCertainty, T1.TwoStepAuthenticationData_VersionWorkflowInstanceID, T1.TwoStepAuthenticationData_VersionUpdatedBy, T1.TwoStepAuthenticationData_VersionDeletedBy, T1.TwoStepAuthenticationData_VersionOwnerContactID, T1.TwoStepAuthenticationData_VersionOwnerCompanyID, T1.TwoStepAuthenticationData_VersionUpdated, T1.TwoStepAuthenticationData_VerificationCode)
    FROM (
        SELECT 
            T.TwoStepAuthenticationDataID AS TwoStepAuthenticationData_TwoStepAuthenticationDataID, 
            T.Sequence AS TwoStepAuthenticationData_Sequence, 
            T.TableType AS TwoStepAuthenticationData_TableType, 
            T.ReferenceID AS TwoStepAuthenticationData_ReferenceID, 
            T.ReferenceName AS TwoStepAuthenticationData_ReferenceName, 
            T.ContactID AS TwoStepAuthenticationData_ContactID, 
            T.Mobile AS TwoStepAuthenticationData_Mobile, 
            T.Sent AS TwoStepAuthenticationData_Sent, 
            T.ServerReceipt AS TwoStepAuthenticationData_ServerReceipt, 
            T.IsServerValid AS TwoStepAuthenticationData_IsServerValid, 
            T.AcceptRepliesUntil AS TwoStepAuthenticationData_AcceptRepliesUntil, 
            T.Verified AS TwoStepAuthenticationData_Verified, 
            T.VerifiedURLHost AS TwoStepAuthenticationData_VerifiedURLHost, 
            T.VerifiedURLQueryString AS TwoStepAuthenticationData_VerifiedURLQueryString, 
            T.RequestedByIP AS TwoStepAuthenticationData_RequestedByIP, 
            T.ContactReceipt AS TwoStepAuthenticationData_ContactReceipt, 
            T.ContactAccepted AS TwoStepAuthenticationData_ContactAccepted, 
            T.Version AS TwoStepAuthenticationData_Version, 
            T.VersionAntecedentID AS TwoStepAuthenticationData_VersionAntecedentID, 
            T.VersionCertainty AS TwoStepAuthenticationData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TwoStepAuthenticationData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TwoStepAuthenticationData_VersionUpdatedBy, 
            T.VersionDeletedBy AS TwoStepAuthenticationData_VersionDeletedBy, 
            T.VersionOwnerContactID AS TwoStepAuthenticationData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TwoStepAuthenticationData_VersionOwnerCompanyID, 
            T.VersionUpdated AS TwoStepAuthenticationData_VersionUpdated, 
            T.VerificationCode AS TwoStepAuthenticationData_VerificationCode, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_TwoStepAuthenticationData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Affiliates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView641()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Affiliates
        [NKD.Module.BusinessObjects.Affiliate](T1.Affiliate_AffiliateID, T1.Affiliate_ParentContactID, T1.Affiliate_Version, T1.Affiliate_VersionAntecedentID, T1.Affiliate_VersionCertainty, T1.Affiliate_VersionWorkflowInstanceID, T1.Affiliate_VersionUpdatedBy, T1.Affiliate_VersionDeletedBy, T1.Affiliate_VersionOwnerContactID, T1.Affiliate_VersionOwnerCompanyID, T1.Affiliate_VersionUpdated, T1.Affiliate_AffiliateContactID, T1.Affiliate_AffiliateTypeID, T1.Affiliate_InitialIP)
    FROM (
        SELECT 
            T.AffiliateID AS Affiliate_AffiliateID, 
            T.ParentContactID AS Affiliate_ParentContactID, 
            T.Version AS Affiliate_Version, 
            T.VersionAntecedentID AS Affiliate_VersionAntecedentID, 
            T.VersionCertainty AS Affiliate_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Affiliate_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Affiliate_VersionUpdatedBy, 
            T.VersionDeletedBy AS Affiliate_VersionDeletedBy, 
            T.VersionOwnerContactID AS Affiliate_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Affiliate_VersionOwnerCompanyID, 
            T.VersionUpdated AS Affiliate_VersionUpdated, 
            T.AffiliateContactID AS Affiliate_AffiliateContactID, 
            T.AffiliateTypeID AS Affiliate_AffiliateTypeID, 
            T.InitialIP AS Affiliate_InitialIP, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Affiliate AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAffiliateTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView642()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAffiliateTypes
        [NKD.Module.BusinessObjects.DictionaryAffiliateType](T1.DictionaryAffiliateType_AffiliateTypeID, T1.DictionaryAffiliateType_StandardAffiliateTypeName, T1.DictionaryAffiliateType_CustomAffiliateTypeName, T1.DictionaryAffiliateType_Rate, T1.DictionaryAffiliateType_Description, T1.DictionaryAffiliateType_FullDescription, T1.DictionaryAffiliateType_Thumbnail, T1.DictionaryAffiliateType_OriginalFileDataID, T1.DictionaryAffiliateType_Version, T1.DictionaryAffiliateType_VersionAntecedentID, T1.DictionaryAffiliateType_VersionCertainty, T1.DictionaryAffiliateType_VersionWorkflowInstanceID, T1.DictionaryAffiliateType_VersionUpdatedBy, T1.DictionaryAffiliateType_VersionDeletedBy, T1.DictionaryAffiliateType_VersionOwnerContactID, T1.DictionaryAffiliateType_VersionOwnerCompanyID, T1.DictionaryAffiliateType_VersionUpdated)
    FROM (
        SELECT 
            T.AffiliateTypeID AS DictionaryAffiliateType_AffiliateTypeID, 
            T.StandardAffiliateTypeName AS DictionaryAffiliateType_StandardAffiliateTypeName, 
            T.CustomAffiliateTypeName AS DictionaryAffiliateType_CustomAffiliateTypeName, 
            T.Rate AS DictionaryAffiliateType_Rate, 
            T.Description AS DictionaryAffiliateType_Description, 
            T.FullDescription AS DictionaryAffiliateType_FullDescription, 
            T.Thumbnail AS DictionaryAffiliateType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAffiliateType_OriginalFileDataID, 
            T.Version AS DictionaryAffiliateType_Version, 
            T.VersionAntecedentID AS DictionaryAffiliateType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAffiliateType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAffiliateType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAffiliateType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAffiliateType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAffiliateType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAffiliateType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAffiliateType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryAffiliateType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CommunicationEmails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView643()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CommunicationEmails
        [NKD.Module.BusinessObjects.CommunicationEmails](T1.CommunicationEmails_CommunicationEmailID, T1.CommunicationEmails_CommunicationEmail, T1.CommunicationEmails_CommunicationID, T1.CommunicationEmails_Version, T1.CommunicationEmails_VersionAntecedentID, T1.CommunicationEmails_VersionCertainty, T1.CommunicationEmails_VersionWorkflowInstanceID, T1.CommunicationEmails_VersionUpdatedBy, T1.CommunicationEmails_VersionDeletedBy, T1.CommunicationEmails_VersionOwnerContactID, T1.CommunicationEmails_VersionOwnerCompanyID, T1.CommunicationEmails_VersionUpdated, T1.CommunicationEmails_ContactID)
    FROM (
        SELECT 
            T.CommunicationEmailID AS CommunicationEmails_CommunicationEmailID, 
            T.CommunicationEmail AS CommunicationEmails_CommunicationEmail, 
            T.CommunicationID AS CommunicationEmails_CommunicationID, 
            T.Version AS CommunicationEmails_Version, 
            T.VersionAntecedentID AS CommunicationEmails_VersionAntecedentID, 
            T.VersionCertainty AS CommunicationEmails_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CommunicationEmails_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CommunicationEmails_VersionUpdatedBy, 
            T.VersionDeletedBy AS CommunicationEmails_VersionDeletedBy, 
            T.VersionOwnerContactID AS CommunicationEmails_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CommunicationEmails_VersionOwnerCompanyID, 
            T.VersionUpdated AS CommunicationEmails_VersionUpdated, 
            T.ContactID AS CommunicationEmails_ContactID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_CommunicationEmail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CommunicationRegardingDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView644()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CommunicationRegardingDatas
        [NKD.Module.BusinessObjects.CommunicationRegardingData](T1.CommunicationRegardingData_CommunicationRegardingDataID, T1.CommunicationRegardingData_CommunicationID, T1.CommunicationRegardingData_TableType, T1.CommunicationRegardingData_ReferenceID, T1.CommunicationRegardingData_ReferenceName, T1.CommunicationRegardingData_Version, T1.CommunicationRegardingData_VersionAntecedentID, T1.CommunicationRegardingData_VersionCertainty, T1.CommunicationRegardingData_VersionWorkflowInstanceID, T1.CommunicationRegardingData_VersionUpdatedBy, T1.CommunicationRegardingData_VersionDeletedBy, T1.CommunicationRegardingData_VersionOwnerContactID, T1.CommunicationRegardingData_VersionOwnerCompanyID, T1.CommunicationRegardingData_VersionUpdated)
    FROM (
        SELECT 
            T.CommunicationRegardingDataID AS CommunicationRegardingData_CommunicationRegardingDataID, 
            T.CommunicationID AS CommunicationRegardingData_CommunicationID, 
            T.TableType AS CommunicationRegardingData_TableType, 
            T.ReferenceID AS CommunicationRegardingData_ReferenceID, 
            T.ReferenceName AS CommunicationRegardingData_ReferenceName, 
            T.Version AS CommunicationRegardingData_Version, 
            T.VersionAntecedentID AS CommunicationRegardingData_VersionAntecedentID, 
            T.VersionCertainty AS CommunicationRegardingData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CommunicationRegardingData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CommunicationRegardingData_VersionUpdatedBy, 
            T.VersionDeletedBy AS CommunicationRegardingData_VersionDeletedBy, 
            T.VersionOwnerContactID AS CommunicationRegardingData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CommunicationRegardingData_VersionOwnerCompanyID, 
            T.VersionUpdated AS CommunicationRegardingData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_CommunicationRegardingData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAssetStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView645()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAssetStatus
        [NKD.Module.BusinessObjects.DictionaryAssetStatus](T1.DictionaryAssetStatus_AssetStatusID, T1.DictionaryAssetStatus_StandardAssetStatusName, T1.DictionaryAssetStatus_CustomAssetStatusName, T1.DictionaryAssetStatus_Description, T1.DictionaryAssetStatus_Version, T1.DictionaryAssetStatus_VersionAntecedentID, T1.DictionaryAssetStatus_VersionCertainty, T1.DictionaryAssetStatus_VersionWorkflowInstanceID, T1.DictionaryAssetStatus_VersionUpdatedBy, T1.DictionaryAssetStatus_VersionDeletedBy, T1.DictionaryAssetStatus_VersionOwnerContactID, T1.DictionaryAssetStatus_VersionOwnerCompanyID, T1.DictionaryAssetStatus_VersionUpdated)
    FROM (
        SELECT 
            T.AssetStatusID AS DictionaryAssetStatus_AssetStatusID, 
            T.StandardAssetStatusName AS DictionaryAssetStatus_StandardAssetStatusName, 
            T.CustomAssetStatusName AS DictionaryAssetStatus_CustomAssetStatusName, 
            T.Description AS DictionaryAssetStatus_Description, 
            T.Version AS DictionaryAssetStatus_Version, 
            T.VersionAntecedentID AS DictionaryAssetStatus_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAssetStatus_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAssetStatus_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAssetStatus_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAssetStatus_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAssetStatus_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAssetStatus_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAssetStatus_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryAssetStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryUsageAuditTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView646()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryUsageAuditTypes
        [NKD.Module.BusinessObjects.DictionaryUsageAuditType](T1.DictionaryUsageAuditType_UsageAuditTypeID, T1.DictionaryUsageAuditType_UsageAuditTypeName, T1.DictionaryUsageAuditType_Description, T1.DictionaryUsageAuditType_FullDescription, T1.DictionaryUsageAuditType_Thumbnail, T1.DictionaryUsageAuditType_OriginalFileDataID, T1.DictionaryUsageAuditType_Version, T1.DictionaryUsageAuditType_VersionAntecedentID, T1.DictionaryUsageAuditType_VersionCertainty, T1.DictionaryUsageAuditType_VersionWorkflowInstanceID, T1.DictionaryUsageAuditType_VersionUpdatedBy, T1.DictionaryUsageAuditType_VersionDeletedBy, T1.DictionaryUsageAuditType_VersionOwnerContactID, T1.DictionaryUsageAuditType_VersionOwnerCompanyID, T1.DictionaryUsageAuditType_VersionUpdated)
    FROM (
        SELECT 
            T.UsageAuditTypeID AS DictionaryUsageAuditType_UsageAuditTypeID, 
            T.UsageAuditTypeName AS DictionaryUsageAuditType_UsageAuditTypeName, 
            T.Description AS DictionaryUsageAuditType_Description, 
            T.FullDescription AS DictionaryUsageAuditType_FullDescription, 
            T.Thumbnail AS DictionaryUsageAuditType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryUsageAuditType_OriginalFileDataID, 
            T.Version AS DictionaryUsageAuditType_Version, 
            T.VersionAntecedentID AS DictionaryUsageAuditType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryUsageAuditType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryUsageAuditType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryUsageAuditType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryUsageAuditType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryUsageAuditType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryUsageAuditType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryUsageAuditType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.T_DictionaryUsageAuditType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView647()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphData
        [NKD.Module.BusinessObjects.GraphData](T1.GraphData_GraphDataID, T1.GraphData_TableType, T1.GraphData_ReferenceID, T1.GraphData_ReferenceName, T1.GraphData_Version, T1.GraphData_VersionAntecedentID, T1.GraphData_VersionCertainty, T1.GraphData_VersionWorkflowInstanceID, T1.GraphData_VersionUpdatedBy, T1.GraphData_VersionDeletedBy, T1.GraphData_VersionOwnerContactID, T1.GraphData_VersionOwnerCompanyID, T1.GraphData_VersionUpdated, T1.GraphData_GraphName, T1.GraphData_WorkflowTypeID, T1.GraphData_GraphContent, T1.GraphData_Comment, T1.GraphData_CreatedBy, T1.GraphData_Created)
    FROM (
        SELECT 
            T.GraphDataID AS GraphData_GraphDataID, 
            T.TableType AS GraphData_TableType, 
            T.ReferenceID AS GraphData_ReferenceID, 
            T.ReferenceName AS GraphData_ReferenceName, 
            T.Version AS GraphData_Version, 
            T.VersionAntecedentID AS GraphData_VersionAntecedentID, 
            T.VersionCertainty AS GraphData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphData_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphData_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphData_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphData_VersionUpdated, 
            T.GraphName AS GraphData_GraphName, 
            T.WorkflowTypeID AS GraphData_WorkflowTypeID, 
            T.GraphData AS GraphData_GraphContent, 
            T.Comment AS GraphData_Comment, 
            T.CreatedBy AS GraphData_CreatedBy, 
            T.Created AS GraphData_Created, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphDataRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView648()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphDataRelation
        [NKD.Module.BusinessObjects.GraphDataRelation](T1.GraphDataRelation_GraphDataRelationID, T1.GraphDataRelation_FromGraphDataID, T1.GraphDataRelation_ToGraphDataID, T1.GraphDataRelation_Weight, T1.GraphDataRelation_RelationTypeID, T1.GraphDataRelation_Related, T1.GraphDataRelation_Sequence, T1.GraphDataRelation_Version, T1.GraphDataRelation_VersionAntecedentID, T1.GraphDataRelation_VersionCertainty, T1.GraphDataRelation_VersionWorkflowInstanceID, T1.GraphDataRelation_VersionUpdatedBy, T1.GraphDataRelation_VersionDeletedBy, T1.GraphDataRelation_VersionOwnerContactID, T1.GraphDataRelation_VersionOwnerCompanyID, T1.GraphDataRelation_VersionUpdated, T1.GraphDataRelation_GraphDataGroupID)
    FROM (
        SELECT 
            T.GraphDataRelationID AS GraphDataRelation_GraphDataRelationID, 
            T.FromGraphDataID AS GraphDataRelation_FromGraphDataID, 
            T.ToGraphDataID AS GraphDataRelation_ToGraphDataID, 
            T.Weight AS GraphDataRelation_Weight, 
            T.RelationTypeID AS GraphDataRelation_RelationTypeID, 
            T.Related AS GraphDataRelation_Related, 
            T.Sequence AS GraphDataRelation_Sequence, 
            T.Version AS GraphDataRelation_Version, 
            T.VersionAntecedentID AS GraphDataRelation_VersionAntecedentID, 
            T.VersionCertainty AS GraphDataRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphDataRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphDataRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphDataRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphDataRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphDataRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphDataRelation_VersionUpdated, 
            T.GraphDataGroupID AS GraphDataRelation_GraphDataGroupID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryLinestringTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView649()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryLinestringTypes
        [NKD.Module.BusinessObjects.DictionaryLinestringType](T1.DictionaryLinestringType_LinestringTypeID, T1.DictionaryLinestringType_StandardLinestringTypeName, T1.DictionaryLinestringType_CustomLinestringTypeName, T1.DictionaryLinestringType_Description, T1.DictionaryLinestringType_FullDescription, T1.DictionaryLinestringType_Thumbnail, T1.DictionaryLinestringType_OriginalFileDataID, T1.DictionaryLinestringType_Version, T1.DictionaryLinestringType_VersionAntecedentID, T1.DictionaryLinestringType_VersionCertainty, T1.DictionaryLinestringType_VersionWorkflowInstanceID, T1.DictionaryLinestringType_VersionUpdatedBy, T1.DictionaryLinestringType_VersionDeletedBy, T1.DictionaryLinestringType_VersionOwnerContactID, T1.DictionaryLinestringType_VersionOwnerCompanyID, T1.DictionaryLinestringType_VersionUpdated)
    FROM (
        SELECT 
            T.LinestringTypeID AS DictionaryLinestringType_LinestringTypeID, 
            T.StandardLinestringTypeName AS DictionaryLinestringType_StandardLinestringTypeName, 
            T.CustomLinestringTypeName AS DictionaryLinestringType_CustomLinestringTypeName, 
            T.Description AS DictionaryLinestringType_Description, 
            T.FullDescription AS DictionaryLinestringType_FullDescription, 
            T.Thumbnail AS DictionaryLinestringType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryLinestringType_OriginalFileDataID, 
            T.Version AS DictionaryLinestringType_Version, 
            T.VersionAntecedentID AS DictionaryLinestringType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryLinestringType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryLinestringType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryLinestringType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryLinestringType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryLinestringType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryLinestringType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryLinestringType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryLinestringType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryProjectTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView650()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryProjectTypes
        [NKD.Module.BusinessObjects.DictionaryProjectType](T1.DictionaryProjectType_ProjectTypeID, T1.DictionaryProjectType_ProjectTypeName, T1.DictionaryProjectType_ProjectTypeDescription, T1.DictionaryProjectType_FullDescription, T1.DictionaryProjectType_Thumbnail, T1.DictionaryProjectType_OriginalFileDataID, T1.DictionaryProjectType_Version, T1.DictionaryProjectType_VersionAntecedentID, T1.DictionaryProjectType_VersionCertainty, T1.DictionaryProjectType_VersionProjectflowInstanceID, T1.DictionaryProjectType_VersionUpdatedBy, T1.DictionaryProjectType_VersionDeletedBy, T1.DictionaryProjectType_VersionOwnerContactID, T1.DictionaryProjectType_VersionOwnerCompanyID, T1.DictionaryProjectType_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectTypeID AS DictionaryProjectType_ProjectTypeID, 
            T.ProjectTypeName AS DictionaryProjectType_ProjectTypeName, 
            T.ProjectTypeDescription AS DictionaryProjectType_ProjectTypeDescription, 
            T.FullDescription AS DictionaryProjectType_FullDescription, 
            T.Thumbnail AS DictionaryProjectType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryProjectType_OriginalFileDataID, 
            T.Version AS DictionaryProjectType_Version, 
            T.VersionAntecedentID AS DictionaryProjectType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryProjectType_VersionCertainty, 
            T.VersionProjectflowInstanceID AS DictionaryProjectType_VersionProjectflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryProjectType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryProjectType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryProjectType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryProjectType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryProjectType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryProjectType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Linestrings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView651()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Linestrings
        [NKD.Module.BusinessObjects.Linestring](T1.Linestring_LinestringID, T1.Linestring_LinestringTypeID, T1.Linestring_DefaultLinestringName, T1.Linestring_LinestringCode, T1.Linestring_LinestringGeography, T1.Linestring_DefaultCulture, T1.Linestring_OwnerCompanyID, T1.Linestring_ResponsibleContactID, T1.Linestring_Comment, T1.Linestring_Version, T1.Linestring_VersionAntecedentID, T1.Linestring_VersionCertainty, T1.Linestring_VersionWorkflowInstanceID, T1.Linestring_VersionUpdatedBy, T1.Linestring_VersionDeletedBy, T1.Linestring_VersionOwnerContactID, T1.Linestring_VersionOwnerCompanyID, T1.Linestring_VersionUpdated)
    FROM (
        SELECT 
            T.LinestringID AS Linestring_LinestringID, 
            T.LinestringTypeID AS Linestring_LinestringTypeID, 
            T.DefaultLinestringName AS Linestring_DefaultLinestringName, 
            T.LinestringCode AS Linestring_LinestringCode, 
            T.LinestringGeography AS Linestring_LinestringGeography, 
            T.DefaultCulture AS Linestring_DefaultCulture, 
            T.OwnerCompanyID AS Linestring_OwnerCompanyID, 
            T.ResponsibleContactID AS Linestring_ResponsibleContactID, 
            T.Comment AS Linestring_Comment, 
            T.Version AS Linestring_Version, 
            T.VersionAntecedentID AS Linestring_VersionAntecedentID, 
            T.VersionCertainty AS Linestring_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Linestring_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Linestring_VersionUpdatedBy, 
            T.VersionDeletedBy AS Linestring_VersionDeletedBy, 
            T.VersionOwnerContactID AS Linestring_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Linestring_VersionOwnerCompanyID, 
            T.VersionUpdated AS Linestring_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Linestring AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectOffers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView652()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectOffers
        [NKD.Module.BusinessObjects.ProjectOffer](T1.ProjectOffer_ProjectOfferID, T1.ProjectOffer_ProjectID, T1.ProjectOffer_OfferDescription, T1.ProjectOffer_OfferContactID, T1.ProjectOffer_Offered, T1.ProjectOffer_OriginalAmount, T1.ProjectOffer_Amount, T1.ProjectOffer_AmountPaid, T1.ProjectOffer_Expires, T1.ProjectOffer_Expired, T1.ProjectOffer_Realises, T1.ProjectOffer_Realised, T1.ProjectOffer_Approved, T1.ProjectOffer_ApprovedBy, T1.ProjectOffer_Version, T1.ProjectOffer_VersionAntecedentID, T1.ProjectOffer_VersionCertainty, T1.ProjectOffer_VersionWorkflowInstanceID, T1.ProjectOffer_VersionUpdatedBy, T1.ProjectOffer_VersionDeletedBy, T1.ProjectOffer_VersionOwnerContactID, T1.ProjectOffer_VersionOwnerCompanyID, T1.ProjectOffer_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectOfferID AS ProjectOffer_ProjectOfferID, 
            T.ProjectID AS ProjectOffer_ProjectID, 
            T.OfferDescription AS ProjectOffer_OfferDescription, 
            T.OfferContactID AS ProjectOffer_OfferContactID, 
            T.Offered AS ProjectOffer_Offered, 
            T.OriginalAmount AS ProjectOffer_OriginalAmount, 
            T.Amount AS ProjectOffer_Amount, 
            T.AmountPaid AS ProjectOffer_AmountPaid, 
            T.Expires AS ProjectOffer_Expires, 
            T.Expired AS ProjectOffer_Expired, 
            T.Realises AS ProjectOffer_Realises, 
            T.Realised AS ProjectOffer_Realised, 
            T.Approved AS ProjectOffer_Approved, 
            T.ApprovedBy AS ProjectOffer_ApprovedBy, 
            T.Version AS ProjectOffer_Version, 
            T.VersionAntecedentID AS ProjectOffer_VersionAntecedentID, 
            T.VersionCertainty AS ProjectOffer_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectOffer_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectOffer_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectOffer_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectOffer_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectOffer_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectOffer_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectOffer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPledges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView653()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPledges
        [NKD.Module.BusinessObjects.ProjectPledge](T1.ProjectPledge_ProjectPledgeID, T1.ProjectPledge_ProjectID, T1.ProjectPledge_ParentProjectPledgeID, T1.ProjectPledge_PledgeContactID, T1.ProjectPledge_Pledged, T1.ProjectPledge_OriginalAmount, T1.ProjectPledge_CurrencyID, T1.ProjectPledge_DepositAmount, T1.ProjectPledge_DepositPaid, T1.ProjectPledge_AcceptedProjectOfferID, T1.ProjectPledge_AcceptedProjectOffer, T1.ProjectPledge_QuorumOverseenBy, T1.ProjectPledge_QuorumNegotiated, T1.ProjectPledge_Amount, T1.ProjectPledge_AmountPaid, T1.ProjectPledge_Expires, T1.ProjectPledge_Expired, T1.ProjectPledge_Realises, T1.ProjectPledge_Realised, T1.ProjectPledge_Approved, T1.ProjectPledge_ApprovedBy, T1.ProjectPledge_Version, T1.ProjectPledge_VersionAntecedentID, T1.ProjectPledge_VersionCertainty, T1.ProjectPledge_VersionWorkflowInstanceID, T1.ProjectPledge_VersionUpdatedBy, T1.ProjectPledge_VersionDeletedBy, T1.ProjectPledge_VersionOwnerContactID, T1.ProjectPledge_VersionOwnerCompanyID, T1.ProjectPledge_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPledgeID AS ProjectPledge_ProjectPledgeID, 
            T.ProjectID AS ProjectPledge_ProjectID, 
            T.ParentProjectPledgeID AS ProjectPledge_ParentProjectPledgeID, 
            T.PledgeContactID AS ProjectPledge_PledgeContactID, 
            T.Pledged AS ProjectPledge_Pledged, 
            T.OriginalAmount AS ProjectPledge_OriginalAmount, 
            T.CurrencyID AS ProjectPledge_CurrencyID, 
            T.DepositAmount AS ProjectPledge_DepositAmount, 
            T.DepositPaid AS ProjectPledge_DepositPaid, 
            T.AcceptedProjectOfferID AS ProjectPledge_AcceptedProjectOfferID, 
            T.AcceptedProjectOffer AS ProjectPledge_AcceptedProjectOffer, 
            T.QuorumOverseenBy AS ProjectPledge_QuorumOverseenBy, 
            T.QuorumNegotiated AS ProjectPledge_QuorumNegotiated, 
            T.Amount AS ProjectPledge_Amount, 
            T.AmountPaid AS ProjectPledge_AmountPaid, 
            T.Expires AS ProjectPledge_Expires, 
            T.Expired AS ProjectPledge_Expired, 
            T.Realises AS ProjectPledge_Realises, 
            T.Realised AS ProjectPledge_Realised, 
            T.Approved AS ProjectPledge_Approved, 
            T.ApprovedBy AS ProjectPledge_ApprovedBy, 
            T.Version AS ProjectPledge_Version, 
            T.VersionAntecedentID AS ProjectPledge_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPledge_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPledge_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPledge_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPledge_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPledge_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPledge_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPledge_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectPledge AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPledgeAddendums.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView654()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPledgeAddendums
        [NKD.Module.BusinessObjects.ProjectPledgeAddendum](T1.ProjectPledgeAddendum_ProjectPledgeAddendumID, T1.ProjectPledgeAddendum_ProjectPledgeID, T1.ProjectPledgeAddendum_Addendum, T1.ProjectPledgeAddendum_Reviewed, T1.ProjectPledgeAddendum_ReviewedBy, T1.ProjectPledgeAddendum_Approved, T1.ProjectPledgeAddendum_ApprovedBy, T1.ProjectPledgeAddendum_Version, T1.ProjectPledgeAddendum_VersionAntecedentID, T1.ProjectPledgeAddendum_VersionCertainty, T1.ProjectPledgeAddendum_VersionWorkflowInstanceID, T1.ProjectPledgeAddendum_VersionUpdatedBy, T1.ProjectPledgeAddendum_VersionDeletedBy, T1.ProjectPledgeAddendum_VersionOwnerContactID, T1.ProjectPledgeAddendum_VersionOwnerCompanyID, T1.ProjectPledgeAddendum_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectPledgeAddendumID AS ProjectPledgeAddendum_ProjectPledgeAddendumID, 
            T.ProjectPledgeID AS ProjectPledgeAddendum_ProjectPledgeID, 
            T.Addendum AS ProjectPledgeAddendum_Addendum, 
            T.Reviewed AS ProjectPledgeAddendum_Reviewed, 
            T.ReviewedBy AS ProjectPledgeAddendum_ReviewedBy, 
            T.Approved AS ProjectPledgeAddendum_Approved, 
            T.ApprovedBy AS ProjectPledgeAddendum_ApprovedBy, 
            T.Version AS ProjectPledgeAddendum_Version, 
            T.VersionAntecedentID AS ProjectPledgeAddendum_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPledgeAddendum_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPledgeAddendum_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPledgeAddendum_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPledgeAddendum_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPledgeAddendum_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPledgeAddendum_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPledgeAddendum_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectPledgeAddendum AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DataDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView655()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DataDatas
        [NKD.Module.BusinessObjects.DataData](T1.DataData_DataDataID, T1.DataData_ParentTableType, T1.DataData_ParentReferenceID, T1.DataData_ChildTableType, T1.DataData_ChildReferenceID, T1.DataData_IsCircular, T1.DataData_CreatedBy, T1.DataData_Created, T1.DataData_Version, T1.DataData_VersionAntecedentID, T1.DataData_VersionCertainty, T1.DataData_VersionWorkflowInstanceID, T1.DataData_VersionUpdatedBy, T1.DataData_VersionDeletedBy, T1.DataData_VersionOwnerContactID, T1.DataData_VersionOwnerCompanyID, T1.DataData_VersionUpdated)
    FROM (
        SELECT 
            T.DataDataID AS DataData_DataDataID, 
            T.ParentTableType AS DataData_ParentTableType, 
            T.ParentReferenceID AS DataData_ParentReferenceID, 
            T.ChildTableType AS DataData_ChildTableType, 
            T.ChildReferenceID AS DataData_ChildReferenceID, 
            T.IsCircular AS DataData_IsCircular, 
            T.CreatedBy AS DataData_CreatedBy, 
            T.Created AS DataData_Created, 
            T.Version AS DataData_Version, 
            T.VersionAntecedentID AS DataData_VersionAntecedentID, 
            T.VersionCertainty AS DataData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DataData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DataData_VersionUpdatedBy, 
            T.VersionDeletedBy AS DataData_VersionDeletedBy, 
            T.VersionOwnerContactID AS DataData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DataData_VersionOwnerCompanyID, 
            T.VersionUpdated AS DataData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DataData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphDataFileDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView656()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphDataFileDatas
        [NKD.Module.BusinessObjects.GraphDataFileData](T1.GraphDataFileData_GraphDataFileDataID, T1.GraphDataFileData_GraphDataID, T1.GraphDataFileData_FileDataID, T1.GraphDataFileData_Version, T1.GraphDataFileData_VersionAntecedentID, T1.GraphDataFileData_VersionCertainty, T1.GraphDataFileData_VersionWorkflowInstanceID, T1.GraphDataFileData_VersionUpdatedBy, T1.GraphDataFileData_VersionDeletedBy, T1.GraphDataFileData_VersionOwnerContactID, T1.GraphDataFileData_VersionOwnerCompanyID, T1.GraphDataFileData_VersionUpdated)
    FROM (
        SELECT 
            T.GraphDataFileDataID AS GraphDataFileData_GraphDataFileDataID, 
            T.GraphDataID AS GraphDataFileData_GraphDataID, 
            T.FileDataID AS GraphDataFileData_FileDataID, 
            T.Version AS GraphDataFileData_Version, 
            T.VersionAntecedentID AS GraphDataFileData_VersionAntecedentID, 
            T.VersionCertainty AS GraphDataFileData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphDataFileData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphDataFileData_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphDataFileData_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphDataFileData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphDataFileData_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphDataFileData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataFileData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphDataLocations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView657()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphDataLocations
        [NKD.Module.BusinessObjects.GraphDataLocation](T1.GraphDataLocation_GraphDataLocationID, T1.GraphDataLocation_GraphDataID, T1.GraphDataLocation_LocationID, T1.GraphDataLocation_Version, T1.GraphDataLocation_VersionAntecedentID, T1.GraphDataLocation_VersionCertainty, T1.GraphDataLocation_VersionWorkflowInstanceID, T1.GraphDataLocation_VersionUpdatedBy, T1.GraphDataLocation_VersionDeletedBy, T1.GraphDataLocation_VersionOwnerContactID, T1.GraphDataLocation_VersionOwnerCompanyID, T1.GraphDataLocation_VersionUpdated)
    FROM (
        SELECT 
            T.GraphDataLocationID AS GraphDataLocation_GraphDataLocationID, 
            T.GraphDataID AS GraphDataLocation_GraphDataID, 
            T.LocationID AS GraphDataLocation_LocationID, 
            T.Version AS GraphDataLocation_Version, 
            T.VersionAntecedentID AS GraphDataLocation_VersionAntecedentID, 
            T.VersionCertainty AS GraphDataLocation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphDataLocation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphDataLocation_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphDataLocation_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphDataLocation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphDataLocation_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphDataLocation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataLocation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphDataGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView658()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphDataGroups
        [NKD.Module.BusinessObjects.GraphDataGroup](T1.GraphDataGroup_GraphDataGroupID, T1.GraphDataGroup_GraphDataGroupName, T1.GraphDataGroup_Comment, T1.GraphDataGroup_CreatedBy, T1.GraphDataGroup_Created, T1.GraphDataGroup_Version, T1.GraphDataGroup_VersionAntecedentID, T1.GraphDataGroup_VersionCertainty, T1.GraphDataGroup_VersionWorkflowInstanceID, T1.GraphDataGroup_VersionUpdatedBy, T1.GraphDataGroup_VersionDeletedBy, T1.GraphDataGroup_VersionOwnerContactID, T1.GraphDataGroup_VersionOwnerCompanyID, T1.GraphDataGroup_VersionUpdated, T1.GraphDataGroup_StandardGraphDataGroupName, T1.GraphDataGroup_CurrencyID, T1.GraphDataGroup_PricePerUnit, T1.GraphDataGroup_PriceUnitID, T1.GraphDataGroup_Description, T1.GraphDataGroup_Thumbnail, T1.GraphDataGroup_OriginalFileDataID, T1.GraphDataGroup_StartGraphDataID)
    FROM (
        SELECT 
            T.GraphDataGroupID AS GraphDataGroup_GraphDataGroupID, 
            T.GraphDataGroupName AS GraphDataGroup_GraphDataGroupName, 
            T.Comment AS GraphDataGroup_Comment, 
            T.CreatedBy AS GraphDataGroup_CreatedBy, 
            T.Created AS GraphDataGroup_Created, 
            T.Version AS GraphDataGroup_Version, 
            T.VersionAntecedentID AS GraphDataGroup_VersionAntecedentID, 
            T.VersionCertainty AS GraphDataGroup_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphDataGroup_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphDataGroup_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphDataGroup_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphDataGroup_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphDataGroup_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphDataGroup_VersionUpdated, 
            T.StandardGraphDataGroupName AS GraphDataGroup_StandardGraphDataGroupName, 
            T.CurrencyID AS GraphDataGroup_CurrencyID, 
            T.PricePerUnit AS GraphDataGroup_PricePerUnit, 
            T.PriceUnitID AS GraphDataGroup_PriceUnitID, 
            T.Description AS GraphDataGroup_Description, 
            T.Thumbnail AS GraphDataGroup_Thumbnail, 
            T.OriginalFileDataID AS GraphDataGroup_OriginalFileDataID, 
            T.StartGraphDataID AS GraphDataGroup_StartGraphDataID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataGroup AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryAlterationJointTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView659()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryAlterationJointTypes
        [NKD.Module.BusinessObjects.DictionaryAlterationJointType](T1.DictionaryAlterationJointType_AlterationJointTypeID, T1.DictionaryAlterationJointType_StandardAlterationJointTypeName, T1.DictionaryAlterationJointType_CoalAlterationJointTypeName, T1.DictionaryAlterationJointType_GoldAlterationJointTypeName, T1.DictionaryAlterationJointType_CustomAlterationJointTypeName, T1.DictionaryAlterationJointType_Description, T1.DictionaryAlterationJointType_FullDescription, T1.DictionaryAlterationJointType_Thumbnail, T1.DictionaryAlterationJointType_OriginalFileDataID, T1.DictionaryAlterationJointType_Version, T1.DictionaryAlterationJointType_VersionAntecedentID, T1.DictionaryAlterationJointType_VersionCertainty, T1.DictionaryAlterationJointType_VersionWorkflowInstanceID, T1.DictionaryAlterationJointType_VersionUpdatedBy, T1.DictionaryAlterationJointType_VersionDeletedBy, T1.DictionaryAlterationJointType_VersionOwnerContactID, T1.DictionaryAlterationJointType_VersionOwnerCompanyID, T1.DictionaryAlterationJointType_VersionUpdated)
    FROM (
        SELECT 
            T.AlterationJointTypeID AS DictionaryAlterationJointType_AlterationJointTypeID, 
            T.StandardAlterationJointTypeName AS DictionaryAlterationJointType_StandardAlterationJointTypeName, 
            T.CoalAlterationJointTypeName AS DictionaryAlterationJointType_CoalAlterationJointTypeName, 
            T.GoldAlterationJointTypeName AS DictionaryAlterationJointType_GoldAlterationJointTypeName, 
            T.CustomAlterationJointTypeName AS DictionaryAlterationJointType_CustomAlterationJointTypeName, 
            T.Description AS DictionaryAlterationJointType_Description, 
            T.FullDescription AS DictionaryAlterationJointType_FullDescription, 
            T.Thumbnail AS DictionaryAlterationJointType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryAlterationJointType_OriginalFileDataID, 
            T.Version AS DictionaryAlterationJointType_Version, 
            T.VersionAntecedentID AS DictionaryAlterationJointType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryAlterationJointType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryAlterationJointType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryAlterationJointType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryAlterationJointType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryAlterationJointType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryAlterationJointType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryAlterationJointType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlterationJointType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryBedDevelopments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView660()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryBedDevelopments
        [NKD.Module.BusinessObjects.DictionaryBedDevelopment](T1.DictionaryBedDevelopment_BedDevelopmentID, T1.DictionaryBedDevelopment_StandardBedDevelopmentName, T1.DictionaryBedDevelopment_CoalBedDevelopmentName, T1.DictionaryBedDevelopment_GoldBedDevelopmentName, T1.DictionaryBedDevelopment_CustomBedDevelopmentName, T1.DictionaryBedDevelopment_Description, T1.DictionaryBedDevelopment_FullDescription, T1.DictionaryBedDevelopment_Thumbnail, T1.DictionaryBedDevelopment_OriginalFileDataID, T1.DictionaryBedDevelopment_Version, T1.DictionaryBedDevelopment_VersionAntecedentID, T1.DictionaryBedDevelopment_VersionCertainty, T1.DictionaryBedDevelopment_VersionWorkflowInstanceID, T1.DictionaryBedDevelopment_VersionUpdatedBy, T1.DictionaryBedDevelopment_VersionDeletedBy, T1.DictionaryBedDevelopment_VersionOwnerContactID, T1.DictionaryBedDevelopment_VersionOwnerCompanyID, T1.DictionaryBedDevelopment_VersionUpdated)
    FROM (
        SELECT 
            T.BedDevelopmentID AS DictionaryBedDevelopment_BedDevelopmentID, 
            T.StandardBedDevelopmentName AS DictionaryBedDevelopment_StandardBedDevelopmentName, 
            T.CoalBedDevelopmentName AS DictionaryBedDevelopment_CoalBedDevelopmentName, 
            T.GoldBedDevelopmentName AS DictionaryBedDevelopment_GoldBedDevelopmentName, 
            T.CustomBedDevelopmentName AS DictionaryBedDevelopment_CustomBedDevelopmentName, 
            T.Description AS DictionaryBedDevelopment_Description, 
            T.FullDescription AS DictionaryBedDevelopment_FullDescription, 
            T.Thumbnail AS DictionaryBedDevelopment_Thumbnail, 
            T.OriginalFileDataID AS DictionaryBedDevelopment_OriginalFileDataID, 
            T.Version AS DictionaryBedDevelopment_Version, 
            T.VersionAntecedentID AS DictionaryBedDevelopment_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryBedDevelopment_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryBedDevelopment_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryBedDevelopment_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryBedDevelopment_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryBedDevelopment_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryBedDevelopment_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryBedDevelopment_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedDevelopment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryFriabilityTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView661()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryFriabilityTypes
        [NKD.Module.BusinessObjects.DictionaryFriabilityType](T1.DictionaryFriabilityType_FriabilityTypeID, T1.DictionaryFriabilityType_StandardFriabilityTypeName, T1.DictionaryFriabilityType_CoalFriabilityTypeName, T1.DictionaryFriabilityType_GoldFriabilityTypeName, T1.DictionaryFriabilityType_CustomFriabilityTypeName, T1.DictionaryFriabilityType_Description, T1.DictionaryFriabilityType_FullDescription, T1.DictionaryFriabilityType_Thumbnail, T1.DictionaryFriabilityType_OriginalFileDataID, T1.DictionaryFriabilityType_Version, T1.DictionaryFriabilityType_VersionAntecedentID, T1.DictionaryFriabilityType_VersionCertainty, T1.DictionaryFriabilityType_VersionWorkflowInstanceID, T1.DictionaryFriabilityType_VersionUpdatedBy, T1.DictionaryFriabilityType_VersionDeletedBy, T1.DictionaryFriabilityType_VersionOwnerContactID, T1.DictionaryFriabilityType_VersionOwnerCompanyID, T1.DictionaryFriabilityType_VersionUpdated)
    FROM (
        SELECT 
            T.FriabilityTypeID AS DictionaryFriabilityType_FriabilityTypeID, 
            T.StandardFriabilityTypeName AS DictionaryFriabilityType_StandardFriabilityTypeName, 
            T.CoalFriabilityTypeName AS DictionaryFriabilityType_CoalFriabilityTypeName, 
            T.GoldFriabilityTypeName AS DictionaryFriabilityType_GoldFriabilityTypeName, 
            T.CustomFriabilityTypeName AS DictionaryFriabilityType_CustomFriabilityTypeName, 
            T.Description AS DictionaryFriabilityType_Description, 
            T.FullDescription AS DictionaryFriabilityType_FullDescription, 
            T.Thumbnail AS DictionaryFriabilityType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryFriabilityType_OriginalFileDataID, 
            T.Version AS DictionaryFriabilityType_Version, 
            T.VersionAntecedentID AS DictionaryFriabilityType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryFriabilityType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryFriabilityType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryFriabilityType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryFriabilityType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryFriabilityType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryFriabilityType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryFriabilityType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryFriabilityType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryStructureSets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView662()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryStructureSets
        [NKD.Module.BusinessObjects.DictionaryStructureSet](T1.DictionaryStructureSet_StructureSetID, T1.DictionaryStructureSet_StandardStructureSetName, T1.DictionaryStructureSet_CoalStructureSetName, T1.DictionaryStructureSet_GoldStructureSetName, T1.DictionaryStructureSet_CustomStructureSetName, T1.DictionaryStructureSet_Description, T1.DictionaryStructureSet_FullDescription, T1.DictionaryStructureSet_Thumbnail, T1.DictionaryStructureSet_OriginalFileDataID, T1.DictionaryStructureSet_Version, T1.DictionaryStructureSet_VersionAntecedentID, T1.DictionaryStructureSet_VersionCertainty, T1.DictionaryStructureSet_VersionWorkflowInstanceID, T1.DictionaryStructureSet_VersionUpdatedBy, T1.DictionaryStructureSet_VersionDeletedBy, T1.DictionaryStructureSet_VersionOwnerContactID, T1.DictionaryStructureSet_VersionOwnerCompanyID, T1.DictionaryStructureSet_VersionUpdated)
    FROM (
        SELECT 
            T.StructureSetID AS DictionaryStructureSet_StructureSetID, 
            T.StandardStructureSetName AS DictionaryStructureSet_StandardStructureSetName, 
            T.CoalStructureSetName AS DictionaryStructureSet_CoalStructureSetName, 
            T.GoldStructureSetName AS DictionaryStructureSet_GoldStructureSetName, 
            T.CustomStructureSetName AS DictionaryStructureSet_CustomStructureSetName, 
            T.Description AS DictionaryStructureSet_Description, 
            T.FullDescription AS DictionaryStructureSet_FullDescription, 
            T.Thumbnail AS DictionaryStructureSet_Thumbnail, 
            T.OriginalFileDataID AS DictionaryStructureSet_OriginalFileDataID, 
            T.Version AS DictionaryStructureSet_Version, 
            T.VersionAntecedentID AS DictionaryStructureSet_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryStructureSet_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryStructureSet_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryStructureSet_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryStructureSet_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryStructureSet_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryStructureSet_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryStructureSet_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryStructureSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Forms.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView663()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Forms
        [NKD.Module.BusinessObjects.Form](T1.Form_FormID, T1.Form_FormStructure, T1.Form_FormActions, T1.Form_FormType, T1.Form_TemplateMulti, T1.Form_TemplateSingle, T1.Form_Version, T1.Form_VersionAntecedentID, T1.Form_VersionCertainty, T1.Form_VersionWorkflowInstanceID, T1.Form_VersionUpdatedBy, T1.Form_VersionDeletedBy, T1.Form_VersionOwnerContactID, T1.Form_VersionOwnerCompanyID, T1.Form_VersionUpdated, T1.Form_FormStructureChecksum, T1.Form_FormName)
    FROM (
        SELECT 
            T.FormID AS Form_FormID, 
            T.FormStructure AS Form_FormStructure, 
            T.FormActions AS Form_FormActions, 
            T.FormType AS Form_FormType, 
            T.TemplateMulti AS Form_TemplateMulti, 
            T.TemplateSingle AS Form_TemplateSingle, 
            T.Version AS Form_Version, 
            T.VersionAntecedentID AS Form_VersionAntecedentID, 
            T.VersionCertainty AS Form_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Form_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Form_VersionUpdatedBy, 
            T.VersionDeletedBy AS Form_VersionDeletedBy, 
            T.VersionOwnerContactID AS Form_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Form_VersionOwnerCompanyID, 
            T.VersionUpdated AS Form_VersionUpdated, 
            T.FormStructureChecksum AS Form_FormStructureChecksum, 
            T.FormName AS Form_FormName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Form AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.FormDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView664()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormDatas
        [NKD.Module.BusinessObjects.FormData](T1.FormData_FormDataID, T1.FormData_FormID, T1.FormData_TableType, T1.FormData_ReferenceID, T1.FormData_FormOrigin, T1.FormData_FormDestination, T1.FormData_FormContent, T1.FormData_Version, T1.FormData_VersionAntecedentID, T1.FormData_VersionCertainty, T1.FormData_VersionWorkflowInstanceID, T1.FormData_VersionUpdatedBy, T1.FormData_VersionDeletedBy, T1.FormData_VersionOwnerContactID, T1.FormData_VersionOwnerCompanyID, T1.FormData_VersionUpdated)
    FROM (
        SELECT 
            T.FormDataID AS FormData_FormDataID, 
            T.FormID AS FormData_FormID, 
            T.TableType AS FormData_TableType, 
            T.ReferenceID AS FormData_ReferenceID, 
            T.FormOrigin AS FormData_FormOrigin, 
            T.FormDestination AS FormData_FormDestination, 
            T.FormContent AS FormData_FormContent, 
            T.Version AS FormData_Version, 
            T.VersionAntecedentID AS FormData_VersionAntecedentID, 
            T.VersionCertainty AS FormData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS FormData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS FormData_VersionUpdatedBy, 
            T.VersionDeletedBy AS FormData_VersionDeletedBy, 
            T.VersionOwnerContactID AS FormData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS FormData_VersionOwnerCompanyID, 
            T.VersionUpdated AS FormData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_FormData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphDataHistories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView665()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphDataHistories
        [NKD.Module.BusinessObjects.GraphDataHistory](T1.GraphDataHistory_GraphDataHistoryID, T1.GraphDataHistory_Session, T1.GraphDataHistory_GraphDataID, T1.GraphDataHistory_Opened, T1.GraphDataHistory_ContactID, T1.GraphDataHistory_Version, T1.GraphDataHistory_VersionAntecedentID, T1.GraphDataHistory_VersionCertainty, T1.GraphDataHistory_VersionWorkflowInstanceID, T1.GraphDataHistory_VersionUpdatedBy, T1.GraphDataHistory_VersionDeletedBy, T1.GraphDataHistory_VersionOwnerContactID, T1.GraphDataHistory_VersionOwnerCompanyID, T1.GraphDataHistory_VersionUpdated)
    FROM (
        SELECT 
            T.GraphDataHistoryID AS GraphDataHistory_GraphDataHistoryID, 
            T.Session AS GraphDataHistory_Session, 
            T.GraphDataID AS GraphDataHistory_GraphDataID, 
            T.Opened AS GraphDataHistory_Opened, 
            T.ContactID AS GraphDataHistory_ContactID, 
            T.Version AS GraphDataHistory_Version, 
            T.VersionAntecedentID AS GraphDataHistory_VersionAntecedentID, 
            T.VersionCertainty AS GraphDataHistory_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphDataHistory_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphDataHistory_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphDataHistory_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphDataHistory_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphDataHistory_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphDataHistory_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Precondition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView666()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Precondition
        [NKD.Module.BusinessObjects.Precondition](T1.Precondition_ConditionID, T1.Precondition_OverrideProjectDataWithJsonCustomVars, T1.Precondition_Condition, T1.Precondition_Version, T1.Precondition_VersionAntecedentID, T1.Precondition_VersionCertainty, T1.Precondition_VersionWorkflowInstanceID, T1.Precondition_VersionUpdatedBy, T1.Precondition_VersionDeletedBy, T1.Precondition_VersionOwnerContactID, T1.Precondition_VersionOwnerCompanyID, T1.Precondition_VersionUpdated, T1.Precondition_JSON)
    FROM (
        SELECT 
            T.ConditionID AS Precondition_ConditionID, 
            T.OverrideProjectDataWithJsonCustomVars AS Precondition_OverrideProjectDataWithJsonCustomVars, 
            T.Condition AS Precondition_Condition, 
            T.Version AS Precondition_Version, 
            T.VersionAntecedentID AS Precondition_VersionAntecedentID, 
            T.VersionCertainty AS Precondition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Precondition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Precondition_VersionUpdatedBy, 
            T.VersionDeletedBy AS Precondition_VersionDeletedBy, 
            T.VersionOwnerContactID AS Precondition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Precondition_VersionOwnerCompanyID, 
            T.VersionUpdated AS Precondition_VersionUpdated, 
            T.JSON AS Precondition_JSON, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Condition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryTriggerType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView667()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryTriggerType
        [NKD.Module.BusinessObjects.DictionaryTriggerType](T1.DictionaryTriggerType_TriggerTypeID, T1.DictionaryTriggerType_StandardTriggerTypeName, T1.DictionaryTriggerType_CustomTriggerTypeName, T1.DictionaryTriggerType_Description, T1.DictionaryTriggerType_FullDescription, T1.DictionaryTriggerType_Thumbnail, T1.DictionaryTriggerType_OriginalFileDataID, T1.DictionaryTriggerType_Version, T1.DictionaryTriggerType_VersionAntecedentID, T1.DictionaryTriggerType_VersionCertainty, T1.DictionaryTriggerType_VersionWorkflowInstanceID, T1.DictionaryTriggerType_VersionUpdatedBy, T1.DictionaryTriggerType_VersionDeletedBy, T1.DictionaryTriggerType_VersionOwnerContactID, T1.DictionaryTriggerType_VersionOwnerCompanyID, T1.DictionaryTriggerType_VersionUpdated)
    FROM (
        SELECT 
            T.TriggerTypeID AS DictionaryTriggerType_TriggerTypeID, 
            T.StandardTriggerTypeName AS DictionaryTriggerType_StandardTriggerTypeName, 
            T.CustomTriggerTypeName AS DictionaryTriggerType_CustomTriggerTypeName, 
            T.Description AS DictionaryTriggerType_Description, 
            T.FullDescription AS DictionaryTriggerType_FullDescription, 
            T.Thumbnail AS DictionaryTriggerType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryTriggerType_OriginalFileDataID, 
            T.Version AS DictionaryTriggerType_Version, 
            T.VersionAntecedentID AS DictionaryTriggerType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryTriggerType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryTriggerType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryTriggerType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryTriggerType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryTriggerType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryTriggerType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryTriggerType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryTriggerType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.GraphDataRelationConditions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView668()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GraphDataRelationConditions
        [NKD.Module.BusinessObjects.GraphDataRelationCondition](T1.GraphDataRelationCondition_GraphDataRelationConditionID, T1.GraphDataRelationCondition_GraphDataRelationID, T1.GraphDataRelationCondition_ConditionID, T1.GraphDataRelationCondition_Version, T1.GraphDataRelationCondition_VersionAntecedentID, T1.GraphDataRelationCondition_VersionCertainty, T1.GraphDataRelationCondition_VersionWorkflowInstanceID, T1.GraphDataRelationCondition_VersionUpdatedBy, T1.GraphDataRelationCondition_VersionDeletedBy, T1.GraphDataRelationCondition_VersionOwnerContactID, T1.GraphDataRelationCondition_VersionOwnerCompanyID, T1.GraphDataRelationCondition_VersionUpdated, T1.GraphDataRelationCondition_Grouping, T1.GraphDataRelationCondition_Sequence, T1.GraphDataRelationCondition_JoinedBy)
    FROM (
        SELECT 
            T.GraphDataRelationConditionID AS GraphDataRelationCondition_GraphDataRelationConditionID, 
            T.GraphDataRelationID AS GraphDataRelationCondition_GraphDataRelationID, 
            T.ConditionID AS GraphDataRelationCondition_ConditionID, 
            T.Version AS GraphDataRelationCondition_Version, 
            T.VersionAntecedentID AS GraphDataRelationCondition_VersionAntecedentID, 
            T.VersionCertainty AS GraphDataRelationCondition_VersionCertainty, 
            T.VersionWorkflowInstanceID AS GraphDataRelationCondition_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS GraphDataRelationCondition_VersionUpdatedBy, 
            T.VersionDeletedBy AS GraphDataRelationCondition_VersionDeletedBy, 
            T.VersionOwnerContactID AS GraphDataRelationCondition_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS GraphDataRelationCondition_VersionOwnerCompanyID, 
            T.VersionUpdated AS GraphDataRelationCondition_VersionUpdated, 
            T.Grouping AS GraphDataRelationCondition_Grouping, 
            T.Sequence AS GraphDataRelationCondition_Sequence, 
            T.JoinedBy AS GraphDataRelationCondition_JoinedBy, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelationCondition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView669()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectDatas
        [NKD.Module.BusinessObjects.ProjectData](T1.ProjectData_ProjectDataID, T1.ProjectData_ProjectDataTemplateID, T1.ProjectData_ProjectID, T1.ProjectData_ProjectPlanTaskResponseID, T1.ProjectData_Value, T1.ProjectData_NumericValue, T1.ProjectData_TextValue, T1.ProjectData_Version, T1.ProjectData_VersionAntecedentID, T1.ProjectData_VersionCertainty, T1.ProjectData_VersionWorkflowInstanceID, T1.ProjectData_VersionUpdatedBy, T1.ProjectData_VersionDeletedBy, T1.ProjectData_VersionOwnerContactID, T1.ProjectData_VersionOwnerCompanyID, T1.ProjectData_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectDataID AS ProjectData_ProjectDataID, 
            T.ProjectDataTemplateID AS ProjectData_ProjectDataTemplateID, 
            T.ProjectID AS ProjectData_ProjectID, 
            T.ProjectPlanTaskResponseID AS ProjectData_ProjectPlanTaskResponseID, 
            T.[Value] AS ProjectData_Value, 
            T.NumericValue AS ProjectData_NumericValue, 
            T.TextValue AS ProjectData_TextValue, 
            T.Version AS ProjectData_Version, 
            T.VersionAntecedentID AS ProjectData_VersionAntecedentID, 
            T.VersionCertainty AS ProjectData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectData_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectData_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectData_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectDataTemplates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView670()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectDataTemplates
        [NKD.Module.BusinessObjects.ProjectDataTemplate](T1.ProjectDataTemplate_ProjectDataTemplateID, T1.ProjectDataTemplate_CommonName, T1.ProjectDataTemplate_UniqueID, T1.ProjectDataTemplate_UniqueIDSystemDataType, T1.ProjectDataTemplate_TemplateStructure, T1.ProjectDataTemplate_TemplateStructureChecksum, T1.ProjectDataTemplate_TemplateActions, T1.ProjectDataTemplate_TemplateType, T1.ProjectDataTemplate_TemplateMulti, T1.ProjectDataTemplate_TemplateSingle, T1.ProjectDataTemplate_TableType, T1.ProjectDataTemplate_ReferenceID, T1.ProjectDataTemplate_UserDataType, T1.ProjectDataTemplate_SystemDataType, T1.ProjectDataTemplate_IsReadOnly, T1.ProjectDataTemplate_IsVisible, T1.ProjectDataTemplate_Version, T1.ProjectDataTemplate_VersionAntecedentID, T1.ProjectDataTemplate_VersionCertainty, T1.ProjectDataTemplate_VersionWorkflowInstanceID, T1.ProjectDataTemplate_VersionUpdatedBy, T1.ProjectDataTemplate_VersionDeletedBy, T1.ProjectDataTemplate_VersionOwnerContactID, T1.ProjectDataTemplate_VersionOwnerCompanyID, T1.ProjectDataTemplate_VersionUpdated, T1.ProjectDataTemplate_FormID)
    FROM (
        SELECT 
            T.ProjectDataTemplateID AS ProjectDataTemplate_ProjectDataTemplateID, 
            T.CommonName AS ProjectDataTemplate_CommonName, 
            T.UniqueID AS ProjectDataTemplate_UniqueID, 
            T.UniqueIDSystemDataType AS ProjectDataTemplate_UniqueIDSystemDataType, 
            T.TemplateStructure AS ProjectDataTemplate_TemplateStructure, 
            T.TemplateStructureChecksum AS ProjectDataTemplate_TemplateStructureChecksum, 
            T.TemplateActions AS ProjectDataTemplate_TemplateActions, 
            T.TemplateType AS ProjectDataTemplate_TemplateType, 
            T.TemplateMulti AS ProjectDataTemplate_TemplateMulti, 
            T.TemplateSingle AS ProjectDataTemplate_TemplateSingle, 
            T.TableType AS ProjectDataTemplate_TableType, 
            T.ReferenceID AS ProjectDataTemplate_ReferenceID, 
            T.UserDataType AS ProjectDataTemplate_UserDataType, 
            T.SystemDataType AS ProjectDataTemplate_SystemDataType, 
            T.IsReadOnly AS ProjectDataTemplate_IsReadOnly, 
            T.IsVisible AS ProjectDataTemplate_IsVisible, 
            T.Version AS ProjectDataTemplate_Version, 
            T.VersionAntecedentID AS ProjectDataTemplate_VersionAntecedentID, 
            T.VersionCertainty AS ProjectDataTemplate_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectDataTemplate_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectDataTemplate_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectDataTemplate_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectDataTemplate_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectDataTemplate_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectDataTemplate_VersionUpdated, 
            T.FormID AS ProjectDataTemplate_FormID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectDataTemplate AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectPlanTaskResponseEvents.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView671()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectPlanTaskResponseEvents
        [NKD.Module.BusinessObjects.ProjectPlanTaskResponseEvent](T1.ProjectPlanTaskResponseEvent_ProjectPlanTaskResponseEventID, T1.ProjectPlanTaskResponseEvent_ProjectPlanTaskResponseID, T1.ProjectPlanTaskResponseEvent_ProjectID, T1.ProjectPlanTaskResponseEvent_TaskID, T1.ProjectPlanTaskResponseEvent_OriginTriggerID, T1.ProjectPlanTaskResponseEvent_DestinationTriggerID, T1.ProjectPlanTaskResponseEvent_JsonCustomVars, T1.ProjectPlanTaskResponseEvent_RunNext, T1.ProjectPlanTaskResponseEvent_Executed, T1.ProjectPlanTaskResponseEvent_Failed, T1.ProjectPlanTaskResponseEvent_Reason, T1.ProjectPlanTaskResponseEvent_Version, T1.ProjectPlanTaskResponseEvent_VersionAntecedentID, T1.ProjectPlanTaskResponseEvent_VersionCertainty, T1.ProjectPlanTaskResponseEvent_VersionWorkflowInstanceID, T1.ProjectPlanTaskResponseEvent_VersionUpdatedBy, T1.ProjectPlanTaskResponseEvent_VersionDeletedBy, T1.ProjectPlanTaskResponseEvent_VersionOwnerContactID, T1.ProjectPlanTaskResponseEvent_VersionOwnerCompanyID, T1.ProjectPlanTaskResponseEvent_VersionUpdated, T1.ProjectPlanTaskResponseEvent_TriggerGraphID, T1.ProjectPlanTaskResponseEvent_RunsLeft)
    FROM (
        SELECT 
            T.ProjectPlanTaskResponseEventID AS ProjectPlanTaskResponseEvent_ProjectPlanTaskResponseEventID, 
            T.ProjectPlanTaskResponseID AS ProjectPlanTaskResponseEvent_ProjectPlanTaskResponseID, 
            T.ProjectID AS ProjectPlanTaskResponseEvent_ProjectID, 
            T.TaskID AS ProjectPlanTaskResponseEvent_TaskID, 
            T.OriginTriggerID AS ProjectPlanTaskResponseEvent_OriginTriggerID, 
            T.DestinationTriggerID AS ProjectPlanTaskResponseEvent_DestinationTriggerID, 
            T.JsonCustomVars AS ProjectPlanTaskResponseEvent_JsonCustomVars, 
            T.RunNext AS ProjectPlanTaskResponseEvent_RunNext, 
            T.Executed AS ProjectPlanTaskResponseEvent_Executed, 
            T.Failed AS ProjectPlanTaskResponseEvent_Failed, 
            T.Reason AS ProjectPlanTaskResponseEvent_Reason, 
            T.Version AS ProjectPlanTaskResponseEvent_Version, 
            T.VersionAntecedentID AS ProjectPlanTaskResponseEvent_VersionAntecedentID, 
            T.VersionCertainty AS ProjectPlanTaskResponseEvent_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ProjectPlanTaskResponseEvent_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ProjectPlanTaskResponseEvent_VersionUpdatedBy, 
            T.VersionDeletedBy AS ProjectPlanTaskResponseEvent_VersionDeletedBy, 
            T.VersionOwnerContactID AS ProjectPlanTaskResponseEvent_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ProjectPlanTaskResponseEvent_VersionOwnerCompanyID, 
            T.VersionUpdated AS ProjectPlanTaskResponseEvent_VersionUpdated, 
            T.TriggerGraphID AS ProjectPlanTaskResponseEvent_TriggerGraphID, 
            T.RunsLeft AS ProjectPlanTaskResponseEvent_RunsLeft, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectPlanTaskResponseEvent AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Triggers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView672()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Triggers
        [NKD.Module.BusinessObjects.Trigger](T1.Trigger_TriggerID, T1.Trigger_CommonName, T1.Trigger_JsonMethod, T1.Trigger_JsonUsername, T1.Trigger_JsonPassword, T1.Trigger_SystemMethod, T1.Trigger_ConditionID, T1.Trigger_Version, T1.Trigger_VersionAntecedentID, T1.Trigger_VersionCertainty, T1.Trigger_VersionWorkflowInstanceID, T1.Trigger_VersionUpdatedBy, T1.Trigger_VersionDeletedBy, T1.Trigger_VersionOwnerContactID, T1.Trigger_VersionOwnerCompanyID, T1.Trigger_VersionUpdated, T1.Trigger_JsonProxyApplicationID, T1.Trigger_JsonProxyContactID, T1.Trigger_JsonProxyCompanyID, T1.Trigger_JsonAuthorizedBy, T1.Trigger_JsonPasswordType, T1.Trigger_ExternalURL, T1.Trigger_ExternalRequestMethod, T1.Trigger_ExternalFormType, T1.Trigger_JSON, T1.Trigger_PassThrough, T1.Trigger_TriggerTypeID, T1.Trigger_DelaySeconds, T1.Trigger_DelayDays, T1.Trigger_DelayWeeks, T1.Trigger_DelayMonths, T1.Trigger_DelayYears, T1.Trigger_DelayUntil, T1.Trigger_Repeats, T1.Trigger_RepeatAfterSeconds, T1.Trigger_RepeatAfterMonths, T1.Trigger_RepeatWeekOfMonth, T1.Trigger_RepeatDayOfWeeks)
    FROM (
        SELECT 
            T.TriggerID AS Trigger_TriggerID, 
            T.CommonName AS Trigger_CommonName, 
            T.JsonMethod AS Trigger_JsonMethod, 
            T.JsonUsername AS Trigger_JsonUsername, 
            T.JsonPassword AS Trigger_JsonPassword, 
            T.SystemMethod AS Trigger_SystemMethod, 
            T.ConditionID AS Trigger_ConditionID, 
            T.Version AS Trigger_Version, 
            T.VersionAntecedentID AS Trigger_VersionAntecedentID, 
            T.VersionCertainty AS Trigger_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Trigger_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Trigger_VersionUpdatedBy, 
            T.VersionDeletedBy AS Trigger_VersionDeletedBy, 
            T.VersionOwnerContactID AS Trigger_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Trigger_VersionOwnerCompanyID, 
            T.VersionUpdated AS Trigger_VersionUpdated, 
            T.JsonProxyApplicationID AS Trigger_JsonProxyApplicationID, 
            T.JsonProxyContactID AS Trigger_JsonProxyContactID, 
            T.JsonProxyCompanyID AS Trigger_JsonProxyCompanyID, 
            T.JsonAuthorizedBy AS Trigger_JsonAuthorizedBy, 
            T.JsonPasswordType AS Trigger_JsonPasswordType, 
            T.ExternalURL AS Trigger_ExternalURL, 
            T.ExternalRequestMethod AS Trigger_ExternalRequestMethod, 
            T.ExternalFormType AS Trigger_ExternalFormType, 
            T.JSON AS Trigger_JSON, 
            T.PassThrough AS Trigger_PassThrough, 
            T.TriggerTypeID AS Trigger_TriggerTypeID, 
            T.DelaySeconds AS Trigger_DelaySeconds, 
            T.DelayDays AS Trigger_DelayDays, 
            T.DelayWeeks AS Trigger_DelayWeeks, 
            T.DelayMonths AS Trigger_DelayMonths, 
            T.DelayYears AS Trigger_DelayYears, 
            T.DelayUntil AS Trigger_DelayUntil, 
            T.Repeats AS Trigger_Repeats, 
            T.RepeatAfterSeconds AS Trigger_RepeatAfterSeconds, 
            T.RepeatAfterMonths AS Trigger_RepeatAfterMonths, 
            T.RepeatWeekOfMonth AS Trigger_RepeatWeekOfMonth, 
            T.RepeatDayOfWeeks AS Trigger_RepeatDayOfWeeks, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Trigger AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryRunStateTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView673()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryRunStateTypes
        [NKD.Module.BusinessObjects.DictionaryRunStateType](T1.DictionaryRunStateType_RunStateTypeID, T1.DictionaryRunStateType_StandardRunStateTypeName, T1.DictionaryRunStateType_CustomRunStateTypeName, T1.DictionaryRunStateType_Description, T1.DictionaryRunStateType_FullDescription, T1.DictionaryRunStateType_Thumbnail, T1.DictionaryRunStateType_OriginalFileDataID, T1.DictionaryRunStateType_Version, T1.DictionaryRunStateType_VersionAntecedentID, T1.DictionaryRunStateType_VersionCertainty, T1.DictionaryRunStateType_VersionWorkflowInstanceID, T1.DictionaryRunStateType_VersionUpdatedBy, T1.DictionaryRunStateType_VersionDeletedBy, T1.DictionaryRunStateType_VersionOwnerContactID, T1.DictionaryRunStateType_VersionOwnerCompanyID, T1.DictionaryRunStateType_VersionUpdated)
    FROM (
        SELECT 
            T.RunStateTypeID AS DictionaryRunStateType_RunStateTypeID, 
            T.StandardRunStateTypeName AS DictionaryRunStateType_StandardRunStateTypeName, 
            T.CustomRunStateTypeName AS DictionaryRunStateType_CustomRunStateTypeName, 
            T.Description AS DictionaryRunStateType_Description, 
            T.FullDescription AS DictionaryRunStateType_FullDescription, 
            T.Thumbnail AS DictionaryRunStateType_Thumbnail, 
            T.OriginalFileDataID AS DictionaryRunStateType_OriginalFileDataID, 
            T.Version AS DictionaryRunStateType_Version, 
            T.VersionAntecedentID AS DictionaryRunStateType_VersionAntecedentID, 
            T.VersionCertainty AS DictionaryRunStateType_VersionCertainty, 
            T.VersionWorkflowInstanceID AS DictionaryRunStateType_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS DictionaryRunStateType_VersionUpdatedBy, 
            T.VersionDeletedBy AS DictionaryRunStateType_VersionDeletedBy, 
            T.VersionOwnerContactID AS DictionaryRunStateType_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS DictionaryRunStateType_VersionOwnerCompanyID, 
            T.VersionUpdated AS DictionaryRunStateType_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryRunStateType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WorkflowInstances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView674()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WorkflowInstances
        [NKD.Module.BusinessObjects.WorkflowInstance](T1.WorkflowInstance_WorkflowInstanceID, T1.WorkflowInstance_WorkflowID, T1.WorkflowInstance_RunStateTypeID, T1.WorkflowInstance_TableType, T1.WorkflowInstance_ReferenceID, T1.WorkflowInstance_ExecutionStatus, T1.WorkflowInstance_Began, T1.WorkflowInstance_Resumed, T1.WorkflowInstance_ResumeTriggers, T1.WorkflowInstance_ResumeAttempts, T1.WorkflowInstance_Pending, T1.WorkflowInstance_Idle, T1.WorkflowInstance_CanCancel, T1.WorkflowInstance_Cancelled, T1.WorkflowInstance_Completed, T1.WorkflowInstance_Version, T1.WorkflowInstance_VersionAntecedentID, T1.WorkflowInstance_VersionCertainty, T1.WorkflowInstance_VersionWorkflowInstanceID, T1.WorkflowInstance_VersionUpdatedBy, T1.WorkflowInstance_VersionDeletedBy, T1.WorkflowInstance_VersionOwnerContactID, T1.WorkflowInstance_VersionOwnerCompanyID, T1.WorkflowInstance_VersionUpdated, T1.WorkflowInstance_ExecutionTimeoutSeconds, T1.WorkflowInstance_CanResume, T1.WorkflowInstance_IdleTimeoutSeconds)
    FROM (
        SELECT 
            T.WorkflowInstanceID AS WorkflowInstance_WorkflowInstanceID, 
            T.WorkflowID AS WorkflowInstance_WorkflowID, 
            T.RunStateTypeID AS WorkflowInstance_RunStateTypeID, 
            T.TableType AS WorkflowInstance_TableType, 
            T.ReferenceID AS WorkflowInstance_ReferenceID, 
            T.ExecutionStatus AS WorkflowInstance_ExecutionStatus, 
            T.Began AS WorkflowInstance_Began, 
            T.Resumed AS WorkflowInstance_Resumed, 
            T.ResumeTriggers AS WorkflowInstance_ResumeTriggers, 
            T.ResumeAttempts AS WorkflowInstance_ResumeAttempts, 
            T.Pending AS WorkflowInstance_Pending, 
            T.Idle AS WorkflowInstance_Idle, 
            T.CanCancel AS WorkflowInstance_CanCancel, 
            T.Cancelled AS WorkflowInstance_Cancelled, 
            T.Completed AS WorkflowInstance_Completed, 
            T.Version AS WorkflowInstance_Version, 
            T.VersionAntecedentID AS WorkflowInstance_VersionAntecedentID, 
            T.VersionCertainty AS WorkflowInstance_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WorkflowInstance_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WorkflowInstance_VersionUpdatedBy, 
            T.VersionDeletedBy AS WorkflowInstance_VersionDeletedBy, 
            T.VersionOwnerContactID AS WorkflowInstance_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WorkflowInstance_VersionOwnerCompanyID, 
            T.VersionUpdated AS WorkflowInstance_VersionUpdated, 
            T.ExecutionTimeoutSeconds AS WorkflowInstance_ExecutionTimeoutSeconds, 
            T.CanResume AS WorkflowInstance_CanResume, 
            T.IdleTimeoutSeconds AS WorkflowInstance_IdleTimeoutSeconds, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstance AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WorkflowInstanceDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView675()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WorkflowInstanceDatas
        [NKD.Module.BusinessObjects.WorkflowInstanceData](T1.WorkflowInstanceData_WorkflowInstanceDataID, T1.WorkflowInstanceData_WorkflowInstanceID, T1.WorkflowInstanceData_Name, T1.WorkflowInstanceData_TableType, T1.WorkflowInstanceData_Value, T1.WorkflowInstanceData_ValueID, T1.WorkflowInstanceData_NumericValue, T1.WorkflowInstanceData_SystemDataType, T1.WorkflowInstanceData_Version, T1.WorkflowInstanceData_VersionAntecedentID, T1.WorkflowInstanceData_VersionCertainty, T1.WorkflowInstanceData_VersionWorkflowInstanceID, T1.WorkflowInstanceData_VersionUpdatedBy, T1.WorkflowInstanceData_VersionDeletedBy, T1.WorkflowInstanceData_VersionOwnerContactID, T1.WorkflowInstanceData_VersionOwnerCompanyID, T1.WorkflowInstanceData_VersionUpdated)
    FROM (
        SELECT 
            T.WorkflowInstanceDataID AS WorkflowInstanceData_WorkflowInstanceDataID, 
            T.WorkflowInstanceID AS WorkflowInstanceData_WorkflowInstanceID, 
            T.Name AS WorkflowInstanceData_Name, 
            T.TableType AS WorkflowInstanceData_TableType, 
            T.[Value] AS WorkflowInstanceData_Value, 
            T.ValueID AS WorkflowInstanceData_ValueID, 
            T.NumericValue AS WorkflowInstanceData_NumericValue, 
            T.SystemDataType AS WorkflowInstanceData_SystemDataType, 
            T.Version AS WorkflowInstanceData_Version, 
            T.VersionAntecedentID AS WorkflowInstanceData_VersionAntecedentID, 
            T.VersionCertainty AS WorkflowInstanceData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS WorkflowInstanceData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS WorkflowInstanceData_VersionUpdatedBy, 
            T.VersionDeletedBy AS WorkflowInstanceData_VersionDeletedBy, 
            T.VersionOwnerContactID AS WorkflowInstanceData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS WorkflowInstanceData_VersionOwnerCompanyID, 
            T.VersionUpdated AS WorkflowInstanceData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstanceData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TriggerGraphs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView676()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TriggerGraphs
        [NKD.Module.BusinessObjects.TriggerGraph](T1.TriggerGraph_TriggerGraphID, T1.TriggerGraph_TriggerID, T1.TriggerGraph_GraphDataID, T1.TriggerGraph_GraphDataGroupID, T1.TriggerGraph_MergeProjectData, T1.TriggerGraph_OnEnter, T1.TriggerGraph_OnDataUpdate, T1.TriggerGraph_OnExit, T1.TriggerGraph_Version, T1.TriggerGraph_VersionAntecedentID, T1.TriggerGraph_VersionCertainty, T1.TriggerGraph_VersionWorkflowInstanceID, T1.TriggerGraph_VersionUpdatedBy, T1.TriggerGraph_VersionDeletedBy, T1.TriggerGraph_VersionOwnerContactID, T1.TriggerGraph_VersionOwnerCompanyID, T1.TriggerGraph_VersionUpdated, T1.TriggerGraph_OnIdle)
    FROM (
        SELECT 
            T.TriggerGraphID AS TriggerGraph_TriggerGraphID, 
            T.TriggerID AS TriggerGraph_TriggerID, 
            T.GraphDataID AS TriggerGraph_GraphDataID, 
            T.GraphDataGroupID AS TriggerGraph_GraphDataGroupID, 
            T.MergeProjectData AS TriggerGraph_MergeProjectData, 
            T.OnEnter AS TriggerGraph_OnEnter, 
            T.OnDataUpdate AS TriggerGraph_OnDataUpdate, 
            T.OnExit AS TriggerGraph_OnExit, 
            T.Version AS TriggerGraph_Version, 
            T.VersionAntecedentID AS TriggerGraph_VersionAntecedentID, 
            T.VersionCertainty AS TriggerGraph_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TriggerGraph_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TriggerGraph_VersionUpdatedBy, 
            T.VersionDeletedBy AS TriggerGraph_VersionDeletedBy, 
            T.VersionOwnerContactID AS TriggerGraph_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TriggerGraph_VersionOwnerCompanyID, 
            T.VersionUpdated AS TriggerGraph_VersionUpdated, 
            T.OnIdle AS TriggerGraph_OnIdle, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_TriggerGraph AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplierDiscounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView677()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplierDiscounts
        [NKD.Module.BusinessObjects.SupplierDiscount](T1.SupplierDiscount_SupplierDiscountID, T1.SupplierDiscount_SupplierID, T1.SupplierDiscount_ModelID, T1.SupplierDiscount_PartID, T1.SupplierDiscount_ConsumerContactID, T1.SupplierDiscount_ConsumerCompanyID, T1.SupplierDiscount_OrderQuantityMinimum, T1.SupplierDiscount_DiscountPercent, T1.SupplierDiscount_Version, T1.SupplierDiscount_VersionAntecedentID, T1.SupplierDiscount_VersionCertainty, T1.SupplierDiscount_VersionWorkflowInstanceID, T1.SupplierDiscount_VersionUpdatedBy, T1.SupplierDiscount_VersionDeletedBy, T1.SupplierDiscount_VersionOwnerContactID, T1.SupplierDiscount_VersionOwnerCompanyID, T1.SupplierDiscount_VersionUpdated)
    FROM (
        SELECT 
            T.SupplierDiscountID AS SupplierDiscount_SupplierDiscountID, 
            T.SupplierID AS SupplierDiscount_SupplierID, 
            T.ModelID AS SupplierDiscount_ModelID, 
            T.PartID AS SupplierDiscount_PartID, 
            T.ConsumerContactID AS SupplierDiscount_ConsumerContactID, 
            T.ConsumerCompanyID AS SupplierDiscount_ConsumerCompanyID, 
            T.OrderQuantityMinimum AS SupplierDiscount_OrderQuantityMinimum, 
            T.DiscountPercent AS SupplierDiscount_DiscountPercent, 
            T.Version AS SupplierDiscount_Version, 
            T.VersionAntecedentID AS SupplierDiscount_VersionAntecedentID, 
            T.VersionCertainty AS SupplierDiscount_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplierDiscount_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplierDiscount_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplierDiscount_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplierDiscount_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplierDiscount_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplierDiscount_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplierDiscount AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Notifications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView678()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Notifications
        [NKD.Module.BusinessObjects.Notification](T1.Notification_NotificationID, T1.Notification_ContactID, T1.Notification_ReminderMinutes, T1.Notification_BlackoutOutOfHours, T1.Notification_Timezone, T1.Notification_Version, T1.Notification_VersionAntecedentID, T1.Notification_VersionCertainty, T1.Notification_VersionWorkflowInstanceID, T1.Notification_VersionUpdatedBy, T1.Notification_VersionDeletedBy, T1.Notification_VersionOwnerContactID, T1.Notification_VersionOwnerCompanyID, T1.Notification_VersionUpdated)
    FROM (
        SELECT 
            T.NotificationID AS Notification_NotificationID, 
            T.ContactID AS Notification_ContactID, 
            T.ReminderMinutes AS Notification_ReminderMinutes, 
            T.BlackoutOutOfHours AS Notification_BlackoutOutOfHours, 
            T.Timezone AS Notification_Timezone, 
            T.Version AS Notification_Version, 
            T.VersionAntecedentID AS Notification_VersionAntecedentID, 
            T.VersionCertainty AS Notification_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Notification_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Notification_VersionUpdatedBy, 
            T.VersionDeletedBy AS Notification_VersionDeletedBy, 
            T.VersionOwnerContactID AS Notification_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Notification_VersionOwnerCompanyID, 
            T.VersionUpdated AS Notification_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_Notification AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.NotificationDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView679()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NotificationDatas
        [NKD.Module.BusinessObjects.NotificationData](T1.NotificationData_NotificationDataID, T1.NotificationData_NotificationID, T1.NotificationData_NotificationType, T1.NotificationData_TableType, T1.NotificationData_ReferenceID, T1.NotificationData_JSON, T1.NotificationData_Version, T1.NotificationData_VersionAntecedentID, T1.NotificationData_VersionCertainty, T1.NotificationData_VersionWorkflowInstanceID, T1.NotificationData_VersionUpdatedBy, T1.NotificationData_VersionDeletedBy, T1.NotificationData_VersionOwnerContactID, T1.NotificationData_VersionOwnerCompanyID, T1.NotificationData_VersionUpdated, T1.NotificationData_RetriesLeft, T1.NotificationData_Sent)
    FROM (
        SELECT 
            T.NotificationDataID AS NotificationData_NotificationDataID, 
            T.NotificationID AS NotificationData_NotificationID, 
            T.NotificationType AS NotificationData_NotificationType, 
            T.TableType AS NotificationData_TableType, 
            T.ReferenceID AS NotificationData_ReferenceID, 
            T.JSON AS NotificationData_JSON, 
            T.Version AS NotificationData_Version, 
            T.VersionAntecedentID AS NotificationData_VersionAntecedentID, 
            T.VersionCertainty AS NotificationData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS NotificationData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS NotificationData_VersionUpdatedBy, 
            T.VersionDeletedBy AS NotificationData_VersionDeletedBy, 
            T.VersionOwnerContactID AS NotificationData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS NotificationData_VersionOwnerCompanyID, 
            T.VersionUpdated AS NotificationData_VersionUpdated, 
            T.RetriesLeft AS NotificationData_RetriesLeft, 
            T.Sent AS NotificationData_Sent, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_NotificationData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.NotificationDevices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView680()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NotificationDevices
        [NKD.Module.BusinessObjects.NotificationDevice](T1.NotificationDevice_NotificationDeviceID, T1.NotificationDevice_NotificationID, T1.NotificationDevice_DeviceType, T1.NotificationDevice_DeviceToken, T1.NotificationDevice_LastRegistered, T1.NotificationDevice_Version, T1.NotificationDevice_VersionAntecedentID, T1.NotificationDevice_VersionCertainty, T1.NotificationDevice_VersionWorkflowInstanceID, T1.NotificationDevice_VersionUpdatedBy, T1.NotificationDevice_VersionDeletedBy, T1.NotificationDevice_VersionOwnerContactID, T1.NotificationDevice_VersionOwnerCompanyID, T1.NotificationDevice_VersionUpdated)
    FROM (
        SELECT 
            T.NotificationDeviceID AS NotificationDevice_NotificationDeviceID, 
            T.NotificationID AS NotificationDevice_NotificationID, 
            T.DeviceType AS NotificationDevice_DeviceType, 
            T.DeviceToken AS NotificationDevice_DeviceToken, 
            T.LastRegistered AS NotificationDevice_LastRegistered, 
            T.Version AS NotificationDevice_Version, 
            T.VersionAntecedentID AS NotificationDevice_VersionAntecedentID, 
            T.VersionCertainty AS NotificationDevice_VersionCertainty, 
            T.VersionWorkflowInstanceID AS NotificationDevice_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS NotificationDevice_VersionUpdatedBy, 
            T.VersionDeletedBy AS NotificationDevice_VersionDeletedBy, 
            T.VersionOwnerContactID AS NotificationDevice_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS NotificationDevice_VersionOwnerCompanyID, 
            T.VersionUpdated AS NotificationDevice_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_NotificationDevice AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.aspnet_UsersInRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView681()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_UsersInRoles
        [NKD.Module.BusinessObjects.aspnet_UsersInRoles](T3.[aspnet_UsersInRoles.aspnet_Roles], T3.[aspnet_UsersInRoles.aspnet_Users])
    FROM (
        SELECT -- Constructing aspnet_Roles
            CreateRef(NKDC.Roles, row(T2.[aspnet_UsersInRoles.aspnet_Roles.RoleId]), [NKD.Module.BusinessObjects.Roles]) AS [aspnet_UsersInRoles.aspnet_Roles], 
            T2.[aspnet_UsersInRoles.aspnet_Users]
        FROM (
            SELECT -- Constructing aspnet_Users
                T1.[aspnet_UsersInRoles.aspnet_Roles.RoleId], 
                CreateRef(NKDC.Users, row(T1.[aspnet_UsersInRoles.aspnet_Users.UserId]), [NKD.Module.BusinessObjects.Users]) AS [aspnet_UsersInRoles.aspnet_Users]
            FROM (
                SELECT 
                    T.RoleId AS [aspnet_UsersInRoles.aspnet_Roles.RoleId], 
                    T.UserId AS [aspnet_UsersInRoles.aspnet_Users.UserId], 
                    True AS _from0
                FROM NKDModuleBusinessObjectsStoreContainer.aspnet_UsersInRoles AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_SchemaVersions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView682()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_SchemaVersions
        [NKD.Module.BusinessObjects.Store.aspnet_SchemaVersions](T1.[aspnet_SchemaVersions.Feature], T1.[aspnet_SchemaVersions.CompatibleSchemaVersion], T1.[aspnet_SchemaVersions.IsCurrentVersion])
    FROM (
        SELECT 
            T.Feature AS [aspnet_SchemaVersions.Feature], 
            T.CompatibleSchemaVersion AS [aspnet_SchemaVersions.CompatibleSchemaVersion], 
            T.IsCurrentVersion AS [aspnet_SchemaVersions.IsCurrentVersion], 
            True AS _from0
        FROM NKDC.SchemaVersions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SchemaVersions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView683()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SchemaVersions
        [NKD.Module.BusinessObjects.SchemaVersions](T1.SchemaVersions_Feature, T1.SchemaVersions_CompatibleSchemaVersion, T1.SchemaVersions_IsCurrentVersion)
    FROM (
        SELECT 
            T.Feature AS SchemaVersions_Feature, 
            T.CompatibleSchemaVersion AS SchemaVersions_CompatibleSchemaVersion, 
            T.IsCurrentVersion AS SchemaVersions_IsCurrentVersion, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_SchemaVersions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.aspnet_WebEvent_Events.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView684()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing aspnet_WebEvent_Events
        [NKD.Module.BusinessObjects.Store.aspnet_WebEvent_Events](T1.[aspnet_WebEvent_Events.EventId], T1.[aspnet_WebEvent_Events.EventTimeUtc], T1.[aspnet_WebEvent_Events.EventTime], T1.[aspnet_WebEvent_Events.EventType], T1.[aspnet_WebEvent_Events.EventSequence], T1.[aspnet_WebEvent_Events.EventOccurrence], T1.[aspnet_WebEvent_Events.EventCode], T1.[aspnet_WebEvent_Events.EventDetailCode], T1.[aspnet_WebEvent_Events.Message], T1.[aspnet_WebEvent_Events.ApplicationPath], T1.[aspnet_WebEvent_Events.ApplicationVirtualPath], T1.[aspnet_WebEvent_Events.MachineName], T1.[aspnet_WebEvent_Events.RequestUrl], T1.[aspnet_WebEvent_Events.ExceptionType], T1.[aspnet_WebEvent_Events.Details])
    FROM (
        SELECT 
            T.EventId AS [aspnet_WebEvent_Events.EventId], 
            T.EventTimeUtc AS [aspnet_WebEvent_Events.EventTimeUtc], 
            T.EventTime AS [aspnet_WebEvent_Events.EventTime], 
            T.EventType AS [aspnet_WebEvent_Events.EventType], 
            T.EventSequence AS [aspnet_WebEvent_Events.EventSequence], 
            T.EventOccurrence AS [aspnet_WebEvent_Events.EventOccurrence], 
            T.EventCode AS [aspnet_WebEvent_Events.EventCode], 
            T.EventDetailCode AS [aspnet_WebEvent_Events.EventDetailCode], 
            T.Message AS [aspnet_WebEvent_Events.Message], 
            T.ApplicationPath AS [aspnet_WebEvent_Events.ApplicationPath], 
            T.ApplicationVirtualPath AS [aspnet_WebEvent_Events.ApplicationVirtualPath], 
            T.MachineName AS [aspnet_WebEvent_Events.MachineName], 
            T.RequestUrl AS [aspnet_WebEvent_Events.RequestUrl], 
            T.ExceptionType AS [aspnet_WebEvent_Events.ExceptionType], 
            T.Details AS [aspnet_WebEvent_Events.Details], 
            True AS _from0
        FROM NKDC.WebEvent_Events AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WebEvent_Events.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView685()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebEvent_Events
        [NKD.Module.BusinessObjects.WebEvent_Events](T1.[WebEvent_Events.EventId], T1.[WebEvent_Events.EventTimeUtc], T1.[WebEvent_Events.EventTime], T1.[WebEvent_Events.EventType], T1.[WebEvent_Events.EventSequence], T1.[WebEvent_Events.EventOccurrence], T1.[WebEvent_Events.EventCode], T1.[WebEvent_Events.EventDetailCode], T1.[WebEvent_Events.Message], T1.[WebEvent_Events.ApplicationPath], T1.[WebEvent_Events.ApplicationVirtualPath], T1.[WebEvent_Events.MachineName], T1.[WebEvent_Events.RequestUrl], T1.[WebEvent_Events.ExceptionType], T1.[WebEvent_Events.Details])
    FROM (
        SELECT 
            T.EventId AS [WebEvent_Events.EventId], 
            T.EventTimeUtc AS [WebEvent_Events.EventTimeUtc], 
            T.EventTime AS [WebEvent_Events.EventTime], 
            T.EventType AS [WebEvent_Events.EventType], 
            T.EventSequence AS [WebEvent_Events.EventSequence], 
            T.EventOccurrence AS [WebEvent_Events.EventOccurrence], 
            T.EventCode AS [WebEvent_Events.EventCode], 
            T.EventDetailCode AS [WebEvent_Events.EventDetailCode], 
            T.Message AS [WebEvent_Events.Message], 
            T.ApplicationPath AS [WebEvent_Events.ApplicationPath], 
            T.ApplicationVirtualPath AS [WebEvent_Events.ApplicationVirtualPath], 
            T.MachineName AS [WebEvent_Events.MachineName], 
            T.RequestUrl AS [WebEvent_Events.RequestUrl], 
            T.ExceptionType AS [WebEvent_Events.ExceptionType], 
            T.Details AS [WebEvent_Events.Details], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_WebEvent_Events AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView686()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [NKD.Module.BusinessObjects.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM NKDC.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.sysdiagrams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView687()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sysdiagrams
        [NKD.Module.BusinessObjects.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.sysdiagrams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_CompanyServer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView688()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_CompanyServer
        [NKD.Module.BusinessObjects.Store.X_CompanyServer](T1.[X_CompanyServer.CompanyServerID], T1.[X_CompanyServer.CompanyID], T1.[X_CompanyServer.ServerID], T1.[X_CompanyServer.Version], T1.[X_CompanyServer.VersionAntecedentID], T1.[X_CompanyServer.VersionCertainty], T1.[X_CompanyServer.VersionWorkflowInstanceID], T1.[X_CompanyServer.VersionUpdatedBy], T1.[X_CompanyServer.VersionDeletedBy], T1.[X_CompanyServer.VersionOwnerContactID], T1.[X_CompanyServer.VersionOwnerCompanyID], T1.[X_CompanyServer.VersionUpdated])
    FROM (
        SELECT 
            T.CompanyServerID AS [X_CompanyServer.CompanyServerID], 
            T.CompanyID AS [X_CompanyServer.CompanyID], 
            T.ServerID AS [X_CompanyServer.ServerID], 
            T.Version AS [X_CompanyServer.Version], 
            T.VersionAntecedentID AS [X_CompanyServer.VersionAntecedentID], 
            T.VersionCertainty AS [X_CompanyServer.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_CompanyServer.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_CompanyServer.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_CompanyServer.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_CompanyServer.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_CompanyServer.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_CompanyServer.VersionUpdated], 
            True AS _from0
        FROM NKDC.CompanyServers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CompanyServers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView689()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompanyServers
        [NKD.Module.BusinessObjects.CompanyServer](T1.CompanyServer_CompanyServerID, T1.CompanyServer_CompanyID, T1.CompanyServer_ServerID, T1.CompanyServer_Version, T1.CompanyServer_VersionAntecedentID, T1.CompanyServer_VersionCertainty, T1.CompanyServer_VersionWorkflowInstanceID, T1.CompanyServer_VersionUpdatedBy, T1.CompanyServer_VersionDeletedBy, T1.CompanyServer_VersionOwnerContactID, T1.CompanyServer_VersionOwnerCompanyID, T1.CompanyServer_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyServerID AS CompanyServer_CompanyServerID, 
            T.CompanyID AS CompanyServer_CompanyID, 
            T.ServerID AS CompanyServer_ServerID, 
            T.Version AS CompanyServer_Version, 
            T.VersionAntecedentID AS CompanyServer_VersionAntecedentID, 
            T.VersionCertainty AS CompanyServer_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyServer_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyServer_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyServer_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyServer_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyServer_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyServer_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_CompanyServer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LicenseAssetModelPart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView690()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LicenseAssetModelPart
        [NKD.Module.BusinessObjects.Store.X_LicenseAssetModelPart](T1.[X_LicenseAssetModelPart.LicenseAssetModelPartID], T1.[X_LicenseAssetModelPart.LicenseAssetID], T1.[X_LicenseAssetModelPart.ModelPartID], T1.[X_LicenseAssetModelPart.Restrictions], T1.[X_LicenseAssetModelPart.Version], T1.[X_LicenseAssetModelPart.VersionAntecedentID], T1.[X_LicenseAssetModelPart.VersionCertainty], T1.[X_LicenseAssetModelPart.VersionWorkflowInstanceID], T1.[X_LicenseAssetModelPart.VersionUpdatedBy], T1.[X_LicenseAssetModelPart.VersionDeletedBy], T1.[X_LicenseAssetModelPart.VersionOwnerContactID], T1.[X_LicenseAssetModelPart.VersionOwnerCompanyID], T1.[X_LicenseAssetModelPart.VersionUpdated])
    FROM (
        SELECT 
            T.LicenseAssetModelPartID AS [X_LicenseAssetModelPart.LicenseAssetModelPartID], 
            T.LicenseAssetID AS [X_LicenseAssetModelPart.LicenseAssetID], 
            T.ModelPartID AS [X_LicenseAssetModelPart.ModelPartID], 
            T.Restrictions AS [X_LicenseAssetModelPart.Restrictions], 
            T.Version AS [X_LicenseAssetModelPart.Version], 
            T.VersionAntecedentID AS [X_LicenseAssetModelPart.VersionAntecedentID], 
            T.VersionCertainty AS [X_LicenseAssetModelPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LicenseAssetModelPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LicenseAssetModelPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LicenseAssetModelPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LicenseAssetModelPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LicenseAssetModelPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LicenseAssetModelPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.LicenseAssetModelParts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LicenseAssetModelParts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView691()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LicenseAssetModelParts
        [NKD.Module.BusinessObjects.LicenseAssetModelPart](T1.LicenseAssetModelPart_LicenseAssetModelPartID, T1.LicenseAssetModelPart_LicenseAssetID, T1.LicenseAssetModelPart_ModelPartID, T1.LicenseAssetModelPart_Restrictions, T1.LicenseAssetModelPart_Version, T1.LicenseAssetModelPart_VersionAntecedentID, T1.LicenseAssetModelPart_VersionCertainty, T1.LicenseAssetModelPart_VersionWorkflowInstanceID, T1.LicenseAssetModelPart_VersionUpdatedBy, T1.LicenseAssetModelPart_VersionDeletedBy, T1.LicenseAssetModelPart_VersionOwnerContactID, T1.LicenseAssetModelPart_VersionOwnerCompanyID, T1.LicenseAssetModelPart_VersionUpdated)
    FROM (
        SELECT 
            T.LicenseAssetModelPartID AS LicenseAssetModelPart_LicenseAssetModelPartID, 
            T.LicenseAssetID AS LicenseAssetModelPart_LicenseAssetID, 
            T.ModelPartID AS LicenseAssetModelPart_ModelPartID, 
            T.Restrictions AS LicenseAssetModelPart_Restrictions, 
            T.Version AS LicenseAssetModelPart_Version, 
            T.VersionAntecedentID AS LicenseAssetModelPart_VersionAntecedentID, 
            T.VersionCertainty AS LicenseAssetModelPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LicenseAssetModelPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LicenseAssetModelPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS LicenseAssetModelPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS LicenseAssetModelPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LicenseAssetModelPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS LicenseAssetModelPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LicenseAssetModelPart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_LicenseHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView692()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_LicenseHistory
        [NKD.Module.BusinessObjects.Store.X_LicenseHistory](T1.[X_LicenseHistory.LicenseHistoryID], T1.[X_LicenseHistory.LastLicenseID], T1.[X_LicenseHistory.LicenseeReferenceID], T1.[X_LicenseHistory.LicenseHistoryEncrypted], T1.[X_LicenseHistory.Version], T1.[X_LicenseHistory.VersionAntecedentID], T1.[X_LicenseHistory.VersionCertainty], T1.[X_LicenseHistory.VersionWorkflowInstanceID], T1.[X_LicenseHistory.VersionUpdatedBy], T1.[X_LicenseHistory.VersionDeletedBy], T1.[X_LicenseHistory.VersionOwnerContactID], T1.[X_LicenseHistory.VersionOwnerCompanyID], T1.[X_LicenseHistory.VersionUpdated])
    FROM (
        SELECT 
            T.LicenseHistoryID AS [X_LicenseHistory.LicenseHistoryID], 
            T.LastLicenseID AS [X_LicenseHistory.LastLicenseID], 
            T.LicenseeReferenceID AS [X_LicenseHistory.LicenseeReferenceID], 
            T.LicenseHistoryEncrypted AS [X_LicenseHistory.LicenseHistoryEncrypted], 
            T.Version AS [X_LicenseHistory.Version], 
            T.VersionAntecedentID AS [X_LicenseHistory.VersionAntecedentID], 
            T.VersionCertainty AS [X_LicenseHistory.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_LicenseHistory.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_LicenseHistory.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_LicenseHistory.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_LicenseHistory.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_LicenseHistory.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_LicenseHistory.VersionUpdated], 
            True AS _from0
        FROM NKDC.LicenseHistories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LicenseHistories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView693()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LicenseHistories
        [NKD.Module.BusinessObjects.LicenseHistory](T1.LicenseHistory_LastLicenseID, T1.LicenseHistory_LicenseHistoryEncrypted, T1.LicenseHistory_Version, T1.LicenseHistory_VersionAntecedentID, T1.LicenseHistory_VersionCertainty, T1.LicenseHistory_VersionWorkflowInstanceID, T1.LicenseHistory_VersionUpdatedBy, T1.LicenseHistory_VersionDeletedBy, T1.LicenseHistory_VersionOwnerContactID, T1.LicenseHistory_VersionOwnerCompanyID, T1.LicenseHistory_VersionUpdated, T1.LicenseHistory_LicenseHistoryID, T1.LicenseHistory_LicenseeReferenceID)
    FROM (
        SELECT 
            T.LastLicenseID AS LicenseHistory_LastLicenseID, 
            T.LicenseHistoryEncrypted AS LicenseHistory_LicenseHistoryEncrypted, 
            T.Version AS LicenseHistory_Version, 
            T.VersionAntecedentID AS LicenseHistory_VersionAntecedentID, 
            T.VersionCertainty AS LicenseHistory_VersionCertainty, 
            T.VersionWorkflowInstanceID AS LicenseHistory_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS LicenseHistory_VersionUpdatedBy, 
            T.VersionDeletedBy AS LicenseHistory_VersionDeletedBy, 
            T.VersionOwnerContactID AS LicenseHistory_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS LicenseHistory_VersionOwnerCompanyID, 
            T.VersionUpdated AS LicenseHistory_VersionUpdated, 
            T.LicenseHistoryID AS LicenseHistory_LicenseHistoryID, 
            T.LicenseeReferenceID AS LicenseHistory_LicenseeReferenceID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_LicenseHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_MetaData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView694()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_MetaData
        [NKD.Module.BusinessObjects.Store.X_MetaData](T1.[X_MetaData.MetaDataID], T1.[X_MetaData.MetaDataType], T1.[X_MetaData.ContentToIndex], T1.[X_MetaData.Version], T1.[X_MetaData.VersionAntecedentID], T1.[X_MetaData.VersionCertainty], T1.[X_MetaData.VersionWorkflowInstanceID], T1.[X_MetaData.VersionUpdatedBy], T1.[X_MetaData.VersionDeletedBy], T1.[X_MetaData.VersionOwnerContactID], T1.[X_MetaData.VersionOwnerCompanyID], T1.[X_MetaData.VersionUpdated])
    FROM (
        SELECT 
            T.MetaDataID AS [X_MetaData.MetaDataID], 
            T.MetaDataType AS [X_MetaData.MetaDataType], 
            T.ContentToIndex AS [X_MetaData.ContentToIndex], 
            T.Version AS [X_MetaData.Version], 
            T.VersionAntecedentID AS [X_MetaData.VersionAntecedentID], 
            T.VersionCertainty AS [X_MetaData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_MetaData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_MetaData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_MetaData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_MetaData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_MetaData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_MetaData.VersionUpdated], 
            True AS _from0
        FROM NKDC.MetaDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_MetaDataRelation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView695()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_MetaDataRelation
        [NKD.Module.BusinessObjects.Store.X_MetaDataRelation](T1.[X_MetaDataRelation.MetaDataRelationID], T1.[X_MetaDataRelation.MetaDataID], T1.[X_MetaDataRelation.TableType], T1.[X_MetaDataRelation.ReferenceID], T1.[X_MetaDataRelation.Version], T1.[X_MetaDataRelation.VersionAntecedentID], T1.[X_MetaDataRelation.VersionCertainty], T1.[X_MetaDataRelation.VersionWorkflowInstanceID], T1.[X_MetaDataRelation.VersionUpdatedBy], T1.[X_MetaDataRelation.VersionDeletedBy], T1.[X_MetaDataRelation.VersionOwnerContactID], T1.[X_MetaDataRelation.VersionOwnerCompanyID], T1.[X_MetaDataRelation.VersionUpdated])
    FROM (
        SELECT 
            T.MetaDataRelationID AS [X_MetaDataRelation.MetaDataRelationID], 
            T.MetaDataID AS [X_MetaDataRelation.MetaDataID], 
            T.TableType AS [X_MetaDataRelation.TableType], 
            T.ReferenceID AS [X_MetaDataRelation.ReferenceID], 
            T.Version AS [X_MetaDataRelation.Version], 
            T.VersionAntecedentID AS [X_MetaDataRelation.VersionAntecedentID], 
            T.VersionCertainty AS [X_MetaDataRelation.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_MetaDataRelation.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_MetaDataRelation.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_MetaDataRelation.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_MetaDataRelation.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_MetaDataRelation.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_MetaDataRelation.VersionUpdated], 
            True AS _from0
        FROM NKDC.MetaDataRelations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.MetaDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView696()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MetaDatas
        [NKD.Module.BusinessObjects.MetaData](T1.MetaData_MetaDataID, T1.MetaData_MetaDataType, T1.MetaData_ContentToIndex, T1.MetaData_Version, T1.MetaData_VersionAntecedentID, T1.MetaData_VersionCertainty, T1.MetaData_VersionWorkflowInstanceID, T1.MetaData_VersionUpdatedBy, T1.MetaData_VersionDeletedBy, T1.MetaData_VersionOwnerContactID, T1.MetaData_VersionOwnerCompanyID, T1.MetaData_VersionUpdated)
    FROM (
        SELECT 
            T.MetaDataID AS MetaData_MetaDataID, 
            T.MetaDataType AS MetaData_MetaDataType, 
            T.ContentToIndex AS MetaData_ContentToIndex, 
            T.Version AS MetaData_Version, 
            T.VersionAntecedentID AS MetaData_VersionAntecedentID, 
            T.VersionCertainty AS MetaData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS MetaData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS MetaData_VersionUpdatedBy, 
            T.VersionDeletedBy AS MetaData_VersionDeletedBy, 
            T.VersionOwnerContactID AS MetaData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS MetaData_VersionOwnerCompanyID, 
            T.VersionUpdated AS MetaData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_MetaData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.MetaDataRelations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView697()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MetaDataRelations
        [NKD.Module.BusinessObjects.MetaDataRelation](T1.MetaDataRelation_MetaDataRelationID, T1.MetaDataRelation_MetaDataID, T1.MetaDataRelation_TableType, T1.MetaDataRelation_ReferenceID, T1.MetaDataRelation_Version, T1.MetaDataRelation_VersionAntecedentID, T1.MetaDataRelation_VersionCertainty, T1.MetaDataRelation_VersionWorkflowInstanceID, T1.MetaDataRelation_VersionUpdatedBy, T1.MetaDataRelation_VersionDeletedBy, T1.MetaDataRelation_VersionOwnerContactID, T1.MetaDataRelation_VersionOwnerCompanyID, T1.MetaDataRelation_VersionUpdated)
    FROM (
        SELECT 
            T.MetaDataRelationID AS MetaDataRelation_MetaDataRelationID, 
            T.MetaDataID AS MetaDataRelation_MetaDataID, 
            T.TableType AS MetaDataRelation_TableType, 
            T.ReferenceID AS MetaDataRelation_ReferenceID, 
            T.Version AS MetaDataRelation_Version, 
            T.VersionAntecedentID AS MetaDataRelation_VersionAntecedentID, 
            T.VersionCertainty AS MetaDataRelation_VersionCertainty, 
            T.VersionWorkflowInstanceID AS MetaDataRelation_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS MetaDataRelation_VersionUpdatedBy, 
            T.VersionDeletedBy AS MetaDataRelation_VersionDeletedBy, 
            T.VersionOwnerContactID AS MetaDataRelation_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS MetaDataRelation_VersionOwnerCompanyID, 
            T.VersionUpdated AS MetaDataRelation_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_MetaDataRelation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_PrivateData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView698()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_PrivateData
        [NKD.Module.BusinessObjects.Store.X_PrivateData](T1.[X_PrivateData.PrivateDataID], T1.[X_PrivateData.UniqueID], T1.[X_PrivateData.UniqueIDSystemDataType], T1.[X_PrivateData.TableType], T1.[X_PrivateData.ReferenceID], T1.[X_PrivateData.UserDataType], T1.[X_PrivateData.Value], T1.[X_PrivateData.SystemDataType], T1.[X_PrivateData.IsReadOnly], T1.[X_PrivateData.IsVisible], T1.[X_PrivateData.Version], T1.[X_PrivateData.VersionAntecedentID], T1.[X_PrivateData.VersionCertainty], T1.[X_PrivateData.VersionWorkflowInstanceID], T1.[X_PrivateData.VersionUpdatedBy], T1.[X_PrivateData.VersionDeletedBy], T1.[X_PrivateData.VersionOwnerContactID], T1.[X_PrivateData.VersionOwnerCompanyID], T1.[X_PrivateData.VersionUpdated])
    FROM (
        SELECT 
            T.PrivateDataID AS [X_PrivateData.PrivateDataID], 
            T.UniqueID AS [X_PrivateData.UniqueID], 
            T.UniqueIDSystemDataType AS [X_PrivateData.UniqueIDSystemDataType], 
            T.TableType AS [X_PrivateData.TableType], 
            T.ReferenceID AS [X_PrivateData.ReferenceID], 
            T.UserDataType AS [X_PrivateData.UserDataType], 
            T.[Value] AS [X_PrivateData.Value], 
            T.SystemDataType AS [X_PrivateData.SystemDataType], 
            T.IsReadOnly AS [X_PrivateData.IsReadOnly], 
            T.IsVisible AS [X_PrivateData.IsVisible], 
            T.Version AS [X_PrivateData.Version], 
            T.VersionAntecedentID AS [X_PrivateData.VersionAntecedentID], 
            T.VersionCertainty AS [X_PrivateData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_PrivateData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_PrivateData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_PrivateData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_PrivateData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_PrivateData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_PrivateData.VersionUpdated], 
            True AS _from0
        FROM NKDC.PrivateDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PrivateDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView699()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PrivateDatas
        [NKD.Module.BusinessObjects.PrivateData](T1.PrivateData_PrivateDataID, T1.PrivateData_UniqueID, T1.PrivateData_UniqueIDSystemDataType, T1.PrivateData_TableType, T1.PrivateData_ReferenceID, T1.PrivateData_UserDataType, T1.PrivateData_Value, T1.PrivateData_SystemDataType, T1.PrivateData_IsReadOnly, T1.PrivateData_IsVisible, T1.PrivateData_Version, T1.PrivateData_VersionAntecedentID, T1.PrivateData_VersionCertainty, T1.PrivateData_VersionWorkflowInstanceID, T1.PrivateData_VersionUpdatedBy, T1.PrivateData_VersionDeletedBy, T1.PrivateData_VersionOwnerContactID, T1.PrivateData_VersionOwnerCompanyID, T1.PrivateData_VersionUpdated)
    FROM (
        SELECT 
            T.PrivateDataID AS PrivateData_PrivateDataID, 
            T.UniqueID AS PrivateData_UniqueID, 
            T.UniqueIDSystemDataType AS PrivateData_UniqueIDSystemDataType, 
            T.TableType AS PrivateData_TableType, 
            T.ReferenceID AS PrivateData_ReferenceID, 
            T.UserDataType AS PrivateData_UserDataType, 
            T.[Value] AS PrivateData_Value, 
            T.SystemDataType AS PrivateData_SystemDataType, 
            T.IsReadOnly AS PrivateData_IsReadOnly, 
            T.IsVisible AS PrivateData_IsVisible, 
            T.Version AS PrivateData_Version, 
            T.VersionAntecedentID AS PrivateData_VersionAntecedentID, 
            T.VersionCertainty AS PrivateData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS PrivateData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS PrivateData_VersionUpdatedBy, 
            T.VersionDeletedBy AS PrivateData_VersionDeletedBy, 
            T.VersionOwnerContactID AS PrivateData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS PrivateData_VersionOwnerCompanyID, 
            T.VersionUpdated AS PrivateData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_PrivateData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_ServerApplication.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView700()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_ServerApplication
        [NKD.Module.BusinessObjects.Store.X_ServerApplication](T1.[X_ServerApplication.ServerApplicationID], T1.[X_ServerApplication.ServerID], T1.[X_ServerApplication.ApplicationID], T1.[X_ServerApplication.Version], T1.[X_ServerApplication.VersionAntecedentID], T1.[X_ServerApplication.VersionCertainty], T1.[X_ServerApplication.VersionWorkflowInstanceID], T1.[X_ServerApplication.VersionUpdatedBy], T1.[X_ServerApplication.VersionDeletedBy], T1.[X_ServerApplication.VersionOwnerContactID], T1.[X_ServerApplication.VersionOwnerCompanyID], T1.[X_ServerApplication.VersionUpdated])
    FROM (
        SELECT 
            T.ServerApplicationID AS [X_ServerApplication.ServerApplicationID], 
            T.ServerID AS [X_ServerApplication.ServerID], 
            T.ApplicationID AS [X_ServerApplication.ApplicationID], 
            T.Version AS [X_ServerApplication.Version], 
            T.VersionAntecedentID AS [X_ServerApplication.VersionAntecedentID], 
            T.VersionCertainty AS [X_ServerApplication.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_ServerApplication.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_ServerApplication.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_ServerApplication.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_ServerApplication.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_ServerApplication.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_ServerApplication.VersionUpdated], 
            True AS _from0
        FROM NKDC.ServerApplications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ServerApplications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView701()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServerApplications
        [NKD.Module.BusinessObjects.ServerApplication](T1.ServerApplication_ServerApplicationID, T1.ServerApplication_ServerID, T1.ServerApplication_ApplicationID, T1.ServerApplication_Version, T1.ServerApplication_VersionAntecedentID, T1.ServerApplication_VersionCertainty, T1.ServerApplication_VersionWorkflowInstanceID, T1.ServerApplication_VersionUpdatedBy, T1.ServerApplication_VersionDeletedBy, T1.ServerApplication_VersionOwnerContactID, T1.ServerApplication_VersionOwnerCompanyID, T1.ServerApplication_VersionUpdated)
    FROM (
        SELECT 
            T.ServerApplicationID AS ServerApplication_ServerApplicationID, 
            T.ServerID AS ServerApplication_ServerID, 
            T.ApplicationID AS ServerApplication_ApplicationID, 
            T.Version AS ServerApplication_Version, 
            T.VersionAntecedentID AS ServerApplication_VersionAntecedentID, 
            T.VersionCertainty AS ServerApplication_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ServerApplication_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ServerApplication_VersionUpdatedBy, 
            T.VersionDeletedBy AS ServerApplication_VersionDeletedBy, 
            T.VersionOwnerContactID AS ServerApplication_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ServerApplication_VersionOwnerCompanyID, 
            T.VersionUpdated AS ServerApplication_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ServerApplication AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_Usage.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView702()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_Usage
        [NKD.Module.BusinessObjects.Store.X_Usage](T1.[X_Usage.UsageID], T1.[X_Usage.AssetID], T1.[X_Usage.ModelID], T1.[X_Usage.PartID], T1.[X_Usage.DurationStart], T1.[X_Usage.DurationEnd], T1.[X_Usage.UnitID], T1.[X_Usage.Measurement], T1.[X_Usage.Version], T1.[X_Usage.VersionAntecedentID], T1.[X_Usage.VersionCertainty], T1.[X_Usage.VersionWorkflowInstanceID], T1.[X_Usage.VersionUpdatedBy], T1.[X_Usage.VersionDeletedBy], T1.[X_Usage.VersionOwnerContactID], T1.[X_Usage.VersionOwnerCompanyID], T1.[X_Usage.VersionUpdated])
    FROM (
        SELECT 
            T.UsageID AS [X_Usage.UsageID], 
            T.AssetID AS [X_Usage.AssetID], 
            T.ModelID AS [X_Usage.ModelID], 
            T.PartID AS [X_Usage.PartID], 
            T.DurationStart AS [X_Usage.DurationStart], 
            T.DurationEnd AS [X_Usage.DurationEnd], 
            T.UnitID AS [X_Usage.UnitID], 
            T.Measurement AS [X_Usage.Measurement], 
            T.Version AS [X_Usage.Version], 
            T.VersionAntecedentID AS [X_Usage.VersionAntecedentID], 
            T.VersionCertainty AS [X_Usage.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Usage.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Usage.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Usage.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Usage.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Usage.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Usage.VersionUpdated], 
            True AS _from0
        FROM NKDC.Usages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Usages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView703()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Usages
        [NKD.Module.BusinessObjects.Usage](T1.Usage_UsageID, T1.Usage_AssetID, T1.Usage_ModelID, T1.Usage_PartID, T1.Usage_DurationStart, T1.Usage_DurationEnd, T1.Usage_UnitID, T1.Usage_Measurement, T1.Usage_Version, T1.Usage_VersionAntecedentID, T1.Usage_VersionCertainty, T1.Usage_VersionWorkflowInstanceID, T1.Usage_VersionUpdatedBy, T1.Usage_VersionDeletedBy, T1.Usage_VersionOwnerContactID, T1.Usage_VersionOwnerCompanyID, T1.Usage_VersionUpdated)
    FROM (
        SELECT 
            T.UsageID AS Usage_UsageID, 
            T.AssetID AS Usage_AssetID, 
            T.ModelID AS Usage_ModelID, 
            T.PartID AS Usage_PartID, 
            T.DurationStart AS Usage_DurationStart, 
            T.DurationEnd AS Usage_DurationEnd, 
            T.UnitID AS Usage_UnitID, 
            T.Measurement AS Usage_Measurement, 
            T.Version AS Usage_Version, 
            T.VersionAntecedentID AS Usage_VersionAntecedentID, 
            T.VersionCertainty AS Usage_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Usage_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Usage_VersionUpdatedBy, 
            T.VersionDeletedBy AS Usage_VersionDeletedBy, 
            T.VersionOwnerContactID AS Usage_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Usage_VersionOwnerCompanyID, 
            T.VersionUpdated AS Usage_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Usage AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_UserData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView704()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_UserData
        [NKD.Module.BusinessObjects.Store.X_UserData](T1.[X_UserData.UserDataID], T1.[X_UserData.TableType], T1.[X_UserData.ReferenceID], T1.[X_UserData.UserDataType], T1.[X_UserData.SystemDataType], T1.[X_UserData.Value], T1.[X_UserData.Version], T1.[X_UserData.VersionAntecedentID], T1.[X_UserData.VersionCertainty], T1.[X_UserData.VersionWorkflowInstanceID], T1.[X_UserData.VersionUpdatedBy], T1.[X_UserData.VersionDeletedBy], T1.[X_UserData.VersionOwnerContactID], T1.[X_UserData.VersionOwnerCompanyID], T1.[X_UserData.VersionUpdated])
    FROM (
        SELECT 
            T.UserDataID AS [X_UserData.UserDataID], 
            T.TableType AS [X_UserData.TableType], 
            T.ReferenceID AS [X_UserData.ReferenceID], 
            T.UserDataType AS [X_UserData.UserDataType], 
            T.SystemDataType AS [X_UserData.SystemDataType], 
            T.[Value] AS [X_UserData.Value], 
            T.Version AS [X_UserData.Version], 
            T.VersionAntecedentID AS [X_UserData.VersionAntecedentID], 
            T.VersionCertainty AS [X_UserData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_UserData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_UserData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_UserData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_UserData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_UserData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_UserData.VersionUpdated], 
            True AS _from0
        FROM NKDC.UserDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.UserDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView705()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserDatas
        [NKD.Module.BusinessObjects.UserData](T1.UserData_UserDataID, T1.UserData_TableType, T1.UserData_ReferenceID, T1.UserData_UserDataType, T1.UserData_SystemDataType, T1.UserData_Value, T1.UserData_Version, T1.UserData_VersionAntecedentID, T1.UserData_VersionCertainty, T1.UserData_VersionWorkflowInstanceID, T1.UserData_VersionUpdatedBy, T1.UserData_VersionDeletedBy, T1.UserData_VersionOwnerContactID, T1.UserData_VersionOwnerCompanyID, T1.UserData_VersionUpdated)
    FROM (
        SELECT 
            T.UserDataID AS UserData_UserDataID, 
            T.TableType AS UserData_TableType, 
            T.ReferenceID AS UserData_ReferenceID, 
            T.UserDataType AS UserData_UserDataType, 
            T.SystemDataType AS UserData_SystemDataType, 
            T.[Value] AS UserData_Value, 
            T.Version AS UserData_Version, 
            T.VersionAntecedentID AS UserData_VersionAntecedentID, 
            T.VersionCertainty AS UserData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS UserData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS UserData_VersionUpdatedBy, 
            T.VersionDeletedBy AS UserData_VersionDeletedBy, 
            T.VersionOwnerContactID AS UserData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS UserData_VersionOwnerCompanyID, 
            T.VersionUpdated AS UserData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_UserData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.DefinitionIdentityTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView706()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DefinitionIdentityTable
        [NKD.Module.BusinessObjects.Store.DefinitionIdentityTable](T1.DefinitionIdentityTable_SurrogateIdentityId, T1.DefinitionIdentityTable_DefinitionIdentityHash, T1.DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, T1.DefinitionIdentityTable_Name, T1.DefinitionIdentityTable_Package, T1.DefinitionIdentityTable_Build, T1.DefinitionIdentityTable_Major, T1.DefinitionIdentityTable_Minor, T1.DefinitionIdentityTable_Revision)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS DefinitionIdentityTable_SurrogateIdentityId, 
            T.DefinitionIdentityHash AS DefinitionIdentityTable_DefinitionIdentityHash, 
            T.DefinitionIdentityAnyRevisionHash AS DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, 
            T.Name AS DefinitionIdentityTable_Name, 
            T.Package AS DefinitionIdentityTable_Package, 
            T.Build AS DefinitionIdentityTable_Build, 
            T.Major AS DefinitionIdentityTable_Major, 
            T.Minor AS DefinitionIdentityTable_Minor, 
            T.Revision AS DefinitionIdentityTable_Revision, 
            True AS _from0
        FROM NKDC.DefinitionIdentityTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DefinitionIdentityTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView707()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DefinitionIdentityTables
        [NKD.Module.BusinessObjects.DefinitionIdentityTable](T1.DefinitionIdentityTable_SurrogateIdentityId, T1.DefinitionIdentityTable_DefinitionIdentityHash, T1.DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, T1.DefinitionIdentityTable_Name, T1.DefinitionIdentityTable_Package, T1.DefinitionIdentityTable_Build, T1.DefinitionIdentityTable_Major, T1.DefinitionIdentityTable_Minor, T1.DefinitionIdentityTable_Revision)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS DefinitionIdentityTable_SurrogateIdentityId, 
            T.DefinitionIdentityHash AS DefinitionIdentityTable_DefinitionIdentityHash, 
            T.DefinitionIdentityAnyRevisionHash AS DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, 
            T.Name AS DefinitionIdentityTable_Name, 
            T.Package AS DefinitionIdentityTable_Package, 
            T.Build AS DefinitionIdentityTable_Build, 
            T.Major AS DefinitionIdentityTable_Major, 
            T.Minor AS DefinitionIdentityTable_Minor, 
            T.Revision AS DefinitionIdentityTable_Revision, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.DefinitionIdentityTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.IdentityOwnerTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView708()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityOwnerTable
        [NKD.Module.BusinessObjects.Store.IdentityOwnerTable](T1.IdentityOwnerTable_SurrogateIdentityId, T1.IdentityOwnerTable_SurrogateLockOwnerId)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS IdentityOwnerTable_SurrogateIdentityId, 
            T.SurrogateLockOwnerId AS IdentityOwnerTable_SurrogateLockOwnerId, 
            True AS _from0
        FROM NKDC.IdentityOwnerTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.IdentityOwnerTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView709()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityOwnerTables
        [NKD.Module.BusinessObjects.IdentityOwnerTable](T1.IdentityOwnerTable_SurrogateIdentityId, T1.IdentityOwnerTable_SurrogateLockOwnerId)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS IdentityOwnerTable_SurrogateIdentityId, 
            T.SurrogateLockOwnerId AS IdentityOwnerTable_SurrogateLockOwnerId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.IdentityOwnerTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.InstanceMetadataChangesTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView710()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstanceMetadataChangesTable
        [NKD.Module.BusinessObjects.Store.InstanceMetadataChangesTable](T1.InstanceMetadataChangesTable_SurrogateInstanceId, T1.InstanceMetadataChangesTable_ChangeTime, T1.InstanceMetadataChangesTable_EncodingOption, T1.InstanceMetadataChangesTable_Change)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS InstanceMetadataChangesTable_SurrogateInstanceId, 
            T.ChangeTime AS InstanceMetadataChangesTable_ChangeTime, 
            T.EncodingOption AS InstanceMetadataChangesTable_EncodingOption, 
            T.Change AS InstanceMetadataChangesTable_Change, 
            True AS _from0
        FROM NKDC.InstanceMetadataChangesTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.InstanceMetadataChangesTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView711()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstanceMetadataChangesTables
        [NKD.Module.BusinessObjects.InstanceMetadataChangesTable](T1.InstanceMetadataChangesTable_SurrogateInstanceId, T1.InstanceMetadataChangesTable_ChangeTime, T1.InstanceMetadataChangesTable_EncodingOption, T1.InstanceMetadataChangesTable_Change)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS InstanceMetadataChangesTable_SurrogateInstanceId, 
            T.ChangeTime AS InstanceMetadataChangesTable_ChangeTime, 
            T.EncodingOption AS InstanceMetadataChangesTable_EncodingOption, 
            T.Change AS InstanceMetadataChangesTable_Change, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.InstanceMetadataChangesTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.InstancePromotedPropertiesTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView712()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstancePromotedPropertiesTable
        [NKD.Module.BusinessObjects.Store.InstancePromotedPropertiesTable](T1.InstancePromotedPropertiesTable_SurrogateInstanceId, T1.InstancePromotedPropertiesTable_PromotionName, T1.InstancePromotedPropertiesTable_Value33, T1.InstancePromotedPropertiesTable_Value34, T1.InstancePromotedPropertiesTable_Value35, T1.InstancePromotedPropertiesTable_Value36, T1.InstancePromotedPropertiesTable_Value37, T1.InstancePromotedPropertiesTable_Value38, T1.InstancePromotedPropertiesTable_Value39, T1.InstancePromotedPropertiesTable_Value40, T1.InstancePromotedPropertiesTable_Value41, T1.InstancePromotedPropertiesTable_Value42, T1.InstancePromotedPropertiesTable_Value43, T1.InstancePromotedPropertiesTable_Value44, T1.InstancePromotedPropertiesTable_Value45, T1.InstancePromotedPropertiesTable_Value46, T1.InstancePromotedPropertiesTable_Value47, T1.InstancePromotedPropertiesTable_Value48, T1.InstancePromotedPropertiesTable_Value49, T1.InstancePromotedPropertiesTable_Value50, T1.InstancePromotedPropertiesTable_Value51, T1.InstancePromotedPropertiesTable_Value52, T1.InstancePromotedPropertiesTable_Value53, T1.InstancePromotedPropertiesTable_Value54, T1.InstancePromotedPropertiesTable_Value55, T1.InstancePromotedPropertiesTable_Value56, T1.InstancePromotedPropertiesTable_Value57, T1.InstancePromotedPropertiesTable_Value58, T1.InstancePromotedPropertiesTable_Value59, T1.InstancePromotedPropertiesTable_Value60, T1.InstancePromotedPropertiesTable_Value61, T1.InstancePromotedPropertiesTable_Value62, T1.InstancePromotedPropertiesTable_Value63, T1.InstancePromotedPropertiesTable_Value64)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS InstancePromotedPropertiesTable_SurrogateInstanceId, 
            T.PromotionName AS InstancePromotedPropertiesTable_PromotionName, 
            T.Value33 AS InstancePromotedPropertiesTable_Value33, 
            T.Value34 AS InstancePromotedPropertiesTable_Value34, 
            T.Value35 AS InstancePromotedPropertiesTable_Value35, 
            T.Value36 AS InstancePromotedPropertiesTable_Value36, 
            T.Value37 AS InstancePromotedPropertiesTable_Value37, 
            T.Value38 AS InstancePromotedPropertiesTable_Value38, 
            T.Value39 AS InstancePromotedPropertiesTable_Value39, 
            T.Value40 AS InstancePromotedPropertiesTable_Value40, 
            T.Value41 AS InstancePromotedPropertiesTable_Value41, 
            T.Value42 AS InstancePromotedPropertiesTable_Value42, 
            T.Value43 AS InstancePromotedPropertiesTable_Value43, 
            T.Value44 AS InstancePromotedPropertiesTable_Value44, 
            T.Value45 AS InstancePromotedPropertiesTable_Value45, 
            T.Value46 AS InstancePromotedPropertiesTable_Value46, 
            T.Value47 AS InstancePromotedPropertiesTable_Value47, 
            T.Value48 AS InstancePromotedPropertiesTable_Value48, 
            T.Value49 AS InstancePromotedPropertiesTable_Value49, 
            T.Value50 AS InstancePromotedPropertiesTable_Value50, 
            T.Value51 AS InstancePromotedPropertiesTable_Value51, 
            T.Value52 AS InstancePromotedPropertiesTable_Value52, 
            T.Value53 AS InstancePromotedPropertiesTable_Value53, 
            T.Value54 AS InstancePromotedPropertiesTable_Value54, 
            T.Value55 AS InstancePromotedPropertiesTable_Value55, 
            T.Value56 AS InstancePromotedPropertiesTable_Value56, 
            T.Value57 AS InstancePromotedPropertiesTable_Value57, 
            T.Value58 AS InstancePromotedPropertiesTable_Value58, 
            T.Value59 AS InstancePromotedPropertiesTable_Value59, 
            T.Value60 AS InstancePromotedPropertiesTable_Value60, 
            T.Value61 AS InstancePromotedPropertiesTable_Value61, 
            T.Value62 AS InstancePromotedPropertiesTable_Value62, 
            T.Value63 AS InstancePromotedPropertiesTable_Value63, 
            T.Value64 AS InstancePromotedPropertiesTable_Value64, 
            True AS _from0
        FROM NKDC.InstancePromotedPropertiesTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.InstancePromotedPropertiesTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView713()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstancePromotedPropertiesTables
        [NKD.Module.BusinessObjects.InstancePromotedPropertiesTable](T1.InstancePromotedPropertiesTable_SurrogateInstanceId, T1.InstancePromotedPropertiesTable_PromotionName, T1.InstancePromotedPropertiesTable_Value33, T1.InstancePromotedPropertiesTable_Value34, T1.InstancePromotedPropertiesTable_Value35, T1.InstancePromotedPropertiesTable_Value36, T1.InstancePromotedPropertiesTable_Value37, T1.InstancePromotedPropertiesTable_Value38, T1.InstancePromotedPropertiesTable_Value39, T1.InstancePromotedPropertiesTable_Value40, T1.InstancePromotedPropertiesTable_Value41, T1.InstancePromotedPropertiesTable_Value42, T1.InstancePromotedPropertiesTable_Value43, T1.InstancePromotedPropertiesTable_Value44, T1.InstancePromotedPropertiesTable_Value45, T1.InstancePromotedPropertiesTable_Value46, T1.InstancePromotedPropertiesTable_Value47, T1.InstancePromotedPropertiesTable_Value48, T1.InstancePromotedPropertiesTable_Value49, T1.InstancePromotedPropertiesTable_Value50, T1.InstancePromotedPropertiesTable_Value51, T1.InstancePromotedPropertiesTable_Value52, T1.InstancePromotedPropertiesTable_Value53, T1.InstancePromotedPropertiesTable_Value54, T1.InstancePromotedPropertiesTable_Value55, T1.InstancePromotedPropertiesTable_Value56, T1.InstancePromotedPropertiesTable_Value57, T1.InstancePromotedPropertiesTable_Value58, T1.InstancePromotedPropertiesTable_Value59, T1.InstancePromotedPropertiesTable_Value60, T1.InstancePromotedPropertiesTable_Value61, T1.InstancePromotedPropertiesTable_Value62, T1.InstancePromotedPropertiesTable_Value63, T1.InstancePromotedPropertiesTable_Value64)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS InstancePromotedPropertiesTable_SurrogateInstanceId, 
            T.PromotionName AS InstancePromotedPropertiesTable_PromotionName, 
            T.Value33 AS InstancePromotedPropertiesTable_Value33, 
            T.Value34 AS InstancePromotedPropertiesTable_Value34, 
            T.Value35 AS InstancePromotedPropertiesTable_Value35, 
            T.Value36 AS InstancePromotedPropertiesTable_Value36, 
            T.Value37 AS InstancePromotedPropertiesTable_Value37, 
            T.Value38 AS InstancePromotedPropertiesTable_Value38, 
            T.Value39 AS InstancePromotedPropertiesTable_Value39, 
            T.Value40 AS InstancePromotedPropertiesTable_Value40, 
            T.Value41 AS InstancePromotedPropertiesTable_Value41, 
            T.Value42 AS InstancePromotedPropertiesTable_Value42, 
            T.Value43 AS InstancePromotedPropertiesTable_Value43, 
            T.Value44 AS InstancePromotedPropertiesTable_Value44, 
            T.Value45 AS InstancePromotedPropertiesTable_Value45, 
            T.Value46 AS InstancePromotedPropertiesTable_Value46, 
            T.Value47 AS InstancePromotedPropertiesTable_Value47, 
            T.Value48 AS InstancePromotedPropertiesTable_Value48, 
            T.Value49 AS InstancePromotedPropertiesTable_Value49, 
            T.Value50 AS InstancePromotedPropertiesTable_Value50, 
            T.Value51 AS InstancePromotedPropertiesTable_Value51, 
            T.Value52 AS InstancePromotedPropertiesTable_Value52, 
            T.Value53 AS InstancePromotedPropertiesTable_Value53, 
            T.Value54 AS InstancePromotedPropertiesTable_Value54, 
            T.Value55 AS InstancePromotedPropertiesTable_Value55, 
            T.Value56 AS InstancePromotedPropertiesTable_Value56, 
            T.Value57 AS InstancePromotedPropertiesTable_Value57, 
            T.Value58 AS InstancePromotedPropertiesTable_Value58, 
            T.Value59 AS InstancePromotedPropertiesTable_Value59, 
            T.Value60 AS InstancePromotedPropertiesTable_Value60, 
            T.Value61 AS InstancePromotedPropertiesTable_Value61, 
            T.Value62 AS InstancePromotedPropertiesTable_Value62, 
            T.Value63 AS InstancePromotedPropertiesTable_Value63, 
            T.Value64 AS InstancePromotedPropertiesTable_Value64, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.InstancePromotedPropertiesTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.InstancesTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView714()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstancesTable
        [NKD.Module.BusinessObjects.Store.InstancesTable](T1.InstancesTable_Id, T1.InstancesTable_SurrogateInstanceId, T1.InstancesTable_SurrogateLockOwnerId, T1.InstancesTable_PrimitiveDataProperties, T1.InstancesTable_ComplexDataProperties, T1.InstancesTable_WriteOnlyPrimitiveDataProperties, T1.InstancesTable_WriteOnlyComplexDataProperties, T1.InstancesTable_MetadataProperties, T1.InstancesTable_DataEncodingOption, T1.InstancesTable_MetadataEncodingOption, T1.InstancesTable_Version, T1.InstancesTable_PendingTimer, T1.InstancesTable_CreationTime, T1.InstancesTable_LastUpdated, T1.InstancesTable_WorkflowHostType, T1.InstancesTable_ServiceDeploymentId, T1.InstancesTable_SuspensionExceptionName, T1.InstancesTable_SuspensionReason, T1.InstancesTable_BlockingBookmarks, T1.InstancesTable_LastMachineRunOn, T1.InstancesTable_ExecutionStatus, T1.InstancesTable_IsInitialized, T1.InstancesTable_IsSuspended, T1.InstancesTable_IsReadyToRun, T1.InstancesTable_IsCompleted, T1.InstancesTable_SurrogateIdentityId)
    FROM (
        SELECT 
            T.Id AS InstancesTable_Id, 
            T.SurrogateInstanceId AS InstancesTable_SurrogateInstanceId, 
            T.SurrogateLockOwnerId AS InstancesTable_SurrogateLockOwnerId, 
            T.PrimitiveDataProperties AS InstancesTable_PrimitiveDataProperties, 
            T.ComplexDataProperties AS InstancesTable_ComplexDataProperties, 
            T.WriteOnlyPrimitiveDataProperties AS InstancesTable_WriteOnlyPrimitiveDataProperties, 
            T.WriteOnlyComplexDataProperties AS InstancesTable_WriteOnlyComplexDataProperties, 
            T.MetadataProperties AS InstancesTable_MetadataProperties, 
            T.DataEncodingOption AS InstancesTable_DataEncodingOption, 
            T.MetadataEncodingOption AS InstancesTable_MetadataEncodingOption, 
            T.Version AS InstancesTable_Version, 
            T.PendingTimer AS InstancesTable_PendingTimer, 
            T.CreationTime AS InstancesTable_CreationTime, 
            T.LastUpdated AS InstancesTable_LastUpdated, 
            T.WorkflowHostType AS InstancesTable_WorkflowHostType, 
            T.ServiceDeploymentId AS InstancesTable_ServiceDeploymentId, 
            T.SuspensionExceptionName AS InstancesTable_SuspensionExceptionName, 
            T.SuspensionReason AS InstancesTable_SuspensionReason, 
            T.BlockingBookmarks AS InstancesTable_BlockingBookmarks, 
            T.LastMachineRunOn AS InstancesTable_LastMachineRunOn, 
            T.ExecutionStatus AS InstancesTable_ExecutionStatus, 
            T.IsInitialized AS InstancesTable_IsInitialized, 
            T.IsSuspended AS InstancesTable_IsSuspended, 
            T.IsReadyToRun AS InstancesTable_IsReadyToRun, 
            T.IsCompleted AS InstancesTable_IsCompleted, 
            T.SurrogateIdentityId AS InstancesTable_SurrogateIdentityId, 
            True AS _from0
        FROM NKDC.InstancesTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.InstancesTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView715()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstancesTables
        [NKD.Module.BusinessObjects.InstancesTable](T1.InstancesTable_Id, T1.InstancesTable_SurrogateInstanceId, T1.InstancesTable_SurrogateLockOwnerId, T1.InstancesTable_PrimitiveDataProperties, T1.InstancesTable_ComplexDataProperties, T1.InstancesTable_WriteOnlyPrimitiveDataProperties, T1.InstancesTable_WriteOnlyComplexDataProperties, T1.InstancesTable_MetadataProperties, T1.InstancesTable_DataEncodingOption, T1.InstancesTable_MetadataEncodingOption, T1.InstancesTable_Version, T1.InstancesTable_PendingTimer, T1.InstancesTable_CreationTime, T1.InstancesTable_LastUpdated, T1.InstancesTable_WorkflowHostType, T1.InstancesTable_ServiceDeploymentId, T1.InstancesTable_SuspensionExceptionName, T1.InstancesTable_SuspensionReason, T1.InstancesTable_BlockingBookmarks, T1.InstancesTable_LastMachineRunOn, T1.InstancesTable_ExecutionStatus, T1.InstancesTable_IsInitialized, T1.InstancesTable_IsSuspended, T1.InstancesTable_IsReadyToRun, T1.InstancesTable_IsCompleted, T1.InstancesTable_SurrogateIdentityId)
    FROM (
        SELECT 
            T.Id AS InstancesTable_Id, 
            T.SurrogateInstanceId AS InstancesTable_SurrogateInstanceId, 
            T.SurrogateLockOwnerId AS InstancesTable_SurrogateLockOwnerId, 
            T.PrimitiveDataProperties AS InstancesTable_PrimitiveDataProperties, 
            T.ComplexDataProperties AS InstancesTable_ComplexDataProperties, 
            T.WriteOnlyPrimitiveDataProperties AS InstancesTable_WriteOnlyPrimitiveDataProperties, 
            T.WriteOnlyComplexDataProperties AS InstancesTable_WriteOnlyComplexDataProperties, 
            T.MetadataProperties AS InstancesTable_MetadataProperties, 
            T.DataEncodingOption AS InstancesTable_DataEncodingOption, 
            T.MetadataEncodingOption AS InstancesTable_MetadataEncodingOption, 
            T.Version AS InstancesTable_Version, 
            T.PendingTimer AS InstancesTable_PendingTimer, 
            T.CreationTime AS InstancesTable_CreationTime, 
            T.LastUpdated AS InstancesTable_LastUpdated, 
            T.WorkflowHostType AS InstancesTable_WorkflowHostType, 
            T.ServiceDeploymentId AS InstancesTable_ServiceDeploymentId, 
            T.SuspensionExceptionName AS InstancesTable_SuspensionExceptionName, 
            T.SuspensionReason AS InstancesTable_SuspensionReason, 
            T.BlockingBookmarks AS InstancesTable_BlockingBookmarks, 
            T.LastMachineRunOn AS InstancesTable_LastMachineRunOn, 
            T.ExecutionStatus AS InstancesTable_ExecutionStatus, 
            T.IsInitialized AS InstancesTable_IsInitialized, 
            T.IsSuspended AS InstancesTable_IsSuspended, 
            T.IsReadyToRun AS InstancesTable_IsReadyToRun, 
            T.IsCompleted AS InstancesTable_IsCompleted, 
            T.SurrogateIdentityId AS InstancesTable_SurrogateIdentityId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.InstancesTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.KeysTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView716()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing KeysTable
        [NKD.Module.BusinessObjects.Store.KeysTable](T1.KeysTable_Id, T1.KeysTable_SurrogateKeyId, T1.KeysTable_SurrogateInstanceId, T1.KeysTable_EncodingOption, T1.KeysTable_Properties, T1.KeysTable_IsAssociated)
    FROM (
        SELECT 
            T.Id AS KeysTable_Id, 
            T.SurrogateKeyId AS KeysTable_SurrogateKeyId, 
            T.SurrogateInstanceId AS KeysTable_SurrogateInstanceId, 
            T.EncodingOption AS KeysTable_EncodingOption, 
            T.Properties AS KeysTable_Properties, 
            T.IsAssociated AS KeysTable_IsAssociated, 
            True AS _from0
        FROM NKDC.KeysTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.KeysTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView717()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing KeysTables
        [NKD.Module.BusinessObjects.KeysTable](T1.KeysTable_Id, T1.KeysTable_SurrogateKeyId, T1.KeysTable_SurrogateInstanceId, T1.KeysTable_EncodingOption, T1.KeysTable_Properties, T1.KeysTable_IsAssociated)
    FROM (
        SELECT 
            T.Id AS KeysTable_Id, 
            T.SurrogateKeyId AS KeysTable_SurrogateKeyId, 
            T.SurrogateInstanceId AS KeysTable_SurrogateInstanceId, 
            T.EncodingOption AS KeysTable_EncodingOption, 
            T.Properties AS KeysTable_Properties, 
            T.IsAssociated AS KeysTable_IsAssociated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.KeysTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.LockOwnersTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView718()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LockOwnersTable
        [NKD.Module.BusinessObjects.Store.LockOwnersTable](T1.LockOwnersTable_Id, T1.LockOwnersTable_SurrogateLockOwnerId, T1.LockOwnersTable_LockExpiration, T1.LockOwnersTable_WorkflowHostType, T1.LockOwnersTable_MachineName, T1.LockOwnersTable_EnqueueCommand, T1.LockOwnersTable_DeletesInstanceOnCompletion, T1.LockOwnersTable_PrimitiveLockOwnerData, T1.LockOwnersTable_ComplexLockOwnerData, T1.LockOwnersTable_WriteOnlyPrimitiveLockOwnerData, T1.LockOwnersTable_WriteOnlyComplexLockOwnerData, T1.LockOwnersTable_EncodingOption, T1.LockOwnersTable_WorkflowIdentityFilter)
    FROM (
        SELECT 
            T.Id AS LockOwnersTable_Id, 
            T.SurrogateLockOwnerId AS LockOwnersTable_SurrogateLockOwnerId, 
            T.LockExpiration AS LockOwnersTable_LockExpiration, 
            T.WorkflowHostType AS LockOwnersTable_WorkflowHostType, 
            T.MachineName AS LockOwnersTable_MachineName, 
            T.EnqueueCommand AS LockOwnersTable_EnqueueCommand, 
            T.DeletesInstanceOnCompletion AS LockOwnersTable_DeletesInstanceOnCompletion, 
            T.PrimitiveLockOwnerData AS LockOwnersTable_PrimitiveLockOwnerData, 
            T.ComplexLockOwnerData AS LockOwnersTable_ComplexLockOwnerData, 
            T.WriteOnlyPrimitiveLockOwnerData AS LockOwnersTable_WriteOnlyPrimitiveLockOwnerData, 
            T.WriteOnlyComplexLockOwnerData AS LockOwnersTable_WriteOnlyComplexLockOwnerData, 
            T.EncodingOption AS LockOwnersTable_EncodingOption, 
            T.WorkflowIdentityFilter AS LockOwnersTable_WorkflowIdentityFilter, 
            True AS _from0
        FROM NKDC.LockOwnersTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LockOwnersTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView719()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LockOwnersTables
        [NKD.Module.BusinessObjects.LockOwnersTable](T1.LockOwnersTable_Id, T1.LockOwnersTable_SurrogateLockOwnerId, T1.LockOwnersTable_LockExpiration, T1.LockOwnersTable_WorkflowHostType, T1.LockOwnersTable_MachineName, T1.LockOwnersTable_EnqueueCommand, T1.LockOwnersTable_DeletesInstanceOnCompletion, T1.LockOwnersTable_PrimitiveLockOwnerData, T1.LockOwnersTable_ComplexLockOwnerData, T1.LockOwnersTable_WriteOnlyPrimitiveLockOwnerData, T1.LockOwnersTable_WriteOnlyComplexLockOwnerData, T1.LockOwnersTable_EncodingOption, T1.LockOwnersTable_WorkflowIdentityFilter)
    FROM (
        SELECT 
            T.Id AS LockOwnersTable_Id, 
            T.SurrogateLockOwnerId AS LockOwnersTable_SurrogateLockOwnerId, 
            T.LockExpiration AS LockOwnersTable_LockExpiration, 
            T.WorkflowHostType AS LockOwnersTable_WorkflowHostType, 
            T.MachineName AS LockOwnersTable_MachineName, 
            T.EnqueueCommand AS LockOwnersTable_EnqueueCommand, 
            T.DeletesInstanceOnCompletion AS LockOwnersTable_DeletesInstanceOnCompletion, 
            T.PrimitiveLockOwnerData AS LockOwnersTable_PrimitiveLockOwnerData, 
            T.ComplexLockOwnerData AS LockOwnersTable_ComplexLockOwnerData, 
            T.WriteOnlyPrimitiveLockOwnerData AS LockOwnersTable_WriteOnlyPrimitiveLockOwnerData, 
            T.WriteOnlyComplexLockOwnerData AS LockOwnersTable_WriteOnlyComplexLockOwnerData, 
            T.EncodingOption AS LockOwnersTable_EncodingOption, 
            T.WorkflowIdentityFilter AS LockOwnersTable_WorkflowIdentityFilter, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.LockOwnersTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.RunnableInstancesTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView720()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RunnableInstancesTable
        [NKD.Module.BusinessObjects.Store.RunnableInstancesTable](T1.RunnableInstancesTable_SurrogateInstanceId, T1.RunnableInstancesTable_WorkflowHostType, T1.RunnableInstancesTable_ServiceDeploymentId, T1.RunnableInstancesTable_RunnableTime, T1.RunnableInstancesTable_SurrogateIdentityId)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS RunnableInstancesTable_SurrogateInstanceId, 
            T.WorkflowHostType AS RunnableInstancesTable_WorkflowHostType, 
            T.ServiceDeploymentId AS RunnableInstancesTable_ServiceDeploymentId, 
            T.RunnableTime AS RunnableInstancesTable_RunnableTime, 
            T.SurrogateIdentityId AS RunnableInstancesTable_SurrogateIdentityId, 
            True AS _from0
        FROM NKDC.RunnableInstancesTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.RunnableInstancesTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView721()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RunnableInstancesTables
        [NKD.Module.BusinessObjects.RunnableInstancesTable](T1.RunnableInstancesTable_SurrogateInstanceId, T1.RunnableInstancesTable_WorkflowHostType, T1.RunnableInstancesTable_ServiceDeploymentId, T1.RunnableInstancesTable_RunnableTime, T1.RunnableInstancesTable_SurrogateIdentityId)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS RunnableInstancesTable_SurrogateInstanceId, 
            T.WorkflowHostType AS RunnableInstancesTable_WorkflowHostType, 
            T.ServiceDeploymentId AS RunnableInstancesTable_ServiceDeploymentId, 
            T.RunnableTime AS RunnableInstancesTable_RunnableTime, 
            T.SurrogateIdentityId AS RunnableInstancesTable_SurrogateIdentityId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.RunnableInstancesTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.ServiceDeploymentsTable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView722()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceDeploymentsTable
        [NKD.Module.BusinessObjects.Store.ServiceDeploymentsTable](T1.ServiceDeploymentsTable_Id, T1.ServiceDeploymentsTable_ServiceDeploymentHash, T1.ServiceDeploymentsTable_SiteName, T1.ServiceDeploymentsTable_RelativeServicePath, T1.ServiceDeploymentsTable_RelativeApplicationPath, T1.ServiceDeploymentsTable_ServiceName, T1.ServiceDeploymentsTable_ServiceNamespace)
    FROM (
        SELECT 
            T.Id AS ServiceDeploymentsTable_Id, 
            T.ServiceDeploymentHash AS ServiceDeploymentsTable_ServiceDeploymentHash, 
            T.SiteName AS ServiceDeploymentsTable_SiteName, 
            T.RelativeServicePath AS ServiceDeploymentsTable_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeploymentsTable_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeploymentsTable_ServiceName, 
            T.ServiceNamespace AS ServiceDeploymentsTable_ServiceNamespace, 
            True AS _from0
        FROM NKDC.ServiceDeploymentsTables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ServiceDeploymentsTables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView723()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceDeploymentsTables
        [NKD.Module.BusinessObjects.ServiceDeploymentsTable](T1.ServiceDeploymentsTable_Id, T1.ServiceDeploymentsTable_ServiceDeploymentHash, T1.ServiceDeploymentsTable_SiteName, T1.ServiceDeploymentsTable_RelativeServicePath, T1.ServiceDeploymentsTable_RelativeApplicationPath, T1.ServiceDeploymentsTable_ServiceName, T1.ServiceDeploymentsTable_ServiceNamespace)
    FROM (
        SELECT 
            T.Id AS ServiceDeploymentsTable_Id, 
            T.ServiceDeploymentHash AS ServiceDeploymentsTable_ServiceDeploymentHash, 
            T.SiteName AS ServiceDeploymentsTable_SiteName, 
            T.RelativeServicePath AS ServiceDeploymentsTable_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeploymentsTable_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeploymentsTable_ServiceName, 
            T.ServiceNamespace AS ServiceDeploymentsTable_ServiceNamespace, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ServiceDeploymentsTable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Applications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView724()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_Applications
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Applications](T1.[vw_aspnet_Applications.ApplicationName], T1.[vw_aspnet_Applications.LoweredApplicationName], T1.[vw_aspnet_Applications.ApplicationId], T1.[vw_aspnet_Applications.Description])
    FROM (
        SELECT 
            T.ApplicationName AS [vw_aspnet_Applications.ApplicationName], 
            T.LoweredApplicationName AS [vw_aspnet_Applications.LoweredApplicationName], 
            T.ApplicationId AS [vw_aspnet_Applications.ApplicationId], 
            T.Description AS [vw_aspnet_Applications.Description], 
            True AS _from0
        FROM NKDC.ApplicationsViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationsViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView725()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationsViews
        [NKD.Module.BusinessObjects.ApplicationsView](T1.ApplicationsView_ApplicationName, T1.ApplicationsView_LoweredApplicationName, T1.ApplicationsView_ApplicationId, T1.ApplicationsView_Description)
    FROM (
        SELECT 
            T.ApplicationName AS ApplicationsView_ApplicationName, 
            T.LoweredApplicationName AS ApplicationsView_LoweredApplicationName, 
            T.ApplicationId AS ApplicationsView_ApplicationId, 
            T.Description AS ApplicationsView_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Applications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_MembershipUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView726()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_MembershipUsers
        [NKD.Module.BusinessObjects.Store.vw_aspnet_MembershipUsers](T1.[vw_aspnet_MembershipUsers.UserId], T1.[vw_aspnet_MembershipUsers.PasswordFormat], T1.[vw_aspnet_MembershipUsers.MobilePIN], T1.[vw_aspnet_MembershipUsers.Email], T1.[vw_aspnet_MembershipUsers.LoweredEmail], T1.[vw_aspnet_MembershipUsers.PasswordQuestion], T1.[vw_aspnet_MembershipUsers.PasswordAnswer], T1.[vw_aspnet_MembershipUsers.IsApproved], T1.[vw_aspnet_MembershipUsers.IsLockedOut], T1.[vw_aspnet_MembershipUsers.CreateDate], T1.[vw_aspnet_MembershipUsers.LastLoginDate], T1.[vw_aspnet_MembershipUsers.LastPasswordChangedDate], T1.[vw_aspnet_MembershipUsers.LastLockoutDate], T1.[vw_aspnet_MembershipUsers.FailedPasswordAttemptCount], T1.[vw_aspnet_MembershipUsers.FailedPasswordAttemptWindowStart], T1.[vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptCount], T1.[vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptWindowStart], T1.[vw_aspnet_MembershipUsers.Comment], T1.[vw_aspnet_MembershipUsers.ApplicationId], T1.[vw_aspnet_MembershipUsers.UserName], T1.[vw_aspnet_MembershipUsers.MobileAlias], T1.[vw_aspnet_MembershipUsers.IsAnonymous], T1.[vw_aspnet_MembershipUsers.LastActivityDate])
    FROM (
        SELECT 
            T.UserId AS [vw_aspnet_MembershipUsers.UserId], 
            T.PasswordFormat AS [vw_aspnet_MembershipUsers.PasswordFormat], 
            T.MobilePIN AS [vw_aspnet_MembershipUsers.MobilePIN], 
            T.Email AS [vw_aspnet_MembershipUsers.Email], 
            T.LoweredEmail AS [vw_aspnet_MembershipUsers.LoweredEmail], 
            T.PasswordQuestion AS [vw_aspnet_MembershipUsers.PasswordQuestion], 
            T.PasswordAnswer AS [vw_aspnet_MembershipUsers.PasswordAnswer], 
            T.IsApproved AS [vw_aspnet_MembershipUsers.IsApproved], 
            T.IsLockedOut AS [vw_aspnet_MembershipUsers.IsLockedOut], 
            T.CreateDate AS [vw_aspnet_MembershipUsers.CreateDate], 
            T.LastLoginDate AS [vw_aspnet_MembershipUsers.LastLoginDate], 
            T.LastPasswordChangedDate AS [vw_aspnet_MembershipUsers.LastPasswordChangedDate], 
            T.LastLockoutDate AS [vw_aspnet_MembershipUsers.LastLockoutDate], 
            T.FailedPasswordAttemptCount AS [vw_aspnet_MembershipUsers.FailedPasswordAttemptCount], 
            T.FailedPasswordAttemptWindowStart AS [vw_aspnet_MembershipUsers.FailedPasswordAttemptWindowStart], 
            T.FailedPasswordAnswerAttemptCount AS [vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptCount], 
            T.FailedPasswordAnswerAttemptWindowStart AS [vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptWindowStart], 
            T.Comment AS [vw_aspnet_MembershipUsers.Comment], 
            T.ApplicationId AS [vw_aspnet_MembershipUsers.ApplicationId], 
            T.UserName AS [vw_aspnet_MembershipUsers.UserName], 
            T.MobileAlias AS [vw_aspnet_MembershipUsers.MobileAlias], 
            T.IsAnonymous AS [vw_aspnet_MembershipUsers.IsAnonymous], 
            T.LastActivityDate AS [vw_aspnet_MembershipUsers.LastActivityDate], 
            True AS _from0
        FROM NKDC.MembershipUsersViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.MembershipUsersViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView727()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MembershipUsersViews
        [NKD.Module.BusinessObjects.MembershipUsersView](T1.MembershipUsersView_UserId, T1.MembershipUsersView_PasswordFormat, T1.MembershipUsersView_MobilePIN, T1.MembershipUsersView_Email, T1.MembershipUsersView_LoweredEmail, T1.MembershipUsersView_PasswordQuestion, T1.MembershipUsersView_PasswordAnswer, T1.MembershipUsersView_IsApproved, T1.MembershipUsersView_IsLockedOut, T1.MembershipUsersView_CreateDate, T1.MembershipUsersView_LastLoginDate, T1.MembershipUsersView_LastPasswordChangedDate, T1.MembershipUsersView_LastLockoutDate, T1.MembershipUsersView_FailedPasswordAttemptCount, T1.MembershipUsersView_FailedPasswordAttemptWindowStart, T1.MembershipUsersView_FailedPasswordAnswerAttemptCount, T1.MembershipUsersView_FailedPasswordAnswerAttemptWindowStart, T1.MembershipUsersView_Comment, T1.MembershipUsersView_ApplicationId, T1.MembershipUsersView_UserName, T1.MembershipUsersView_MobileAlias, T1.MembershipUsersView_IsAnonymous, T1.MembershipUsersView_LastActivityDate)
    FROM (
        SELECT 
            T.UserId AS MembershipUsersView_UserId, 
            T.PasswordFormat AS MembershipUsersView_PasswordFormat, 
            T.MobilePIN AS MembershipUsersView_MobilePIN, 
            T.Email AS MembershipUsersView_Email, 
            T.LoweredEmail AS MembershipUsersView_LoweredEmail, 
            T.PasswordQuestion AS MembershipUsersView_PasswordQuestion, 
            T.PasswordAnswer AS MembershipUsersView_PasswordAnswer, 
            T.IsApproved AS MembershipUsersView_IsApproved, 
            T.IsLockedOut AS MembershipUsersView_IsLockedOut, 
            T.CreateDate AS MembershipUsersView_CreateDate, 
            T.LastLoginDate AS MembershipUsersView_LastLoginDate, 
            T.LastPasswordChangedDate AS MembershipUsersView_LastPasswordChangedDate, 
            T.LastLockoutDate AS MembershipUsersView_LastLockoutDate, 
            T.FailedPasswordAttemptCount AS MembershipUsersView_FailedPasswordAttemptCount, 
            T.FailedPasswordAttemptWindowStart AS MembershipUsersView_FailedPasswordAttemptWindowStart, 
            T.FailedPasswordAnswerAttemptCount AS MembershipUsersView_FailedPasswordAnswerAttemptCount, 
            T.FailedPasswordAnswerAttemptWindowStart AS MembershipUsersView_FailedPasswordAnswerAttemptWindowStart, 
            T.Comment AS MembershipUsersView_Comment, 
            T.ApplicationId AS MembershipUsersView_ApplicationId, 
            T.UserName AS MembershipUsersView_UserName, 
            T.MobileAlias AS MembershipUsersView_MobileAlias, 
            T.IsAnonymous AS MembershipUsersView_IsAnonymous, 
            T.LastActivityDate AS MembershipUsersView_LastActivityDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_MembershipUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Profiles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView728()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_Profiles
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Profiles](T1.[vw_aspnet_Profiles.UserId], T1.[vw_aspnet_Profiles.LastUpdatedDate], T1.[vw_aspnet_Profiles.DataSize])
    FROM (
        SELECT 
            T.UserId AS [vw_aspnet_Profiles.UserId], 
            T.LastUpdatedDate AS [vw_aspnet_Profiles.LastUpdatedDate], 
            T.DataSize AS [vw_aspnet_Profiles.DataSize], 
            True AS _from0
        FROM NKDC.ProfilesViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProfilesViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView729()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProfilesViews
        [NKD.Module.BusinessObjects.ProfilesView](T1.ProfilesView_UserId, T1.ProfilesView_LastUpdatedDate, T1.ProfilesView_DataSize)
    FROM (
        SELECT 
            T.UserId AS ProfilesView_UserId, 
            T.LastUpdatedDate AS ProfilesView_LastUpdatedDate, 
            T.DataSize AS ProfilesView_DataSize, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Profiles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView730()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_Roles
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Roles](T1.[vw_aspnet_Roles.ApplicationId], T1.[vw_aspnet_Roles.RoleId], T1.[vw_aspnet_Roles.RoleName], T1.[vw_aspnet_Roles.LoweredRoleName], T1.[vw_aspnet_Roles.Description])
    FROM (
        SELECT 
            T.ApplicationId AS [vw_aspnet_Roles.ApplicationId], 
            T.RoleId AS [vw_aspnet_Roles.RoleId], 
            T.RoleName AS [vw_aspnet_Roles.RoleName], 
            T.LoweredRoleName AS [vw_aspnet_Roles.LoweredRoleName], 
            T.Description AS [vw_aspnet_Roles.Description], 
            True AS _from0
        FROM NKDC.RolesViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.RolesViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView731()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RolesViews
        [NKD.Module.BusinessObjects.RolesView](T1.RolesView_ApplicationId, T1.RolesView_RoleId, T1.RolesView_RoleName, T1.RolesView_LoweredRoleName, T1.RolesView_Description)
    FROM (
        SELECT 
            T.ApplicationId AS RolesView_ApplicationId, 
            T.RoleId AS RolesView_RoleId, 
            T.RoleName AS RolesView_RoleName, 
            T.LoweredRoleName AS RolesView_LoweredRoleName, 
            T.Description AS RolesView_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView732()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_Users
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Users](T1.[vw_aspnet_Users.ApplicationId], T1.[vw_aspnet_Users.UserId], T1.[vw_aspnet_Users.UserName], T1.[vw_aspnet_Users.LoweredUserName], T1.[vw_aspnet_Users.MobileAlias], T1.[vw_aspnet_Users.IsAnonymous], T1.[vw_aspnet_Users.LastActivityDate])
    FROM (
        SELECT 
            T.ApplicationId AS [vw_aspnet_Users.ApplicationId], 
            T.UserId AS [vw_aspnet_Users.UserId], 
            T.UserName AS [vw_aspnet_Users.UserName], 
            T.LoweredUserName AS [vw_aspnet_Users.LoweredUserName], 
            T.MobileAlias AS [vw_aspnet_Users.MobileAlias], 
            T.IsAnonymous AS [vw_aspnet_Users.IsAnonymous], 
            T.LastActivityDate AS [vw_aspnet_Users.LastActivityDate], 
            True AS _from0
        FROM NKDC.UsersViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.UsersViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView733()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UsersViews
        [NKD.Module.BusinessObjects.UsersView](T1.UsersView_ApplicationId, T1.UsersView_UserId, T1.UsersView_UserName, T1.UsersView_LoweredUserName, T1.UsersView_MobileAlias, T1.UsersView_IsAnonymous, T1.UsersView_LastActivityDate)
    FROM (
        SELECT 
            T.ApplicationId AS UsersView_ApplicationId, 
            T.UserId AS UsersView_UserId, 
            T.UserName AS UsersView_UserName, 
            T.LoweredUserName AS UsersView_LoweredUserName, 
            T.MobileAlias AS UsersView_MobileAlias, 
            T.IsAnonymous AS UsersView_IsAnonymous, 
            T.LastActivityDate AS UsersView_LastActivityDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_UsersInRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView734()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_UsersInRoles
        [NKD.Module.BusinessObjects.Store.vw_aspnet_UsersInRoles](T1.[vw_aspnet_UsersInRoles.UserId], T1.[vw_aspnet_UsersInRoles.RoleId])
    FROM (
        SELECT 
            T.UserId AS [vw_aspnet_UsersInRoles.UserId], 
            T.RoleId AS [vw_aspnet_UsersInRoles.RoleId], 
            True AS _from0
        FROM NKDC.UsersInRolesViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.UsersInRolesViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView735()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UsersInRolesViews
        [NKD.Module.BusinessObjects.UsersInRolesView](T1.UsersInRolesView_UserId, T1.UsersInRolesView_RoleId)
    FROM (
        SELECT 
            T.UserId AS UsersInRolesView_UserId, 
            T.RoleId AS UsersInRolesView_RoleId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_UsersInRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Paths.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView736()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_WebPartState_Paths
        [NKD.Module.BusinessObjects.Store.vw_aspnet_WebPartState_Paths](T1.[vw_aspnet_WebPartState_Paths.ApplicationId], T1.[vw_aspnet_WebPartState_Paths.PathId], T1.[vw_aspnet_WebPartState_Paths.Path], T1.[vw_aspnet_WebPartState_Paths.LoweredPath])
    FROM (
        SELECT 
            T.ApplicationId AS [vw_aspnet_WebPartState_Paths.ApplicationId], 
            T.PathId AS [vw_aspnet_WebPartState_Paths.PathId], 
            T.Path AS [vw_aspnet_WebPartState_Paths.Path], 
            T.LoweredPath AS [vw_aspnet_WebPartState_Paths.LoweredPath], 
            True AS _from0
        FROM NKDC.WebPartState_PathsView AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WebPartState_PathsView.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView737()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebPartState_PathsView
        [NKD.Module.BusinessObjects.WebPartState_PathsView](T1.[WebPartState_PathsView.ApplicationId], T1.[WebPartState_PathsView.PathId], T1.[WebPartState_PathsView.Path], T1.[WebPartState_PathsView.LoweredPath])
    FROM (
        SELECT 
            T.ApplicationId AS [WebPartState_PathsView.ApplicationId], 
            T.PathId AS [WebPartState_PathsView.PathId], 
            T.Path AS [WebPartState_PathsView.Path], 
            T.LoweredPath AS [WebPartState_PathsView.LoweredPath], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Paths AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Shared.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView738()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_WebPartState_Shared
        [NKD.Module.BusinessObjects.Store.vw_aspnet_WebPartState_Shared](T1.[vw_aspnet_WebPartState_Shared.PathId], T1.[vw_aspnet_WebPartState_Shared.DataSize], T1.[vw_aspnet_WebPartState_Shared.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [vw_aspnet_WebPartState_Shared.PathId], 
            T.DataSize AS [vw_aspnet_WebPartState_Shared.DataSize], 
            T.LastUpdatedDate AS [vw_aspnet_WebPartState_Shared.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.WebPartState_SharedView AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WebPartState_SharedView.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView739()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebPartState_SharedView
        [NKD.Module.BusinessObjects.WebPartState_SharedView](T1.[WebPartState_SharedView.PathId], T1.[WebPartState_SharedView.DataSize], T1.[WebPartState_SharedView.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [WebPartState_SharedView.PathId], 
            T.DataSize AS [WebPartState_SharedView.DataSize], 
            T.LastUpdatedDate AS [WebPartState_SharedView.LastUpdatedDate], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Shared AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView740()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vw_aspnet_WebPartState_User
        [NKD.Module.BusinessObjects.Store.vw_aspnet_WebPartState_User](T1.[vw_aspnet_WebPartState_User.PathId], T1.[vw_aspnet_WebPartState_User.UserId], T1.[vw_aspnet_WebPartState_User.DataSize], T1.[vw_aspnet_WebPartState_User.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [vw_aspnet_WebPartState_User.PathId], 
            T.UserId AS [vw_aspnet_WebPartState_User.UserId], 
            T.DataSize AS [vw_aspnet_WebPartState_User.DataSize], 
            T.LastUpdatedDate AS [vw_aspnet_WebPartState_User.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.WebPartState_UserView AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WebPartState_UserView.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView741()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebPartState_UserView
        [NKD.Module.BusinessObjects.WebPartState_UserView](T1.[WebPartState_UserView.PathId], T1.[WebPartState_UserView.UserId], T1.[WebPartState_UserView.DataSize], T1.[WebPartState_UserView.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [WebPartState_UserView.PathId], 
            T.UserId AS [WebPartState_UserView.UserId], 
            T.DataSize AS [WebPartState_UserView.DataSize], 
            T.LastUpdatedDate AS [WebPartState_UserView.LastUpdatedDate], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_Company.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView742()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_Company
        [NKD.Module.BusinessObjects.Store.X_VW_Company](T1.[X_VW_Company.CompanyID], T1.[X_VW_Company.CompanyName], T1.[X_VW_Company.ParentCompanyID])
    FROM (
        SELECT 
            T.CompanyID AS [X_VW_Company.CompanyID], 
            T.CompanyName AS [X_VW_Company.CompanyName], 
            T.ParentCompanyID AS [X_VW_Company.ParentCompanyID], 
            True AS _from0
        FROM NKDC.CompanyViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CompanyViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView743()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CompanyViews
        [NKD.Module.BusinessObjects.CompanyView](T1.CompanyView_CompanyID, T1.CompanyView_CompanyName, T1.CompanyView_ParentCompanyID)
    FROM (
        SELECT 
            T.CompanyID AS CompanyView_CompanyID, 
            T.CompanyName AS CompanyView_CompanyName, 
            T.ParentCompanyID AS CompanyView_ParentCompanyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_Company AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryHeader.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView744()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_DictionaryHeader
        [NKD.Module.BusinessObjects.Store.X_VW_DictionaryHeader](T1.[X_VW_DictionaryHeader.HeaderID], T1.[X_VW_DictionaryHeader.HoleName])
    FROM (
        SELECT 
            T.HeaderID AS [X_VW_DictionaryHeader.HeaderID], 
            T.HoleName AS [X_VW_DictionaryHeader.HoleName], 
            True AS _from0
        FROM NKDC.DictionaryHeaderViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryHeaderViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView745()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryHeaderViews
        [NKD.Module.BusinessObjects.DictionaryHeaderView](T1.DictionaryHeaderView_HeaderID, T1.DictionaryHeaderView_HoleName)
    FROM (
        SELECT 
            T.HeaderID AS DictionaryHeaderView_HeaderID, 
            T.HoleName AS DictionaryHeaderView_HoleName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryHeader AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_ExperienceBasicView.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView746()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_ExperienceBasicView
        [NKD.Module.BusinessObjects.Store.X_VW_ExperienceBasicView](T1.[X_VW_ExperienceBasicView.ContactName], T1.[X_VW_ExperienceBasicView.Title], T1.[X_VW_ExperienceBasicView.Surname], T1.[X_VW_ExperienceBasicView.Firstname], T1.[X_VW_ExperienceBasicView.ExperienceName], T1.[X_VW_ExperienceBasicView.LocationID], T1.[X_VW_ExperienceBasicView.LatitudeWGS84], T1.[X_VW_ExperienceBasicView.LongitudeWGS84], T1.[X_VW_ExperienceBasicView.DefaultLocationName], T1.[X_VW_ExperienceBasicView.DateStart], T1.[X_VW_ExperienceBasicView.DateFinished], T1.[X_VW_ExperienceBasicView.Comment], T1.[X_VW_ExperienceBasicView.LocationGeography], T1.[X_VW_ExperienceBasicView.StandardCountryName], T1.[X_VW_ExperienceBasicView.ProjectName], T1.[X_VW_ExperienceBasicView.ProvinceID], T1.[X_VW_ExperienceBasicView.WorkTypeID], T1.[X_VW_ExperienceBasicView.PositionID], T1.[X_VW_ExperienceBasicView.ProfessionID], T1.[X_VW_ExperienceBasicView.ContactID], T1.[X_VW_ExperienceBasicView.ProjectID], T1.[X_VW_ExperienceBasicView.ExperienceID], T1.[X_VW_ExperienceBasicView.ExperienceGroupID], T1.[X_VW_ExperienceBasicView.CompanyID], T1.[X_VW_ExperienceBasicView.WorkTypeName], T1.[X_VW_ExperienceBasicView.WorkTypeDescription], T1.[X_VW_ExperienceBasicView.FullDescription], T1.[X_VW_ExperienceBasicView.WorkTypeClassName], T1.[X_VW_ExperienceBasicView.WorkTypeClassDescription], T1.[X_VW_ExperienceBasicView.WorkTypeClassFullDescription])
    FROM (
        SELECT 
            T.ContactName AS [X_VW_ExperienceBasicView.ContactName], 
            T.Title AS [X_VW_ExperienceBasicView.Title], 
            T.Surname AS [X_VW_ExperienceBasicView.Surname], 
            T.Firstname AS [X_VW_ExperienceBasicView.Firstname], 
            T.ExperienceName AS [X_VW_ExperienceBasicView.ExperienceName], 
            T.LocationID AS [X_VW_ExperienceBasicView.LocationID], 
            T.LatitudeWGS84 AS [X_VW_ExperienceBasicView.LatitudeWGS84], 
            T.LongitudeWGS84 AS [X_VW_ExperienceBasicView.LongitudeWGS84], 
            T.DefaultLocationName AS [X_VW_ExperienceBasicView.DefaultLocationName], 
            T.DateStart AS [X_VW_ExperienceBasicView.DateStart], 
            T.DateFinished AS [X_VW_ExperienceBasicView.DateFinished], 
            T.Comment AS [X_VW_ExperienceBasicView.Comment], 
            T.LocationGeography AS [X_VW_ExperienceBasicView.LocationGeography], 
            T.StandardCountryName AS [X_VW_ExperienceBasicView.StandardCountryName], 
            T.ProjectName AS [X_VW_ExperienceBasicView.ProjectName], 
            T.ProvinceID AS [X_VW_ExperienceBasicView.ProvinceID], 
            T.WorkTypeID AS [X_VW_ExperienceBasicView.WorkTypeID], 
            T.PositionID AS [X_VW_ExperienceBasicView.PositionID], 
            T.ProfessionID AS [X_VW_ExperienceBasicView.ProfessionID], 
            T.ContactID AS [X_VW_ExperienceBasicView.ContactID], 
            T.ProjectID AS [X_VW_ExperienceBasicView.ProjectID], 
            T.ExperienceID AS [X_VW_ExperienceBasicView.ExperienceID], 
            T.ExperienceGroupID AS [X_VW_ExperienceBasicView.ExperienceGroupID], 
            T.CompanyID AS [X_VW_ExperienceBasicView.CompanyID], 
            T.WorkTypeName AS [X_VW_ExperienceBasicView.WorkTypeName], 
            T.WorkTypeDescription AS [X_VW_ExperienceBasicView.WorkTypeDescription], 
            T.FullDescription AS [X_VW_ExperienceBasicView.FullDescription], 
            T.WorkTypeClassName AS [X_VW_ExperienceBasicView.WorkTypeClassName], 
            T.WorkTypeClassDescription AS [X_VW_ExperienceBasicView.WorkTypeClassDescription], 
            T.WorkTypeClassFullDescription AS [X_VW_ExperienceBasicView.WorkTypeClassFullDescription], 
            True AS _from0
        FROM NKDC.ExperienceBasicViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ExperienceBasicViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView747()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ExperienceBasicViews
        [NKD.Module.BusinessObjects.ExperienceBasicView](T1.ExperienceBasicView_ContactName, T1.ExperienceBasicView_Title, T1.ExperienceBasicView_Surname, T1.ExperienceBasicView_Firstname, T1.ExperienceBasicView_ExperienceName, T1.ExperienceBasicView_LocationID, T1.ExperienceBasicView_LatitudeWGS84, T1.ExperienceBasicView_LongitudeWGS84, T1.ExperienceBasicView_DefaultLocationName, T1.ExperienceBasicView_DateStart, T1.ExperienceBasicView_DateFinished, T1.ExperienceBasicView_Comment, T1.ExperienceBasicView_LocationGeography, T1.ExperienceBasicView_StandardCountryName, T1.ExperienceBasicView_ProjectName, T1.ExperienceBasicView_ProvinceID, T1.ExperienceBasicView_WorkTypeID, T1.ExperienceBasicView_PositionID, T1.ExperienceBasicView_ProfessionID, T1.ExperienceBasicView_ContactID, T1.ExperienceBasicView_ProjectID, T1.ExperienceBasicView_ExperienceID, T1.ExperienceBasicView_ExperienceGroupID, T1.ExperienceBasicView_CompanyID, T1.ExperienceBasicView_WorkTypeName, T1.ExperienceBasicView_WorkTypeDescription, T1.ExperienceBasicView_FullDescription, T1.ExperienceBasicView_WorkTypeClassName, T1.ExperienceBasicView_WorkTypeClassDescription, T1.ExperienceBasicView_WorkTypeClassFullDescription)
    FROM (
        SELECT 
            T.ContactName AS ExperienceBasicView_ContactName, 
            T.Title AS ExperienceBasicView_Title, 
            T.Surname AS ExperienceBasicView_Surname, 
            T.Firstname AS ExperienceBasicView_Firstname, 
            T.ExperienceName AS ExperienceBasicView_ExperienceName, 
            T.LocationID AS ExperienceBasicView_LocationID, 
            T.LatitudeWGS84 AS ExperienceBasicView_LatitudeWGS84, 
            T.LongitudeWGS84 AS ExperienceBasicView_LongitudeWGS84, 
            T.DefaultLocationName AS ExperienceBasicView_DefaultLocationName, 
            T.DateStart AS ExperienceBasicView_DateStart, 
            T.DateFinished AS ExperienceBasicView_DateFinished, 
            T.Comment AS ExperienceBasicView_Comment, 
            T.LocationGeography AS ExperienceBasicView_LocationGeography, 
            T.StandardCountryName AS ExperienceBasicView_StandardCountryName, 
            T.ProjectName AS ExperienceBasicView_ProjectName, 
            T.ProvinceID AS ExperienceBasicView_ProvinceID, 
            T.WorkTypeID AS ExperienceBasicView_WorkTypeID, 
            T.PositionID AS ExperienceBasicView_PositionID, 
            T.ProfessionID AS ExperienceBasicView_ProfessionID, 
            T.ContactID AS ExperienceBasicView_ContactID, 
            T.ProjectID AS ExperienceBasicView_ProjectID, 
            T.ExperienceID AS ExperienceBasicView_ExperienceID, 
            T.ExperienceGroupID AS ExperienceBasicView_ExperienceGroupID, 
            T.CompanyID AS ExperienceBasicView_CompanyID, 
            T.WorkTypeName AS ExperienceBasicView_WorkTypeName, 
            T.WorkTypeDescription AS ExperienceBasicView_WorkTypeDescription, 
            T.FullDescription AS ExperienceBasicView_FullDescription, 
            T.WorkTypeClassName AS ExperienceBasicView_WorkTypeClassName, 
            T.WorkTypeClassDescription AS ExperienceBasicView_WorkTypeClassDescription, 
            T.WorkTypeClassFullDescription AS ExperienceBasicView_WorkTypeClassFullDescription, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ExperienceBasicView AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_License.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView748()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_License
        [NKD.Module.BusinessObjects.Store.X_VW_License](T1.[X_VW_License.LicenseID], T1.[X_VW_License.CompanyID], T1.[X_VW_License.ContactID], T1.[X_VW_License.LicenseeGUID], T1.[X_VW_License.LicenseeName], T1.[X_VW_License.LicenseeUsername], T1.[X_VW_License.LicenseeUniqueMachineCode1], T1.[X_VW_License.LicenseeUniqueMachineCode2], T1.[X_VW_License.LicenseeGroupID], T1.[X_VW_License.LicensorIP], T1.[X_VW_License.LicensorName], T1.[X_VW_License.LicenseTypeID], T1.[X_VW_License.LicenseType], T1.[X_VW_License.LicenseURL], T1.[X_VW_License.RootServerName], T1.[X_VW_License.RootServerID], T1.[X_VW_License.ServerName], T1.[X_VW_License.ServerID], T1.[X_VW_License.ApplicationID], T1.[X_VW_License.ServiceAuthenticationMethod], T1.[X_VW_License.ServiceAuthorisationMethod], T1.[X_VW_License.ValidFrom], T1.[X_VW_License.Expiry], T1.[X_VW_License.SupportExpiry], T1.[X_VW_License.ValidForDuration], T1.[X_VW_License.ValidForUnitID], T1.[X_VW_License.ValidForUnitTarget], T1.[X_VW_License.VersionMajor], T1.[X_VW_License.VersionMinor], T1.[X_VW_License.VersionBuild], T1.[X_VW_License.SupportedToMajor], T1.[X_VW_License.SupportedToMinor], T1.[X_VW_License.SupportedToBuild], T1.[X_VW_License.Nuked], T1.[X_VW_License.NukedReason], T1.[X_VW_License.TimeServerID], T1.[X_VW_License.TimeServerName], T1.[X_VW_License.TimeServerResolutionMask], T1.[X_VW_License.TimeServerIP], T1.[X_VW_License.PreAuthorizationCode], T1.[X_VW_License.PreAuthorizationExecuted], T1.[X_VW_License.Signatory1], T1.[X_VW_License.Signatory2], T1.[X_VW_License.Signatory3], T1.[X_VW_License.Signature1], T1.[X_VW_License.Signature2], T1.[X_VW_License.Signature3], T1.[X_VW_License.Received], T1.[X_VW_License.CheckedIn], T1.[X_VW_License.LicenceeCertificate], T1.[X_VW_License.LicensorCertificate], T1.[X_VW_License.Assets], T1.[X_VW_License.Parts], T1.[X_VW_License.ChecksumType], T1.[X_VW_License.Checksum])
    FROM (
        SELECT 
            T.LicenseID AS [X_VW_License.LicenseID], 
            T.CompanyID AS [X_VW_License.CompanyID], 
            T.ContactID AS [X_VW_License.ContactID], 
            T.LicenseeGUID AS [X_VW_License.LicenseeGUID], 
            T.LicenseeName AS [X_VW_License.LicenseeName], 
            T.LicenseeUsername AS [X_VW_License.LicenseeUsername], 
            T.LicenseeUniqueMachineCode1 AS [X_VW_License.LicenseeUniqueMachineCode1], 
            T.LicenseeUniqueMachineCode2 AS [X_VW_License.LicenseeUniqueMachineCode2], 
            T.LicenseeGroupID AS [X_VW_License.LicenseeGroupID], 
            T.LicensorIP AS [X_VW_License.LicensorIP], 
            T.LicensorName AS [X_VW_License.LicensorName], 
            T.LicenseTypeID AS [X_VW_License.LicenseTypeID], 
            T.LicenseType AS [X_VW_License.LicenseType], 
            T.LicenseURL AS [X_VW_License.LicenseURL], 
            T.RootServerName AS [X_VW_License.RootServerName], 
            T.RootServerID AS [X_VW_License.RootServerID], 
            T.ServerName AS [X_VW_License.ServerName], 
            T.ServerID AS [X_VW_License.ServerID], 
            T.ApplicationID AS [X_VW_License.ApplicationID], 
            T.ServiceAuthenticationMethod AS [X_VW_License.ServiceAuthenticationMethod], 
            T.ServiceAuthorisationMethod AS [X_VW_License.ServiceAuthorisationMethod], 
            T.ValidFrom AS [X_VW_License.ValidFrom], 
            T.Expiry AS [X_VW_License.Expiry], 
            T.SupportExpiry AS [X_VW_License.SupportExpiry], 
            T.ValidForDuration AS [X_VW_License.ValidForDuration], 
            T.ValidForUnitID AS [X_VW_License.ValidForUnitID], 
            T.ValidForUnitTarget AS [X_VW_License.ValidForUnitTarget], 
            T.VersionMajor AS [X_VW_License.VersionMajor], 
            T.VersionMinor AS [X_VW_License.VersionMinor], 
            T.VersionBuild AS [X_VW_License.VersionBuild], 
            T.SupportedToMajor AS [X_VW_License.SupportedToMajor], 
            T.SupportedToMinor AS [X_VW_License.SupportedToMinor], 
            T.SupportedToBuild AS [X_VW_License.SupportedToBuild], 
            T.Nuked AS [X_VW_License.Nuked], 
            T.NukedReason AS [X_VW_License.NukedReason], 
            T.TimeServerID AS [X_VW_License.TimeServerID], 
            T.TimeServerName AS [X_VW_License.TimeServerName], 
            T.TimeServerResolutionMask AS [X_VW_License.TimeServerResolutionMask], 
            T.TimeServerIP AS [X_VW_License.TimeServerIP], 
            T.PreAuthorizationCode AS [X_VW_License.PreAuthorizationCode], 
            T.PreAuthorizationExecuted AS [X_VW_License.PreAuthorizationExecuted], 
            T.Signatory1 AS [X_VW_License.Signatory1], 
            T.Signatory2 AS [X_VW_License.Signatory2], 
            T.Signatory3 AS [X_VW_License.Signatory3], 
            T.Signature1 AS [X_VW_License.Signature1], 
            T.Signature2 AS [X_VW_License.Signature2], 
            T.Signature3 AS [X_VW_License.Signature3], 
            T.Received AS [X_VW_License.Received], 
            T.CheckedIn AS [X_VW_License.CheckedIn], 
            T.LicenceeCertificate AS [X_VW_License.LicenceeCertificate], 
            T.LicensorCertificate AS [X_VW_License.LicensorCertificate], 
            T.Assets AS [X_VW_License.Assets], 
            T.Parts AS [X_VW_License.Parts], 
            T.ChecksumType AS [X_VW_License.ChecksumType], 
            T.Checksum AS [X_VW_License.Checksum], 
            True AS _from0
        FROM NKDC.LicenseViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.LicenseViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView749()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LicenseViews
        [NKD.Module.BusinessObjects.LicenseView](T1.LicenseView_LicenseID, T1.LicenseView_CompanyID, T1.LicenseView_ContactID, T1.LicenseView_LicenseeGUID, T1.LicenseView_LicenseeName, T1.LicenseView_LicenseeUsername, T1.LicenseView_LicenseeUniqueMachineCode1, T1.LicenseView_LicenseeUniqueMachineCode2, T1.LicenseView_LicenseeGroupID, T1.LicenseView_LicensorIP, T1.LicenseView_LicensorName, T1.LicenseView_LicenseTypeID, T1.LicenseView_LicenseType, T1.LicenseView_LicenseURL, T1.LicenseView_RootServerName, T1.LicenseView_RootServerID, T1.LicenseView_ServerName, T1.LicenseView_ServerID, T1.LicenseView_ApplicationID, T1.LicenseView_ServiceAuthenticationMethod, T1.LicenseView_ServiceAuthorisationMethod, T1.LicenseView_ValidFrom, T1.LicenseView_Expiry, T1.LicenseView_SupportExpiry, T1.LicenseView_ValidForDuration, T1.LicenseView_ValidForUnitID, T1.LicenseView_ValidForUnitTarget, T1.LicenseView_VersionMajor, T1.LicenseView_VersionMinor, T1.LicenseView_VersionBuild, T1.LicenseView_SupportedToMajor, T1.LicenseView_SupportedToMinor, T1.LicenseView_SupportedToBuild, T1.LicenseView_Nuked, T1.LicenseView_NukedReason, T1.LicenseView_TimeServerID, T1.LicenseView_TimeServerName, T1.LicenseView_TimeServerResolutionMask, T1.LicenseView_TimeServerIP, T1.LicenseView_PreAuthorizationCode, T1.LicenseView_PreAuthorizationExecuted, T1.LicenseView_Signatory1, T1.LicenseView_Signatory2, T1.LicenseView_Signatory3, T1.LicenseView_Signature1, T1.LicenseView_Signature2, T1.LicenseView_Signature3, T1.LicenseView_Received, T1.LicenseView_CheckedIn, T1.LicenseView_LicenceeCertificate, T1.LicenseView_LicensorCertificate, T1.LicenseView_Assets, T1.LicenseView_Parts, T1.LicenseView_ChecksumType, T1.LicenseView_Checksum)
    FROM (
        SELECT 
            T.LicenseID AS LicenseView_LicenseID, 
            T.CompanyID AS LicenseView_CompanyID, 
            T.ContactID AS LicenseView_ContactID, 
            T.LicenseeGUID AS LicenseView_LicenseeGUID, 
            T.LicenseeName AS LicenseView_LicenseeName, 
            T.LicenseeUsername AS LicenseView_LicenseeUsername, 
            T.LicenseeUniqueMachineCode1 AS LicenseView_LicenseeUniqueMachineCode1, 
            T.LicenseeUniqueMachineCode2 AS LicenseView_LicenseeUniqueMachineCode2, 
            T.LicenseeGroupID AS LicenseView_LicenseeGroupID, 
            T.LicensorIP AS LicenseView_LicensorIP, 
            T.LicensorName AS LicenseView_LicensorName, 
            T.LicenseTypeID AS LicenseView_LicenseTypeID, 
            T.LicenseType AS LicenseView_LicenseType, 
            T.LicenseURL AS LicenseView_LicenseURL, 
            T.RootServerName AS LicenseView_RootServerName, 
            T.RootServerID AS LicenseView_RootServerID, 
            T.ServerName AS LicenseView_ServerName, 
            T.ServerID AS LicenseView_ServerID, 
            T.ApplicationID AS LicenseView_ApplicationID, 
            T.ServiceAuthenticationMethod AS LicenseView_ServiceAuthenticationMethod, 
            T.ServiceAuthorisationMethod AS LicenseView_ServiceAuthorisationMethod, 
            T.ValidFrom AS LicenseView_ValidFrom, 
            T.Expiry AS LicenseView_Expiry, 
            T.SupportExpiry AS LicenseView_SupportExpiry, 
            T.ValidForDuration AS LicenseView_ValidForDuration, 
            T.ValidForUnitID AS LicenseView_ValidForUnitID, 
            T.ValidForUnitTarget AS LicenseView_ValidForUnitTarget, 
            T.VersionMajor AS LicenseView_VersionMajor, 
            T.VersionMinor AS LicenseView_VersionMinor, 
            T.VersionBuild AS LicenseView_VersionBuild, 
            T.SupportedToMajor AS LicenseView_SupportedToMajor, 
            T.SupportedToMinor AS LicenseView_SupportedToMinor, 
            T.SupportedToBuild AS LicenseView_SupportedToBuild, 
            T.Nuked AS LicenseView_Nuked, 
            T.NukedReason AS LicenseView_NukedReason, 
            T.TimeServerID AS LicenseView_TimeServerID, 
            T.TimeServerName AS LicenseView_TimeServerName, 
            T.TimeServerResolutionMask AS LicenseView_TimeServerResolutionMask, 
            T.TimeServerIP AS LicenseView_TimeServerIP, 
            T.PreAuthorizationCode AS LicenseView_PreAuthorizationCode, 
            T.PreAuthorizationExecuted AS LicenseView_PreAuthorizationExecuted, 
            T.Signatory1 AS LicenseView_Signatory1, 
            T.Signatory2 AS LicenseView_Signatory2, 
            T.Signatory3 AS LicenseView_Signatory3, 
            T.Signature1 AS LicenseView_Signature1, 
            T.Signature2 AS LicenseView_Signature2, 
            T.Signature3 AS LicenseView_Signature3, 
            T.Received AS LicenseView_Received, 
            T.CheckedIn AS LicenseView_CheckedIn, 
            T.LicenceeCertificate AS LicenseView_LicenceeCertificate, 
            T.LicensorCertificate AS LicenseView_LicensorCertificate, 
            T.Assets AS LicenseView_Assets, 
            T.Parts AS LicenseView_Parts, 
            T.ChecksumType AS LicenseView_ChecksumType, 
            T.Checksum AS LicenseView_Checksum, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_License AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_ModelsCurrent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView750()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_ModelsCurrent
        [NKD.Module.BusinessObjects.Store.X_VW_ModelsCurrent](T1.[X_VW_ModelsCurrent.ProjectID], T1.[X_VW_ModelsCurrent.ProjectName], T1.[X_VW_ModelsCurrent.BlockModelID], T1.[X_VW_ModelsCurrent.Alias], T1.[X_VW_ModelsCurrent.ModelStage], T1.[X_VW_ModelsCurrent.HasSubcells], T1.[X_VW_ModelsCurrent.Filename], T1.[X_VW_ModelsCurrent.Comment], T1.[X_VW_ModelsCurrent.Uploaded], T1.[X_VW_ModelsCurrent.Author], T1.[X_VW_ModelsCurrent.AuthorName], T1.[X_VW_ModelsCurrent.Approver], T1.[X_VW_ModelsCurrent.ApproverName], T1.[X_VW_ModelsCurrent.ExternalReviewer], T1.[X_VW_ModelsCurrent.ExternalReviewerName])
    FROM (
        SELECT 
            T.ProjectID AS [X_VW_ModelsCurrent.ProjectID], 
            T.ProjectName AS [X_VW_ModelsCurrent.ProjectName], 
            T.BlockModelID AS [X_VW_ModelsCurrent.BlockModelID], 
            T.Alias AS [X_VW_ModelsCurrent.Alias], 
            T.ModelStage AS [X_VW_ModelsCurrent.ModelStage], 
            T.HasSubcells AS [X_VW_ModelsCurrent.HasSubcells], 
            T.Filename AS [X_VW_ModelsCurrent.Filename], 
            T.Comment AS [X_VW_ModelsCurrent.Comment], 
            T.Uploaded AS [X_VW_ModelsCurrent.Uploaded], 
            T.Author AS [X_VW_ModelsCurrent.Author], 
            T.AuthorName AS [X_VW_ModelsCurrent.AuthorName], 
            T.Approver AS [X_VW_ModelsCurrent.Approver], 
            T.ApproverName AS [X_VW_ModelsCurrent.ApproverName], 
            T.ExternalReviewer AS [X_VW_ModelsCurrent.ExternalReviewer], 
            T.ExternalReviewerName AS [X_VW_ModelsCurrent.ExternalReviewerName], 
            True AS _from0
        FROM NKDC.ModelsCurrentViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelsCurrentViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView751()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelsCurrentViews
        [NKD.Module.BusinessObjects.ModelsCurrentView](T1.ModelsCurrentView_ProjectID, T1.ModelsCurrentView_ProjectName, T1.ModelsCurrentView_BlockModelID, T1.ModelsCurrentView_Alias, T1.ModelsCurrentView_ModelStage, T1.ModelsCurrentView_HasSubcells, T1.ModelsCurrentView_Filename, T1.ModelsCurrentView_Comment, T1.ModelsCurrentView_Uploaded, T1.ModelsCurrentView_Author, T1.ModelsCurrentView_AuthorName, T1.ModelsCurrentView_Approver, T1.ModelsCurrentView_ApproverName, T1.ModelsCurrentView_ExternalReviewer, T1.ModelsCurrentView_ExternalReviewerName)
    FROM (
        SELECT 
            T.ProjectID AS ModelsCurrentView_ProjectID, 
            T.ProjectName AS ModelsCurrentView_ProjectName, 
            T.BlockModelID AS ModelsCurrentView_BlockModelID, 
            T.Alias AS ModelsCurrentView_Alias, 
            T.ModelStage AS ModelsCurrentView_ModelStage, 
            T.HasSubcells AS ModelsCurrentView_HasSubcells, 
            T.Filename AS ModelsCurrentView_Filename, 
            T.Comment AS ModelsCurrentView_Comment, 
            T.Uploaded AS ModelsCurrentView_Uploaded, 
            T.Author AS ModelsCurrentView_Author, 
            T.AuthorName AS ModelsCurrentView_AuthorName, 
            T.Approver AS ModelsCurrentView_Approver, 
            T.ApproverName AS ModelsCurrentView_ApproverName, 
            T.ExternalReviewer AS ModelsCurrentView_ExternalReviewer, 
            T.ExternalReviewerName AS ModelsCurrentView_ExternalReviewerName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ModelsCurrent AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_ModelStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView752()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_ModelStatus
        [NKD.Module.BusinessObjects.Store.X_VW_ModelStatus](T1.[X_VW_ModelStatus.ProjectID], T1.[X_VW_ModelStatus.ProjectName], T1.[X_VW_ModelStatus.BlockModelID], T1.[X_VW_ModelStatus.Alias], T1.[X_VW_ModelStatus.ModelStage], T1.[X_VW_ModelStatus.HasSubcells], T1.[X_VW_ModelStatus.Filename], T1.[X_VW_ModelStatus.Comment], T1.[X_VW_ModelStatus.Uploaded], T1.[X_VW_ModelStatus.Author], T1.[X_VW_ModelStatus.AuthorName], T1.[X_VW_ModelStatus.Approver], T1.[X_VW_ModelStatus.ApproverName], T1.[X_VW_ModelStatus.ExternalReviewer], T1.[X_VW_ModelStatus.ExternalReviewerName])
    FROM (
        SELECT 
            T.ProjectID AS [X_VW_ModelStatus.ProjectID], 
            T.ProjectName AS [X_VW_ModelStatus.ProjectName], 
            T.BlockModelID AS [X_VW_ModelStatus.BlockModelID], 
            T.Alias AS [X_VW_ModelStatus.Alias], 
            T.ModelStage AS [X_VW_ModelStatus.ModelStage], 
            T.HasSubcells AS [X_VW_ModelStatus.HasSubcells], 
            T.Filename AS [X_VW_ModelStatus.Filename], 
            T.Comment AS [X_VW_ModelStatus.Comment], 
            T.Uploaded AS [X_VW_ModelStatus.Uploaded], 
            T.Author AS [X_VW_ModelStatus.Author], 
            T.AuthorName AS [X_VW_ModelStatus.AuthorName], 
            T.Approver AS [X_VW_ModelStatus.Approver], 
            T.ApproverName AS [X_VW_ModelStatus.ApproverName], 
            T.ExternalReviewer AS [X_VW_ModelStatus.ExternalReviewer], 
            T.ExternalReviewerName AS [X_VW_ModelStatus.ExternalReviewerName], 
            True AS _from0
        FROM NKDC.ModelStatusViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelStatusViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView753()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelStatusViews
        [NKD.Module.BusinessObjects.ModelStatusView](T1.ModelStatusView_ProjectID, T1.ModelStatusView_ProjectName, T1.ModelStatusView_BlockModelID, T1.ModelStatusView_Alias, T1.ModelStatusView_ModelStage, T1.ModelStatusView_HasSubcells, T1.ModelStatusView_Filename, T1.ModelStatusView_Comment, T1.ModelStatusView_Uploaded, T1.ModelStatusView_Author, T1.ModelStatusView_AuthorName, T1.ModelStatusView_Approver, T1.ModelStatusView_ApproverName, T1.ModelStatusView_ExternalReviewer, T1.ModelStatusView_ExternalReviewerName)
    FROM (
        SELECT 
            T.ProjectID AS ModelStatusView_ProjectID, 
            T.ProjectName AS ModelStatusView_ProjectName, 
            T.BlockModelID AS ModelStatusView_BlockModelID, 
            T.Alias AS ModelStatusView_Alias, 
            T.ModelStage AS ModelStatusView_ModelStage, 
            T.HasSubcells AS ModelStatusView_HasSubcells, 
            T.Filename AS ModelStatusView_Filename, 
            T.Comment AS ModelStatusView_Comment, 
            T.Uploaded AS ModelStatusView_Uploaded, 
            T.Author AS ModelStatusView_Author, 
            T.AuthorName AS ModelStatusView_AuthorName, 
            T.Approver AS ModelStatusView_Approver, 
            T.ApproverName AS ModelStatusView_ApproverName, 
            T.ExternalReviewer AS ModelStatusView_ExternalReviewer, 
            T.ExternalReviewerName AS ModelStatusView_ExternalReviewerName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ModelStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectModelsAwaitingAuthorisation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView754()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_ProjectModelsAwaitingAuthorisation
        [NKD.Module.BusinessObjects.Store.X_VW_ProjectModelsAwaitingAuthorisation](T1.[X_VW_ProjectModelsAwaitingAuthorisation.ProjectID], T1.[X_VW_ProjectModelsAwaitingAuthorisation.ProjectName], T1.[X_VW_ProjectModelsAwaitingAuthorisation.BlockModelID], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Alias], T1.[X_VW_ProjectModelsAwaitingAuthorisation.ProjectTaskName], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Creator], T1.[X_VW_ProjectModelsAwaitingAuthorisation.CreatorName], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Reviewer], T1.[X_VW_ProjectModelsAwaitingAuthorisation.ReviewerName], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Comment], T1.[X_VW_ProjectModelsAwaitingAuthorisation.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectID AS [X_VW_ProjectModelsAwaitingAuthorisation.ProjectID], 
            T.ProjectName AS [X_VW_ProjectModelsAwaitingAuthorisation.ProjectName], 
            T.BlockModelID AS [X_VW_ProjectModelsAwaitingAuthorisation.BlockModelID], 
            T.Alias AS [X_VW_ProjectModelsAwaitingAuthorisation.Alias], 
            T.ProjectTaskName AS [X_VW_ProjectModelsAwaitingAuthorisation.ProjectTaskName], 
            T.Creator AS [X_VW_ProjectModelsAwaitingAuthorisation.Creator], 
            T.CreatorName AS [X_VW_ProjectModelsAwaitingAuthorisation.CreatorName], 
            T.Reviewer AS [X_VW_ProjectModelsAwaitingAuthorisation.Reviewer], 
            T.ReviewerName AS [X_VW_ProjectModelsAwaitingAuthorisation.ReviewerName], 
            T.Comment AS [X_VW_ProjectModelsAwaitingAuthorisation.Comment], 
            T.VersionUpdated AS [X_VW_ProjectModelsAwaitingAuthorisation.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectModelsAwaitingAuthorisationViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectModelsAwaitingAuthorisationViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView755()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectModelsAwaitingAuthorisationViews
        [NKD.Module.BusinessObjects.ProjectModelsAwaitingAuthorisationView](T1.ProjectModelsAwaitingAuthorisationView_ProjectID, T1.ProjectModelsAwaitingAuthorisationView_ProjectName, T1.ProjectModelsAwaitingAuthorisationView_BlockModelID, T1.ProjectModelsAwaitingAuthorisationView_Alias, T1.ProjectModelsAwaitingAuthorisationView_ProjectTaskName, T1.ProjectModelsAwaitingAuthorisationView_Creator, T1.ProjectModelsAwaitingAuthorisationView_CreatorName, T1.ProjectModelsAwaitingAuthorisationView_Reviewer, T1.ProjectModelsAwaitingAuthorisationView_ReviewerName, T1.ProjectModelsAwaitingAuthorisationView_Comment, T1.ProjectModelsAwaitingAuthorisationView_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectID AS ProjectModelsAwaitingAuthorisationView_ProjectID, 
            T.ProjectName AS ProjectModelsAwaitingAuthorisationView_ProjectName, 
            T.BlockModelID AS ProjectModelsAwaitingAuthorisationView_BlockModelID, 
            T.Alias AS ProjectModelsAwaitingAuthorisationView_Alias, 
            T.ProjectTaskName AS ProjectModelsAwaitingAuthorisationView_ProjectTaskName, 
            T.Creator AS ProjectModelsAwaitingAuthorisationView_Creator, 
            T.CreatorName AS ProjectModelsAwaitingAuthorisationView_CreatorName, 
            T.Reviewer AS ProjectModelsAwaitingAuthorisationView_Reviewer, 
            T.ReviewerName AS ProjectModelsAwaitingAuthorisationView_ReviewerName, 
            T.Comment AS ProjectModelsAwaitingAuthorisationView_Comment, 
            T.VersionUpdated AS ProjectModelsAwaitingAuthorisationView_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectModelsAwaitingAuthorisation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView756()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_ProjectStatus
        [NKD.Module.BusinessObjects.Store.X_VW_ProjectStatus](T1.[X_VW_ProjectStatus.ProjectID], T1.[X_VW_ProjectStatus.ProjectName], T1.[X_VW_ProjectStatus.ProjectTaskName], T1.[X_VW_ProjectStatus.Creator], T1.[X_VW_ProjectStatus.CreatorName], T1.[X_VW_ProjectStatus.Reviewer], T1.[X_VW_ProjectStatus.ReviewerName], T1.[X_VW_ProjectStatus.Comment], T1.[X_VW_ProjectStatus.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectID AS [X_VW_ProjectStatus.ProjectID], 
            T.ProjectName AS [X_VW_ProjectStatus.ProjectName], 
            T.ProjectTaskName AS [X_VW_ProjectStatus.ProjectTaskName], 
            T.Creator AS [X_VW_ProjectStatus.Creator], 
            T.CreatorName AS [X_VW_ProjectStatus.CreatorName], 
            T.Reviewer AS [X_VW_ProjectStatus.Reviewer], 
            T.ReviewerName AS [X_VW_ProjectStatus.ReviewerName], 
            T.Comment AS [X_VW_ProjectStatus.Comment], 
            T.VersionUpdated AS [X_VW_ProjectStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectStatusViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ProjectStatusViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView757()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectStatusViews
        [NKD.Module.BusinessObjects.ProjectStatusView](T1.ProjectStatusView_ProjectID, T1.ProjectStatusView_ProjectName, T1.ProjectStatusView_ProjectTaskName, T1.ProjectStatusView_Creator, T1.ProjectStatusView_CreatorName, T1.ProjectStatusView_Reviewer, T1.ProjectStatusView_ReviewerName, T1.ProjectStatusView_Comment, T1.ProjectStatusView_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectID AS ProjectStatusView_ProjectID, 
            T.ProjectName AS ProjectStatusView_ProjectName, 
            T.ProjectTaskName AS ProjectStatusView_ProjectTaskName, 
            T.Creator AS ProjectStatusView_Creator, 
            T.CreatorName AS ProjectStatusView_CreatorName, 
            T.Reviewer AS ProjectStatusView_Reviewer, 
            T.ReviewerName AS ProjectStatusView_ReviewerName, 
            T.Comment AS ProjectStatusView_Comment, 
            T.VersionUpdated AS ProjectStatusView_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectStatus AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_SurveyViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView758()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_SurveyViews
        [NKD.Module.BusinessObjects.Store.X_VW_SurveyViews](T1.[X_VW_SurveyViews.HoleName], T1.[X_VW_SurveyViews.ProjectName], T1.[X_VW_SurveyViews.ProjectCode], T1.[X_VW_SurveyViews.Depth], T1.[X_VW_SurveyViews.Dip], T1.[X_VW_SurveyViews.MagnetAffected], T1.[X_VW_SurveyViews.MagneticDip], T1.[X_VW_SurveyViews.OriginalAzimuth], T1.[X_VW_SurveyViews.CorrectedAzimuth], T1.[X_VW_SurveyViews.Gravity], T1.[X_VW_SurveyViews.Surveyed])
    FROM (
        SELECT 
            T.HoleName AS [X_VW_SurveyViews.HoleName], 
            T.ProjectName AS [X_VW_SurveyViews.ProjectName], 
            T.ProjectCode AS [X_VW_SurveyViews.ProjectCode], 
            T.Depth AS [X_VW_SurveyViews.Depth], 
            T.Dip AS [X_VW_SurveyViews.Dip], 
            T.MagnetAffected AS [X_VW_SurveyViews.MagnetAffected], 
            T.MagneticDip AS [X_VW_SurveyViews.MagneticDip], 
            T.OriginalAzimuth AS [X_VW_SurveyViews.OriginalAzimuth], 
            T.CorrectedAzimuth AS [X_VW_SurveyViews.CorrectedAzimuth], 
            T.Gravity AS [X_VW_SurveyViews.Gravity], 
            T.Surveyed AS [X_VW_SurveyViews.Surveyed], 
            True AS _from0
        FROM NKDC.SurveyViewsViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SurveyViewsViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView759()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SurveyViewsViews
        [NKD.Module.BusinessObjects.SurveyViewsView](T1.SurveyViewsView_HoleName, T1.SurveyViewsView_ProjectName, T1.SurveyViewsView_ProjectCode, T1.SurveyViewsView_Depth, T1.SurveyViewsView_Dip, T1.SurveyViewsView_MagnetAffected, T1.SurveyViewsView_MagneticDip, T1.SurveyViewsView_OriginalAzimuth, T1.SurveyViewsView_CorrectedAzimuth, T1.SurveyViewsView_Gravity, T1.SurveyViewsView_Surveyed)
    FROM (
        SELECT 
            T.HoleName AS SurveyViewsView_HoleName, 
            T.ProjectName AS SurveyViewsView_ProjectName, 
            T.ProjectCode AS SurveyViewsView_ProjectCode, 
            T.Depth AS SurveyViewsView_Depth, 
            T.Dip AS SurveyViewsView_Dip, 
            T.MagnetAffected AS SurveyViewsView_MagnetAffected, 
            T.MagneticDip AS SurveyViewsView_MagneticDip, 
            T.OriginalAzimuth AS SurveyViewsView_OriginalAzimuth, 
            T.CorrectedAzimuth AS SurveyViewsView_CorrectedAzimuth, 
            T.Gravity AS SurveyViewsView_Gravity, 
            T.Surveyed AS SurveyViewsView_Surveyed, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_SurveyViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_WorkType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView760()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_WorkType
        [NKD.Module.BusinessObjects.Store.X_VW_WorkType](T1.[X_VW_WorkType.WorkTypeID], T1.[X_VW_WorkType.WorkTypeName], T1.[X_VW_WorkType.ParentWorkTypeID], T1.[X_VW_WorkType.WorkTypeClassID])
    FROM (
        SELECT 
            T.WorkTypeID AS [X_VW_WorkType.WorkTypeID], 
            T.WorkTypeName AS [X_VW_WorkType.WorkTypeName], 
            T.ParentWorkTypeID AS [X_VW_WorkType.ParentWorkTypeID], 
            T.WorkTypeClassID AS [X_VW_WorkType.WorkTypeClassID], 
            True AS _from0
        FROM NKDC.WorkTypeViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.WorkTypeViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView761()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WorkTypeViews
        [NKD.Module.BusinessObjects.WorkTypeView](T1.WorkTypeView_WorkTypeID, T1.WorkTypeView_WorkTypeName, T1.WorkTypeView_ParentWorkTypeID, T1.WorkTypeView_WorkTypeClassID)
    FROM (
        SELECT 
            T.WorkTypeID AS WorkTypeView_WorkTypeID, 
            T.WorkTypeName AS WorkTypeView_WorkTypeName, 
            T.ParentWorkTypeID AS WorkTypeView_ParentWorkTypeID, 
            T.WorkTypeClassID AS WorkTypeView_WorkTypeClassID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_WorkType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.InstancePromotedProperties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView762()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstancePromotedProperties
        [NKD.Module.BusinessObjects.Store.InstancePromotedProperties](T1.InstancePromotedProperties_InstanceId, T1.InstancePromotedProperties_EncodingOption, T1.InstancePromotedProperties_PromotionName, T1.InstancePromotedProperties_Value33, T1.InstancePromotedProperties_Value34, T1.InstancePromotedProperties_Value35, T1.InstancePromotedProperties_Value36, T1.InstancePromotedProperties_Value37, T1.InstancePromotedProperties_Value38, T1.InstancePromotedProperties_Value39, T1.InstancePromotedProperties_Value40, T1.InstancePromotedProperties_Value41, T1.InstancePromotedProperties_Value42, T1.InstancePromotedProperties_Value43, T1.InstancePromotedProperties_Value44, T1.InstancePromotedProperties_Value45, T1.InstancePromotedProperties_Value46, T1.InstancePromotedProperties_Value47, T1.InstancePromotedProperties_Value48, T1.InstancePromotedProperties_Value49, T1.InstancePromotedProperties_Value50, T1.InstancePromotedProperties_Value51, T1.InstancePromotedProperties_Value52, T1.InstancePromotedProperties_Value53, T1.InstancePromotedProperties_Value54, T1.InstancePromotedProperties_Value55, T1.InstancePromotedProperties_Value56, T1.InstancePromotedProperties_Value57, T1.InstancePromotedProperties_Value58, T1.InstancePromotedProperties_Value59, T1.InstancePromotedProperties_Value60, T1.InstancePromotedProperties_Value61, T1.InstancePromotedProperties_Value62, T1.InstancePromotedProperties_Value63, T1.InstancePromotedProperties_Value64)
    FROM (
        SELECT 
            T.InstanceId AS InstancePromotedProperties_InstanceId, 
            T.EncodingOption AS InstancePromotedProperties_EncodingOption, 
            T.PromotionName AS InstancePromotedProperties_PromotionName, 
            T.Value33 AS InstancePromotedProperties_Value33, 
            T.Value34 AS InstancePromotedProperties_Value34, 
            T.Value35 AS InstancePromotedProperties_Value35, 
            T.Value36 AS InstancePromotedProperties_Value36, 
            T.Value37 AS InstancePromotedProperties_Value37, 
            T.Value38 AS InstancePromotedProperties_Value38, 
            T.Value39 AS InstancePromotedProperties_Value39, 
            T.Value40 AS InstancePromotedProperties_Value40, 
            T.Value41 AS InstancePromotedProperties_Value41, 
            T.Value42 AS InstancePromotedProperties_Value42, 
            T.Value43 AS InstancePromotedProperties_Value43, 
            T.Value44 AS InstancePromotedProperties_Value44, 
            T.Value45 AS InstancePromotedProperties_Value45, 
            T.Value46 AS InstancePromotedProperties_Value46, 
            T.Value47 AS InstancePromotedProperties_Value47, 
            T.Value48 AS InstancePromotedProperties_Value48, 
            T.Value49 AS InstancePromotedProperties_Value49, 
            T.Value50 AS InstancePromotedProperties_Value50, 
            T.Value51 AS InstancePromotedProperties_Value51, 
            T.Value52 AS InstancePromotedProperties_Value52, 
            T.Value53 AS InstancePromotedProperties_Value53, 
            T.Value54 AS InstancePromotedProperties_Value54, 
            T.Value55 AS InstancePromotedProperties_Value55, 
            T.Value56 AS InstancePromotedProperties_Value56, 
            T.Value57 AS InstancePromotedProperties_Value57, 
            T.Value58 AS InstancePromotedProperties_Value58, 
            T.Value59 AS InstancePromotedProperties_Value59, 
            T.Value60 AS InstancePromotedProperties_Value60, 
            T.Value61 AS InstancePromotedProperties_Value61, 
            T.Value62 AS InstancePromotedProperties_Value62, 
            T.Value63 AS InstancePromotedProperties_Value63, 
            T.Value64 AS InstancePromotedProperties_Value64, 
            True AS _from0
        FROM NKDC.InstancePromotedProperties AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.InstancePromotedProperties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView763()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstancePromotedProperties
        [NKD.Module.BusinessObjects.InstancePromotedProperty](T1.InstancePromotedProperty_InstanceId, T1.InstancePromotedProperty_EncodingOption, T1.InstancePromotedProperty_PromotionName, T1.InstancePromotedProperty_Value33, T1.InstancePromotedProperty_Value34, T1.InstancePromotedProperty_Value35, T1.InstancePromotedProperty_Value36, T1.InstancePromotedProperty_Value37, T1.InstancePromotedProperty_Value38, T1.InstancePromotedProperty_Value39, T1.InstancePromotedProperty_Value40, T1.InstancePromotedProperty_Value41, T1.InstancePromotedProperty_Value42, T1.InstancePromotedProperty_Value43, T1.InstancePromotedProperty_Value44, T1.InstancePromotedProperty_Value45, T1.InstancePromotedProperty_Value46, T1.InstancePromotedProperty_Value47, T1.InstancePromotedProperty_Value48, T1.InstancePromotedProperty_Value49, T1.InstancePromotedProperty_Value50, T1.InstancePromotedProperty_Value51, T1.InstancePromotedProperty_Value52, T1.InstancePromotedProperty_Value53, T1.InstancePromotedProperty_Value54, T1.InstancePromotedProperty_Value55, T1.InstancePromotedProperty_Value56, T1.InstancePromotedProperty_Value57, T1.InstancePromotedProperty_Value58, T1.InstancePromotedProperty_Value59, T1.InstancePromotedProperty_Value60, T1.InstancePromotedProperty_Value61, T1.InstancePromotedProperty_Value62, T1.InstancePromotedProperty_Value63, T1.InstancePromotedProperty_Value64)
    FROM (
        SELECT 
            T.InstanceId AS InstancePromotedProperty_InstanceId, 
            T.EncodingOption AS InstancePromotedProperty_EncodingOption, 
            T.PromotionName AS InstancePromotedProperty_PromotionName, 
            T.Value33 AS InstancePromotedProperty_Value33, 
            T.Value34 AS InstancePromotedProperty_Value34, 
            T.Value35 AS InstancePromotedProperty_Value35, 
            T.Value36 AS InstancePromotedProperty_Value36, 
            T.Value37 AS InstancePromotedProperty_Value37, 
            T.Value38 AS InstancePromotedProperty_Value38, 
            T.Value39 AS InstancePromotedProperty_Value39, 
            T.Value40 AS InstancePromotedProperty_Value40, 
            T.Value41 AS InstancePromotedProperty_Value41, 
            T.Value42 AS InstancePromotedProperty_Value42, 
            T.Value43 AS InstancePromotedProperty_Value43, 
            T.Value44 AS InstancePromotedProperty_Value44, 
            T.Value45 AS InstancePromotedProperty_Value45, 
            T.Value46 AS InstancePromotedProperty_Value46, 
            T.Value47 AS InstancePromotedProperty_Value47, 
            T.Value48 AS InstancePromotedProperty_Value48, 
            T.Value49 AS InstancePromotedProperty_Value49, 
            T.Value50 AS InstancePromotedProperty_Value50, 
            T.Value51 AS InstancePromotedProperty_Value51, 
            T.Value52 AS InstancePromotedProperty_Value52, 
            T.Value53 AS InstancePromotedProperty_Value53, 
            T.Value54 AS InstancePromotedProperty_Value54, 
            T.Value55 AS InstancePromotedProperty_Value55, 
            T.Value56 AS InstancePromotedProperty_Value56, 
            T.Value57 AS InstancePromotedProperty_Value57, 
            T.Value58 AS InstancePromotedProperty_Value58, 
            T.Value59 AS InstancePromotedProperty_Value59, 
            T.Value60 AS InstancePromotedProperty_Value60, 
            T.Value61 AS InstancePromotedProperty_Value61, 
            T.Value62 AS InstancePromotedProperty_Value62, 
            T.Value63 AS InstancePromotedProperty_Value63, 
            T.Value64 AS InstancePromotedProperty_Value64, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.InstancePromotedProperties AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.Instances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView764()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instances
        [NKD.Module.BusinessObjects.Store.Instances](T1.Instances_InstanceId, T1.Instances_PendingTimer, T1.Instances_CreationTime, T1.Instances_LastUpdatedTime, T1.Instances_ServiceDeploymentId, T1.Instances_SuspensionExceptionName, T1.Instances_SuspensionReason, T1.Instances_ActiveBookmarks, T1.Instances_CurrentMachine, T1.Instances_LastMachine, T1.Instances_ExecutionStatus, T1.Instances_IsInitialized, T1.Instances_IsSuspended, T1.Instances_IsCompleted, T1.Instances_EncodingOption, T1.Instances_ReadWritePrimitiveDataProperties, T1.Instances_WriteOnlyPrimitiveDataProperties, T1.Instances_ReadWriteComplexDataProperties, T1.Instances_WriteOnlyComplexDataProperties, T1.Instances_IdentityName, T1.Instances_IdentityPackage, T1.Instances_Build, T1.Instances_Major, T1.Instances_Minor, T1.Instances_Revision)
    FROM (
        SELECT 
            T.InstanceId AS Instances_InstanceId, 
            T.PendingTimer AS Instances_PendingTimer, 
            T.CreationTime AS Instances_CreationTime, 
            T.LastUpdatedTime AS Instances_LastUpdatedTime, 
            T.ServiceDeploymentId AS Instances_ServiceDeploymentId, 
            T.SuspensionExceptionName AS Instances_SuspensionExceptionName, 
            T.SuspensionReason AS Instances_SuspensionReason, 
            T.ActiveBookmarks AS Instances_ActiveBookmarks, 
            T.CurrentMachine AS Instances_CurrentMachine, 
            T.LastMachine AS Instances_LastMachine, 
            T.ExecutionStatus AS Instances_ExecutionStatus, 
            T.IsInitialized AS Instances_IsInitialized, 
            T.IsSuspended AS Instances_IsSuspended, 
            T.IsCompleted AS Instances_IsCompleted, 
            T.EncodingOption AS Instances_EncodingOption, 
            T.ReadWritePrimitiveDataProperties AS Instances_ReadWritePrimitiveDataProperties, 
            T.WriteOnlyPrimitiveDataProperties AS Instances_WriteOnlyPrimitiveDataProperties, 
            T.ReadWriteComplexDataProperties AS Instances_ReadWriteComplexDataProperties, 
            T.WriteOnlyComplexDataProperties AS Instances_WriteOnlyComplexDataProperties, 
            T.IdentityName AS Instances_IdentityName, 
            T.IdentityPackage AS Instances_IdentityPackage, 
            T.Build AS Instances_Build, 
            T.Major AS Instances_Major, 
            T.Minor AS Instances_Minor, 
            T.Revision AS Instances_Revision, 
            True AS _from0
        FROM NKDC.Instances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Instances.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView765()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instances
        [NKD.Module.BusinessObjects.Instance](T1.Instance_InstanceId, T1.Instance_PendingTimer, T1.Instance_CreationTime, T1.Instance_LastUpdatedTime, T1.Instance_ServiceDeploymentId, T1.Instance_SuspensionExceptionName, T1.Instance_SuspensionReason, T1.Instance_ActiveBookmarks, T1.Instance_CurrentMachine, T1.Instance_LastMachine, T1.Instance_ExecutionStatus, T1.Instance_IsInitialized, T1.Instance_IsSuspended, T1.Instance_IsCompleted, T1.Instance_EncodingOption, T1.Instance_ReadWritePrimitiveDataProperties, T1.Instance_WriteOnlyPrimitiveDataProperties, T1.Instance_ReadWriteComplexDataProperties, T1.Instance_WriteOnlyComplexDataProperties, T1.Instance_IdentityName, T1.Instance_IdentityPackage, T1.Instance_Build, T1.Instance_Major, T1.Instance_Minor, T1.Instance_Revision)
    FROM (
        SELECT 
            T.InstanceId AS Instance_InstanceId, 
            T.PendingTimer AS Instance_PendingTimer, 
            T.CreationTime AS Instance_CreationTime, 
            T.LastUpdatedTime AS Instance_LastUpdatedTime, 
            T.ServiceDeploymentId AS Instance_ServiceDeploymentId, 
            T.SuspensionExceptionName AS Instance_SuspensionExceptionName, 
            T.SuspensionReason AS Instance_SuspensionReason, 
            T.ActiveBookmarks AS Instance_ActiveBookmarks, 
            T.CurrentMachine AS Instance_CurrentMachine, 
            T.LastMachine AS Instance_LastMachine, 
            T.ExecutionStatus AS Instance_ExecutionStatus, 
            T.IsInitialized AS Instance_IsInitialized, 
            T.IsSuspended AS Instance_IsSuspended, 
            T.IsCompleted AS Instance_IsCompleted, 
            T.EncodingOption AS Instance_EncodingOption, 
            T.ReadWritePrimitiveDataProperties AS Instance_ReadWritePrimitiveDataProperties, 
            T.WriteOnlyPrimitiveDataProperties AS Instance_WriteOnlyPrimitiveDataProperties, 
            T.ReadWriteComplexDataProperties AS Instance_ReadWriteComplexDataProperties, 
            T.WriteOnlyComplexDataProperties AS Instance_WriteOnlyComplexDataProperties, 
            T.IdentityName AS Instance_IdentityName, 
            T.IdentityPackage AS Instance_IdentityPackage, 
            T.Build AS Instance_Build, 
            T.Major AS Instance_Major, 
            T.Minor AS Instance_Minor, 
            T.Revision AS Instance_Revision, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Instances AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.ServiceDeployments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView766()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceDeployments
        [NKD.Module.BusinessObjects.Store.ServiceDeployments](T1.ServiceDeployments_ServiceDeploymentId, T1.ServiceDeployments_SiteName, T1.ServiceDeployments_RelativeServicePath, T1.ServiceDeployments_RelativeApplicationPath, T1.ServiceDeployments_ServiceName, T1.ServiceDeployments_ServiceNamespace)
    FROM (
        SELECT 
            T.ServiceDeploymentId AS ServiceDeployments_ServiceDeploymentId, 
            T.SiteName AS ServiceDeployments_SiteName, 
            T.RelativeServicePath AS ServiceDeployments_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeployments_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeployments_ServiceName, 
            T.ServiceNamespace AS ServiceDeployments_ServiceNamespace, 
            True AS _from0
        FROM NKDC.ServiceDeployments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ServiceDeployments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView767()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceDeployments
        [NKD.Module.BusinessObjects.ServiceDeployment](T1.ServiceDeployment_ServiceDeploymentId, T1.ServiceDeployment_SiteName, T1.ServiceDeployment_RelativeServicePath, T1.ServiceDeployment_RelativeApplicationPath, T1.ServiceDeployment_ServiceName, T1.ServiceDeployment_ServiceNamespace)
    FROM (
        SELECT 
            T.ServiceDeploymentId AS ServiceDeployment_ServiceDeploymentId, 
            T.SiteName AS ServiceDeployment_SiteName, 
            T.RelativeServicePath AS ServiceDeployment_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeployment_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeployment_ServiceName, 
            T.ServiceNamespace AS ServiceDeployment_ServiceNamespace, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ServiceDeployments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.M_VW_DictionaryCompositeCoal.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView768()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing M_VW_DictionaryCompositeCoal
        [NKD.Module.BusinessObjects.Store.M_VW_DictionaryCompositeCoal](T1.[M_VW_DictionaryCompositeCoal.DictionaryName], T1.[M_VW_DictionaryCompositeCoal.Description], T1.[M_VW_DictionaryCompositeCoal.DictionaryCode], T1.[M_VW_DictionaryCompositeCoal.DictionaryID])
    FROM (
        SELECT 
            T.DictionaryName AS [M_VW_DictionaryCompositeCoal.DictionaryName], 
            T.Description AS [M_VW_DictionaryCompositeCoal.Description], 
            T.DictionaryCode AS [M_VW_DictionaryCompositeCoal.DictionaryCode], 
            T.DictionaryID AS [M_VW_DictionaryCompositeCoal.DictionaryID], 
            True AS _from0
        FROM NKDC.DictionaryCompositeCoalViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCompositeCoalViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView769()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCompositeCoalViews
        [NKD.Module.BusinessObjects.DictionaryCompositeCoalView](T1.DictionaryCompositeCoalView_DictionaryName, T1.DictionaryCompositeCoalView_Description, T1.DictionaryCompositeCoalView_DictionaryCode, T1.DictionaryCompositeCoalView_DictionaryID)
    FROM (
        SELECT 
            T.DictionaryName AS DictionaryCompositeCoalView_DictionaryName, 
            T.Description AS DictionaryCompositeCoalView_Description, 
            T.DictionaryCode AS DictionaryCompositeCoalView_DictionaryCode, 
            T.DictionaryID AS DictionaryCompositeCoalView_DictionaryID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.M_VW_DictionaryCompositeCoal AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryCompositeStandard.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView770()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_DictionaryCompositeStandard
        [NKD.Module.BusinessObjects.Store.X_VW_DictionaryCompositeStandard](T1.[X_VW_DictionaryCompositeStandard.DictionaryName], T1.[X_VW_DictionaryCompositeStandard.Description], T1.[X_VW_DictionaryCompositeStandard.DictionaryCode], T1.[X_VW_DictionaryCompositeStandard.DictionaryID])
    FROM (
        SELECT 
            T.DictionaryName AS [X_VW_DictionaryCompositeStandard.DictionaryName], 
            T.Description AS [X_VW_DictionaryCompositeStandard.Description], 
            T.DictionaryCode AS [X_VW_DictionaryCompositeStandard.DictionaryCode], 
            T.DictionaryID AS [X_VW_DictionaryCompositeStandard.DictionaryID], 
            True AS _from0
        FROM NKDC.DictionaryCompositeStandardViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.DictionaryCompositeStandardViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView771()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DictionaryCompositeStandardViews
        [NKD.Module.BusinessObjects.DictionaryCompositeStandardView](T1.DictionaryCompositeStandardView_DictionaryName, T1.DictionaryCompositeStandardView_Description, T1.DictionaryCompositeStandardView_DictionaryCode, T1.DictionaryCompositeStandardView_DictionaryID)
    FROM (
        SELECT 
            T.DictionaryName AS DictionaryCompositeStandardView_DictionaryName, 
            T.Description AS DictionaryCompositeStandardView_Description, 
            T.DictionaryCode AS DictionaryCompositeStandardView_DictionaryCode, 
            T.DictionaryID AS DictionaryCompositeStandardView_DictionaryID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryCompositeStandard AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_ModelPartInfo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView772()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_ModelPartInfo
        [NKD.Module.BusinessObjects.Store.X_VW_ModelPartInfo](T1.[X_VW_ModelPartInfo.ModelID], T1.[X_VW_ModelPartInfo.ModelName], T1.[X_VW_ModelPartInfo.ModelLifetime], T1.[X_VW_ModelPartInfo.ModelLifetimeUnit], T1.[X_VW_ModelPartInfo.ModelDeviceType], T1.[X_VW_ModelPartInfo.ModelCharacteristicType], T1.[X_VW_ModelPartInfo.ModelCharacteristic], T1.[X_VW_ModelPartInfo.ModelCompany], T1.[X_VW_ModelPartInfo.ModelValue], T1.[X_VW_ModelPartInfo.ModelValueUnit], T1.[X_VW_ModelPartInfo.StandardCostTypeName], T1.[X_VW_ModelPartInfo.ProRataUnit], T1.[X_VW_ModelPartInfo.ProRataUnits], T1.[X_VW_ModelPartInfo.ProRataCost], T1.[X_VW_ModelPartInfo.Accrued], T1.[X_VW_ModelPartInfo.CostEstimateModelID], T1.[X_VW_ModelPartInfo.ParentCostEstimateModelID], T1.[X_VW_ModelPartInfo.IsAccruableWithParentCost], T1.[X_VW_ModelPartInfo.AccrualUnit], T1.[X_VW_ModelPartInfo.PartID], T1.[X_VW_ModelPartInfo.PartName], T1.[X_VW_ModelPartInfo.PartLifetime], T1.[X_VW_ModelPartInfo.PartLifetimeUnit], T1.[X_VW_ModelPartInfo.PartDeviceType], T1.[X_VW_ModelPartInfo.PartCharacteristicType], T1.[X_VW_ModelPartInfo.PartCharacteristic], T1.[X_VW_ModelPartInfo.PartCompany], T1.[X_VW_ModelPartInfo.PartValue], T1.[X_VW_ModelPartInfo.PartValueUnit])
    FROM (
        SELECT 
            T.ModelID AS [X_VW_ModelPartInfo.ModelID], 
            T.ModelName AS [X_VW_ModelPartInfo.ModelName], 
            T.ModelLifetime AS [X_VW_ModelPartInfo.ModelLifetime], 
            T.ModelLifetimeUnit AS [X_VW_ModelPartInfo.ModelLifetimeUnit], 
            T.ModelDeviceType AS [X_VW_ModelPartInfo.ModelDeviceType], 
            T.ModelCharacteristicType AS [X_VW_ModelPartInfo.ModelCharacteristicType], 
            T.ModelCharacteristic AS [X_VW_ModelPartInfo.ModelCharacteristic], 
            T.ModelCompany AS [X_VW_ModelPartInfo.ModelCompany], 
            T.ModelValue AS [X_VW_ModelPartInfo.ModelValue], 
            T.ModelValueUnit AS [X_VW_ModelPartInfo.ModelValueUnit], 
            T.StandardCostTypeName AS [X_VW_ModelPartInfo.StandardCostTypeName], 
            T.ProRataUnit AS [X_VW_ModelPartInfo.ProRataUnit], 
            T.ProRataUnits AS [X_VW_ModelPartInfo.ProRataUnits], 
            T.ProRataCost AS [X_VW_ModelPartInfo.ProRataCost], 
            T.Accrued AS [X_VW_ModelPartInfo.Accrued], 
            T.CostEstimateModelID AS [X_VW_ModelPartInfo.CostEstimateModelID], 
            T.ParentCostEstimateModelID AS [X_VW_ModelPartInfo.ParentCostEstimateModelID], 
            T.IsAccruableWithParentCost AS [X_VW_ModelPartInfo.IsAccruableWithParentCost], 
            T.AccrualUnit AS [X_VW_ModelPartInfo.AccrualUnit], 
            T.PartID AS [X_VW_ModelPartInfo.PartID], 
            T.PartName AS [X_VW_ModelPartInfo.PartName], 
            T.PartLifetime AS [X_VW_ModelPartInfo.PartLifetime], 
            T.PartLifetimeUnit AS [X_VW_ModelPartInfo.PartLifetimeUnit], 
            T.PartDeviceType AS [X_VW_ModelPartInfo.PartDeviceType], 
            T.PartCharacteristicType AS [X_VW_ModelPartInfo.PartCharacteristicType], 
            T.PartCharacteristic AS [X_VW_ModelPartInfo.PartCharacteristic], 
            T.PartCompany AS [X_VW_ModelPartInfo.PartCompany], 
            T.PartValue AS [X_VW_ModelPartInfo.PartValue], 
            T.PartValueUnit AS [X_VW_ModelPartInfo.PartValueUnit], 
            True AS _from0
        FROM NKDC.ModelPartInfoViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModelPartInfoViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView773()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelPartInfoViews
        [NKD.Module.BusinessObjects.ModelPartInfoView](T1.ModelPartInfoView_ModelID, T1.ModelPartInfoView_ModelName, T1.ModelPartInfoView_ModelLifetime, T1.ModelPartInfoView_ModelLifetimeUnit, T1.ModelPartInfoView_ModelDeviceType, T1.ModelPartInfoView_ModelCharacteristicType, T1.ModelPartInfoView_ModelCharacteristic, T1.ModelPartInfoView_ModelCompany, T1.ModelPartInfoView_ModelValue, T1.ModelPartInfoView_ModelValueUnit, T1.ModelPartInfoView_StandardCostTypeName, T1.ModelPartInfoView_ProRataUnit, T1.ModelPartInfoView_ProRataUnits, T1.ModelPartInfoView_ProRataCost, T1.ModelPartInfoView_Accrued, T1.ModelPartInfoView_CostEstimateModelID, T1.ModelPartInfoView_ParentCostEstimateModelID, T1.ModelPartInfoView_IsAccruableWithParentCost, T1.ModelPartInfoView_AccrualUnit, T1.ModelPartInfoView_PartID, T1.ModelPartInfoView_PartName, T1.ModelPartInfoView_PartLifetime, T1.ModelPartInfoView_PartLifetimeUnit, T1.ModelPartInfoView_PartDeviceType, T1.ModelPartInfoView_PartCharacteristicType, T1.ModelPartInfoView_PartCharacteristic, T1.ModelPartInfoView_PartCompany, T1.ModelPartInfoView_PartValue, T1.ModelPartInfoView_PartValueUnit)
    FROM (
        SELECT 
            T.ModelID AS ModelPartInfoView_ModelID, 
            T.ModelName AS ModelPartInfoView_ModelName, 
            T.ModelLifetime AS ModelPartInfoView_ModelLifetime, 
            T.ModelLifetimeUnit AS ModelPartInfoView_ModelLifetimeUnit, 
            T.ModelDeviceType AS ModelPartInfoView_ModelDeviceType, 
            T.ModelCharacteristicType AS ModelPartInfoView_ModelCharacteristicType, 
            T.ModelCharacteristic AS ModelPartInfoView_ModelCharacteristic, 
            T.ModelCompany AS ModelPartInfoView_ModelCompany, 
            T.ModelValue AS ModelPartInfoView_ModelValue, 
            T.ModelValueUnit AS ModelPartInfoView_ModelValueUnit, 
            T.StandardCostTypeName AS ModelPartInfoView_StandardCostTypeName, 
            T.ProRataUnit AS ModelPartInfoView_ProRataUnit, 
            T.ProRataUnits AS ModelPartInfoView_ProRataUnits, 
            T.ProRataCost AS ModelPartInfoView_ProRataCost, 
            T.Accrued AS ModelPartInfoView_Accrued, 
            T.CostEstimateModelID AS ModelPartInfoView_CostEstimateModelID, 
            T.ParentCostEstimateModelID AS ModelPartInfoView_ParentCostEstimateModelID, 
            T.IsAccruableWithParentCost AS ModelPartInfoView_IsAccruableWithParentCost, 
            T.AccrualUnit AS ModelPartInfoView_AccrualUnit, 
            T.PartID AS ModelPartInfoView_PartID, 
            T.PartName AS ModelPartInfoView_PartName, 
            T.PartLifetime AS ModelPartInfoView_PartLifetime, 
            T.PartLifetimeUnit AS ModelPartInfoView_PartLifetimeUnit, 
            T.PartDeviceType AS ModelPartInfoView_PartDeviceType, 
            T.PartCharacteristicType AS ModelPartInfoView_PartCharacteristicType, 
            T.PartCharacteristic AS ModelPartInfoView_PartCharacteristic, 
            T.PartCompany AS ModelPartInfoView_PartCompany, 
            T.PartValue AS ModelPartInfoView_PartValue, 
            T.PartValueUnit AS ModelPartInfoView_PartValueUnit, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ModelPartInfo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_StatisticData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView774()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_StatisticData
        [NKD.Module.BusinessObjects.Store.E_StatisticData](T1.[E_StatisticData.StatisticDataID], T1.[E_StatisticData.StatisticDataName], T1.[E_StatisticData.StatisticValue], T1.[E_StatisticData.TableType], T1.[E_StatisticData.ReferenceID], T1.[E_StatisticData.ReferenceExternal], T1.[E_StatisticData.Count], T1.[E_StatisticData.Sigma], T1.[E_StatisticData.Mean], T1.[E_StatisticData.Updated], T1.[E_StatisticData.Multiplier], T1.[E_StatisticData.MultiplierWithPriority], T1.[E_StatisticData.Integral], T1.[E_StatisticData.IntegralWithPriority], T1.[E_StatisticData.Minimum], T1.[E_StatisticData.Maximum], T1.[E_StatisticData.ScaleMinimum], T1.[E_StatisticData.ScaleMaximum], T1.[E_StatisticData.Movement], T1.[E_StatisticData.Velocity], T1.[E_StatisticData.Total], T1.[E_StatisticData.Scale], T1.[E_StatisticData.Version], T1.[E_StatisticData.VersionAntecedentID], T1.[E_StatisticData.VersionCertainty], T1.[E_StatisticData.VersionWorkflowInstanceID], T1.[E_StatisticData.VersionUpdatedBy], T1.[E_StatisticData.VersionDeletedBy], T1.[E_StatisticData.VersionOwnerContactID], T1.[E_StatisticData.VersionOwnerCompanyID], T1.[E_StatisticData.VersionUpdated])
    FROM (
        SELECT 
            T.StatisticDataID AS [E_StatisticData.StatisticDataID], 
            T.StatisticDataName AS [E_StatisticData.StatisticDataName], 
            T.StatisticValue AS [E_StatisticData.StatisticValue], 
            T.TableType AS [E_StatisticData.TableType], 
            T.ReferenceID AS [E_StatisticData.ReferenceID], 
            T.ReferenceExternal AS [E_StatisticData.ReferenceExternal], 
            T.Count AS [E_StatisticData.Count], 
            T.Sigma AS [E_StatisticData.Sigma], 
            T.Mean AS [E_StatisticData.Mean], 
            T.Updated AS [E_StatisticData.Updated], 
            T.Multiplier AS [E_StatisticData.Multiplier], 
            T.MultiplierWithPriority AS [E_StatisticData.MultiplierWithPriority], 
            T.Integral AS [E_StatisticData.Integral], 
            T.IntegralWithPriority AS [E_StatisticData.IntegralWithPriority], 
            T.Minimum AS [E_StatisticData.Minimum], 
            T.Maximum AS [E_StatisticData.Maximum], 
            T.ScaleMinimum AS [E_StatisticData.ScaleMinimum], 
            T.ScaleMaximum AS [E_StatisticData.ScaleMaximum], 
            T.Movement AS [E_StatisticData.Movement], 
            T.Velocity AS [E_StatisticData.Velocity], 
            T.Total AS [E_StatisticData.Total], 
            T.Scale AS [E_StatisticData.Scale], 
            T.Version AS [E_StatisticData.Version], 
            T.VersionAntecedentID AS [E_StatisticData.VersionAntecedentID], 
            T.VersionCertainty AS [E_StatisticData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_StatisticData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_StatisticData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_StatisticData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_StatisticData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_StatisticData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_StatisticData.VersionUpdated], 
            True AS _from0
        FROM NKDC.StatisticDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.StatisticDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView775()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StatisticDatas
        [NKD.Module.BusinessObjects.StatisticData](T1.StatisticData_StatisticDataID, T1.StatisticData_StatisticDataName, T1.StatisticData_StatisticValue, T1.StatisticData_TableType, T1.StatisticData_ReferenceID, T1.StatisticData_Count, T1.StatisticData_Sigma, T1.StatisticData_Mean, T1.StatisticData_Updated, T1.StatisticData_Multiplier, T1.StatisticData_MultiplierWithPriority, T1.StatisticData_Integral, T1.StatisticData_IntegralWithPriority, T1.StatisticData_Minimum, T1.StatisticData_Maximum, T1.StatisticData_ScaleMinimum, T1.StatisticData_ScaleMaximum, T1.StatisticData_Movement, T1.StatisticData_Velocity, T1.StatisticData_Total, T1.StatisticData_Scale, T1.StatisticData_Version, T1.StatisticData_VersionAntecedentID, T1.StatisticData_VersionCertainty, T1.StatisticData_VersionWorkflowInstanceID, T1.StatisticData_VersionUpdatedBy, T1.StatisticData_VersionDeletedBy, T1.StatisticData_VersionOwnerContactID, T1.StatisticData_VersionOwnerCompanyID, T1.StatisticData_VersionUpdated, T1.StatisticData_ReferenceExternal)
    FROM (
        SELECT 
            T.StatisticDataID AS StatisticData_StatisticDataID, 
            T.StatisticDataName AS StatisticData_StatisticDataName, 
            T.StatisticValue AS StatisticData_StatisticValue, 
            T.TableType AS StatisticData_TableType, 
            T.ReferenceID AS StatisticData_ReferenceID, 
            T.Count AS StatisticData_Count, 
            T.Sigma AS StatisticData_Sigma, 
            T.Mean AS StatisticData_Mean, 
            T.Updated AS StatisticData_Updated, 
            T.Multiplier AS StatisticData_Multiplier, 
            T.MultiplierWithPriority AS StatisticData_MultiplierWithPriority, 
            T.Integral AS StatisticData_Integral, 
            T.IntegralWithPriority AS StatisticData_IntegralWithPriority, 
            T.Minimum AS StatisticData_Minimum, 
            T.Maximum AS StatisticData_Maximum, 
            T.ScaleMinimum AS StatisticData_ScaleMinimum, 
            T.ScaleMaximum AS StatisticData_ScaleMaximum, 
            T.Movement AS StatisticData_Movement, 
            T.Velocity AS StatisticData_Velocity, 
            T.Total AS StatisticData_Total, 
            T.Scale AS StatisticData_Scale, 
            T.Version AS StatisticData_Version, 
            T.VersionAntecedentID AS StatisticData_VersionAntecedentID, 
            T.VersionCertainty AS StatisticData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS StatisticData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS StatisticData_VersionUpdatedBy, 
            T.VersionDeletedBy AS StatisticData_VersionDeletedBy, 
            T.VersionOwnerContactID AS StatisticData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS StatisticData_VersionOwnerCompanyID, 
            T.VersionUpdated AS StatisticData_VersionUpdated, 
            T.ReferenceExternal AS StatisticData_ReferenceExternal, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_StatisticData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_XMLData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView776()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_XMLData
        [NKD.Module.BusinessObjects.Store.E_XMLData](T1.[E_XMLData.XMLDataID], T1.[E_XMLData.ParentXMLDataID], T1.[E_XMLData.XMLData], T1.[E_XMLData.TableType], T1.[E_XMLData.ReferenceID], T1.[E_XMLData.SchemaID], T1.[E_XMLData.Comment], T1.[E_XMLData.Version], T1.[E_XMLData.VersionAntecedentID], T1.[E_XMLData.VersionCertainty], T1.[E_XMLData.VersionWorkflowInstanceID], T1.[E_XMLData.VersionUpdatedBy], T1.[E_XMLData.VersionDeletedBy], T1.[E_XMLData.VersionOwnerContactID], T1.[E_XMLData.VersionOwnerCompanyID], T1.[E_XMLData.VersionUpdated])
    FROM (
        SELECT 
            T.XMLDataID AS [E_XMLData.XMLDataID], 
            T.ParentXMLDataID AS [E_XMLData.ParentXMLDataID], 
            T.XMLData AS [E_XMLData.XMLData], 
            T.TableType AS [E_XMLData.TableType], 
            T.ReferenceID AS [E_XMLData.ReferenceID], 
            T.SchemaID AS [E_XMLData.SchemaID], 
            T.Comment AS [E_XMLData.Comment], 
            T.Version AS [E_XMLData.Version], 
            T.VersionAntecedentID AS [E_XMLData.VersionAntecedentID], 
            T.VersionCertainty AS [E_XMLData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_XMLData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_XMLData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_XMLData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_XMLData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_XMLData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_XMLData.VersionUpdated], 
            True AS _from0
        FROM NKDC.XMLs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.XMLs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView777()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XMLs
        [NKD.Module.BusinessObjects.XML](T1.XML_XMLDataID, T1.XML_ParentXMLDataID, T1.XML_XMLData, T1.XML_TableType, T1.XML_ReferenceID, T1.XML_SchemaID, T1.XML_Comment, T1.XML_Version, T1.XML_VersionAntecedentID, T1.XML_VersionCertainty, T1.XML_VersionWorkflowInstanceID, T1.XML_VersionUpdatedBy, T1.XML_VersionDeletedBy, T1.XML_VersionOwnerContactID, T1.XML_VersionOwnerCompanyID, T1.XML_VersionUpdated)
    FROM (
        SELECT 
            T.XMLDataID AS XML_XMLDataID, 
            T.ParentXMLDataID AS XML_ParentXMLDataID, 
            T.XMLData AS XML_XMLData, 
            T.TableType AS XML_TableType, 
            T.ReferenceID AS XML_ReferenceID, 
            T.SchemaID AS XML_SchemaID, 
            T.Comment AS XML_Comment, 
            T.Version AS XML_Version, 
            T.VersionAntecedentID AS XML_VersionAntecedentID, 
            T.VersionCertainty AS XML_VersionCertainty, 
            T.VersionWorkflowInstanceID AS XML_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS XML_VersionUpdatedBy, 
            T.VersionDeletedBy AS XML_VersionDeletedBy, 
            T.VersionOwnerContactID AS XML_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS XML_VersionOwnerCompanyID, 
            T.VersionUpdated AS XML_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_XMLData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_VW_PaymentProviderProductDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView778()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_VW_PaymentProviderProductDetails
        [NKD.Module.BusinessObjects.Store.E_VW_PaymentProviderProductDetails](T1.[E_VW_PaymentProviderProductDetails.ApplicationPaymentProviderID], T1.[E_VW_PaymentProviderProductDetails.ApplicationPaymentProviderProductID], T1.[E_VW_PaymentProviderProductDetails.PaymentProviderProductName], T1.[E_VW_PaymentProviderProductDetails.IsRecurring], T1.[E_VW_PaymentProviderProductDetails.ProductUnitID], T1.[E_VW_PaymentProviderProductDetails.PaymentProviderUnitName], T1.[E_VW_PaymentProviderProductDetails.UnitName], T1.[E_VW_PaymentProviderProductDetails.KitDefault], T1.[E_VW_PaymentProviderProductDetails.KitMaximum], T1.[E_VW_PaymentProviderProductDetails.KitMinimum], T1.[E_VW_PaymentProviderProductDetails.ProductID], T1.[E_VW_PaymentProviderProductDetails.UnitDefault], T1.[E_VW_PaymentProviderProductDetails.UnitMaximum], T1.[E_VW_PaymentProviderProductDetails.UnitMinimum])
    FROM (
        SELECT 
            T.ApplicationPaymentProviderID AS [E_VW_PaymentProviderProductDetails.ApplicationPaymentProviderID], 
            T.ApplicationPaymentProviderProductID AS [E_VW_PaymentProviderProductDetails.ApplicationPaymentProviderProductID], 
            T.PaymentProviderProductName AS [E_VW_PaymentProviderProductDetails.PaymentProviderProductName], 
            T.IsRecurring AS [E_VW_PaymentProviderProductDetails.IsRecurring], 
            T.ProductUnitID AS [E_VW_PaymentProviderProductDetails.ProductUnitID], 
            T.PaymentProviderUnitName AS [E_VW_PaymentProviderProductDetails.PaymentProviderUnitName], 
            T.UnitName AS [E_VW_PaymentProviderProductDetails.UnitName], 
            T.KitDefault AS [E_VW_PaymentProviderProductDetails.KitDefault], 
            T.KitMaximum AS [E_VW_PaymentProviderProductDetails.KitMaximum], 
            T.KitMinimum AS [E_VW_PaymentProviderProductDetails.KitMinimum], 
            T.ProductID AS [E_VW_PaymentProviderProductDetails.ProductID], 
            T.UnitDefault AS [E_VW_PaymentProviderProductDetails.UnitDefault], 
            T.UnitMaximum AS [E_VW_PaymentProviderProductDetails.UnitMaximum], 
            T.UnitMinimum AS [E_VW_PaymentProviderProductDetails.UnitMinimum], 
            True AS _from0
        FROM NKDC.PaymentProviderProductDetailsViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.PaymentProviderProductDetailsViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView779()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PaymentProviderProductDetailsViews
        [NKD.Module.BusinessObjects.PaymentProviderProductDetailsView](T1.PaymentProviderProductDetailsView_ApplicationPaymentProviderID, T1.PaymentProviderProductDetailsView_ApplicationPaymentProviderProductID, T1.PaymentProviderProductDetailsView_PaymentProviderProductName, T1.PaymentProviderProductDetailsView_IsRecurring, T1.PaymentProviderProductDetailsView_ProductUnitID, T1.PaymentProviderProductDetailsView_PaymentProviderUnitName, T1.PaymentProviderProductDetailsView_UnitName, T1.PaymentProviderProductDetailsView_KitDefault, T1.PaymentProviderProductDetailsView_KitMaximum, T1.PaymentProviderProductDetailsView_KitMinimum, T1.PaymentProviderProductDetailsView_ProductID, T1.PaymentProviderProductDetailsView_UnitDefault, T1.PaymentProviderProductDetailsView_UnitMaximum, T1.PaymentProviderProductDetailsView_UnitMinimum)
    FROM (
        SELECT 
            T.ApplicationPaymentProviderID AS PaymentProviderProductDetailsView_ApplicationPaymentProviderID, 
            T.ApplicationPaymentProviderProductID AS PaymentProviderProductDetailsView_ApplicationPaymentProviderProductID, 
            T.PaymentProviderProductName AS PaymentProviderProductDetailsView_PaymentProviderProductName, 
            T.IsRecurring AS PaymentProviderProductDetailsView_IsRecurring, 
            T.ProductUnitID AS PaymentProviderProductDetailsView_ProductUnitID, 
            T.PaymentProviderUnitName AS PaymentProviderProductDetailsView_PaymentProviderUnitName, 
            T.UnitName AS PaymentProviderProductDetailsView_UnitName, 
            T.KitDefault AS PaymentProviderProductDetailsView_KitDefault, 
            T.KitMaximum AS PaymentProviderProductDetailsView_KitMaximum, 
            T.KitMinimum AS PaymentProviderProductDetailsView_KitMinimum, 
            T.ProductID AS PaymentProviderProductDetailsView_ProductID, 
            T.UnitDefault AS PaymentProviderProductDetailsView_UnitDefault, 
            T.UnitMaximum AS PaymentProviderProductDetailsView_UnitMaximum, 
            T.UnitMinimum AS PaymentProviderProductDetailsView_UnitMinimum, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_PaymentProviderProductDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.X_VW_AssayGroupSample.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView780()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing X_VW_AssayGroupSample
        [NKD.Module.BusinessObjects.Store.X_VW_AssayGroupSample](T1.[X_VW_AssayGroupSample.SampleID])
    FROM (
        SELECT 
            T.SampleID AS [X_VW_AssayGroupSample.SampleID], 
            True AS _from0
        FROM NKDC.AssayGroupSampleViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.AssayGroupSampleViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView781()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssayGroupSampleViews
        [NKD.Module.BusinessObjects.AssayGroupSampleView](T1.AssayGroupSampleView_SampleID)
    FROM (
        SELECT 
            T.SampleID AS AssayGroupSampleView_SampleID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_AssayGroupSample AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView782()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_VW_ApplicationUserRoles
        [NKD.Module.BusinessObjects.Store.E_VW_ApplicationUserRoles](T1.[E_VW_ApplicationUserRoles.ApplicationId], T1.[E_VW_ApplicationUserRoles.ContactID], T1.[E_VW_ApplicationUserRoles.ContactUsername], T1.[E_VW_ApplicationUserRoles.DefaultEmail], T1.[E_VW_ApplicationUserRoles.UserId], T1.[E_VW_ApplicationUserRoles.UserName], T1.[E_VW_ApplicationUserRoles.RoleId], T1.[E_VW_ApplicationUserRoles.RoleName])
    FROM (
        SELECT 
            T.ApplicationId AS [E_VW_ApplicationUserRoles.ApplicationId], 
            T.ContactID AS [E_VW_ApplicationUserRoles.ContactID], 
            T.ContactUsername AS [E_VW_ApplicationUserRoles.ContactUsername], 
            T.DefaultEmail AS [E_VW_ApplicationUserRoles.DefaultEmail], 
            T.UserId AS [E_VW_ApplicationUserRoles.UserId], 
            T.UserName AS [E_VW_ApplicationUserRoles.UserName], 
            T.RoleId AS [E_VW_ApplicationUserRoles.RoleId], 
            T.RoleName AS [E_VW_ApplicationUserRoles.RoleName], 
            True AS _from0
        FROM NKDC.ApplicationUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView783()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationUserRoles
        [NKD.Module.BusinessObjects.ApplicationUserRoles](T1.ApplicationUserRoles_ApplicationId, T1.ApplicationUserRoles_ContactID, T1.ApplicationUserRoles_ContactUsername, T1.ApplicationUserRoles_DefaultEmail, T1.ApplicationUserRoles_UserId, T1.ApplicationUserRoles_UserName, T1.ApplicationUserRoles_RoleId, T1.ApplicationUserRoles_RoleName)
    FROM (
        SELECT 
            T.ApplicationId AS ApplicationUserRoles_ApplicationId, 
            T.ContactID AS ApplicationUserRoles_ContactID, 
            T.ContactUsername AS ApplicationUserRoles_ContactUsername, 
            T.DefaultEmail AS ApplicationUserRoles_DefaultEmail, 
            T.UserId AS ApplicationUserRoles_UserId, 
            T.UserName AS ApplicationUserRoles_UserName, 
            T.RoleId AS ApplicationUserRoles_RoleId, 
            T.RoleName AS ApplicationUserRoles_RoleName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_VW_ContactEmails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView784()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_VW_ContactEmails
        [NKD.Module.BusinessObjects.Store.E_VW_ContactEmails](T1.[E_VW_ContactEmails.ContactID], T1.[E_VW_ContactEmails.Email])
    FROM (
        SELECT 
            T.ContactID AS [E_VW_ContactEmails.ContactID], 
            T.Email AS [E_VW_ContactEmails.Email], 
            True AS _from0
        FROM NKDC.ContactEmailsViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ContactEmailsViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView785()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContactEmailsViews
        [NKD.Module.BusinessObjects.ContactEmailsView](T1.ContactEmailsView_ContactID, T1.ContactEmailsView_Email)
    FROM (
        SELECT 
            T.ContactID AS ContactEmailsView_ContactID, 
            T.Email AS ContactEmailsView_Email, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_ContactEmails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.ModuleInfo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView786()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModuleInfo
        [NKD.Module.BusinessObjects.Store.ModuleInfo](T1.ModuleInfo_ID, T1.ModuleInfo_Version, T1.ModuleInfo_Name, T1.ModuleInfo_AssemblyFileName, T1.ModuleInfo_IsMain, T1.ModuleInfo_OptimisticLockField)
    FROM (
        SELECT 
            T.ID AS ModuleInfo_ID, 
            T.Version AS ModuleInfo_Version, 
            T.Name AS ModuleInfo_Name, 
            T.AssemblyFileName AS ModuleInfo_AssemblyFileName, 
            T.IsMain AS ModuleInfo_IsMain, 
            T.OptimisticLockField AS ModuleInfo_OptimisticLockField, 
            True AS _from0
        FROM NKDC.ModuleInfoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ModuleInfoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView787()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModuleInfoes
        [NKD.Module.BusinessObjects.ModuleInfo](T1.ModuleInfo_ID, T1.ModuleInfo_Version, T1.ModuleInfo_Name, T1.ModuleInfo_AssemblyFileName, T1.ModuleInfo_IsMain, T1.ModuleInfo_OptimisticLockField)
    FROM (
        SELECT 
            T.ID AS ModuleInfo_ID, 
            T.Version AS ModuleInfo_Version, 
            T.Name AS ModuleInfo_Name, 
            T.AssemblyFileName AS ModuleInfo_AssemblyFileName, 
            T.IsMain AS ModuleInfo_IsMain, 
            T.OptimisticLockField AS ModuleInfo_OptimisticLockField, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ModuleInfo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.ReportData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView788()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ReportData
        [NKD.Module.BusinessObjects.Store.ReportData](T1.ReportData_OID, T1.ReportData_ObjectTypeName, T1.ReportData_Content, T1.ReportData_Name, T1.ReportData_IsInplaceReport, T1.ReportData_OptimisticLockField, T1.ReportData_GCRecord)
    FROM (
        SELECT 
            T.OID AS ReportData_OID, 
            T.ObjectTypeName AS ReportData_ObjectTypeName, 
            T.Content AS ReportData_Content, 
            T.Name AS ReportData_Name, 
            T.IsInplaceReport AS ReportData_IsInplaceReport, 
            T.OptimisticLockField AS ReportData_OptimisticLockField, 
            T.GCRecord AS ReportData_GCRecord, 
            True AS _from0
        FROM NKDC.ReportDatas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ReportDatas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView789()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ReportDatas
        [NKD.Module.BusinessObjects.ReportData](T1.ReportData_OID, T1.ReportData_ObjectTypeName, T1.ReportData_Content, T1.ReportData_Name, T1.ReportData_IsInplaceReport, T1.ReportData_OptimisticLockField, T1.ReportData_GCRecord)
    FROM (
        SELECT 
            T.OID AS ReportData_OID, 
            T.ObjectTypeName AS ReportData_ObjectTypeName, 
            T.Content AS ReportData_Content, 
            T.Name AS ReportData_Name, 
            T.IsInplaceReport AS ReportData_IsInplaceReport, 
            T.OptimisticLockField AS ReportData_OptimisticLockField, 
            T.GCRecord AS ReportData_GCRecord, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ReportData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.T_Dictionary.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView790()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing T_Dictionary
        [NKD.Module.BusinessObjects.Store.T_Dictionary](T1.[T_Dictionary.CategoryID], T1.[T_Dictionary.CodeID], T1.[T_Dictionary.Description], T1.[T_Dictionary.Version], T1.[T_Dictionary.VersionAntecedentID], T1.[T_Dictionary.VersionCertainty], T1.[T_Dictionary.VersionWorkflowInstanceID], T1.[T_Dictionary.VersionUpdatedBy], T1.[T_Dictionary.VersionDeletedBy], T1.[T_Dictionary.VersionOwnerContactID], T1.[T_Dictionary.VersionOwnerCompanyID], T1.[T_Dictionary.VersionUpdated])
    FROM (
        SELECT 
            T.CategoryID AS [T_Dictionary.CategoryID], 
            T.CodeID AS [T_Dictionary.CodeID], 
            T.Description AS [T_Dictionary.Description], 
            T.Version AS [T_Dictionary.Version], 
            T.VersionAntecedentID AS [T_Dictionary.VersionAntecedentID], 
            T.VersionCertainty AS [T_Dictionary.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [T_Dictionary.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [T_Dictionary.VersionUpdatedBy], 
            T.VersionDeletedBy AS [T_Dictionary.VersionDeletedBy], 
            T.VersionOwnerContactID AS [T_Dictionary.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [T_Dictionary.VersionOwnerCompanyID], 
            T.VersionUpdated AS [T_Dictionary.VersionUpdated], 
            True AS _from0
        FROM NKDC.Dictionaries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.Dictionaries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView791()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Dictionaries
        [NKD.Module.BusinessObjects.Dictionary](T1.Dictionary_CategoryID, T1.Dictionary_CodeID, T1.Dictionary_Description, T1.Dictionary_Version, T1.Dictionary_VersionAntecedentID, T1.Dictionary_VersionCertainty, T1.Dictionary_VersionWorkflowInstanceID, T1.Dictionary_VersionUpdatedBy, T1.Dictionary_VersionDeletedBy, T1.Dictionary_VersionOwnerContactID, T1.Dictionary_VersionOwnerCompanyID, T1.Dictionary_VersionUpdated)
    FROM (
        SELECT 
            T.CategoryID AS Dictionary_CategoryID, 
            T.CodeID AS Dictionary_CodeID, 
            T.Description AS Dictionary_Description, 
            T.Version AS Dictionary_Version, 
            T.VersionAntecedentID AS Dictionary_VersionAntecedentID, 
            T.VersionCertainty AS Dictionary_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Dictionary_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Dictionary_VersionUpdatedBy, 
            T.VersionDeletedBy AS Dictionary_VersionDeletedBy, 
            T.VersionOwnerContactID AS Dictionary_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Dictionary_VersionOwnerCompanyID, 
            T.VersionUpdated AS Dictionary_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.T_Dictionary AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.XPObjectType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView792()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XPObjectType
        [NKD.Module.BusinessObjects.Store.XPObjectType](T1.XPObjectType_OID, T1.XPObjectType_TypeName, T1.XPObjectType_AssemblyName)
    FROM (
        SELECT 
            T.OID AS XPObjectType_OID, 
            T.TypeName AS XPObjectType_TypeName, 
            T.AssemblyName AS XPObjectType_AssemblyName, 
            True AS _from0
        FROM NKDC.XPObjectTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.XPObjectTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView793()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XPObjectTypes
        [NKD.Module.BusinessObjects.XPObjectType](T1.XPObjectType_OID, T1.XPObjectType_TypeName, T1.XPObjectType_AssemblyName)
    FROM (
        SELECT 
            T.OID AS XPObjectType_OID, 
            T.TypeName AS XPObjectType_TypeName, 
            T.AssemblyName AS XPObjectType_AssemblyName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.XPObjectType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationContacts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView794()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_VW_ApplicationContacts
        [NKD.Module.BusinessObjects.Store.E_VW_ApplicationContacts](T1.[E_VW_ApplicationContacts.ApplicationId], T1.[E_VW_ApplicationContacts.ContactID], T1.[E_VW_ApplicationContacts.ContactName])
    FROM (
        SELECT 
            T.ApplicationId AS [E_VW_ApplicationContacts.ApplicationId], 
            T.ContactID AS [E_VW_ApplicationContacts.ContactID], 
            T.ContactName AS [E_VW_ApplicationContacts.ContactName], 
            True AS _from0
        FROM NKDC.ApplicationContactsViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.ApplicationContactsViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView795()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApplicationContactsViews
        [NKD.Module.BusinessObjects.ApplicationContactsView](T1.ApplicationContactsView_ApplicationId, T1.ApplicationContactsView_ContactID, T1.ApplicationContactsView_ContactName)
    FROM (
        SELECT 
            T.ApplicationId AS ApplicationContactsView_ApplicationId, 
            T.ContactID AS ApplicationContactsView_ContactID, 
            T.ContactName AS ApplicationContactsView_ContactName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationContacts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_VW_SupplyItemDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView796()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_VW_SupplyItemDetail
        [NKD.Module.BusinessObjects.Store.E_VW_SupplyItemDetail](T1.[E_VW_SupplyItemDetail.SupplyItemID], T1.[E_VW_SupplyItemDetail.SupplyID], T1.[E_VW_SupplyItemDetail.ModelID], T1.[E_VW_SupplyItemDetail.PartID], T1.[E_VW_SupplyItemDetail.SupplierModelID], T1.[E_VW_SupplyItemDetail.SupplierPartID], T1.[E_VW_SupplyItemDetail.WarehouseID], T1.[E_VW_SupplyItemDetail.ProjectPlanTaskModelID], T1.[E_VW_SupplyItemDetail.ProjectPlanTaskPartID], T1.[E_VW_SupplyItemDetail.ProjectPlanTaskResponseID], T1.[E_VW_SupplyItemDetail.ApplicationPaymentProviderProductID], T1.[E_VW_SupplyItemDetail.ApplicationPaymentProviderProductModelID], T1.[E_VW_SupplyItemDetail.ApplicationPaymentProviderProductPartID], T1.[E_VW_SupplyItemDetail.CustomerAccountID], T1.[E_VW_SupplyItemDetail.ModelUnitID], T1.[E_VW_SupplyItemDetail.LabourUnitID], T1.[E_VW_SupplyItemDetail.PartUnitID], T1.[E_VW_SupplyItemDetail.CostPerUnitModel], T1.[E_VW_SupplyItemDetail.CostPerUnitLabour], T1.[E_VW_SupplyItemDetail.CostPerUnitPart], T1.[E_VW_SupplyItemDetail.QuantityModel], T1.[E_VW_SupplyItemDetail.QuantityLabour], T1.[E_VW_SupplyItemDetail.QuantityPart], T1.[E_VW_SupplyItemDetail.CostModel], T1.[E_VW_SupplyItemDetail.CostLabour], T1.[E_VW_SupplyItemDetail.CostPart], T1.[E_VW_SupplyItemDetail.SubtotalModel], T1.[E_VW_SupplyItemDetail.SubtotalLabour], T1.[E_VW_SupplyItemDetail.SubtotalPart], T1.[E_VW_SupplyItemDetail.DiscountModel], T1.[E_VW_SupplyItemDetail.DiscountLabour], T1.[E_VW_SupplyItemDetail.DiscountPart], T1.[E_VW_SupplyItemDetail.DiscountAmount], T1.[E_VW_SupplyItemDetail.TaxModel], T1.[E_VW_SupplyItemDetail.TaxLabour], T1.[E_VW_SupplyItemDetail.TaxPart], T1.[E_VW_SupplyItemDetail.Tax], T1.[E_VW_SupplyItemDetail.OriginalSubtotal], T1.[E_VW_SupplyItemDetail.CurrencyID], T1.[E_VW_SupplyItemDetail.Subtotal], T1.[E_VW_SupplyItemDetail.Notes], T1.[E_VW_SupplyItemDetail.Version], T1.[E_VW_SupplyItemDetail.VersionAntecedentID], T1.[E_VW_SupplyItemDetail.VersionCertainty], T1.[E_VW_SupplyItemDetail.VersionWorkflowInstanceID], T1.[E_VW_SupplyItemDetail.VersionUpdatedBy], T1.[E_VW_SupplyItemDetail.VersionDeletedBy], T1.[E_VW_SupplyItemDetail.VersionOwnerContactID], T1.[E_VW_SupplyItemDetail.VersionOwnerCompanyID], T1.[E_VW_SupplyItemDetail.VersionUpdated], T1.[E_VW_SupplyItemDetail.StandardModelName], T1.[E_VW_SupplyItemDetail.ModelUnitName], T1.[E_VW_SupplyItemDetail.StandardPartName], T1.[E_VW_SupplyItemDetail.PartUnitName], T1.[E_VW_SupplyItemDetail.LabourUnitName], T1.[E_VW_SupplyItemDetail.PrefixCharacters], T1.[E_VW_SupplyItemDetail.PostfixCharacters], T1.[E_VW_SupplyItemDetail.CustomerPurchaseOrderID])
    FROM (
        SELECT 
            T.SupplyItemID AS [E_VW_SupplyItemDetail.SupplyItemID], 
            T.SupplyID AS [E_VW_SupplyItemDetail.SupplyID], 
            T.ModelID AS [E_VW_SupplyItemDetail.ModelID], 
            T.PartID AS [E_VW_SupplyItemDetail.PartID], 
            T.SupplierModelID AS [E_VW_SupplyItemDetail.SupplierModelID], 
            T.SupplierPartID AS [E_VW_SupplyItemDetail.SupplierPartID], 
            T.WarehouseID AS [E_VW_SupplyItemDetail.WarehouseID], 
            T.ProjectPlanTaskModelID AS [E_VW_SupplyItemDetail.ProjectPlanTaskModelID], 
            T.ProjectPlanTaskPartID AS [E_VW_SupplyItemDetail.ProjectPlanTaskPartID], 
            T.ProjectPlanTaskResponseID AS [E_VW_SupplyItemDetail.ProjectPlanTaskResponseID], 
            T.ApplicationPaymentProviderProductID AS [E_VW_SupplyItemDetail.ApplicationPaymentProviderProductID], 
            T.ApplicationPaymentProviderProductModelID AS [E_VW_SupplyItemDetail.ApplicationPaymentProviderProductModelID], 
            T.ApplicationPaymentProviderProductPartID AS [E_VW_SupplyItemDetail.ApplicationPaymentProviderProductPartID], 
            T.CustomerAccountID AS [E_VW_SupplyItemDetail.CustomerAccountID], 
            T.ModelUnitID AS [E_VW_SupplyItemDetail.ModelUnitID], 
            T.LabourUnitID AS [E_VW_SupplyItemDetail.LabourUnitID], 
            T.PartUnitID AS [E_VW_SupplyItemDetail.PartUnitID], 
            T.CostPerUnitModel AS [E_VW_SupplyItemDetail.CostPerUnitModel], 
            T.CostPerUnitLabour AS [E_VW_SupplyItemDetail.CostPerUnitLabour], 
            T.CostPerUnitPart AS [E_VW_SupplyItemDetail.CostPerUnitPart], 
            T.QuantityModel AS [E_VW_SupplyItemDetail.QuantityModel], 
            T.QuantityLabour AS [E_VW_SupplyItemDetail.QuantityLabour], 
            T.QuantityPart AS [E_VW_SupplyItemDetail.QuantityPart], 
            T.CostModel AS [E_VW_SupplyItemDetail.CostModel], 
            T.CostLabour AS [E_VW_SupplyItemDetail.CostLabour], 
            T.CostPart AS [E_VW_SupplyItemDetail.CostPart], 
            T.SubtotalModel AS [E_VW_SupplyItemDetail.SubtotalModel], 
            T.SubtotalLabour AS [E_VW_SupplyItemDetail.SubtotalLabour], 
            T.SubtotalPart AS [E_VW_SupplyItemDetail.SubtotalPart], 
            T.DiscountModel AS [E_VW_SupplyItemDetail.DiscountModel], 
            T.DiscountLabour AS [E_VW_SupplyItemDetail.DiscountLabour], 
            T.DiscountPart AS [E_VW_SupplyItemDetail.DiscountPart], 
            T.DiscountAmount AS [E_VW_SupplyItemDetail.DiscountAmount], 
            T.TaxModel AS [E_VW_SupplyItemDetail.TaxModel], 
            T.TaxLabour AS [E_VW_SupplyItemDetail.TaxLabour], 
            T.TaxPart AS [E_VW_SupplyItemDetail.TaxPart], 
            T.Tax AS [E_VW_SupplyItemDetail.Tax], 
            T.OriginalSubtotal AS [E_VW_SupplyItemDetail.OriginalSubtotal], 
            T.CurrencyID AS [E_VW_SupplyItemDetail.CurrencyID], 
            T.Subtotal AS [E_VW_SupplyItemDetail.Subtotal], 
            T.Notes AS [E_VW_SupplyItemDetail.Notes], 
            T.Version AS [E_VW_SupplyItemDetail.Version], 
            T.VersionAntecedentID AS [E_VW_SupplyItemDetail.VersionAntecedentID], 
            T.VersionCertainty AS [E_VW_SupplyItemDetail.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_VW_SupplyItemDetail.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_VW_SupplyItemDetail.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_VW_SupplyItemDetail.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_VW_SupplyItemDetail.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_VW_SupplyItemDetail.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_VW_SupplyItemDetail.VersionUpdated], 
            T.StandardModelName AS [E_VW_SupplyItemDetail.StandardModelName], 
            T.ModelUnitName AS [E_VW_SupplyItemDetail.ModelUnitName], 
            T.StandardPartName AS [E_VW_SupplyItemDetail.StandardPartName], 
            T.PartUnitName AS [E_VW_SupplyItemDetail.PartUnitName], 
            T.LabourUnitName AS [E_VW_SupplyItemDetail.LabourUnitName], 
            T.PrefixCharacters AS [E_VW_SupplyItemDetail.PrefixCharacters], 
            T.PostfixCharacters AS [E_VW_SupplyItemDetail.PostfixCharacters], 
            T.CustomerPurchaseOrderID AS [E_VW_SupplyItemDetail.CustomerPurchaseOrderID], 
            True AS _from0
        FROM NKDC.SupplyItemDetailViews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.SupplyItemDetailViews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView797()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SupplyItemDetailViews
        [NKD.Module.BusinessObjects.SupplyItemDetailView](T1.SupplyItemDetailView_SupplyItemID, T1.SupplyItemDetailView_SupplyID, T1.SupplyItemDetailView_ModelID, T1.SupplyItemDetailView_PartID, T1.SupplyItemDetailView_SupplierModelID, T1.SupplyItemDetailView_SupplierPartID, T1.SupplyItemDetailView_WarehouseID, T1.SupplyItemDetailView_ProjectPlanTaskModelID, T1.SupplyItemDetailView_ProjectPlanTaskPartID, T1.SupplyItemDetailView_ProjectPlanTaskResponseID, T1.SupplyItemDetailView_ApplicationPaymentProviderProductID, T1.SupplyItemDetailView_ApplicationPaymentProviderProductModelID, T1.SupplyItemDetailView_ApplicationPaymentProviderProductPartID, T1.SupplyItemDetailView_CustomerAccountID, T1.SupplyItemDetailView_ModelUnitID, T1.SupplyItemDetailView_LabourUnitID, T1.SupplyItemDetailView_PartUnitID, T1.SupplyItemDetailView_CostPerUnitModel, T1.SupplyItemDetailView_CostPerUnitLabour, T1.SupplyItemDetailView_CostPerUnitPart, T1.SupplyItemDetailView_QuantityModel, T1.SupplyItemDetailView_QuantityLabour, T1.SupplyItemDetailView_QuantityPart, T1.SupplyItemDetailView_CostModel, T1.SupplyItemDetailView_CostLabour, T1.SupplyItemDetailView_CostPart, T1.SupplyItemDetailView_SubtotalModel, T1.SupplyItemDetailView_SubtotalLabour, T1.SupplyItemDetailView_SubtotalPart, T1.SupplyItemDetailView_DiscountModel, T1.SupplyItemDetailView_DiscountLabour, T1.SupplyItemDetailView_DiscountPart, T1.SupplyItemDetailView_DiscountAmount, T1.SupplyItemDetailView_TaxModel, T1.SupplyItemDetailView_TaxLabour, T1.SupplyItemDetailView_TaxPart, T1.SupplyItemDetailView_Tax, T1.SupplyItemDetailView_OriginalSubtotal, T1.SupplyItemDetailView_CurrencyID, T1.SupplyItemDetailView_Subtotal, T1.SupplyItemDetailView_Notes, T1.SupplyItemDetailView_Version, T1.SupplyItemDetailView_VersionAntecedentID, T1.SupplyItemDetailView_VersionCertainty, T1.SupplyItemDetailView_VersionWorkflowInstanceID, T1.SupplyItemDetailView_VersionUpdatedBy, T1.SupplyItemDetailView_VersionDeletedBy, T1.SupplyItemDetailView_VersionOwnerContactID, T1.SupplyItemDetailView_VersionOwnerCompanyID, T1.SupplyItemDetailView_VersionUpdated, T1.SupplyItemDetailView_StandardModelName, T1.SupplyItemDetailView_ModelUnitName, T1.SupplyItemDetailView_StandardPartName, T1.SupplyItemDetailView_PartUnitName, T1.SupplyItemDetailView_LabourUnitName, T1.SupplyItemDetailView_PrefixCharacters, T1.SupplyItemDetailView_PostfixCharacters, T1.SupplyItemDetailView_CustomerPurchaseOrderID)
    FROM (
        SELECT 
            T.SupplyItemID AS SupplyItemDetailView_SupplyItemID, 
            T.SupplyID AS SupplyItemDetailView_SupplyID, 
            T.ModelID AS SupplyItemDetailView_ModelID, 
            T.PartID AS SupplyItemDetailView_PartID, 
            T.SupplierModelID AS SupplyItemDetailView_SupplierModelID, 
            T.SupplierPartID AS SupplyItemDetailView_SupplierPartID, 
            T.WarehouseID AS SupplyItemDetailView_WarehouseID, 
            T.ProjectPlanTaskModelID AS SupplyItemDetailView_ProjectPlanTaskModelID, 
            T.ProjectPlanTaskPartID AS SupplyItemDetailView_ProjectPlanTaskPartID, 
            T.ProjectPlanTaskResponseID AS SupplyItemDetailView_ProjectPlanTaskResponseID, 
            T.ApplicationPaymentProviderProductID AS SupplyItemDetailView_ApplicationPaymentProviderProductID, 
            T.ApplicationPaymentProviderProductModelID AS SupplyItemDetailView_ApplicationPaymentProviderProductModelID, 
            T.ApplicationPaymentProviderProductPartID AS SupplyItemDetailView_ApplicationPaymentProviderProductPartID, 
            T.CustomerAccountID AS SupplyItemDetailView_CustomerAccountID, 
            T.ModelUnitID AS SupplyItemDetailView_ModelUnitID, 
            T.LabourUnitID AS SupplyItemDetailView_LabourUnitID, 
            T.PartUnitID AS SupplyItemDetailView_PartUnitID, 
            T.CostPerUnitModel AS SupplyItemDetailView_CostPerUnitModel, 
            T.CostPerUnitLabour AS SupplyItemDetailView_CostPerUnitLabour, 
            T.CostPerUnitPart AS SupplyItemDetailView_CostPerUnitPart, 
            T.QuantityModel AS SupplyItemDetailView_QuantityModel, 
            T.QuantityLabour AS SupplyItemDetailView_QuantityLabour, 
            T.QuantityPart AS SupplyItemDetailView_QuantityPart, 
            T.CostModel AS SupplyItemDetailView_CostModel, 
            T.CostLabour AS SupplyItemDetailView_CostLabour, 
            T.CostPart AS SupplyItemDetailView_CostPart, 
            T.SubtotalModel AS SupplyItemDetailView_SubtotalModel, 
            T.SubtotalLabour AS SupplyItemDetailView_SubtotalLabour, 
            T.SubtotalPart AS SupplyItemDetailView_SubtotalPart, 
            T.DiscountModel AS SupplyItemDetailView_DiscountModel, 
            T.DiscountLabour AS SupplyItemDetailView_DiscountLabour, 
            T.DiscountPart AS SupplyItemDetailView_DiscountPart, 
            T.DiscountAmount AS SupplyItemDetailView_DiscountAmount, 
            T.TaxModel AS SupplyItemDetailView_TaxModel, 
            T.TaxLabour AS SupplyItemDetailView_TaxLabour, 
            T.TaxPart AS SupplyItemDetailView_TaxPart, 
            T.Tax AS SupplyItemDetailView_Tax, 
            T.OriginalSubtotal AS SupplyItemDetailView_OriginalSubtotal, 
            T.CurrencyID AS SupplyItemDetailView_CurrencyID, 
            T.Subtotal AS SupplyItemDetailView_Subtotal, 
            T.Notes AS SupplyItemDetailView_Notes, 
            T.Version AS SupplyItemDetailView_Version, 
            T.VersionAntecedentID AS SupplyItemDetailView_VersionAntecedentID, 
            T.VersionCertainty AS SupplyItemDetailView_VersionCertainty, 
            T.VersionWorkflowInstanceID AS SupplyItemDetailView_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS SupplyItemDetailView_VersionUpdatedBy, 
            T.VersionDeletedBy AS SupplyItemDetailView_VersionDeletedBy, 
            T.VersionOwnerContactID AS SupplyItemDetailView_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS SupplyItemDetailView_VersionOwnerCompanyID, 
            T.VersionUpdated AS SupplyItemDetailView_VersionUpdated, 
            T.StandardModelName AS SupplyItemDetailView_StandardModelName, 
            T.ModelUnitName AS SupplyItemDetailView_ModelUnitName, 
            T.StandardPartName AS SupplyItemDetailView_StandardPartName, 
            T.PartUnitName AS SupplyItemDetailView_PartUnitName, 
            T.LabourUnitName AS SupplyItemDetailView_LabourUnitName, 
            T.PrefixCharacters AS SupplyItemDetailView_PrefixCharacters, 
            T.PostfixCharacters AS SupplyItemDetailView_PostfixCharacters, 
            T.CustomerPurchaseOrderID AS SupplyItemDetailView_CustomerPurchaseOrderID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_SupplyItemDetail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_TranslationData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView798()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_TranslationData
        [NKD.Module.BusinessObjects.Store.E_TranslationData](T1.[E_TranslationData.TranslationDataID], T1.[E_TranslationData.TableType], T1.[E_TranslationData.ReferenceID], T1.[E_TranslationData.ReferenceName], T1.[E_TranslationData.ReferenceUpdated], T1.[E_TranslationData.OriginCulture], T1.[E_TranslationData.TranslationCulture], T1.[E_TranslationData.TranslationName], T1.[E_TranslationData.Translation], T1.[E_TranslationData.Version], T1.[E_TranslationData.VersionAntecedentID], T1.[E_TranslationData.VersionCertainty], T1.[E_TranslationData.VersionWorkflowInstanceID], T1.[E_TranslationData.VersionUpdatedBy], T1.[E_TranslationData.VersionDeletedBy], T1.[E_TranslationData.VersionOwnerContactID], T1.[E_TranslationData.VersionOwnerCompanyID], T1.[E_TranslationData.VersionUpdated])
    FROM (
        SELECT 
            T.TranslationDataID AS [E_TranslationData.TranslationDataID], 
            T.TableType AS [E_TranslationData.TableType], 
            T.ReferenceID AS [E_TranslationData.ReferenceID], 
            T.ReferenceName AS [E_TranslationData.ReferenceName], 
            T.ReferenceUpdated AS [E_TranslationData.ReferenceUpdated], 
            T.OriginCulture AS [E_TranslationData.OriginCulture], 
            T.TranslationCulture AS [E_TranslationData.TranslationCulture], 
            T.TranslationName AS [E_TranslationData.TranslationName], 
            T.Translation AS [E_TranslationData.Translation], 
            T.Version AS [E_TranslationData.Version], 
            T.VersionAntecedentID AS [E_TranslationData.VersionAntecedentID], 
            T.VersionCertainty AS [E_TranslationData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [E_TranslationData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [E_TranslationData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [E_TranslationData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [E_TranslationData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [E_TranslationData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [E_TranslationData.VersionUpdated], 
            True AS _from0
        FROM NKDC.TranslationData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.TranslationData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView799()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TranslationData
        [NKD.Module.BusinessObjects.TranslationData](T1.TranslationData_TranslationDataID, T1.TranslationData_TableType, T1.TranslationData_ReferenceID, T1.TranslationData_ReferenceName, T1.TranslationData_ReferenceUpdated, T1.TranslationData_OriginCulture, T1.TranslationData_TranslationCulture, T1.TranslationData_TranslationName, T1.TranslationData_Translation, T1.TranslationData_Version, T1.TranslationData_VersionAntecedentID, T1.TranslationData_VersionCertainty, T1.TranslationData_VersionWorkflowInstanceID, T1.TranslationData_VersionUpdatedBy, T1.TranslationData_VersionDeletedBy, T1.TranslationData_VersionOwnerContactID, T1.TranslationData_VersionOwnerCompanyID, T1.TranslationData_VersionUpdated)
    FROM (
        SELECT 
            T.TranslationDataID AS TranslationData_TranslationDataID, 
            T.TableType AS TranslationData_TableType, 
            T.ReferenceID AS TranslationData_ReferenceID, 
            T.ReferenceName AS TranslationData_ReferenceName, 
            T.ReferenceUpdated AS TranslationData_ReferenceUpdated, 
            T.OriginCulture AS TranslationData_OriginCulture, 
            T.TranslationCulture AS TranslationData_TranslationCulture, 
            T.TranslationName AS TranslationData_TranslationName, 
            T.Translation AS TranslationData_Translation, 
            T.Version AS TranslationData_Version, 
            T.VersionAntecedentID AS TranslationData_VersionAntecedentID, 
            T.VersionCertainty AS TranslationData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TranslationData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TranslationData_VersionUpdatedBy, 
            T.VersionDeletedBy AS TranslationData_VersionDeletedBy, 
            T.VersionOwnerContactID AS TranslationData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TranslationData_VersionOwnerCompanyID, 
            T.VersionUpdated AS TranslationData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_TranslationData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDModuleBusinessObjectsStoreContainer.E_VW_CustomerSubscriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView800()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing E_VW_CustomerSubscriptions
        [NKD.Module.BusinessObjects.Store.E_VW_CustomerSubscriptions](T1.[E_VW_CustomerSubscriptions.CustomerContactID], T1.[E_VW_CustomerSubscriptions.ModelID], T1.[E_VW_CustomerSubscriptions.ExternalReferenceName], T1.[E_VW_CustomerSubscriptions.PaymentProviderProductName], T1.[E_VW_CustomerSubscriptions.ApplicationPaymentProviderProductID], T1.[E_VW_CustomerSubscriptions.SupplyItemID], T1.[E_VW_CustomerSubscriptions.InvoiceID], T1.[E_VW_CustomerSubscriptions.InvoiceLineID], T1.[E_VW_CustomerSubscriptions.PaymentInvoiceID], T1.[E_VW_CustomerSubscriptions.PaymentID])
    FROM (
        SELECT 
            T.CustomerContactID AS [E_VW_CustomerSubscriptions.CustomerContactID], 
            T.ModelID AS [E_VW_CustomerSubscriptions.ModelID], 
            T.ExternalReferenceName AS [E_VW_CustomerSubscriptions.ExternalReferenceName], 
            T.PaymentProviderProductName AS [E_VW_CustomerSubscriptions.PaymentProviderProductName], 
            T.ApplicationPaymentProviderProductID AS [E_VW_CustomerSubscriptions.ApplicationPaymentProviderProductID], 
            T.SupplyItemID AS [E_VW_CustomerSubscriptions.SupplyItemID], 
            T.InvoiceID AS [E_VW_CustomerSubscriptions.InvoiceID], 
            T.InvoiceLineID AS [E_VW_CustomerSubscriptions.InvoiceLineID], 
            T.PaymentInvoiceID AS [E_VW_CustomerSubscriptions.PaymentInvoiceID], 
            T.PaymentID AS [E_VW_CustomerSubscriptions.PaymentID], 
            True AS _from0
        FROM NKDC.CustomerSubscriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NKDC.CustomerSubscriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView801()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CustomerSubscriptions
        [NKD.Module.BusinessObjects.CustomerSubscriptions](T1.CustomerSubscriptions_CustomerContactID, T1.CustomerSubscriptions_ModelID, T1.CustomerSubscriptions_ExternalReferenceName, T1.CustomerSubscriptions_PaymentProviderProductName, T1.CustomerSubscriptions_ApplicationPaymentProviderProductID, T1.CustomerSubscriptions_SupplyItemID, T1.CustomerSubscriptions_InvoiceID, T1.CustomerSubscriptions_InvoiceLineID, T1.CustomerSubscriptions_PaymentInvoiceID, T1.CustomerSubscriptions_PaymentID)
    FROM (
        SELECT 
            T.CustomerContactID AS CustomerSubscriptions_CustomerContactID, 
            T.ModelID AS CustomerSubscriptions_ModelID, 
            T.ExternalReferenceName AS CustomerSubscriptions_ExternalReferenceName, 
            T.PaymentProviderProductName AS CustomerSubscriptions_PaymentProviderProductName, 
            T.ApplicationPaymentProviderProductID AS CustomerSubscriptions_ApplicationPaymentProviderProductID, 
            T.SupplyItemID AS CustomerSubscriptions_SupplyItemID, 
            T.InvoiceID AS CustomerSubscriptions_InvoiceID, 
            T.InvoiceLineID AS CustomerSubscriptions_InvoiceLineID, 
            T.PaymentInvoiceID AS CustomerSubscriptions_PaymentInvoiceID, 
            T.PaymentID AS CustomerSubscriptions_PaymentID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_CustomerSubscriptions AS T
    ) AS T1");
        }
    }
}
